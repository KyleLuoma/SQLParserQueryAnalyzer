// Generated from c:/Users/kyle.luoma/Research Projects/SQLParserQueryAnalyzer/src/main/antlr/PostgreSQLParser.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class PostgreSQLParser extends PostgreSQLParserBase {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, JSON=30, JSON_ARRAY=31, 
		JSON_ARRAYAGG=32, JSON_EXISTS=33, JSON_OBJECT=34, JSON_OBJECTAGG=35, JSON_QUERY=36, 
		JSON_SCALAR=37, JSON_SERIALIZE=38, JSON_TABLE=39, JSON_VALUE=40, MERGE_ACTION=41, 
		SYSTEM_USER=42, ABSENT=43, ASENSITIVE=44, ATOMIC=45, BREADTH=46, COMPRESSION=47, 
		CONDITIONAL=48, DEPTH=49, EMPTY_P=50, FINALIZE=51, INDENT=52, KEEP=53, 
		KEYS=54, NESTED=55, OMIT=56, PARAMETER=57, PATH=58, PLAN=59, QUOTES=60, 
		SCALAR=61, SOURCE=62, STRING_P=63, TARGET=64, UNCONDITIONAL=65, PERIOD=66, 
		FORMAT_LA=67, ALL=68, ANALYSE=69, ANALYZE=70, AND=71, ANY=72, ARRAY=73, 
		AS=74, ASC=75, ASYMMETRIC=76, BOTH=77, CASE=78, CAST=79, CHECK=80, COLLATE=81, 
		COLUMN=82, CONSTRAINT=83, CREATE=84, CURRENT_CATALOG=85, CURRENT_DATE=86, 
		CURRENT_ROLE=87, CURRENT_TIME=88, CURRENT_TIMESTAMP=89, CURRENT_USER=90, 
		DEFAULT=91, DEFERRABLE=92, DESC=93, DISTINCT=94, DO=95, ELSE=96, EXCEPT=97, 
		FALSE_P=98, FETCH=99, FOR=100, FOREIGN=101, FROM=102, GRANT=103, GROUP_P=104, 
		HAVING=105, IN_P=106, INITIALLY=107, INTERSECT=108, INTO=109, LATERAL_P=110, 
		LEADING=111, LIMIT=112, LOCALTIME=113, LOCALTIMESTAMP=114, NOT=115, NULL_P=116, 
		OFFSET=117, ON=118, ONLY=119, OR=120, ORDER=121, PLACING=122, PRIMARY=123, 
		REFERENCES=124, RETURNING=125, SELECT=126, SESSION_USER=127, SOME=128, 
		SYMMETRIC=129, TABLE=130, THEN=131, TO=132, TRAILING=133, TRUE_P=134, 
		UNION=135, UNIQUE=136, USER=137, USING=138, VARIADIC=139, WHEN=140, WHERE=141, 
		WINDOW=142, WITH=143, AUTHORIZATION=144, BINARY=145, COLLATION=146, CONCURRENTLY=147, 
		CROSS=148, CURRENT_SCHEMA=149, FREEZE=150, FULL=151, ILIKE=152, INNER_P=153, 
		IS=154, ISNULL=155, JOIN=156, LEFT=157, LIKE=158, NATURAL=159, NOTNULL=160, 
		OUTER_P=161, OVER=162, OVERLAPS=163, RIGHT=164, SIMILAR=165, VERBOSE=166, 
		ABORT_P=167, ABSOLUTE_P=168, ACCESS=169, ACTION=170, ADD_P=171, ADMIN=172, 
		AFTER=173, AGGREGATE=174, ALSO=175, ALTER=176, ALWAYS=177, ASSERTION=178, 
		ASSIGNMENT=179, AT=180, ATTRIBUTE=181, BACKWARD=182, BEFORE=183, BEGIN_P=184, 
		BY=185, CACHE=186, CALLED=187, CASCADE=188, CASCADED=189, CATALOG=190, 
		CHAIN=191, CHARACTERISTICS=192, CHECKPOINT=193, CLASS=194, CLOSE=195, 
		CLUSTER=196, COMMENT=197, COMMENTS=198, COMMIT=199, COMMITTED=200, CONFIGURATION=201, 
		CONNECTION=202, CONSTRAINTS=203, CONTENT_P=204, CONTINUE_P=205, CONVERSION_P=206, 
		COPY=207, COST=208, CSV=209, CURSOR=210, CYCLE=211, DATA_P=212, DATABASE=213, 
		DAY_P=214, DEALLOCATE=215, DECLARE=216, DEFAULTS=217, DEFERRED=218, DEFINER=219, 
		DELETE_P=220, DELIMITER=221, DELIMITERS=222, DICTIONARY=223, DISABLE_P=224, 
		DISCARD=225, DOCUMENT_P=226, DOMAIN_P=227, DOUBLE_P=228, DROP=229, EACH=230, 
		ENABLE_P=231, ENCODING=232, ENCRYPTED=233, ENUM_P=234, ESCAPE=235, EVENT=236, 
		EXCLUDE=237, EXCLUDING=238, EXCLUSIVE=239, EXECUTE=240, EXPLAIN=241, EXTENSION=242, 
		EXTERNAL=243, FAMILY=244, FIRST_P=245, FOLLOWING=246, FORCE=247, FORWARD=248, 
		FUNCTION=249, FUNCTIONS=250, GLOBAL=251, GRANTED=252, HANDLER=253, HEADER_P=254, 
		HOLD=255, HOUR_P=256, IDENTITY_P=257, IF_P=258, IMMEDIATE=259, IMMUTABLE=260, 
		IMPLICIT_P=261, INCLUDING=262, INCREMENT=263, INDEX=264, INDEXES=265, 
		INHERIT=266, INHERITS=267, INLINE_P=268, INSENSITIVE=269, INSERT=270, 
		INSTEAD=271, INVOKER=272, ISOLATION=273, KEY=274, LABEL=275, LANGUAGE=276, 
		LARGE_P=277, LAST_P=278, LEAKPROOF=279, LEVEL=280, LISTEN=281, LOAD=282, 
		LOCAL=283, LOCATION=284, LOCK_P=285, MAPPING=286, MATCH=287, MATCHED=288, 
		MATERIALIZED=289, MAXVALUE=290, MERGE=291, MINUTE_P=292, MINVALUE=293, 
		MODE=294, MONTH_P=295, MOVE=296, NAME_P=297, NAMES=298, NEXT=299, NO=300, 
		NOTHING=301, NOTIFY=302, NOWAIT=303, NULLS_P=304, OBJECT_P=305, OF=306, 
		OFF=307, OIDS=308, OPERATOR=309, OPTION=310, OPTIONS=311, OWNED=312, OWNER=313, 
		PARSER=314, PARTIAL=315, PARTITION=316, PASSING=317, PASSWORD=318, PLANS=319, 
		PRECEDING=320, PREPARE=321, PREPARED=322, PRESERVE=323, PRIOR=324, PRIVILEGES=325, 
		PROCEDURAL=326, PROCEDURE=327, PROGRAM=328, QUOTE=329, RANGE=330, READ=331, 
		REASSIGN=332, RECHECK=333, RECURSIVE=334, REF=335, REFRESH=336, REINDEX=337, 
		RELATIVE_P=338, RELEASE=339, RENAME=340, REPEATABLE=341, REPLACE=342, 
		REPLICA=343, RESET=344, RESTART=345, RESTRICT=346, RETURNS=347, REVOKE=348, 
		ROLE=349, ROLLBACK=350, ROWS=351, RULE=352, SAVEPOINT=353, SCHEMA=354, 
		SCROLL=355, SEARCH=356, SECOND_P=357, SECURITY=358, SEQUENCE=359, SEQUENCES=360, 
		SERIALIZABLE=361, SERVER=362, SESSION=363, SET=364, SHARE=365, SHOW=366, 
		SIMPLE=367, SNAPSHOT=368, STABLE=369, STANDALONE_P=370, START=371, STATEMENT=372, 
		STATISTICS=373, STDIN=374, STDOUT=375, STORAGE=376, STRICT_P=377, STRIP_P=378, 
		SYSID=379, SYSTEM_P=380, TABLES=381, TABLESPACE=382, TEMP=383, TEMPLATE=384, 
		TEMPORARY=385, TEXT_P=386, TRANSACTION=387, TRIGGER=388, TRUNCATE=389, 
		TRUSTED=390, TYPE_P=391, TYPES_P=392, UNBOUNDED=393, UNCOMMITTED=394, 
		UNENCRYPTED=395, UNKNOWN=396, UNLISTEN=397, UNLOGGED=398, UNTIL=399, UPDATE=400, 
		VACUUM=401, VALID=402, VALIDATE=403, VALIDATOR=404, VARYING=405, VERSION_P=406, 
		VIEW=407, VOLATILE=408, WHITESPACE_P=409, WITHOUT=410, WORK=411, WRAPPER=412, 
		WRITE=413, XML_P=414, YEAR_P=415, YES_P=416, ZONE=417, BETWEEN=418, BIGINT=419, 
		BIT=420, BOOLEAN_P=421, CHAR_P=422, CHARACTER=423, COALESCE=424, DEC=425, 
		DECIMAL_P=426, EXISTS=427, EXTRACT=428, FLOAT_P=429, GREATEST=430, INOUT=431, 
		INT_P=432, INTEGER=433, INTERVAL=434, LEAST=435, NATIONAL=436, NCHAR=437, 
		NONE=438, NULLIF=439, NUMERIC=440, OVERLAY=441, POSITION=442, PRECISION=443, 
		REAL=444, ROW=445, SETOF=446, SMALLINT=447, SUBSTRING=448, TIME=449, TIMESTAMP=450, 
		TREAT=451, TRIM=452, VALUES=453, VARCHAR=454, XMLATTRIBUTES=455, XMLCOMMENT=456, 
		XMLAGG=457, XML_IS_WELL_FORMED=458, XML_IS_WELL_FORMED_DOCUMENT=459, XML_IS_WELL_FORMED_CONTENT=460, 
		XPATH=461, XPATH_EXISTS=462, XMLCONCAT=463, XMLELEMENT=464, XMLEXISTS=465, 
		XMLFOREST=466, XMLPARSE=467, XMLPI=468, XMLROOT=469, XMLSERIALIZE=470, 
		CALL=471, CURRENT_P=472, ATTACH=473, DETACH=474, EXPRESSION=475, GENERATED=476, 
		LOGGED=477, STORED=478, INCLUDE=479, ROUTINE=480, TRANSFORM=481, IMPORT_P=482, 
		POLICY=483, METHOD=484, REFERENCING=485, NEW=486, OLD=487, VALUE_P=488, 
		SUBSCRIPTION=489, PUBLICATION=490, OUT_P=491, END_P=492, ROUTINES=493, 
		SCHEMAS=494, PROCEDURES=495, INPUT_P=496, SUPPORT=497, PARALLEL=498, SQL_P=499, 
		DEPENDS=500, OVERRIDING=501, CONFLICT=502, SKIP_P=503, LOCKED=504, TIES=505, 
		ROLLUP=506, CUBE=507, GROUPING=508, SETS=509, TABLESAMPLE=510, ORDINALITY=511, 
		XMLTABLE=512, COLUMNS=513, XMLNAMESPACES=514, ROWTYPE=515, NORMALIZED=516, 
		WITHIN=517, FILTER=518, GROUPS=519, OTHERS=520, NFC=521, NFD=522, NFKC=523, 
		NFKD=524, UESCAPE=525, VIEWS=526, NORMALIZE=527, DUMP=528, ERROR=529, 
		USE_VARIABLE=530, USE_COLUMN=531, CONSTANT=532, PERFORM=533, GET=534, 
		DIAGNOSTICS=535, STACKED=536, ELSIF=537, WHILE=538, FOREACH=539, SLICE=540, 
		EXIT=541, RETURN=542, RAISE=543, SQLSTATE=544, DEBUG=545, INFO=546, NOTICE=547, 
		WARNING=548, EXCEPTION=549, ASSERT=550, LOOP=551, OPEN=552, FORMAT=553, 
		Identifier=554, QuotedIdentifier=555, UnterminatedQuotedIdentifier=556, 
		InvalidQuotedIdentifier=557, InvalidUnterminatedQuotedIdentifier=558, 
		UnicodeQuotedIdentifier=559, UnterminatedUnicodeQuotedIdentifier=560, 
		InvalidUnicodeQuotedIdentifier=561, InvalidUnterminatedUnicodeQuotedIdentifier=562, 
		TickedIdentifier=563, UnterminatedTickedIdentifier=564, InvalidTickedIdentifier=565, 
		InvalidUnterminatedTickedIdentifier=566, StringConstant=567, UnterminatedStringConstant=568, 
		UnicodeEscapeStringConstant=569, UnterminatedUnicodeEscapeStringConstant=570, 
		BeginDollarStringConstant=571, BinaryStringConstant=572, UnterminatedBinaryStringConstant=573, 
		InvalidBinaryStringConstant=574, InvalidUnterminatedBinaryStringConstant=575, 
		HexadecimalStringConstant=576, UnterminatedHexadecimalStringConstant=577, 
		InvalidHexadecimalStringConstant=578, InvalidUnterminatedHexadecimalStringConstant=579, 
		Integral=580, BinaryIntegral=581, OctalIntegral=582, HexadecimalIntegral=583, 
		NumericFail=584, Numeric=585, PLSQLVARIABLENAME=586, PLSQLIDENTIFIER=587, 
		Whitespace=588, Newline=589, LineComment=590, BlockComment=591, UnterminatedBlockComment=592, 
		ErrorCharacter=593, EscapeStringConstant=594, UnterminatedEscapeStringConstant=595, 
		InvalidEscapeStringConstant=596, InvalidUnterminatedEscapeStringConstant=597, 
		AfterEscapeStringConstantMode_NotContinued=598, AfterEscapeStringConstantWithNewlineMode_NotContinued=599, 
		DollarText=600, EndDollarStringConstant=601, MetaCommand=602, AfterEscapeStringConstantWithNewlineMode_Continued=603;
	public static final int
		RULE_root = 0, RULE_stmtblock = 1, RULE_stmtmulti = 2, RULE_stmt = 3, 
		RULE_callstmt = 4, RULE_createrolestmt = 5, RULE_with_ = 6, RULE_optrolelist = 7, 
		RULE_alteroptrolelist = 8, RULE_alteroptroleelem = 9, RULE_createoptroleelem = 10, 
		RULE_createuserstmt = 11, RULE_alterrolestmt = 12, RULE_in_database_ = 13, 
		RULE_alterrolesetstmt = 14, RULE_droprolestmt = 15, RULE_creategroupstmt = 16, 
		RULE_altergroupstmt = 17, RULE_add_drop = 18, RULE_createschemastmt = 19, 
		RULE_optschemaname = 20, RULE_optschemaeltlist = 21, RULE_schema_stmt = 22, 
		RULE_variablesetstmt = 23, RULE_set_rest = 24, RULE_generic_set = 25, 
		RULE_set_rest_more = 26, RULE_var_name = 27, RULE_var_list = 28, RULE_var_value = 29, 
		RULE_iso_level = 30, RULE_boolean_or_string_ = 31, RULE_zone_value = 32, 
		RULE_encoding_ = 33, RULE_nonreservedword_or_sconst = 34, RULE_variableresetstmt = 35, 
		RULE_reset_rest = 36, RULE_generic_reset = 37, RULE_setresetclause = 38, 
		RULE_functionsetresetclause = 39, RULE_variableshowstmt = 40, RULE_constraintssetstmt = 41, 
		RULE_constraints_set_list = 42, RULE_constraints_set_mode = 43, RULE_checkpointstmt = 44, 
		RULE_discardstmt = 45, RULE_altertablestmt = 46, RULE_alter_table_cmds = 47, 
		RULE_partition_cmd = 48, RULE_index_partition_cmd = 49, RULE_alter_table_cmd = 50, 
		RULE_alter_column_default = 51, RULE_drop_behavior_ = 52, RULE_collate_clause_ = 53, 
		RULE_alter_using = 54, RULE_replica_identity = 55, RULE_reloptions = 56, 
		RULE_reloptions_ = 57, RULE_reloption_list = 58, RULE_reloption_elem = 59, 
		RULE_alter_identity_column_option_list = 60, RULE_alter_identity_column_option = 61, 
		RULE_partitionboundspec = 62, RULE_hash_partbound_elem = 63, RULE_hash_partbound = 64, 
		RULE_altercompositetypestmt = 65, RULE_alter_type_cmds = 66, RULE_alter_type_cmd = 67, 
		RULE_closeportalstmt = 68, RULE_copystmt = 69, RULE_copy_from = 70, RULE_program_ = 71, 
		RULE_copy_file_name = 72, RULE_copy_options = 73, RULE_copy_opt_list = 74, 
		RULE_copy_opt_item = 75, RULE_binary_ = 76, RULE_copy_delimiter = 77, 
		RULE_using_ = 78, RULE_copy_generic_opt_list = 79, RULE_copy_generic_opt_elem = 80, 
		RULE_copy_generic_opt_arg = 81, RULE_copy_generic_opt_arg_list = 82, RULE_copy_generic_opt_arg_list_item = 83, 
		RULE_createstmt = 84, RULE_opttemp = 85, RULE_opttableelementlist = 86, 
		RULE_opttypedtableelementlist = 87, RULE_tableelementlist = 88, RULE_typedtableelementlist = 89, 
		RULE_tableelement = 90, RULE_typedtableelement = 91, RULE_columnDef = 92, 
		RULE_columnOptions = 93, RULE_colquallist = 94, RULE_colconstraint = 95, 
		RULE_colconstraintelem = 96, RULE_generated_when = 97, RULE_constraintattr = 98, 
		RULE_tablelikeclause = 99, RULE_tablelikeoptionlist = 100, RULE_tablelikeoption = 101, 
		RULE_tableconstraint = 102, RULE_constraintelem = 103, RULE_no_inherit_ = 104, 
		RULE_column_list_ = 105, RULE_columnlist = 106, RULE_columnElem = 107, 
		RULE_c_include_ = 108, RULE_key_match = 109, RULE_exclusionconstraintlist = 110, 
		RULE_exclusionconstraintelem = 111, RULE_exclusionwhereclause = 112, RULE_key_actions = 113, 
		RULE_key_update = 114, RULE_key_delete = 115, RULE_key_action = 116, RULE_optinherit = 117, 
		RULE_optpartitionspec = 118, RULE_partitionspec = 119, RULE_part_params = 120, 
		RULE_part_elem = 121, RULE_table_access_method_clause = 122, RULE_optwith = 123, 
		RULE_oncommitoption = 124, RULE_opttablespace = 125, RULE_optconstablespace = 126, 
		RULE_existingindex = 127, RULE_createstatsstmt = 128, RULE_alterstatsstmt = 129, 
		RULE_createasstmt = 130, RULE_create_as_target = 131, RULE_with_data_ = 132, 
		RULE_creatematviewstmt = 133, RULE_create_mv_target = 134, RULE_optnolog = 135, 
		RULE_refreshmatviewstmt = 136, RULE_createseqstmt = 137, RULE_alterseqstmt = 138, 
		RULE_optseqoptlist = 139, RULE_optparenthesizedseqoptlist = 140, RULE_seqoptlist = 141, 
		RULE_seqoptelem = 142, RULE_by_ = 143, RULE_numericonly = 144, RULE_numericonly_list = 145, 
		RULE_createplangstmt = 146, RULE_trusted_ = 147, RULE_handler_name = 148, 
		RULE_inline_handler_ = 149, RULE_validator_clause = 150, RULE_validator_ = 151, 
		RULE_procedural_ = 152, RULE_createtablespacestmt = 153, RULE_opttablespaceowner = 154, 
		RULE_droptablespacestmt = 155, RULE_createextensionstmt = 156, RULE_create_extension_opt_list = 157, 
		RULE_create_extension_opt_item = 158, RULE_alterextensionstmt = 159, RULE_alter_extension_opt_list = 160, 
		RULE_alter_extension_opt_item = 161, RULE_alterextensioncontentsstmt = 162, 
		RULE_createfdwstmt = 163, RULE_fdw_option = 164, RULE_fdw_options = 165, 
		RULE_fdw_options_ = 166, RULE_alterfdwstmt = 167, RULE_create_generic_options = 168, 
		RULE_generic_option_list = 169, RULE_alter_generic_options = 170, RULE_alter_generic_option_list = 171, 
		RULE_alter_generic_option_elem = 172, RULE_generic_option_elem = 173, 
		RULE_generic_option_name = 174, RULE_generic_option_arg = 175, RULE_createforeignserverstmt = 176, 
		RULE_type_ = 177, RULE_foreign_server_version = 178, RULE_foreign_server_version_ = 179, 
		RULE_alterforeignserverstmt = 180, RULE_createforeigntablestmt = 181, 
		RULE_importforeignschemastmt = 182, RULE_import_qualification_type = 183, 
		RULE_import_qualification = 184, RULE_createusermappingstmt = 185, RULE_auth_ident = 186, 
		RULE_dropusermappingstmt = 187, RULE_alterusermappingstmt = 188, RULE_createpolicystmt = 189, 
		RULE_alterpolicystmt = 190, RULE_rowsecurityoptionalexpr = 191, RULE_rowsecurityoptionalwithcheck = 192, 
		RULE_rowsecuritydefaulttorole = 193, RULE_rowsecurityoptionaltorole = 194, 
		RULE_rowsecuritydefaultpermissive = 195, RULE_rowsecuritydefaultforcmd = 196, 
		RULE_row_security_cmd = 197, RULE_createamstmt = 198, RULE_am_type = 199, 
		RULE_createtrigstmt = 200, RULE_triggeractiontime = 201, RULE_triggerevents = 202, 
		RULE_triggeroneevent = 203, RULE_triggerreferencing = 204, RULE_triggertransitions = 205, 
		RULE_triggertransition = 206, RULE_transitionoldornew = 207, RULE_transitionrowortable = 208, 
		RULE_transitionrelname = 209, RULE_triggerforspec = 210, RULE_triggerforopteach = 211, 
		RULE_triggerfortype = 212, RULE_triggerwhen = 213, RULE_function_or_procedure = 214, 
		RULE_triggerfuncargs = 215, RULE_triggerfuncarg = 216, RULE_optconstrfromtable = 217, 
		RULE_constraintattributespec = 218, RULE_constraintattributeElem = 219, 
		RULE_createeventtrigstmt = 220, RULE_event_trigger_when_list = 221, RULE_event_trigger_when_item = 222, 
		RULE_event_trigger_value_list = 223, RULE_altereventtrigstmt = 224, RULE_enable_trigger = 225, 
		RULE_createassertionstmt = 226, RULE_definestmt = 227, RULE_definition = 228, 
		RULE_def_list = 229, RULE_def_elem = 230, RULE_def_arg = 231, RULE_old_aggr_definition = 232, 
		RULE_old_aggr_list = 233, RULE_old_aggr_elem = 234, RULE_enum_val_list_ = 235, 
		RULE_enum_val_list = 236, RULE_alterenumstmt = 237, RULE_if_not_exists_ = 238, 
		RULE_createopclassstmt = 239, RULE_opclass_item_list = 240, RULE_opclass_item = 241, 
		RULE_default_ = 242, RULE_opfamily_ = 243, RULE_opclass_purpose = 244, 
		RULE_recheck_ = 245, RULE_createopfamilystmt = 246, RULE_alteropfamilystmt = 247, 
		RULE_opclass_drop_list = 248, RULE_opclass_drop = 249, RULE_dropopclassstmt = 250, 
		RULE_dropopfamilystmt = 251, RULE_dropownedstmt = 252, RULE_reassignownedstmt = 253, 
		RULE_dropstmt = 254, RULE_object_type_any_name = 255, RULE_object_type_name = 256, 
		RULE_drop_type_name = 257, RULE_object_type_name_on_any_name = 258, RULE_any_name_list_ = 259, 
		RULE_any_name = 260, RULE_attrs = 261, RULE_type_name_list = 262, RULE_truncatestmt = 263, 
		RULE_restart_seqs_ = 264, RULE_commentstmt = 265, RULE_comment_text = 266, 
		RULE_seclabelstmt = 267, RULE_provider_ = 268, RULE_security_label = 269, 
		RULE_fetchstmt = 270, RULE_fetch_args = 271, RULE_from_in = 272, RULE_from_in_ = 273, 
		RULE_grantstmt = 274, RULE_revokestmt = 275, RULE_privileges = 276, RULE_privilege_list = 277, 
		RULE_privilege = 278, RULE_privilege_target = 279, RULE_grantee_list = 280, 
		RULE_grantee = 281, RULE_grant_grant_option_ = 282, RULE_grantrolestmt = 283, 
		RULE_revokerolestmt = 284, RULE_grant_admin_option_ = 285, RULE_granted_by_ = 286, 
		RULE_alterdefaultprivilegesstmt = 287, RULE_defacloptionlist = 288, RULE_defacloption = 289, 
		RULE_defaclaction = 290, RULE_defacl_privilege_target = 291, RULE_indexstmt = 292, 
		RULE_unique_ = 293, RULE_single_name_ = 294, RULE_concurrently_ = 295, 
		RULE_index_name_ = 296, RULE_access_method_clause = 297, RULE_index_params = 298, 
		RULE_index_elem_options = 299, RULE_index_elem = 300, RULE_include_ = 301, 
		RULE_index_including_params = 302, RULE_collate_ = 303, RULE_class_ = 304, 
		RULE_asc_desc_ = 305, RULE_nulls_order_ = 306, RULE_createfunctionstmt = 307, 
		RULE_or_replace_ = 308, RULE_func_args = 309, RULE_func_args_list = 310, 
		RULE_function_with_argtypes_list = 311, RULE_function_with_argtypes = 312, 
		RULE_func_args_with_defaults = 313, RULE_func_args_with_defaults_list = 314, 
		RULE_func_arg = 315, RULE_arg_class = 316, RULE_param_name = 317, RULE_func_return = 318, 
		RULE_func_type = 319, RULE_func_arg_with_default = 320, RULE_aggr_arg = 321, 
		RULE_aggr_args = 322, RULE_aggr_args_list = 323, RULE_aggregate_with_argtypes = 324, 
		RULE_aggregate_with_argtypes_list = 325, RULE_createfunc_opt_list = 326, 
		RULE_common_func_opt_item = 327, RULE_createfunc_opt_item = 328, RULE_func_as = 329, 
		RULE_transform_type_list = 330, RULE_definition_ = 331, RULE_table_func_column = 332, 
		RULE_table_func_column_list = 333, RULE_alterfunctionstmt = 334, RULE_alterfunc_opt_list = 335, 
		RULE_restrict_ = 336, RULE_removefuncstmt = 337, RULE_removeaggrstmt = 338, 
		RULE_removeoperstmt = 339, RULE_oper_argtypes = 340, RULE_any_operator = 341, 
		RULE_operator_with_argtypes_list = 342, RULE_operator_with_argtypes = 343, 
		RULE_dostmt = 344, RULE_dostmt_opt_list = 345, RULE_dostmt_opt_item = 346, 
		RULE_createcaststmt = 347, RULE_cast_context = 348, RULE_dropcaststmt = 349, 
		RULE_if_exists_ = 350, RULE_createtransformstmt = 351, RULE_transform_element_list = 352, 
		RULE_droptransformstmt = 353, RULE_reindexstmt = 354, RULE_reindex_target_relation = 355, 
		RULE_reindex_target_all = 356, RULE_reindex_option_list = 357, RULE_altertblspcstmt = 358, 
		RULE_renamestmt = 359, RULE_column_ = 360, RULE_set_data_ = 361, RULE_alterobjectdependsstmt = 362, 
		RULE_no_ = 363, RULE_alterobjectschemastmt = 364, RULE_alteroperatorstmt = 365, 
		RULE_operator_def_list = 366, RULE_operator_def_elem = 367, RULE_operator_def_arg = 368, 
		RULE_altertypestmt = 369, RULE_alterownerstmt = 370, RULE_createpublicationstmt = 371, 
		RULE_publication_for_tables_ = 372, RULE_publication_for_tables = 373, 
		RULE_alterpublicationstmt = 374, RULE_createsubscriptionstmt = 375, RULE_publication_name_list = 376, 
		RULE_publication_name_item = 377, RULE_altersubscriptionstmt = 378, RULE_dropsubscriptionstmt = 379, 
		RULE_rulestmt = 380, RULE_ruleactionlist = 381, RULE_ruleactionmulti = 382, 
		RULE_ruleactionstmt = 383, RULE_ruleactionstmtOrEmpty = 384, RULE_event = 385, 
		RULE_instead_ = 386, RULE_notifystmt = 387, RULE_notify_payload = 388, 
		RULE_listenstmt = 389, RULE_unlistenstmt = 390, RULE_transactionstmt = 391, 
		RULE_transaction_ = 392, RULE_transaction_mode_item = 393, RULE_transaction_mode_list = 394, 
		RULE_transaction_mode_list_or_empty = 395, RULE_transaction_chain_ = 396, 
		RULE_viewstmt = 397, RULE_check_option_ = 398, RULE_loadstmt = 399, RULE_createdbstmt = 400, 
		RULE_createdb_opt_list = 401, RULE_createdb_opt_items = 402, RULE_createdb_opt_item = 403, 
		RULE_createdb_opt_name = 404, RULE_equal_ = 405, RULE_alterdatabasestmt = 406, 
		RULE_alterdatabasesetstmt = 407, RULE_dropdbstmt = 408, RULE_drop_option_list = 409, 
		RULE_drop_option = 410, RULE_altercollationstmt = 411, RULE_altersystemstmt = 412, 
		RULE_createdomainstmt = 413, RULE_alterdomainstmt = 414, RULE_as_ = 415, 
		RULE_altertsdictionarystmt = 416, RULE_altertsconfigurationstmt = 417, 
		RULE_any_with = 418, RULE_createconversionstmt = 419, RULE_clusterstmt = 420, 
		RULE_cluster_index_specification = 421, RULE_vacuumstmt = 422, RULE_analyzestmt = 423, 
		RULE_utility_option_list = 424, RULE_vac_analyze_option_list = 425, RULE_analyze_keyword = 426, 
		RULE_utility_option_elem = 427, RULE_utility_option_name = 428, RULE_utility_option_arg = 429, 
		RULE_vac_analyze_option_elem = 430, RULE_vac_analyze_option_name = 431, 
		RULE_vac_analyze_option_arg = 432, RULE_analyze_ = 433, RULE_verbose_ = 434, 
		RULE_full_ = 435, RULE_freeze_ = 436, RULE_name_list_ = 437, RULE_vacuum_relation = 438, 
		RULE_vacuum_relation_list = 439, RULE_vacuum_relation_list_ = 440, RULE_explainstmt = 441, 
		RULE_explainablestmt = 442, RULE_explain_option_list = 443, RULE_explain_option_elem = 444, 
		RULE_explain_option_name = 445, RULE_explain_option_arg = 446, RULE_preparestmt = 447, 
		RULE_prep_type_clause = 448, RULE_preparablestmt = 449, RULE_executestmt = 450, 
		RULE_execute_param_clause = 451, RULE_deallocatestmt = 452, RULE_insertstmt = 453, 
		RULE_insert_target = 454, RULE_insert_rest = 455, RULE_override_kind = 456, 
		RULE_insert_column_list = 457, RULE_insert_column_item = 458, RULE_on_conflict_ = 459, 
		RULE_conf_expr_ = 460, RULE_returning_clause = 461, RULE_mergestmt = 462, 
		RULE_merge_insert_clause = 463, RULE_merge_update_clause = 464, RULE_merge_delete_clause = 465, 
		RULE_deletestmt = 466, RULE_using_clause = 467, RULE_lockstmt = 468, RULE_lock_ = 469, 
		RULE_lock_type = 470, RULE_nowait_ = 471, RULE_nowait_or_skip_ = 472, 
		RULE_updatestmt = 473, RULE_set_clause_list = 474, RULE_set_clause = 475, 
		RULE_set_target = 476, RULE_set_target_list = 477, RULE_declarecursorstmt = 478, 
		RULE_cursor_name = 479, RULE_cursor_options = 480, RULE_hold_ = 481, RULE_selectstmt = 482, 
		RULE_select_with_parens = 483, RULE_select_no_parens = 484, RULE_select_clause = 485, 
		RULE_simple_select_intersect = 486, RULE_simple_select_pramary = 487, 
		RULE_with_clause = 488, RULE_cte_list = 489, RULE_common_table_expr = 490, 
		RULE_materialized_ = 491, RULE_with_clause_ = 492, RULE_into_clause = 493, 
		RULE_strict_ = 494, RULE_opttempTableName = 495, RULE_table_ = 496, RULE_all_or_distinct = 497, 
		RULE_distinct_clause = 498, RULE_all_clause_ = 499, RULE_sort_clause_ = 500, 
		RULE_sort_clause = 501, RULE_sortby_list = 502, RULE_sortby = 503, RULE_select_limit = 504, 
		RULE_select_limit_ = 505, RULE_limit_clause = 506, RULE_offset_clause = 507, 
		RULE_select_limit_value = 508, RULE_select_offset_value = 509, RULE_select_fetch_first_value = 510, 
		RULE_i_or_f_const = 511, RULE_row_or_rows = 512, RULE_first_or_next = 513, 
		RULE_group_clause = 514, RULE_group_by_list = 515, RULE_group_by_item = 516, 
		RULE_empty_grouping_set = 517, RULE_rollup_clause = 518, RULE_cube_clause = 519, 
		RULE_grouping_sets_clause = 520, RULE_having_clause = 521, RULE_for_locking_clause = 522, 
		RULE_for_locking_clause_ = 523, RULE_for_locking_items = 524, RULE_for_locking_item = 525, 
		RULE_for_locking_strength = 526, RULE_locked_rels_list = 527, RULE_values_clause = 528, 
		RULE_from_clause = 529, RULE_from_list = 530, RULE_table_ref = 531, RULE_alias_clause = 532, 
		RULE_func_alias_clause = 533, RULE_join_type = 534, RULE_join_qual = 535, 
		RULE_relation_expr = 536, RULE_relation_expr_list = 537, RULE_relation_expr_opt_alias = 538, 
		RULE_tablesample_clause = 539, RULE_repeatable_clause_ = 540, RULE_func_table = 541, 
		RULE_rowsfrom_item = 542, RULE_rowsfrom_list = 543, RULE_col_def_list_ = 544, 
		RULE_ordinality_ = 545, RULE_where_clause = 546, RULE_where_or_current_clause = 547, 
		RULE_opttablefuncelementlist = 548, RULE_tablefuncelementlist = 549, RULE_tablefuncelement = 550, 
		RULE_xmltable = 551, RULE_xmltable_column_list = 552, RULE_xmltable_column_el = 553, 
		RULE_xmltable_column_option_list = 554, RULE_xmltable_column_option_el = 555, 
		RULE_xml_namespace_list = 556, RULE_xml_namespace_el = 557, RULE_typename = 558, 
		RULE_opt_array_bounds = 559, RULE_simpletypename = 560, RULE_consttypename = 561, 
		RULE_generictype = 562, RULE_type_modifiers_ = 563, RULE_numeric = 564, 
		RULE_float_ = 565, RULE_bit = 566, RULE_constbit = 567, RULE_bitwithlength = 568, 
		RULE_bitwithoutlength = 569, RULE_character = 570, RULE_constcharacter = 571, 
		RULE_character_c = 572, RULE_varying_ = 573, RULE_constdatetime = 574, 
		RULE_constinterval = 575, RULE_timezone_ = 576, RULE_interval_ = 577, 
		RULE_interval_second = 578, RULE_jsonType = 579, RULE_escape_ = 580, RULE_a_expr = 581, 
		RULE_a_expr_qual = 582, RULE_a_expr_lessless = 583, RULE_a_expr_or = 584, 
		RULE_a_expr_and = 585, RULE_a_expr_between = 586, RULE_a_expr_in = 587, 
		RULE_a_expr_unary_not = 588, RULE_a_expr_isnull = 589, RULE_a_expr_is_not = 590, 
		RULE_a_expr_compare = 591, RULE_a_expr_like = 592, RULE_a_expr_qual_op = 593, 
		RULE_a_expr_unary_qualop = 594, RULE_a_expr_add = 595, RULE_a_expr_mul = 596, 
		RULE_a_expr_caret = 597, RULE_a_expr_unary_sign = 598, RULE_a_expr_at_time_zone = 599, 
		RULE_a_expr_collate = 600, RULE_a_expr_typecast = 601, RULE_b_expr = 602, 
		RULE_c_expr = 603, RULE_plsqlvariablename = 604, RULE_func_application = 605, 
		RULE_enclosed_bracket_expr = 606, RULE_func_expr = 607, RULE_func_expr_windowless = 608, 
		RULE_func_expr_common_subexpr = 609, RULE_xml_root_version = 610, RULE_xml_root_standalone_ = 611, 
		RULE_xml_attributes = 612, RULE_xml_attribute_list = 613, RULE_xml_attribute_el = 614, 
		RULE_document_or_content = 615, RULE_xml_whitespace_option = 616, RULE_xmlexists_argument = 617, 
		RULE_xml_passing_mech = 618, RULE_within_group_clause = 619, RULE_filter_clause = 620, 
		RULE_window_clause = 621, RULE_window_definition_list = 622, RULE_window_definition = 623, 
		RULE_over_clause = 624, RULE_window_specification = 625, RULE_existing_window_name_ = 626, 
		RULE_partition_clause_ = 627, RULE_frame_clause_ = 628, RULE_frame_extent = 629, 
		RULE_frame_bound = 630, RULE_window_exclusion_clause_ = 631, RULE_row = 632, 
		RULE_explicit_row = 633, RULE_implicit_row = 634, RULE_sub_type = 635, 
		RULE_all_op = 636, RULE_mathop = 637, RULE_qual_op = 638, RULE_qual_all_op = 639, 
		RULE_subquery_Op = 640, RULE_expr_list = 641, RULE_func_arg_list = 642, 
		RULE_func_arg_expr = 643, RULE_type_list = 644, RULE_array_expr = 645, 
		RULE_array_expr_list = 646, RULE_extract_list = 647, RULE_extract_arg = 648, 
		RULE_unicode_normal_form = 649, RULE_overlay_list = 650, RULE_position_list = 651, 
		RULE_substr_list = 652, RULE_trim_list = 653, RULE_in_expr = 654, RULE_case_expr = 655, 
		RULE_when_clause_list = 656, RULE_when_clause = 657, RULE_case_default = 658, 
		RULE_case_arg = 659, RULE_columnref = 660, RULE_indirection_el = 661, 
		RULE_slice_bound_ = 662, RULE_indirection = 663, RULE_opt_indirection = 664, 
		RULE_json_passing_clause = 665, RULE_json_arguments = 666, RULE_json_argument = 667, 
		RULE_json_wrapper_behavior = 668, RULE_json_behavior = 669, RULE_json_behavior_type = 670, 
		RULE_json_behavior_clause = 671, RULE_json_on_error_clause = 672, RULE_json_value_expr = 673, 
		RULE_json_format_clause = 674, RULE_json_quotes_clause = 675, RULE_json_returning_clause = 676, 
		RULE_json_predicate_type_constraint = 677, RULE_json_key_uniqueness_constraint = 678, 
		RULE_json_name_and_value_list = 679, RULE_json_name_and_value = 680, RULE_json_object_constructor_null_clause = 681, 
		RULE_json_array_constructor_null_clause = 682, RULE_json_value_expr_list = 683, 
		RULE_json_aggregate_func = 684, RULE_json_array_aggregate_order_by_clause = 685, 
		RULE_target_list_ = 686, RULE_target_list = 687, RULE_target_el = 688, 
		RULE_target_el_alias = 689, RULE_qualified_name_list = 690, RULE_qualified_name = 691, 
		RULE_name_list = 692, RULE_name = 693, RULE_attr_name = 694, RULE_file_name = 695, 
		RULE_func_name = 696, RULE_aexprconst = 697, RULE_xconst = 698, RULE_bconst = 699, 
		RULE_fconst = 700, RULE_iconst = 701, RULE_sconst = 702, RULE_anysconst = 703, 
		RULE_uescape_ = 704, RULE_signediconst = 705, RULE_roleid = 706, RULE_rolespec = 707, 
		RULE_role_list = 708, RULE_colid = 709, RULE_type_function_name = 710, 
		RULE_nonreservedword = 711, RULE_colLabel = 712, RULE_bareColLabel = 713, 
		RULE_unreserved_keyword = 714, RULE_col_name_keyword = 715, RULE_type_func_name_keyword = 716, 
		RULE_reserved_keyword = 717, RULE_bare_label_keyword = 718, RULE_any_identifier = 719, 
		RULE_identifier = 720;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "stmtblock", "stmtmulti", "stmt", "callstmt", "createrolestmt", 
			"with_", "optrolelist", "alteroptrolelist", "alteroptroleelem", "createoptroleelem", 
			"createuserstmt", "alterrolestmt", "in_database_", "alterrolesetstmt", 
			"droprolestmt", "creategroupstmt", "altergroupstmt", "add_drop", "createschemastmt", 
			"optschemaname", "optschemaeltlist", "schema_stmt", "variablesetstmt", 
			"set_rest", "generic_set", "set_rest_more", "var_name", "var_list", "var_value", 
			"iso_level", "boolean_or_string_", "zone_value", "encoding_", "nonreservedword_or_sconst", 
			"variableresetstmt", "reset_rest", "generic_reset", "setresetclause", 
			"functionsetresetclause", "variableshowstmt", "constraintssetstmt", "constraints_set_list", 
			"constraints_set_mode", "checkpointstmt", "discardstmt", "altertablestmt", 
			"alter_table_cmds", "partition_cmd", "index_partition_cmd", "alter_table_cmd", 
			"alter_column_default", "drop_behavior_", "collate_clause_", "alter_using", 
			"replica_identity", "reloptions", "reloptions_", "reloption_list", "reloption_elem", 
			"alter_identity_column_option_list", "alter_identity_column_option", 
			"partitionboundspec", "hash_partbound_elem", "hash_partbound", "altercompositetypestmt", 
			"alter_type_cmds", "alter_type_cmd", "closeportalstmt", "copystmt", "copy_from", 
			"program_", "copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", 
			"binary_", "copy_delimiter", "using_", "copy_generic_opt_list", "copy_generic_opt_elem", 
			"copy_generic_opt_arg", "copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", 
			"createstmt", "opttemp", "opttableelementlist", "opttypedtableelementlist", 
			"tableelementlist", "typedtableelementlist", "tableelement", "typedtableelement", 
			"columnDef", "columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
			"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
			"tablelikeoption", "tableconstraint", "constraintelem", "no_inherit_", 
			"column_list_", "columnlist", "columnElem", "c_include_", "key_match", 
			"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
			"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
			"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
			"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
			"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
			"with_data_", "creatematviewstmt", "create_mv_target", "optnolog", "refreshmatviewstmt", 
			"createseqstmt", "alterseqstmt", "optseqoptlist", "optparenthesizedseqoptlist", 
			"seqoptlist", "seqoptelem", "by_", "numericonly", "numericonly_list", 
			"createplangstmt", "trusted_", "handler_name", "inline_handler_", "validator_clause", 
			"validator_", "procedural_", "createtablespacestmt", "opttablespaceowner", 
			"droptablespacestmt", "createextensionstmt", "create_extension_opt_list", 
			"create_extension_opt_item", "alterextensionstmt", "alter_extension_opt_list", 
			"alter_extension_opt_item", "alterextensioncontentsstmt", "createfdwstmt", 
			"fdw_option", "fdw_options", "fdw_options_", "alterfdwstmt", "create_generic_options", 
			"generic_option_list", "alter_generic_options", "alter_generic_option_list", 
			"alter_generic_option_elem", "generic_option_elem", "generic_option_name", 
			"generic_option_arg", "createforeignserverstmt", "type_", "foreign_server_version", 
			"foreign_server_version_", "alterforeignserverstmt", "createforeigntablestmt", 
			"importforeignschemastmt", "import_qualification_type", "import_qualification", 
			"createusermappingstmt", "auth_ident", "dropusermappingstmt", "alterusermappingstmt", 
			"createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
			"rowsecuritydefaulttorole", "rowsecurityoptionaltorole", "rowsecuritydefaultpermissive", 
			"rowsecuritydefaultforcmd", "row_security_cmd", "createamstmt", "am_type", 
			"createtrigstmt", "triggeractiontime", "triggerevents", "triggeroneevent", 
			"triggerreferencing", "triggertransitions", "triggertransition", "transitionoldornew", 
			"transitionrowortable", "transitionrelname", "triggerforspec", "triggerforopteach", 
			"triggerfortype", "triggerwhen", "function_or_procedure", "triggerfuncargs", 
			"triggerfuncarg", "optconstrfromtable", "constraintattributespec", "constraintattributeElem", 
			"createeventtrigstmt", "event_trigger_when_list", "event_trigger_when_item", 
			"event_trigger_value_list", "altereventtrigstmt", "enable_trigger", "createassertionstmt", 
			"definestmt", "definition", "def_list", "def_elem", "def_arg", "old_aggr_definition", 
			"old_aggr_list", "old_aggr_elem", "enum_val_list_", "enum_val_list", 
			"alterenumstmt", "if_not_exists_", "createopclassstmt", "opclass_item_list", 
			"opclass_item", "default_", "opfamily_", "opclass_purpose", "recheck_", 
			"createopfamilystmt", "alteropfamilystmt", "opclass_drop_list", "opclass_drop", 
			"dropopclassstmt", "dropopfamilystmt", "dropownedstmt", "reassignownedstmt", 
			"dropstmt", "object_type_any_name", "object_type_name", "drop_type_name", 
			"object_type_name_on_any_name", "any_name_list_", "any_name", "attrs", 
			"type_name_list", "truncatestmt", "restart_seqs_", "commentstmt", "comment_text", 
			"seclabelstmt", "provider_", "security_label", "fetchstmt", "fetch_args", 
			"from_in", "from_in_", "grantstmt", "revokestmt", "privileges", "privilege_list", 
			"privilege", "privilege_target", "grantee_list", "grantee", "grant_grant_option_", 
			"grantrolestmt", "revokerolestmt", "grant_admin_option_", "granted_by_", 
			"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
			"defacl_privilege_target", "indexstmt", "unique_", "single_name_", "concurrently_", 
			"index_name_", "access_method_clause", "index_params", "index_elem_options", 
			"index_elem", "include_", "index_including_params", "collate_", "class_", 
			"asc_desc_", "nulls_order_", "createfunctionstmt", "or_replace_", "func_args", 
			"func_args_list", "function_with_argtypes_list", "function_with_argtypes", 
			"func_args_with_defaults", "func_args_with_defaults_list", "func_arg", 
			"arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
			"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
			"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
			"createfunc_opt_item", "func_as", "transform_type_list", "definition_", 
			"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
			"restrict_", "removefuncstmt", "removeaggrstmt", "removeoperstmt", "oper_argtypes", 
			"any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
			"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
			"dropcaststmt", "if_exists_", "createtransformstmt", "transform_element_list", 
			"droptransformstmt", "reindexstmt", "reindex_target_relation", "reindex_target_all", 
			"reindex_option_list", "altertblspcstmt", "renamestmt", "column_", "set_data_", 
			"alterobjectdependsstmt", "no_", "alterobjectschemastmt", "alteroperatorstmt", 
			"operator_def_list", "operator_def_elem", "operator_def_arg", "altertypestmt", 
			"alterownerstmt", "createpublicationstmt", "publication_for_tables_", 
			"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
			"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
			"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
			"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "instead_", "notifystmt", 
			"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "transaction_", 
			"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
			"transaction_chain_", "viewstmt", "check_option_", "loadstmt", "createdbstmt", 
			"createdb_opt_list", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
			"equal_", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", 
			"drop_option_list", "drop_option", "altercollationstmt", "altersystemstmt", 
			"createdomainstmt", "alterdomainstmt", "as_", "altertsdictionarystmt", 
			"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
			"cluster_index_specification", "vacuumstmt", "analyzestmt", "utility_option_list", 
			"vac_analyze_option_list", "analyze_keyword", "utility_option_elem", 
			"utility_option_name", "utility_option_arg", "vac_analyze_option_elem", 
			"vac_analyze_option_name", "vac_analyze_option_arg", "analyze_", "verbose_", 
			"full_", "freeze_", "name_list_", "vacuum_relation", "vacuum_relation_list", 
			"vacuum_relation_list_", "explainstmt", "explainablestmt", "explain_option_list", 
			"explain_option_elem", "explain_option_name", "explain_option_arg", "preparestmt", 
			"prep_type_clause", "preparablestmt", "executestmt", "execute_param_clause", 
			"deallocatestmt", "insertstmt", "insert_target", "insert_rest", "override_kind", 
			"insert_column_list", "insert_column_item", "on_conflict_", "conf_expr_", 
			"returning_clause", "mergestmt", "merge_insert_clause", "merge_update_clause", 
			"merge_delete_clause", "deletestmt", "using_clause", "lockstmt", "lock_", 
			"lock_type", "nowait_", "nowait_or_skip_", "updatestmt", "set_clause_list", 
			"set_clause", "set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
			"cursor_options", "hold_", "selectstmt", "select_with_parens", "select_no_parens", 
			"select_clause", "simple_select_intersect", "simple_select_pramary", 
			"with_clause", "cte_list", "common_table_expr", "materialized_", "with_clause_", 
			"into_clause", "strict_", "opttempTableName", "table_", "all_or_distinct", 
			"distinct_clause", "all_clause_", "sort_clause_", "sort_clause", "sortby_list", 
			"sortby", "select_limit", "select_limit_", "limit_clause", "offset_clause", 
			"select_limit_value", "select_offset_value", "select_fetch_first_value", 
			"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
			"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
			"grouping_sets_clause", "having_clause", "for_locking_clause", "for_locking_clause_", 
			"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
			"values_clause", "from_clause", "from_list", "table_ref", "alias_clause", 
			"func_alias_clause", "join_type", "join_qual", "relation_expr", "relation_expr_list", 
			"relation_expr_opt_alias", "tablesample_clause", "repeatable_clause_", 
			"func_table", "rowsfrom_item", "rowsfrom_list", "col_def_list_", "ordinality_", 
			"where_clause", "where_or_current_clause", "opttablefuncelementlist", 
			"tablefuncelementlist", "tablefuncelement", "xmltable", "xmltable_column_list", 
			"xmltable_column_el", "xmltable_column_option_list", "xmltable_column_option_el", 
			"xml_namespace_list", "xml_namespace_el", "typename", "opt_array_bounds", 
			"simpletypename", "consttypename", "generictype", "type_modifiers_", 
			"numeric", "float_", "bit", "constbit", "bitwithlength", "bitwithoutlength", 
			"character", "constcharacter", "character_c", "varying_", "constdatetime", 
			"constinterval", "timezone_", "interval_", "interval_second", "jsonType", 
			"escape_", "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", "a_expr_and", 
			"a_expr_between", "a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", 
			"a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
			"a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
			"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
			"func_application", "enclosed_bracket_expr", "func_expr", "func_expr_windowless", 
			"func_expr_common_subexpr", "xml_root_version", "xml_root_standalone_", 
			"xml_attributes", "xml_attribute_list", "xml_attribute_el", "document_or_content", 
			"xml_whitespace_option", "xmlexists_argument", "xml_passing_mech", "within_group_clause", 
			"filter_clause", "window_clause", "window_definition_list", "window_definition", 
			"over_clause", "window_specification", "existing_window_name_", "partition_clause_", 
			"frame_clause_", "frame_extent", "frame_bound", "window_exclusion_clause_", 
			"row", "explicit_row", "implicit_row", "sub_type", "all_op", "mathop", 
			"qual_op", "qual_all_op", "subquery_Op", "expr_list", "func_arg_list", 
			"func_arg_expr", "type_list", "array_expr", "array_expr_list", "extract_list", 
			"extract_arg", "unicode_normal_form", "overlay_list", "position_list", 
			"substr_list", "trim_list", "in_expr", "case_expr", "when_clause_list", 
			"when_clause", "case_default", "case_arg", "columnref", "indirection_el", 
			"slice_bound_", "indirection", "opt_indirection", "json_passing_clause", 
			"json_arguments", "json_argument", "json_wrapper_behavior", "json_behavior", 
			"json_behavior_type", "json_behavior_clause", "json_on_error_clause", 
			"json_value_expr", "json_format_clause", "json_quotes_clause", "json_returning_clause", 
			"json_predicate_type_constraint", "json_key_uniqueness_constraint", "json_name_and_value_list", 
			"json_name_and_value", "json_object_constructor_null_clause", "json_array_constructor_null_clause", 
			"json_value_expr_list", "json_aggregate_func", "json_array_aggregate_order_by_clause", 
			"target_list_", "target_list", "target_el", "target_el_alias", "qualified_name_list", 
			"qualified_name", "name_list", "name", "attr_name", "file_name", "func_name", 
			"aexprconst", "xconst", "bconst", "fconst", "iconst", "sconst", "anysconst", 
			"uescape_", "signediconst", "roleid", "rolespec", "role_list", "colid", 
			"type_function_name", "nonreservedword", "colLabel", "bareColLabel", 
			"unreserved_keyword", "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
			"bare_label_keyword", "any_identifier", "identifier"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
			"'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", 
			"':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, 
			null, "'JSON'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_EXISTS'", "'JSON_OBJECT'", 
			"'JSON_OBJECTAGG'", "'JSON_QUERY'", "'JSON_SCALAR'", "'JSON_SERIALIZE'", 
			"'JSON_TABLE'", "'JSON_VALUE'", "'MERGE_ACTION'", "'SYSTEM_USER'", "'ABSENT'", 
			"'ASENSITIVE'", "'ATOMIC'", "'BREATH'", "'COMPRESSION'", "'CONDITIONAL'", 
			"'DEPTH'", "'EMPTY'", "'FINALIZE'", "'INDENT'", "'KEEP'", "'KEYS'", "'NESTED'", 
			"'OMIT'", "'PARAMETER'", "'PATH'", "'PLAN'", "'QUOTES'", "'SCALAR'", 
			"'SOURCE'", "'STRING'", "'TARGET'", "'UNCONDITIONAL'", "'PERIOD'", "'FORMAT_LA'", 
			"'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", 
			"'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", 
			"'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", 
			"'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
			"'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", 
			"'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", 
			"'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", "'INTO'", 
			"'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
			"'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
			"'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
			"'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", 
			"'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", 
			"'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
			"'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", 
			"'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
			"'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
			"'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", 
			"'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", 
			"'ASSIGNMENT'", "'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
			"'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", 
			"'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", 
			"'CLUSTER'", "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
			"'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
			"'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
			"'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", 
			"'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
			"'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", 
			"'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", 
			"'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", 
			"'EXTENSION'", "'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", 
			"'FORWARD'", "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", 
			"'HEADER'", "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", 
			"'IMMUTABLE'", "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", 
			"'INDEXES'", "'INHERIT'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", 
			"'INSERT'", "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", 
			"'LANGUAGE'", "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", 
			"'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", 
			"'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", "'MINUTE'", "'MINVALUE'", 
			"'MODE'", "'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", "'NEXT'", "'NO'", 
			"'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", 
			"'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", 
			"'PARSER'", "'PARTIAL'", "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", 
			"'PRECEDING'", "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
			"'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", 
			"'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", 
			"'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", 
			"'RESET'", "'RESTART'", "'RESTRICT'", "'RETURNS'", "'REVOKE'", "'ROLE'", 
			"'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", 
			"'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", 
			"'SERVER'", "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", 
			"'STABLE'", "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
			"'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", 
			"'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
			"'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", 
			"'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
			"'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", "'VALID'", 
			"'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", 
			"'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
			"'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", 
			"'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", 
			"'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", 
			"'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
			"'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", 
			"'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", 
			"'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", 
			"'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", 
			"'XML_IS_WELL_FORMED_CONTENT'", "'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", 
			"'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", 
			"'XMLROOT'", "'XMLSERIALIZE'", "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", 
			"'EXPRESSION'", "'GENERATED'", "'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", 
			"'TRANSFORM'", "'IMPORT'", "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", 
			"'OLD'", "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
			"'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", 
			"'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", 
			"'TIES'", "'ROLLUP'", "'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", 
			"'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", 
			"'NORMALIZED'", "'WITHIN'", "'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", 
			"'NFD'", "'NFKC'", "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", 
			"'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'CONSTANT'", "'PERFORM'", 
			"'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", "'WHILE'", "'FOREACH'", 
			"'SLICE'", "'EXIT'", "'RETURN'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", 
			"'INFO'", "'NOTICE'", "'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", 
			"'OPEN'", "'FORMAT'", null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, "'\\'", "'''"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
			"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
			"LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
			"TYPECAST", "PERCENT", "PARAM", "Operator", "JSON", "JSON_ARRAY", "JSON_ARRAYAGG", 
			"JSON_EXISTS", "JSON_OBJECT", "JSON_OBJECTAGG", "JSON_QUERY", "JSON_SCALAR", 
			"JSON_SERIALIZE", "JSON_TABLE", "JSON_VALUE", "MERGE_ACTION", "SYSTEM_USER", 
			"ABSENT", "ASENSITIVE", "ATOMIC", "BREADTH", "COMPRESSION", "CONDITIONAL", 
			"DEPTH", "EMPTY_P", "FINALIZE", "INDENT", "KEEP", "KEYS", "NESTED", "OMIT", 
			"PARAMETER", "PATH", "PLAN", "QUOTES", "SCALAR", "SOURCE", "STRING_P", 
			"TARGET", "UNCONDITIONAL", "PERIOD", "FORMAT_LA", "ALL", "ANALYSE", "ANALYZE", 
			"AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", 
			"CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", 
			"CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", 
			"EXCEPT", "FALSE_P", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP_P", 
			"HAVING", "IN_P", "INITIALLY", "INTERSECT", "INTO", "LATERAL_P", "LEADING", 
			"LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL_P", "OFFSET", "ON", 
			"ONLY", "OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", "RETURNING", 
			"SELECT", "SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", 
			"TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", 
			"WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", "BINARY", "COLLATION", 
			"CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", 
			"INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", 
			"OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", "ABORT_P", 
			"ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", 
			"ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", 
			"BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", "CASCADE", 
			"CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", "CLASS", 
			"CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONFIGURATION", 
			"CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", 
			"COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", 
			"DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", 
			"DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", "DOCUMENT_P", 
			"DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", "ENCODING", "ENCRYPTED", 
			"ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
			"EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", 
			"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANTED", "HANDLER", 
			"HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
			"IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
			"INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", "INVOKER", 
			"ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
			"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "MAPPING", 
			"MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", "MINUTE_P", 
			"MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", "NEXT", "NO", 
			"NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", "OFF", "OIDS", 
			"OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", "PARTIAL", 
			"PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
			"PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
			"PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
			"REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", 
			"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
			"ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", 
			"SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", 
			"SERVER", "SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", 
			"STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", 
			"STORAGE", "STRICT_P", "STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", 
			"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", 
			"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
			"UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", 
			"VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", "VIEW", 
			"VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", 
			"YEAR_P", "YES_P", "ZONE", "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", 
			"CHARACTER", "COALESCE", "DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", 
			"GREATEST", "INOUT", "INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", 
			"NCHAR", "NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", 
			"REAL", "ROW", "SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", 
			"TREAT", "TRIM", "VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCOMMENT", 
			"XMLAGG", "XML_IS_WELL_FORMED", "XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", 
			"XPATH", "XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
			"XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", 
			"ATTACH", "DETACH", "EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", 
			"ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", "METHOD", "REFERENCING", 
			"NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", 
			"ROUTINES", "SCHEMAS", "PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", 
			"SQL_P", "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", "TIES", 
			"ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", 
			"COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", 
			"GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", 
			"NORMALIZE", "DUMP", "ERROR", "USE_VARIABLE", "USE_COLUMN", "CONSTANT", 
			"PERFORM", "GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "FOREACH", 
			"SLICE", "EXIT", "RETURN", "RAISE", "SQLSTATE", "DEBUG", "INFO", "NOTICE", 
			"WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "FORMAT", "Identifier", 
			"QuotedIdentifier", "UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", 
			"InvalidUnterminatedQuotedIdentifier", "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
			"InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
			"TickedIdentifier", "UnterminatedTickedIdentifier", "InvalidTickedIdentifier", 
			"InvalidUnterminatedTickedIdentifier", "StringConstant", "UnterminatedStringConstant", 
			"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
			"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
			"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
			"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
			"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
			"Integral", "BinaryIntegral", "OctalIntegral", "HexadecimalIntegral", 
			"NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", 
			"Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
			"ErrorCharacter", "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
			"InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
			"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
			"DollarText", "EndDollarStringConstant", "MetaCommand", "AfterEscapeStringConstantWithNewlineMode_Continued"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public StmtblockContext stmtblock() {
			return getRuleContext(StmtblockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1442);
			stmtblock();
			setState(1443);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1445);
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtmultiContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmtmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 2449958215610302467L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 104710898966331393L) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & -9223372011080506623L) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & -8824802370318728173L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 14075947867505701L) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & 550292946945L) != 0)) {
				{
				setState(1447);
				stmt();
				}
			}

			setState(1456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI) {
				{
				{
				setState(1450);
				match(SEMI);
				setState(1452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 2449958215610302467L) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 104710898966331393L) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & -9223372011080506623L) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & -8824802370318728173L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 14075947867505701L) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & 550292946945L) != 0)) {
					{
					setState(1451);
					stmt();
					}
				}

				}
				}
				setState(1458);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtContext extends ParserRuleContext {
		public AltereventtrigstmtContext altereventtrigstmt() {
			return getRuleContext(AltereventtrigstmtContext.class,0);
		}
		public AltercollationstmtContext altercollationstmt() {
			return getRuleContext(AltercollationstmtContext.class,0);
		}
		public AlterdatabasestmtContext alterdatabasestmt() {
			return getRuleContext(AlterdatabasestmtContext.class,0);
		}
		public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return getRuleContext(AlterdatabasesetstmtContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return getRuleContext(AlterdefaultprivilegesstmtContext.class,0);
		}
		public AlterdomainstmtContext alterdomainstmt() {
			return getRuleContext(AlterdomainstmtContext.class,0);
		}
		public AlterenumstmtContext alterenumstmt() {
			return getRuleContext(AlterenumstmtContext.class,0);
		}
		public AlterextensionstmtContext alterextensionstmt() {
			return getRuleContext(AlterextensionstmtContext.class,0);
		}
		public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return getRuleContext(AlterextensioncontentsstmtContext.class,0);
		}
		public AlterfdwstmtContext alterfdwstmt() {
			return getRuleContext(AlterfdwstmtContext.class,0);
		}
		public AlterforeignserverstmtContext alterforeignserverstmt() {
			return getRuleContext(AlterforeignserverstmtContext.class,0);
		}
		public AlterfunctionstmtContext alterfunctionstmt() {
			return getRuleContext(AlterfunctionstmtContext.class,0);
		}
		public AltergroupstmtContext altergroupstmt() {
			return getRuleContext(AltergroupstmtContext.class,0);
		}
		public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return getRuleContext(AlterobjectdependsstmtContext.class,0);
		}
		public AlterobjectschemastmtContext alterobjectschemastmt() {
			return getRuleContext(AlterobjectschemastmtContext.class,0);
		}
		public AlterownerstmtContext alterownerstmt() {
			return getRuleContext(AlterownerstmtContext.class,0);
		}
		public AlteroperatorstmtContext alteroperatorstmt() {
			return getRuleContext(AlteroperatorstmtContext.class,0);
		}
		public AltertypestmtContext altertypestmt() {
			return getRuleContext(AltertypestmtContext.class,0);
		}
		public AlterpolicystmtContext alterpolicystmt() {
			return getRuleContext(AlterpolicystmtContext.class,0);
		}
		public AlterseqstmtContext alterseqstmt() {
			return getRuleContext(AlterseqstmtContext.class,0);
		}
		public AltersystemstmtContext altersystemstmt() {
			return getRuleContext(AltersystemstmtContext.class,0);
		}
		public AltertablestmtContext altertablestmt() {
			return getRuleContext(AltertablestmtContext.class,0);
		}
		public AltertblspcstmtContext altertblspcstmt() {
			return getRuleContext(AltertblspcstmtContext.class,0);
		}
		public AltercompositetypestmtContext altercompositetypestmt() {
			return getRuleContext(AltercompositetypestmtContext.class,0);
		}
		public AlterpublicationstmtContext alterpublicationstmt() {
			return getRuleContext(AlterpublicationstmtContext.class,0);
		}
		public AlterrolesetstmtContext alterrolesetstmt() {
			return getRuleContext(AlterrolesetstmtContext.class,0);
		}
		public AlterrolestmtContext alterrolestmt() {
			return getRuleContext(AlterrolestmtContext.class,0);
		}
		public AltersubscriptionstmtContext altersubscriptionstmt() {
			return getRuleContext(AltersubscriptionstmtContext.class,0);
		}
		public AlterstatsstmtContext alterstatsstmt() {
			return getRuleContext(AlterstatsstmtContext.class,0);
		}
		public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return getRuleContext(AltertsconfigurationstmtContext.class,0);
		}
		public AltertsdictionarystmtContext altertsdictionarystmt() {
			return getRuleContext(AltertsdictionarystmtContext.class,0);
		}
		public AlterusermappingstmtContext alterusermappingstmt() {
			return getRuleContext(AlterusermappingstmtContext.class,0);
		}
		public AnalyzestmtContext analyzestmt() {
			return getRuleContext(AnalyzestmtContext.class,0);
		}
		public CallstmtContext callstmt() {
			return getRuleContext(CallstmtContext.class,0);
		}
		public CheckpointstmtContext checkpointstmt() {
			return getRuleContext(CheckpointstmtContext.class,0);
		}
		public CloseportalstmtContext closeportalstmt() {
			return getRuleContext(CloseportalstmtContext.class,0);
		}
		public ClusterstmtContext clusterstmt() {
			return getRuleContext(ClusterstmtContext.class,0);
		}
		public CommentstmtContext commentstmt() {
			return getRuleContext(CommentstmtContext.class,0);
		}
		public ConstraintssetstmtContext constraintssetstmt() {
			return getRuleContext(ConstraintssetstmtContext.class,0);
		}
		public CopystmtContext copystmt() {
			return getRuleContext(CopystmtContext.class,0);
		}
		public CreateamstmtContext createamstmt() {
			return getRuleContext(CreateamstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreateassertionstmtContext createassertionstmt() {
			return getRuleContext(CreateassertionstmtContext.class,0);
		}
		public CreatecaststmtContext createcaststmt() {
			return getRuleContext(CreatecaststmtContext.class,0);
		}
		public CreateconversionstmtContext createconversionstmt() {
			return getRuleContext(CreateconversionstmtContext.class,0);
		}
		public CreatedomainstmtContext createdomainstmt() {
			return getRuleContext(CreatedomainstmtContext.class,0);
		}
		public CreateextensionstmtContext createextensionstmt() {
			return getRuleContext(CreateextensionstmtContext.class,0);
		}
		public CreatefdwstmtContext createfdwstmt() {
			return getRuleContext(CreatefdwstmtContext.class,0);
		}
		public CreateforeignserverstmtContext createforeignserverstmt() {
			return getRuleContext(CreateforeignserverstmtContext.class,0);
		}
		public CreateforeigntablestmtContext createforeigntablestmt() {
			return getRuleContext(CreateforeigntablestmtContext.class,0);
		}
		public CreatefunctionstmtContext createfunctionstmt() {
			return getRuleContext(CreatefunctionstmtContext.class,0);
		}
		public CreategroupstmtContext creategroupstmt() {
			return getRuleContext(CreategroupstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public CreateopclassstmtContext createopclassstmt() {
			return getRuleContext(CreateopclassstmtContext.class,0);
		}
		public CreateopfamilystmtContext createopfamilystmt() {
			return getRuleContext(CreateopfamilystmtContext.class,0);
		}
		public CreatepublicationstmtContext createpublicationstmt() {
			return getRuleContext(CreatepublicationstmtContext.class,0);
		}
		public AlteropfamilystmtContext alteropfamilystmt() {
			return getRuleContext(AlteropfamilystmtContext.class,0);
		}
		public CreatepolicystmtContext createpolicystmt() {
			return getRuleContext(CreatepolicystmtContext.class,0);
		}
		public CreateplangstmtContext createplangstmt() {
			return getRuleContext(CreateplangstmtContext.class,0);
		}
		public CreateschemastmtContext createschemastmt() {
			return getRuleContext(CreateschemastmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return getRuleContext(CreatesubscriptionstmtContext.class,0);
		}
		public CreatestatsstmtContext createstatsstmt() {
			return getRuleContext(CreatestatsstmtContext.class,0);
		}
		public CreatetablespacestmtContext createtablespacestmt() {
			return getRuleContext(CreatetablespacestmtContext.class,0);
		}
		public CreatetransformstmtContext createtransformstmt() {
			return getRuleContext(CreatetransformstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public CreateeventtrigstmtContext createeventtrigstmt() {
			return getRuleContext(CreateeventtrigstmtContext.class,0);
		}
		public CreaterolestmtContext createrolestmt() {
			return getRuleContext(CreaterolestmtContext.class,0);
		}
		public CreateuserstmtContext createuserstmt() {
			return getRuleContext(CreateuserstmtContext.class,0);
		}
		public CreateusermappingstmtContext createusermappingstmt() {
			return getRuleContext(CreateusermappingstmtContext.class,0);
		}
		public CreatedbstmtContext createdbstmt() {
			return getRuleContext(CreatedbstmtContext.class,0);
		}
		public DeallocatestmtContext deallocatestmt() {
			return getRuleContext(DeallocatestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public DefinestmtContext definestmt() {
			return getRuleContext(DefinestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DiscardstmtContext discardstmt() {
			return getRuleContext(DiscardstmtContext.class,0);
		}
		public DostmtContext dostmt() {
			return getRuleContext(DostmtContext.class,0);
		}
		public DropcaststmtContext dropcaststmt() {
			return getRuleContext(DropcaststmtContext.class,0);
		}
		public DropopclassstmtContext dropopclassstmt() {
			return getRuleContext(DropopclassstmtContext.class,0);
		}
		public DropopfamilystmtContext dropopfamilystmt() {
			return getRuleContext(DropopfamilystmtContext.class,0);
		}
		public DropownedstmtContext dropownedstmt() {
			return getRuleContext(DropownedstmtContext.class,0);
		}
		public DropstmtContext dropstmt() {
			return getRuleContext(DropstmtContext.class,0);
		}
		public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return getRuleContext(DropsubscriptionstmtContext.class,0);
		}
		public DroptablespacestmtContext droptablespacestmt() {
			return getRuleContext(DroptablespacestmtContext.class,0);
		}
		public DroptransformstmtContext droptransformstmt() {
			return getRuleContext(DroptransformstmtContext.class,0);
		}
		public DroprolestmtContext droprolestmt() {
			return getRuleContext(DroprolestmtContext.class,0);
		}
		public DropusermappingstmtContext dropusermappingstmt() {
			return getRuleContext(DropusermappingstmtContext.class,0);
		}
		public DropdbstmtContext dropdbstmt() {
			return getRuleContext(DropdbstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public FetchstmtContext fetchstmt() {
			return getRuleContext(FetchstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public GrantrolestmtContext grantrolestmt() {
			return getRuleContext(GrantrolestmtContext.class,0);
		}
		public ImportforeignschemastmtContext importforeignschemastmt() {
			return getRuleContext(ImportforeignschemastmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public MergestmtContext mergestmt() {
			return getRuleContext(MergestmtContext.class,0);
		}
		public ListenstmtContext listenstmt() {
			return getRuleContext(ListenstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public LoadstmtContext loadstmt() {
			return getRuleContext(LoadstmtContext.class,0);
		}
		public LockstmtContext lockstmt() {
			return getRuleContext(LockstmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public PreparestmtContext preparestmt() {
			return getRuleContext(PreparestmtContext.class,0);
		}
		public ReassignownedstmtContext reassignownedstmt() {
			return getRuleContext(ReassignownedstmtContext.class,0);
		}
		public ReindexstmtContext reindexstmt() {
			return getRuleContext(ReindexstmtContext.class,0);
		}
		public RemoveaggrstmtContext removeaggrstmt() {
			return getRuleContext(RemoveaggrstmtContext.class,0);
		}
		public RemovefuncstmtContext removefuncstmt() {
			return getRuleContext(RemovefuncstmtContext.class,0);
		}
		public RemoveoperstmtContext removeoperstmt() {
			return getRuleContext(RemoveoperstmtContext.class,0);
		}
		public RenamestmtContext renamestmt() {
			return getRuleContext(RenamestmtContext.class,0);
		}
		public RevokestmtContext revokestmt() {
			return getRuleContext(RevokestmtContext.class,0);
		}
		public RevokerolestmtContext revokerolestmt() {
			return getRuleContext(RevokerolestmtContext.class,0);
		}
		public RulestmtContext rulestmt() {
			return getRuleContext(RulestmtContext.class,0);
		}
		public SeclabelstmtContext seclabelstmt() {
			return getRuleContext(SeclabelstmtContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TransactionstmtContext transactionstmt() {
			return getRuleContext(TransactionstmtContext.class,0);
		}
		public TruncatestmtContext truncatestmt() {
			return getRuleContext(TruncatestmtContext.class,0);
		}
		public UnlistenstmtContext unlistenstmt() {
			return getRuleContext(UnlistenstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public VacuumstmtContext vacuumstmt() {
			return getRuleContext(VacuumstmtContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public VariablesetstmtContext variablesetstmt() {
			return getRuleContext(VariablesetstmtContext.class,0);
		}
		public VariableshowstmtContext variableshowstmt() {
			return getRuleContext(VariableshowstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_stmt);
		try {
			setState(1583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1459);
				altereventtrigstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1460);
				altercollationstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1461);
				alterdatabasestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1462);
				alterdatabasesetstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1463);
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1464);
				alterdomainstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1465);
				alterenumstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1466);
				alterextensionstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1467);
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1468);
				alterfdwstmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1469);
				alterforeignserverstmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1470);
				alterfunctionstmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1471);
				altergroupstmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1472);
				alterobjectdependsstmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1473);
				alterobjectschemastmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1474);
				alterownerstmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1475);
				alteroperatorstmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1476);
				altertypestmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1477);
				alterpolicystmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1478);
				alterseqstmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1479);
				altersystemstmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1480);
				altertablestmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1481);
				altertblspcstmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1482);
				altercompositetypestmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1483);
				alterpublicationstmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1484);
				alterrolesetstmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1485);
				alterrolestmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1486);
				altersubscriptionstmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1487);
				alterstatsstmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1488);
				altertsconfigurationstmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1489);
				altertsdictionarystmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1490);
				alterusermappingstmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1491);
				analyzestmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1492);
				callstmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1493);
				checkpointstmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1494);
				closeportalstmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1495);
				clusterstmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1496);
				commentstmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1497);
				constraintssetstmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1498);
				copystmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1499);
				createamstmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1500);
				createasstmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1501);
				createassertionstmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1502);
				createcaststmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1503);
				createconversionstmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1504);
				createdomainstmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1505);
				createextensionstmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1506);
				createfdwstmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1507);
				createforeignserverstmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1508);
				createforeigntablestmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1509);
				createfunctionstmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1510);
				creategroupstmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1511);
				creatematviewstmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1512);
				createopclassstmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1513);
				createopfamilystmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1514);
				createpublicationstmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1515);
				alteropfamilystmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1516);
				createpolicystmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1517);
				createplangstmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1518);
				createschemastmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1519);
				createseqstmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1520);
				createstmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1521);
				createsubscriptionstmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1522);
				createstatsstmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1523);
				createtablespacestmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1524);
				createtransformstmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1525);
				createtrigstmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1526);
				createeventtrigstmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1527);
				createrolestmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1528);
				createuserstmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1529);
				createusermappingstmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1530);
				createdbstmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1531);
				deallocatestmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1532);
				declarecursorstmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1533);
				definestmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1534);
				deletestmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1535);
				discardstmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1536);
				dostmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1537);
				dropcaststmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1538);
				dropopclassstmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1539);
				dropopfamilystmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1540);
				dropownedstmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1541);
				dropstmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1542);
				dropsubscriptionstmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1543);
				droptablespacestmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1544);
				droptransformstmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1545);
				droprolestmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1546);
				dropusermappingstmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1547);
				dropdbstmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1548);
				executestmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1549);
				explainstmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1550);
				fetchstmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1551);
				grantstmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1552);
				grantrolestmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1553);
				importforeignschemastmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1554);
				indexstmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1555);
				insertstmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1556);
				mergestmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1557);
				listenstmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1558);
				refreshmatviewstmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1559);
				loadstmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1560);
				lockstmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1561);
				notifystmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1562);
				preparestmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1563);
				reassignownedstmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1564);
				reindexstmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1565);
				removeaggrstmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1566);
				removefuncstmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1567);
				removeoperstmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1568);
				renamestmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1569);
				revokestmt();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1570);
				revokerolestmt();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1571);
				rulestmt();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1572);
				seclabelstmt();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1573);
				selectstmt();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1574);
				transactionstmt();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1575);
				truncatestmt();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1576);
				unlistenstmt();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1577);
				updatestmt();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1578);
				vacuumstmt();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1579);
				variableresetstmt();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1580);
				variablesetstmt();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1581);
				variableshowstmt();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1582);
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallstmtContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callstmt; }
	}

	public final CallstmtContext callstmt() throws RecognitionException {
		CallstmtContext _localctx = new CallstmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_callstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1585);
			match(CALL);
			setState(1586);
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreaterolestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createrolestmt; }
	}

	public final CreaterolestmtContext createrolestmt() throws RecognitionException {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_createrolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588);
			match(CREATE);
			setState(1589);
			match(ROLE);
			setState(1590);
			roleid();
			setState(1592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1591);
				with_();
				}
			}

			setState(1594);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public With_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_; }
	}

	public final With_Context with_() throws RecognitionException {
		With_Context _localctx = new With_Context(_ctx, getState());
		enterRule(_localctx, 12, RULE_with_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1596);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptrolelistContext extends ParserRuleContext {
		public List<CreateoptroleelemContext> createoptroleelem() {
			return getRuleContexts(CreateoptroleelemContext.class);
		}
		public CreateoptroleelemContext createoptroleelem(int i) {
			return getRuleContext(CreateoptroleelemContext.class,i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optrolelist; }
	}

	public final OptrolelistContext optrolelist() throws RecognitionException {
		OptrolelistContext _localctx = new OptrolelistContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_optrolelist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IN_P || _la==USER || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2305843010287435777L) != 0) || _la==INHERIT || _la==PASSWORD || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & 9077569072660481L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0)) {
				{
				{
				setState(1598);
				createoptroleelem();
				}
				}
				setState(1603);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteroptrolelistContext extends ParserRuleContext {
		public List<AlteroptroleelemContext> alteroptroleelem() {
			return getRuleContexts(AlteroptroleelemContext.class);
		}
		public AlteroptroleelemContext alteroptroleelem(int i) {
			return getRuleContext(AlteroptroleelemContext.class,i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptrolelist; }
	}

	public final AlteroptrolelistContext alteroptrolelist() throws RecognitionException {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alteroptrolelist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER || _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==UNENCRYPTED || _la==VALID || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0)) {
				{
				{
				setState(1604);
				alteroptroleelem();
				}
				}
				setState(1609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteroptroleelemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptroleelem; }
	}

	public final AlteroptroleelemContext alteroptroleelem() throws RecognitionException {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alteroptroleelem);
		int _la;
		try {
			setState(1628);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1610);
				match(PASSWORD);
				setState(1613);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(1611);
					sconst();
					}
					break;
				case NULL_P:
					{
					setState(1612);
					match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1615);
				_la = _input.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1616);
				match(PASSWORD);
				setState(1617);
				sconst();
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1618);
				match(INHERIT);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(1619);
				match(CONNECTION);
				setState(1620);
				match(LIMIT);
				setState(1621);
				signediconst();
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 5);
				{
				setState(1622);
				match(VALID);
				setState(1623);
				match(UNTIL);
				setState(1624);
				sconst();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1625);
				match(USER);
				setState(1626);
				role_list();
				}
				break;
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 7);
				{
				setState(1627);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateoptroleelemContext extends ParserRuleContext {
		public AlteroptroleelemContext alteroptroleelem() {
			return getRuleContext(AlteroptroleelemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createoptroleelem; }
	}

	public final CreateoptroleelemContext createoptroleelem() throws RecognitionException {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_createoptroleelem);
		int _la;
		try {
			setState(1640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
			case CONNECTION:
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case UNENCRYPTED:
			case VALID:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1630);
				alteroptroleelem();
				}
				break;
			case SYSID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1631);
				match(SYSID);
				setState(1632);
				iconst();
				}
				break;
			case ADMIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1633);
				match(ADMIN);
				setState(1634);
				role_list();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1635);
				match(ROLE);
				setState(1636);
				role_list();
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(1637);
				match(IN_P);
				setState(1638);
				_la = _input.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1639);
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateuserstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createuserstmt; }
	}

	public final CreateuserstmtContext createuserstmt() throws RecognitionException {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_createuserstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1642);
			match(CREATE);
			setState(1643);
			match(USER);
			setState(1644);
			roleid();
			setState(1646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1645);
				with_();
				}
			}

			setState(1648);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterrolestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public AlteroptrolelistContext alteroptrolelist() {
			return getRuleContext(AlteroptrolelistContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolestmt; }
	}

	public final AlterrolestmtContext alterrolestmt() throws RecognitionException {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterrolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650);
			match(ALTER);
			setState(1651);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1652);
			rolespec();
			setState(1654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1653);
				with_();
				}
			}

			setState(1656);
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_database_Context extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public In_database_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_database_; }
	}

	public final In_database_Context in_database_() throws RecognitionException {
		In_database_Context _localctx = new In_database_Context(_ctx, getState());
		enterRule(_localctx, 26, RULE_in_database_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1658);
			match(IN_P);
			setState(1659);
			match(DATABASE);
			setState(1660);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterrolesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public In_database_Context in_database_() {
			return getRuleContext(In_database_Context.class,0);
		}
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolesetstmt; }
	}

	public final AlterrolesetstmtContext alterrolesetstmt() throws RecognitionException {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterrolesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662);
			match(ALTER);
			setState(1663);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(1664);
				match(ALL);
				}
			}

			setState(1667);
			rolespec();
			setState(1669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN_P) {
				{
				setState(1668);
				in_database_();
				}
			}

			setState(1671);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DroprolestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droprolestmt; }
	}

	public final DroprolestmtContext droprolestmt() throws RecognitionException {
		DroprolestmtContext _localctx = new DroprolestmtContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_droprolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			match(DROP);
			setState(1674);
			_la = _input.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1675);
				match(IF_P);
				setState(1676);
				match(EXISTS);
				}
				break;
			}
			setState(1679);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreategroupstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creategroupstmt; }
	}

	public final CreategroupstmtContext creategroupstmt() throws RecognitionException {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_creategroupstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1681);
			match(CREATE);
			setState(1682);
			match(GROUP_P);
			setState(1683);
			roleid();
			setState(1685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1684);
				with_();
				}
			}

			setState(1687);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltergroupstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altergroupstmt; }
	}

	public final AltergroupstmtContext altergroupstmt() throws RecognitionException {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_altergroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1689);
			match(ALTER);
			setState(1690);
			match(GROUP_P);
			setState(1691);
			rolespec();
			setState(1692);
			add_drop();
			setState(1693);
			match(USER);
			setState(1694);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1696);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateschemastmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public OptschemaeltlistContext optschemaeltlist() {
			return getRuleContext(OptschemaeltlistContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public OptschemanameContext optschemaname() {
			return getRuleContext(OptschemanameContext.class,0);
		}
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createschemastmt; }
	}

	public final CreateschemastmtContext createschemastmt() throws RecognitionException {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createschemastmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			match(CREATE);
			setState(1699);
			match(SCHEMA);
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(1700);
				match(IF_P);
				setState(1701);
				match(NOT);
				setState(1702);
				match(EXISTS);
				}
				break;
			}
			setState(1711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(1705);
					optschemaname();
					}
				}

				setState(1708);
				match(AUTHORIZATION);
				setState(1709);
				rolespec();
				}
				break;
			case 2:
				{
				setState(1710);
				colid();
				}
				break;
			}
			setState(1713);
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptschemanameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaname; }
	}

	public final OptschemanameContext optschemaname() throws RecognitionException {
		OptschemanameContext _localctx = new OptschemanameContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_optschemaname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1715);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptschemaeltlistContext extends ParserRuleContext {
		public List<Schema_stmtContext> schema_stmt() {
			return getRuleContexts(Schema_stmtContext.class);
		}
		public Schema_stmtContext schema_stmt(int i) {
			return getRuleContext(Schema_stmtContext.class,i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaeltlist; }
	}

	public final OptschemaeltlistContext optschemaeltlist() throws RecognitionException {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_optschemaeltlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CREATE || _la==GRANT) {
				{
				{
				setState(1717);
				schema_stmt();
				}
				}
				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_stmtContext extends ParserRuleContext {
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_schema_stmt);
		try {
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1723);
				createstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1724);
				indexstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1725);
				createseqstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1726);
				createtrigstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1727);
				grantstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1728);
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariablesetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variablesetstmt; }
	}

	public final VariablesetstmtContext variablesetstmt() throws RecognitionException {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_variablesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			match(SET);
			setState(1733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1732);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1735);
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_set_rest);
		try {
			setState(1745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1737);
				match(TRANSACTION);
				setState(1738);
				transaction_mode_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1739);
				match(SESSION);
				setState(1740);
				match(CHARACTERISTICS);
				setState(1741);
				match(AS);
				setState(1742);
				match(TRANSACTION);
				setState(1743);
				transaction_mode_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1744);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_setContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_set; }
	}

	public final Generic_setContext generic_set() throws RecognitionException {
		Generic_setContext _localctx = new Generic_setContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_generic_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1747);
			var_name();
			setState(1748);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS:
			case MINUS:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				setState(1749);
				var_list();
				}
				break;
			case DEFAULT:
				{
				setState(1750);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_rest_moreContext extends ParserRuleContext {
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public Encoding_Context encoding_() {
			return getRuleContext(Encoding_Context.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_rest_more);
		int _la;
		try {
			setState(1780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1753);
				generic_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1754);
				var_name();
				setState(1755);
				match(FROM);
				setState(1756);
				match(CURRENT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1758);
				match(TIME);
				setState(1759);
				match(ZONE);
				setState(1760);
				zone_value();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1761);
				match(CATALOG);
				setState(1762);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1763);
				match(SCHEMA);
				setState(1764);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1765);
				match(NAMES);
				setState(1767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & 134217749L) != 0)) {
					{
					setState(1766);
					encoding_();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1769);
				match(ROLE);
				setState(1770);
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1771);
				match(SESSION);
				setState(1772);
				match(AUTHORIZATION);
				setState(1773);
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1774);
				match(XML_P);
				setState(1775);
				match(OPTION);
				setState(1776);
				document_or_content();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1777);
				match(TRANSACTION);
				setState(1778);
				match(SNAPSHOT);
				setState(1779);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_nameContext extends ParserRuleContext {
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
	}

	public final Var_nameContext var_name() throws RecognitionException {
		Var_nameContext _localctx = new Var_nameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_var_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1782);
			colid();
			setState(1787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(1783);
				match(DOT);
				setState(1784);
				colid();
				}
				}
				setState(1789);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_listContext extends ParserRuleContext {
		public List<Var_valueContext> var_value() {
			return getRuleContexts(Var_valueContext.class);
		}
		public Var_valueContext var_value(int i) {
			return getRuleContext(Var_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
	}

	public final Var_listContext var_list() throws RecognitionException {
		Var_listContext _localctx = new Var_listContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_var_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			var_value();
			setState(1795);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1791);
				match(COMMA);
				setState(1792);
				var_value();
				}
				}
				setState(1797);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_valueContext extends ParserRuleContext {
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_var_value);
		try {
			setState(1800);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(1798);
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(1799);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_iso_level);
		int _la;
		try {
			setState(1807);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(1802);
				match(READ);
				setState(1803);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REPEATABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1804);
				match(REPEATABLE);
				setState(1805);
				match(READ);
				}
				break;
			case SERIALIZABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1806);
				match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Boolean_or_string_Context extends ParserRuleContext {
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Boolean_or_string_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_or_string_; }
	}

	public final Boolean_or_string_Context boolean_or_string_() throws RecognitionException {
		Boolean_or_string_Context _localctx = new Boolean_or_string_Context(_ctx, getState());
		enterRule(_localctx, 62, RULE_boolean_or_string_);
		try {
			setState(1813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(1809);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1810);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(1811);
				match(ON);
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(1812);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Zone_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Interval_Context interval_() {
			return getRuleContext(Interval_Context.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_zone_value);
		int _la;
		try {
			setState(1831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1815);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1816);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1817);
				constinterval();
				setState(1818);
				sconst();
				setState(1820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DAY_P || _la==HOUR_P || _la==MINUTE_P || _la==MONTH_P || _la==SECOND_P || _la==YEAR_P) {
					{
					setState(1819);
					interval_();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1822);
				constinterval();
				setState(1823);
				match(OPEN_PAREN);
				setState(1824);
				iconst();
				setState(1825);
				match(CLOSE_PAREN);
				setState(1826);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1828);
				numericonly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1829);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1830);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Encoding_Context extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Encoding_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding_; }
	}

	public final Encoding_Context encoding_() throws RecognitionException {
		Encoding_Context _localctx = new Encoding_Context(_ctx, getState());
		enterRule(_localctx, 66, RULE_encoding_);
		try {
			setState(1835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(1833);
				sconst();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1834);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nonreservedword_or_sconstContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword_or_sconst; }
	}

	public final Nonreservedword_or_sconstContext nonreservedword_or_sconst() throws RecognitionException {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_nonreservedword_or_sconst);
		try {
			setState(1839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1837);
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(1838);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableresetstmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Reset_restContext reset_rest() {
			return getRuleContext(Reset_restContext.class,0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableresetstmt; }
	}

	public final VariableresetstmtContext variableresetstmt() throws RecognitionException {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_variableresetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1841);
			match(RESET);
			setState(1842);
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reset_restContext extends ParserRuleContext {
		public Generic_resetContext generic_reset() {
			return getRuleContext(Generic_resetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_rest; }
	}

	public final Reset_restContext reset_rest() throws RecognitionException {
		Reset_restContext _localctx = new Reset_restContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_reset_rest);
		try {
			setState(1852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1844);
				generic_reset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1845);
				match(TIME);
				setState(1846);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1847);
				match(TRANSACTION);
				setState(1848);
				match(ISOLATION);
				setState(1849);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1850);
				match(SESSION);
				setState(1851);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_resetContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_reset; }
	}

	public final Generic_resetContext generic_reset() throws RecognitionException {
		Generic_resetContext _localctx = new Generic_resetContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_generic_reset);
		try {
			setState(1856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1854);
				var_name();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1855);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setresetclause; }
	}

	public final SetresetclauseContext setresetclause() throws RecognitionException {
		SetresetclauseContext _localctx = new SetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_setresetclause);
		try {
			setState(1861);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1858);
				match(SET);
				setState(1859);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1860);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionsetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetresetclause; }
	}

	public final FunctionsetresetclauseContext functionsetresetclause() throws RecognitionException {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_functionsetresetclause);
		try {
			setState(1866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1863);
				match(SET);
				setState(1864);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1865);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableshowstmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableshowstmt; }
	}

	public final VariableshowstmtContext variableshowstmt() throws RecognitionException {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_variableshowstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1868);
			match(SHOW);
			setState(1878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(1869);
				var_name();
				}
				break;
			case 2:
				{
				setState(1870);
				match(TIME);
				setState(1871);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(1872);
				match(TRANSACTION);
				setState(1873);
				match(ISOLATION);
				setState(1874);
				match(LEVEL);
				}
				break;
			case 4:
				{
				setState(1875);
				match(SESSION);
				setState(1876);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				setState(1877);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintssetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintssetstmt; }
	}

	public final ConstraintssetstmtContext constraintssetstmt() throws RecognitionException {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_constraintssetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			match(SET);
			setState(1881);
			match(CONSTRAINTS);
			setState(1882);
			constraints_set_list();
			setState(1883);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_constraints_set_list);
		try {
			setState(1887);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1885);
				match(ALL);
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(1886);
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1889);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckpointstmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpointstmt; }
	}

	public final CheckpointstmtContext checkpointstmt() throws RecognitionException {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_checkpointstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1891);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiscardstmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardstmt; }
	}

	public final DiscardstmtContext discardstmt() throws RecognitionException {
		DiscardstmtContext _localctx = new DiscardstmtContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_discardstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			match(DISCARD);
			setState(1894);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertablestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Partition_cmdContext partition_cmd() {
			return getRuleContext(Partition_cmdContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLParser.TABLESPACE, i);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Nowait_Context nowait_() {
			return getRuleContext(Nowait_Context.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext index_partition_cmd() {
			return getRuleContext(Index_partition_cmdContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertablestmt; }
	}

	public final AltertablestmtContext altertablestmt() throws RecognitionException {
		AltertablestmtContext _localctx = new AltertablestmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_altertablestmt);
		int _la;
		try {
			setState(2008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1896);
				match(ALTER);
				setState(1897);
				match(TABLE);
				setState(1900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1898);
					match(IF_P);
					setState(1899);
					match(EXISTS);
					}
					break;
				}
				setState(1902);
				relation_expr();
				setState(1905);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(1903);
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					setState(1904);
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1907);
				match(ALTER);
				setState(1908);
				match(TABLE);
				setState(1909);
				match(ALL);
				setState(1910);
				match(IN_P);
				setState(1911);
				match(TABLESPACE);
				setState(1912);
				name();
				setState(1916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1913);
					match(OWNED);
					setState(1914);
					match(BY);
					setState(1915);
					role_list();
					}
				}

				setState(1918);
				match(SET);
				setState(1919);
				match(TABLESPACE);
				setState(1920);
				name();
				setState(1922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1921);
					nowait_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1924);
				match(ALTER);
				setState(1925);
				match(INDEX);
				setState(1928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1926);
					match(IF_P);
					setState(1927);
					match(EXISTS);
					}
					break;
				}
				setState(1930);
				qualified_name();
				setState(1933);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(1931);
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					setState(1932);
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1935);
				match(ALTER);
				setState(1936);
				match(INDEX);
				setState(1937);
				match(ALL);
				setState(1938);
				match(IN_P);
				setState(1939);
				match(TABLESPACE);
				setState(1940);
				name();
				setState(1944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1941);
					match(OWNED);
					setState(1942);
					match(BY);
					setState(1943);
					role_list();
					}
				}

				setState(1946);
				match(SET);
				setState(1947);
				match(TABLESPACE);
				setState(1948);
				name();
				setState(1950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1949);
					nowait_();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1952);
				match(ALTER);
				setState(1953);
				match(SEQUENCE);
				setState(1956);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1954);
					match(IF_P);
					setState(1955);
					match(EXISTS);
					}
					break;
				}
				setState(1958);
				qualified_name();
				setState(1959);
				alter_table_cmds();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1961);
				match(ALTER);
				setState(1962);
				match(VIEW);
				setState(1965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1963);
					match(IF_P);
					setState(1964);
					match(EXISTS);
					}
					break;
				}
				setState(1967);
				qualified_name();
				setState(1968);
				alter_table_cmds();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1970);
				match(ALTER);
				setState(1971);
				match(MATERIALIZED);
				setState(1972);
				match(VIEW);
				setState(1975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(1973);
					match(IF_P);
					setState(1974);
					match(EXISTS);
					}
					break;
				}
				setState(1977);
				qualified_name();
				setState(1978);
				alter_table_cmds();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1980);
				match(ALTER);
				setState(1981);
				match(MATERIALIZED);
				setState(1982);
				match(VIEW);
				setState(1983);
				match(ALL);
				setState(1984);
				match(IN_P);
				setState(1985);
				match(TABLESPACE);
				setState(1986);
				name();
				setState(1990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1987);
					match(OWNED);
					setState(1988);
					match(BY);
					setState(1989);
					role_list();
					}
				}

				setState(1992);
				match(SET);
				setState(1993);
				match(TABLESPACE);
				setState(1994);
				name();
				setState(1996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1995);
					nowait_();
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1998);
				match(ALTER);
				setState(1999);
				match(FOREIGN);
				setState(2000);
				match(TABLE);
				setState(2003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(2001);
					match(IF_P);
					setState(2002);
					match(EXISTS);
					}
					break;
				}
				setState(2005);
				relation_expr();
				setState(2006);
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public List<Alter_table_cmdContext> alter_table_cmd() {
			return getRuleContexts(Alter_table_cmdContext.class);
		}
		public Alter_table_cmdContext alter_table_cmd(int i) {
			return getRuleContext(Alter_table_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_table_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2010);
			alter_table_cmd();
			setState(2015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2011);
				match(COMMA);
				setState(2012);
				alter_table_cmd();
				}
				}
				setState(2017);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_cmd; }
	}

	public final Partition_cmdContext partition_cmd() throws RecognitionException {
		Partition_cmdContext _localctx = new Partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partition_cmd);
		try {
			setState(2026);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2018);
				match(ATTACH);
				setState(2019);
				match(PARTITION);
				setState(2020);
				qualified_name();
				setState(2021);
				partitionboundspec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2023);
				match(DETACH);
				setState(2024);
				match(PARTITION);
				setState(2025);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partition_cmd; }
	}

	public final Index_partition_cmdContext index_partition_cmd() throws RecognitionException {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_index_partition_cmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2028);
			match(ATTACH);
			setState(2029);
			match(PARTITION);
			setState(2030);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public Column_Context column_() {
			return getRuleContext(Column_Context.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return getRuleContext(Alter_identity_column_option_listContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Set_data_Context set_data_() {
			return getRuleContext(Set_data_Context.class,0);
		}
		public Collate_clause_Context collate_clause_() {
			return getRuleContext(Collate_clause_Context.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Replica_identityContext replica_identity() {
			return getRuleContext(Replica_identityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_table_cmd);
		int _la;
		try {
			setState(2330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2032);
				match(ADD_P);
				setState(2033);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2034);
				match(ADD_P);
				setState(2035);
				match(IF_P);
				setState(2036);
				match(NOT);
				setState(2037);
				match(EXISTS);
				setState(2038);
				columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2039);
				match(ADD_P);
				setState(2040);
				match(COLUMN);
				setState(2041);
				columnDef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2042);
				match(ADD_P);
				setState(2043);
				match(COLUMN);
				setState(2044);
				match(IF_P);
				setState(2045);
				match(NOT);
				setState(2046);
				match(EXISTS);
				setState(2047);
				columnDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2048);
				match(ALTER);
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2049);
					column_();
					}
				}

				setState(2052);
				colid();
				setState(2053);
				alter_column_default();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2055);
				match(ALTER);
				setState(2057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2056);
					column_();
					}
				}

				setState(2059);
				colid();
				setState(2060);
				match(DROP);
				setState(2061);
				match(NOT);
				setState(2062);
				match(NULL_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2064);
				match(ALTER);
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2065);
					column_();
					}
				}

				setState(2068);
				colid();
				setState(2069);
				match(SET);
				setState(2070);
				match(NOT);
				setState(2071);
				match(NULL_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2073);
				match(ALTER);
				setState(2075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2074);
					column_();
					}
				}

				setState(2077);
				colid();
				setState(2078);
				match(DROP);
				setState(2079);
				match(EXPRESSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2081);
				match(ALTER);
				setState(2083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2082);
					column_();
					}
				}

				setState(2085);
				colid();
				setState(2086);
				match(DROP);
				setState(2087);
				match(EXPRESSION);
				setState(2088);
				match(IF_P);
				setState(2089);
				match(EXISTS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2091);
				match(ALTER);
				setState(2093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2092);
					column_();
					}
				}

				setState(2095);
				colid();
				setState(2096);
				match(SET);
				setState(2097);
				match(STATISTICS);
				setState(2098);
				signediconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2100);
				match(ALTER);
				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2101);
					column_();
					}
				}

				setState(2104);
				iconst();
				setState(2105);
				match(SET);
				setState(2106);
				match(STATISTICS);
				setState(2107);
				signediconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2109);
				match(ALTER);
				setState(2111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2110);
					column_();
					}
				}

				setState(2113);
				colid();
				setState(2114);
				match(SET);
				setState(2115);
				reloptions();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2117);
				match(ALTER);
				setState(2119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2118);
					column_();
					}
				}

				setState(2121);
				colid();
				setState(2122);
				match(RESET);
				setState(2123);
				reloptions();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2125);
				match(ALTER);
				setState(2127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2126);
					column_();
					}
				}

				setState(2129);
				colid();
				setState(2130);
				match(SET);
				setState(2131);
				match(STORAGE);
				setState(2132);
				colid();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2134);
				match(ALTER);
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2135);
					column_();
					}
				}

				setState(2138);
				colid();
				setState(2139);
				match(ADD_P);
				setState(2140);
				match(GENERATED);
				setState(2141);
				generated_when();
				setState(2142);
				match(AS);
				setState(2143);
				match(IDENTITY_P);
				setState(2145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2144);
					optparenthesizedseqoptlist();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2147);
				match(ALTER);
				setState(2149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2148);
					column_();
					}
				}

				setState(2151);
				colid();
				setState(2152);
				alter_identity_column_option_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2154);
				match(ALTER);
				setState(2156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2155);
					column_();
					}
				}

				setState(2158);
				colid();
				setState(2159);
				match(DROP);
				setState(2160);
				match(IDENTITY_P);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2162);
				match(ALTER);
				setState(2164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2163);
					column_();
					}
				}

				setState(2166);
				colid();
				setState(2167);
				match(DROP);
				setState(2168);
				match(IDENTITY_P);
				setState(2169);
				match(IF_P);
				setState(2170);
				match(EXISTS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2172);
				match(DROP);
				setState(2174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2173);
					column_();
					}
				}

				setState(2176);
				match(IF_P);
				setState(2177);
				match(EXISTS);
				setState(2178);
				colid();
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2179);
					drop_behavior_();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2182);
				match(DROP);
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2183);
					column_();
					}
				}

				setState(2186);
				colid();
				setState(2188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2187);
					drop_behavior_();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2190);
				match(ALTER);
				setState(2192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2191);
					column_();
					}
				}

				setState(2194);
				colid();
				setState(2196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2195);
					set_data_();
					}
				}

				setState(2198);
				match(TYPE_P);
				setState(2199);
				typename();
				setState(2201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2200);
					collate_clause_();
					}
				}

				setState(2204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2203);
					alter_using();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2206);
				match(ALTER);
				setState(2208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2207);
					column_();
					}
				}

				setState(2210);
				colid();
				setState(2211);
				alter_generic_options();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2213);
				match(ADD_P);
				setState(2214);
				tableconstraint();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2215);
				match(ALTER);
				setState(2216);
				match(CONSTRAINT);
				setState(2217);
				name();
				setState(2218);
				constraintattributespec();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2220);
				match(VALIDATE);
				setState(2221);
				match(CONSTRAINT);
				setState(2222);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2223);
				match(DROP);
				setState(2224);
				match(CONSTRAINT);
				setState(2225);
				match(IF_P);
				setState(2226);
				match(EXISTS);
				setState(2227);
				name();
				setState(2229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2228);
					drop_behavior_();
					}
				}

				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2231);
				match(DROP);
				setState(2232);
				match(CONSTRAINT);
				setState(2233);
				name();
				setState(2235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2234);
					drop_behavior_();
					}
				}

				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2237);
				match(SET);
				setState(2238);
				match(WITHOUT);
				setState(2239);
				match(OIDS);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2240);
				match(CLUSTER);
				setState(2241);
				match(ON);
				setState(2242);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2243);
				match(SET);
				setState(2244);
				match(WITHOUT);
				setState(2245);
				match(CLUSTER);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2246);
				match(SET);
				setState(2247);
				match(LOGGED);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2248);
				match(SET);
				setState(2249);
				match(UNLOGGED);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2250);
				match(ENABLE_P);
				setState(2251);
				match(TRIGGER);
				setState(2252);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2253);
				match(ENABLE_P);
				setState(2254);
				match(ALWAYS);
				setState(2255);
				match(TRIGGER);
				setState(2256);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2257);
				match(ENABLE_P);
				setState(2258);
				match(REPLICA);
				setState(2259);
				match(TRIGGER);
				setState(2260);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2261);
				match(ENABLE_P);
				setState(2262);
				match(TRIGGER);
				setState(2263);
				match(ALL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2264);
				match(ENABLE_P);
				setState(2265);
				match(TRIGGER);
				setState(2266);
				match(USER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2267);
				match(DISABLE_P);
				setState(2268);
				match(TRIGGER);
				setState(2269);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2270);
				match(DISABLE_P);
				setState(2271);
				match(TRIGGER);
				setState(2272);
				match(ALL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2273);
				match(DISABLE_P);
				setState(2274);
				match(TRIGGER);
				setState(2275);
				match(USER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2276);
				match(ENABLE_P);
				setState(2277);
				match(RULE);
				setState(2278);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2279);
				match(ENABLE_P);
				setState(2280);
				match(ALWAYS);
				setState(2281);
				match(RULE);
				setState(2282);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2283);
				match(ENABLE_P);
				setState(2284);
				match(REPLICA);
				setState(2285);
				match(RULE);
				setState(2286);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2287);
				match(DISABLE_P);
				setState(2288);
				match(RULE);
				setState(2289);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2290);
				match(INHERIT);
				setState(2291);
				qualified_name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2292);
				match(NO);
				setState(2293);
				match(INHERIT);
				setState(2294);
				qualified_name();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2295);
				match(OF);
				setState(2296);
				any_name();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2297);
				match(NOT);
				setState(2298);
				match(OF);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2299);
				match(OWNER);
				setState(2300);
				match(TO);
				setState(2301);
				rolespec();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2302);
				match(SET);
				setState(2303);
				match(TABLESPACE);
				setState(2304);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2305);
				match(SET);
				setState(2306);
				reloptions();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2307);
				match(RESET);
				setState(2308);
				reloptions();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2309);
				match(REPLICA);
				setState(2310);
				match(IDENTITY_P);
				setState(2311);
				replica_identity();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2312);
				match(ENABLE_P);
				setState(2313);
				match(ROW);
				setState(2314);
				match(LEVEL);
				setState(2315);
				match(SECURITY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2316);
				match(DISABLE_P);
				setState(2317);
				match(ROW);
				setState(2318);
				match(LEVEL);
				setState(2319);
				match(SECURITY);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2320);
				match(FORCE);
				setState(2321);
				match(ROW);
				setState(2322);
				match(LEVEL);
				setState(2323);
				match(SECURITY);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2324);
				match(NO);
				setState(2325);
				match(FORCE);
				setState(2326);
				match(ROW);
				setState(2327);
				match(LEVEL);
				setState(2328);
				match(SECURITY);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2329);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_column_default);
		try {
			setState(2337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2332);
				match(SET);
				setState(2333);
				match(DEFAULT);
				setState(2334);
				a_expr();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2335);
				match(DROP);
				setState(2336);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_behavior_Context extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_behavior_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_behavior_; }
	}

	public final Drop_behavior_Context drop_behavior_() throws RecognitionException {
		Drop_behavior_Context _localctx = new Drop_behavior_Context(_ctx, getState());
		enterRule(_localctx, 104, RULE_drop_behavior_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collate_clause_Context extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Collate_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate_clause_; }
	}

	public final Collate_clause_Context collate_clause_() throws RecognitionException {
		Collate_clause_Context _localctx = new Collate_clause_Context(_ctx, getState());
		enterRule(_localctx, 106, RULE_collate_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2341);
			match(COLLATE);
			setState(2342);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_alter_using);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2344);
			match(USING);
			setState(2345);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Replica_identityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica_identity; }
	}

	public final Replica_identityContext replica_identity() throws RecognitionException {
		Replica_identityContext _localctx = new Replica_identityContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_replica_identity);
		try {
			setState(2353);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2347);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2348);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2349);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2350);
				match(USING);
				setState(2351);
				match(INDEX);
				setState(2352);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2355);
			match(OPEN_PAREN);
			setState(2356);
			reloption_list();
			setState(2357);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reloptions_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Reloptions_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions_; }
	}

	public final Reloptions_Context reloptions_() throws RecognitionException {
		Reloptions_Context _localctx = new Reloptions_Context(_ctx, getState());
		enterRule(_localctx, 114, RULE_reloptions_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			match(WITH);
			setState(2360);
			reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reloption_listContext extends ParserRuleContext {
		public List<Reloption_elemContext> reloption_elem() {
			return getRuleContexts(Reloption_elemContext.class);
		}
		public Reloption_elemContext reloption_elem(int i) {
			return getRuleContext(Reloption_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_reloption_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362);
			reloption_elem();
			setState(2367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2363);
				match(COMMA);
				setState(2364);
				reloption_elem();
				}
				}
				setState(2369);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reloption_elemContext extends ParserRuleContext {
		public List<ColLabelContext> colLabel() {
			return getRuleContexts(ColLabelContext.class);
		}
		public ColLabelContext colLabel(int i) {
			return getRuleContext(ColLabelContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_reloption_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			colLabel();
			setState(2379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				{
				setState(2371);
				match(EQUAL);
				setState(2372);
				def_arg();
				}
				break;
			case DOT:
				{
				setState(2373);
				match(DOT);
				setState(2374);
				colLabel();
				setState(2377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(2375);
					match(EQUAL);
					setState(2376);
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_identity_column_option_listContext extends ParserRuleContext {
		public List<Alter_identity_column_optionContext> alter_identity_column_option() {
			return getRuleContexts(Alter_identity_column_optionContext.class);
		}
		public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return getRuleContext(Alter_identity_column_optionContext.class,i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option_list; }
	}

	public final Alter_identity_column_option_listContext alter_identity_column_option_list() throws RecognitionException {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alter_identity_column_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2381);
				alter_identity_column_option();
				}
				}
				setState(2384); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==RESTART || _la==SET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_identity_column_optionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SeqoptelemContext seqoptelem() {
			return getRuleContext(SeqoptelemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option; }
	}

	public final Alter_identity_column_optionContext alter_identity_column_option() throws RecognitionException {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alter_identity_column_option);
		int _la;
		try {
			setState(2399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTART:
				enterOuterAlt(_localctx, 1);
				{
				setState(2386);
				match(RESTART);
				setState(2391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS || _la==WITH || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & 47L) != 0)) {
					{
					setState(2388);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2387);
						with_();
						}
					}

					setState(2390);
					numericonly();
					}
				}

				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2393);
				match(SET);
				setState(2397);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					setState(2394);
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					setState(2395);
					match(GENERATED);
					setState(2396);
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionboundspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Hash_partboundContext hash_partbound() {
			return getRuleContext(Hash_partboundContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionboundspec; }
	}

	public final PartitionboundspecContext partitionboundspec() throws RecognitionException {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_partitionboundspec);
		try {
			setState(2427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2401);
				match(FOR);
				setState(2402);
				match(VALUES);
				setState(2403);
				match(WITH);
				setState(2404);
				match(OPEN_PAREN);
				setState(2405);
				hash_partbound();
				setState(2406);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2408);
				match(FOR);
				setState(2409);
				match(VALUES);
				setState(2410);
				match(IN_P);
				setState(2411);
				match(OPEN_PAREN);
				setState(2412);
				expr_list();
				setState(2413);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2415);
				match(FOR);
				setState(2416);
				match(VALUES);
				setState(2417);
				match(FROM);
				setState(2418);
				match(OPEN_PAREN);
				setState(2419);
				expr_list();
				setState(2420);
				match(CLOSE_PAREN);
				setState(2421);
				match(TO);
				setState(2422);
				match(OPEN_PAREN);
				setState(2423);
				expr_list();
				setState(2424);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2426);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partbound_elemContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound_elem; }
	}

	public final Hash_partbound_elemContext hash_partbound_elem() throws RecognitionException {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_hash_partbound_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2429);
			nonreservedword();
			setState(2430);
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partboundContext extends ParserRuleContext {
		public List<Hash_partbound_elemContext> hash_partbound_elem() {
			return getRuleContexts(Hash_partbound_elemContext.class);
		}
		public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return getRuleContext(Hash_partbound_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound; }
	}

	public final Hash_partboundContext hash_partbound() throws RecognitionException {
		Hash_partboundContext _localctx = new Hash_partboundContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_hash_partbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2432);
			hash_partbound_elem();
			setState(2437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2433);
				match(COMMA);
				setState(2434);
				hash_partbound_elem();
				}
				}
				setState(2439);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltercompositetypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercompositetypestmt; }
	}

	public final AltercompositetypestmtContext altercompositetypestmt() throws RecognitionException {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_altercompositetypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2440);
			match(ALTER);
			setState(2441);
			match(TYPE_P);
			setState(2442);
			any_name();
			setState(2443);
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public List<Alter_type_cmdContext> alter_type_cmd() {
			return getRuleContexts(Alter_type_cmdContext.class);
		}
		public Alter_type_cmdContext alter_type_cmd(int i) {
			return getRuleContext(Alter_type_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alter_type_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2445);
			alter_type_cmd();
			setState(2450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2446);
				match(COMMA);
				setState(2447);
				alter_type_cmd();
				}
				}
				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TablefuncelementContext tablefuncelement() {
			return getRuleContext(TablefuncelementContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Set_data_Context set_data_() {
			return getRuleContext(Set_data_Context.class,0);
		}
		public Collate_clause_Context collate_clause_() {
			return getRuleContext(Collate_clause_Context.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alter_type_cmd);
		int _la;
		try {
			setState(2483);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2453);
				match(ADD_P);
				setState(2454);
				match(ATTRIBUTE);
				setState(2455);
				tablefuncelement();
				setState(2457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2456);
					drop_behavior_();
					}
				}

				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2459);
				match(DROP);
				setState(2460);
				match(ATTRIBUTE);
				setState(2463);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(2461);
					match(IF_P);
					setState(2462);
					match(EXISTS);
					}
					break;
				}
				setState(2465);
				colid();
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2466);
					drop_behavior_();
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2469);
				match(ALTER);
				setState(2470);
				match(ATTRIBUTE);
				setState(2471);
				colid();
				setState(2473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2472);
					set_data_();
					}
				}

				setState(2475);
				match(TYPE_P);
				setState(2476);
				typename();
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2477);
					collate_clause_();
					}
				}

				setState(2481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2480);
					drop_behavior_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CloseportalstmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeportalstmt; }
	}

	public final CloseportalstmtContext closeportalstmt() throws RecognitionException {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_closeportalstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485);
			match(CLOSE);
			setState(2488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				{
				setState(2486);
				cursor_name();
				}
				break;
			case ALL:
				{
				setState(2487);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopystmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Binary_Context binary_() {
			return getRuleContext(Binary_Context.class,0);
		}
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public Program_Context program_() {
			return getRuleContext(Program_Context.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copystmt; }
	}

	public final CopystmtContext copystmt() throws RecognitionException {
		CopystmtContext _localctx = new CopystmtContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_copystmt);
		int _la;
		try {
			setState(2527);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2490);
				match(COPY);
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2491);
					binary_();
					}
				}

				setState(2494);
				qualified_name();
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2495);
					column_list_();
					}
				}

				setState(2498);
				copy_from();
				setState(2500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(2499);
					program_();
					}
				}

				setState(2502);
				copy_file_name();
				setState(2504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==DELIMITERS) {
					{
					setState(2503);
					copy_delimiter();
					}
				}

				setState(2507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2506);
					with_();
					}
				}

				setState(2509);
				copy_options();
				setState(2511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2510);
					where_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2513);
				match(COPY);
				setState(2514);
				match(OPEN_PAREN);
				setState(2515);
				preparablestmt();
				setState(2516);
				match(CLOSE_PAREN);
				setState(2517);
				match(TO);
				setState(2519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(2518);
					program_();
					}
				}

				setState(2521);
				copy_file_name();
				setState(2523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2522);
					with_();
					}
				}

				setState(2525);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2529);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Program_Context extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public Program_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_; }
	}

	public final Program_Context program_() throws RecognitionException {
		Program_Context _localctx = new Program_Context(_ctx, getState());
		enterRule(_localctx, 142, RULE_program_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2531);
			match(PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_copy_file_name);
		try {
			setState(2536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2533);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2534);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2535);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_copy_options);
		try {
			setState(2543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI:
			case NULL_P:
			case WHERE:
			case BINARY:
			case FREEZE:
			case CSV:
			case DELIMITER:
			case ENCODING:
			case ESCAPE:
			case FORCE:
			case HEADER_P:
			case QUOTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2538);
				copy_opt_list();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2539);
				match(OPEN_PAREN);
				setState(2540);
				copy_generic_opt_list();
				setState(2541);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_opt_listContext extends ParserRuleContext {
		public List<Copy_opt_itemContext> copy_opt_item() {
			return getRuleContexts(Copy_opt_itemContext.class);
		}
		public Copy_opt_itemContext copy_opt_item(int i) {
			return getRuleContext(Copy_opt_itemContext.class,i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_copy_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 17716740097L) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & 35459325497345L) != 0) || _la==QUOTE) {
				{
				{
				setState(2545);
				copy_opt_item();
				}
				}
				setState(2550);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public As_Context as_() {
			return getRuleContext(As_Context.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_copy_opt_item);
		int _la;
		try {
			setState(2590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2551);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2552);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2553);
				match(DELIMITER);
				setState(2555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2554);
					as_();
					}
				}

				setState(2557);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2558);
				match(NULL_P);
				setState(2560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2559);
					as_();
					}
				}

				setState(2562);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2563);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2564);
				match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2565);
				match(QUOTE);
				setState(2567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2566);
					as_();
					}
				}

				setState(2569);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2570);
				match(ESCAPE);
				setState(2572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2571);
					as_();
					}
				}

				setState(2574);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2575);
				match(FORCE);
				setState(2576);
				match(QUOTE);
				setState(2577);
				columnlist();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2578);
				match(FORCE);
				setState(2579);
				match(QUOTE);
				setState(2580);
				match(STAR);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2581);
				match(FORCE);
				setState(2582);
				match(NOT);
				setState(2583);
				match(NULL_P);
				setState(2584);
				columnlist();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2585);
				match(FORCE);
				setState(2586);
				match(NULL_P);
				setState(2587);
				columnlist();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2588);
				match(ENCODING);
				setState(2589);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Binary_Context extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public Binary_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_; }
	}

	public final Binary_Context binary_() throws RecognitionException {
		Binary_Context _localctx = new Binary_Context(_ctx, getState());
		enterRule(_localctx, 152, RULE_binary_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_delimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Using_Context using_() {
			return getRuleContext(Using_Context.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_copy_delimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2594);
				using_();
				}
			}

			setState(2597);
			match(DELIMITERS);
			setState(2598);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_Context extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Using_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_; }
	}

	public final Using_Context using_() throws RecognitionException {
		Using_Context _localctx = new Using_Context(_ctx, getState());
		enterRule(_localctx, 156, RULE_using_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			match(USING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_elemContext> copy_generic_opt_elem() {
			return getRuleContexts(Copy_generic_opt_elemContext.class);
		}
		public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return getRuleContext(Copy_generic_opt_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_copy_generic_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			copy_generic_opt_elem();
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2603);
				match(COMMA);
				setState(2604);
				copy_generic_opt_elem();
				}
				}
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_copy_generic_opt_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2610);
			colLabel();
			setState(2612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120240124L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 18014415689351175L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1023L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4599826445475247105L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
				{
				setState(2611);
				copy_generic_opt_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_copy_generic_opt_arg);
		try {
			setState(2621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2614);
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(2615);
				numericonly();
				}
				break;
			case STAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(2616);
				match(STAR);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				setState(2617);
				match(OPEN_PAREN);
				setState(2618);
				copy_generic_opt_arg_list();
				setState(2619);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_arg_list_itemContext> copy_generic_opt_arg_list_item() {
			return getRuleContexts(Copy_generic_opt_arg_list_itemContext.class);
		}
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2623);
			copy_generic_opt_arg_list_item();
			setState(2628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2624);
				match(COMMA);
				setState(2625);
				copy_generic_opt_arg_list_item();
				}
				}
				setState(2630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631);
			boolean_or_string_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public OptpartitionspecContext optpartitionspec() {
			return getRuleContext(OptpartitionspecContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public CreatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstmt; }
	}

	public final CreatestmtContext createstmt() throws RecognitionException {
		CreatestmtContext _localctx = new CreatestmtContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_createstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(CREATE);
			setState(2635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				setState(2634);
				opttemp();
				}
			}

			setState(2637);
			match(TABLE);
			setState(2641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(2638);
				match(IF_P);
				setState(2639);
				match(NOT);
				setState(2640);
				match(EXISTS);
				}
				break;
			}
			setState(2643);
			qualified_name();
			setState(2709);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(2644);
				match(OPEN_PAREN);
				setState(2646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120252928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576460889742966791L) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & -2076180479L) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & -1L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & -1L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & -33L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & -1L) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & -4644337652596737L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 576460825787662341L) != 0)) {
					{
					setState(2645);
					opttableelementlist();
					}
				}

				setState(2648);
				match(CLOSE_PAREN);
				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(2649);
					optinherit();
					}
				}

				setState(2653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2652);
					optpartitionspec();
					}
				}

				setState(2656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2655);
					table_access_method_clause();
					}
				}

				setState(2659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2658);
					optwith();
					}
				}

				setState(2662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2661);
					oncommitoption();
					}
				}

				setState(2665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(2664);
					opttablespace();
					}
				}

				}
				break;
			case OF:
				{
				setState(2667);
				match(OF);
				setState(2668);
				any_name();
				setState(2670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2669);
					opttypedtableelementlist();
					}
				}

				setState(2673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2672);
					optpartitionspec();
					}
				}

				setState(2676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2675);
					table_access_method_clause();
					}
				}

				setState(2679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2678);
					optwith();
					}
				}

				setState(2682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2681);
					oncommitoption();
					}
				}

				setState(2685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(2684);
					opttablespace();
					}
				}

				}
				break;
			case PARTITION:
				{
				setState(2687);
				match(PARTITION);
				setState(2688);
				match(OF);
				setState(2689);
				qualified_name();
				setState(2691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2690);
					opttypedtableelementlist();
					}
				}

				setState(2693);
				partitionboundspec();
				setState(2695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2694);
					optpartitionspec();
					}
				}

				setState(2698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2697);
					table_access_method_clause();
					}
				}

				setState(2701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2700);
					optwith();
					}
				}

				setState(2704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2703);
					oncommitoption();
					}
				}

				setState(2707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(2706);
					opttablespace();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttemp; }
	}

	public final OpttempContext opttemp() throws RecognitionException {
		OpttempContext _localctx = new OpttempContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_opttemp);
		int _la;
		try {
			setState(2718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2711);
				match(TEMPORARY);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2712);
				match(TEMP);
				}
				break;
			case LOCAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2713);
				match(LOCAL);
				setState(2714);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case GLOBAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2715);
				match(GLOBAL);
				setState(2716);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 5);
				{
				setState(2717);
				match(UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttableelementlistContext extends ParserRuleContext {
		public TableelementlistContext tableelementlist() {
			return getRuleContext(TableelementlistContext.class,0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableelementlist; }
	}

	public final OpttableelementlistContext opttableelementlist() throws RecognitionException {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_opttableelementlist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2720);
			tableelementlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttypedtableelementlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TypedtableelementlistContext typedtableelementlist() {
			return getRuleContext(TypedtableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableelementlist; }
	}

	public final OpttypedtableelementlistContext opttypedtableelementlist() throws RecognitionException {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_opttypedtableelementlist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2722);
			match(OPEN_PAREN);
			setState(2723);
			typedtableelementlist();
			setState(2724);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableelementlistContext extends ParserRuleContext {
		public List<TableelementContext> tableelement() {
			return getRuleContexts(TableelementContext.class);
		}
		public TableelementContext tableelement(int i) {
			return getRuleContext(TableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelementlist; }
	}

	public final TableelementlistContext tableelementlist() throws RecognitionException {
		TableelementlistContext _localctx = new TableelementlistContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_tableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2726);
			tableelement();
			setState(2731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2727);
				match(COMMA);
				setState(2728);
				tableelement();
				}
				}
				setState(2733);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedtableelementlistContext extends ParserRuleContext {
		public List<TypedtableelementContext> typedtableelement() {
			return getRuleContexts(TypedtableelementContext.class);
		}
		public TypedtableelementContext typedtableelement(int i) {
			return getRuleContext(TypedtableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelementlist; }
	}

	public final TypedtableelementlistContext typedtableelementlist() throws RecognitionException {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_typedtableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2734);
			typedtableelement();
			setState(2739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2735);
				match(COMMA);
				setState(2736);
				typedtableelement();
				}
				}
				setState(2741);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableelementContext extends ParserRuleContext {
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TablelikeclauseContext tablelikeclause() {
			return getRuleContext(TablelikeclauseContext.class,0);
		}
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelement; }
	}

	public final TableelementContext tableelement() throws RecognitionException {
		TableelementContext _localctx = new TableelementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_tableelement);
		try {
			setState(2745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2742);
				tableconstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2743);
				tablelikeclause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2744);
				columnDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedtableelementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelement; }
	}

	public final TypedtableelementContext typedtableelement() throws RecognitionException {
		TypedtableelementContext _localctx = new TypedtableelementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_typedtableelement);
		try {
			setState(2749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2747);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2748);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2751);
			colid();
			setState(2752);
			typename();
			setState(2754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2753);
				create_generic_options();
				}
			}

			setState(2756);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			colid();
			setState(2761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2759);
				match(WITH);
				setState(2760);
				match(OPTIONS);
				}
			}

			setState(2763);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColquallistContext extends ParserRuleContext {
		public List<ColconstraintContext> colconstraint() {
			return getRuleContexts(ColconstraintContext.class);
		}
		public ColconstraintContext colconstraint(int i) {
			return getRuleContext(ColconstraintContext.class,i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colquallist; }
	}

	public final ColquallistContext colquallist() throws RecognitionException {
		ColquallistContext _localctx = new ColquallistContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_colquallist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 72084085530433547L) != 0) || _la==GENERATED) {
				{
				{
				setState(2765);
				colconstraint();
				}
				}
				setState(2770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColconstraintelemContext colconstraintelem() {
			return getRuleContext(ColconstraintelemContext.class,0);
		}
		public ConstraintattrContext constraintattr() {
			return getRuleContext(ConstraintattrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraint; }
	}

	public final ColconstraintContext colconstraint() throws RecognitionException {
		ColconstraintContext _localctx = new ColconstraintContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_colconstraint);
		try {
			setState(2779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2771);
				match(CONSTRAINT);
				setState(2772);
				name();
				setState(2773);
				colconstraintelem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2775);
				colconstraintelem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2776);
				constraintattr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2777);
				match(COLLATE);
				setState(2778);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColconstraintelemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Definition_Context definition_() {
			return getRuleContext(Definition_Context.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public No_inherit_Context no_inherit_() {
			return getRuleContext(No_inherit_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintelem; }
	}

	public final ColconstraintelemContext colconstraintelem() throws RecognitionException {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_colconstraintelem);
		int _la;
		try {
			setState(2833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2781);
				match(NOT);
				setState(2782);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2783);
				match(NULL_P);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2784);
				match(UNIQUE);
				setState(2786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2785);
					definition_();
					}
				}

				setState(2789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2788);
					optconstablespace();
					}
				}

				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2791);
				match(PRIMARY);
				setState(2792);
				match(KEY);
				setState(2794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2793);
					definition_();
					}
				}

				setState(2797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2796);
					optconstablespace();
					}
				}

				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(2799);
				match(CHECK);
				setState(2800);
				match(OPEN_PAREN);
				setState(2801);
				a_expr();
				setState(2802);
				match(CLOSE_PAREN);
				setState(2804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2803);
					no_inherit_();
					}
				}

				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2806);
				match(DEFAULT);
				setState(2807);
				b_expr(0);
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 7);
				{
				setState(2808);
				match(GENERATED);
				setState(2809);
				generated_when();
				setState(2810);
				match(AS);
				setState(2820);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTITY_P:
					{
					setState(2811);
					match(IDENTITY_P);
					setState(2813);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPEN_PAREN) {
						{
						setState(2812);
						optparenthesizedseqoptlist();
						}
					}

					}
					break;
				case OPEN_PAREN:
					{
					setState(2815);
					match(OPEN_PAREN);
					setState(2816);
					a_expr();
					setState(2817);
					match(CLOSE_PAREN);
					setState(2818);
					match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 8);
				{
				setState(2822);
				match(REFERENCES);
				setState(2823);
				qualified_name();
				setState(2825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2824);
					column_list_();
					}
				}

				setState(2828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(2827);
					key_match();
					}
				}

				setState(2831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2830);
					key_actions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generated_whenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generated_when; }
	}

	public final Generated_whenContext generated_when() throws RecognitionException {
		Generated_whenContext _localctx = new Generated_whenContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_generated_when);
		try {
			setState(2838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2835);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2836);
				match(BY);
				setState(2837);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintattrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattr; }
	}

	public final ConstraintattrContext constraintattr() throws RecognitionException {
		ConstraintattrContext _localctx = new ConstraintattrContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_constraintattr);
		int _la;
		try {
			setState(2845);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2840);
				match(DEFERRABLE);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2841);
				match(NOT);
				setState(2842);
				match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2843);
				match(INITIALLY);
				setState(2844);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablelikeclauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TablelikeoptionlistContext tablelikeoptionlist() {
			return getRuleContext(TablelikeoptionlistContext.class,0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeclause; }
	}

	public final TablelikeclauseContext tablelikeclause() throws RecognitionException {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_tablelikeclause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(LIKE);
			setState(2848);
			qualified_name();
			setState(2849);
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablelikeoptionlistContext extends ParserRuleContext {
		public List<TablelikeoptionContext> tablelikeoption() {
			return getRuleContexts(TablelikeoptionContext.class);
		}
		public TablelikeoptionContext tablelikeoption(int i) {
			return getRuleContext(TablelikeoptionContext.class,i);
		}
		public List<TerminalNode> INCLUDING() { return getTokens(PostgreSQLParser.INCLUDING); }
		public TerminalNode INCLUDING(int i) {
			return getToken(PostgreSQLParser.INCLUDING, i);
		}
		public List<TerminalNode> EXCLUDING() { return getTokens(PostgreSQLParser.EXCLUDING); }
		public TerminalNode EXCLUDING(int i) {
			return getToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoptionlist; }
	}

	public final TablelikeoptionlistContext tablelikeoptionlist() throws RecognitionException {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_tablelikeoptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				setState(2851);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2852);
				tablelikeoption();
				}
				}
				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablelikeoptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoption; }
	}

	public final TablelikeoptionContext tablelikeoption() throws RecognitionException {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tablelikeoption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2858);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 576460752303947809L) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintelemContext constraintelem() {
			return getRuleContext(ConstraintelemContext.class,0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableconstraint; }
	}

	public final TableconstraintContext tableconstraint() throws RecognitionException {
		TableconstraintContext _localctx = new TableconstraintContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_tableconstraint);
		try {
			setState(2865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2860);
				match(CONSTRAINT);
				setState(2861);
				name();
				setState(2862);
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2864);
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintelemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public ExistingindexContext existingindex() {
			return getRuleContext(ExistingindexContext.class,0);
		}
		public C_include_Context c_include_() {
			return getRuleContext(C_include_Context.class,0);
		}
		public Definition_Context definition_() {
			return getRuleContext(Definition_Context.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public ExclusionconstraintlistContext exclusionconstraintlist() {
			return getRuleContext(ExclusionconstraintlistContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionwhereclauseContext exclusionwhereclause() {
			return getRuleContext(ExclusionwhereclauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintelem; }
	}

	public final ConstraintelemContext constraintelem() throws RecognitionException {
		ConstraintelemContext _localctx = new ConstraintelemContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_constraintelem);
		int _la;
		try {
			setState(2953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2867);
				match(CHECK);
				setState(2868);
				match(OPEN_PAREN);
				setState(2869);
				a_expr();
				setState(2870);
				match(CLOSE_PAREN);
				setState(2871);
				constraintattributespec();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2873);
				match(UNIQUE);
				setState(2891);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(2874);
					match(OPEN_PAREN);
					setState(2875);
					columnlist();
					setState(2876);
					match(CLOSE_PAREN);
					setState(2878);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INCLUDE) {
						{
						setState(2877);
						c_include_();
						}
					}

					setState(2881);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2880);
						definition_();
						}
					}

					setState(2884);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USING) {
						{
						setState(2883);
						optconstablespace();
						}
					}

					setState(2886);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(2888);
					existingindex();
					setState(2889);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2893);
				match(PRIMARY);
				setState(2894);
				match(KEY);
				setState(2912);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(2895);
					match(OPEN_PAREN);
					setState(2896);
					columnlist();
					setState(2897);
					match(CLOSE_PAREN);
					setState(2899);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INCLUDE) {
						{
						setState(2898);
						c_include_();
						}
					}

					setState(2902);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2901);
						definition_();
						}
					}

					setState(2905);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USING) {
						{
						setState(2904);
						optconstablespace();
						}
					}

					setState(2907);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(2909);
					existingindex();
					setState(2910);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2914);
				match(EXCLUDE);
				setState(2916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2915);
					access_method_clause();
					}
				}

				setState(2918);
				match(OPEN_PAREN);
				setState(2919);
				exclusionconstraintlist();
				setState(2920);
				match(CLOSE_PAREN);
				setState(2922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUDE) {
					{
					setState(2921);
					c_include_();
					}
				}

				setState(2925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2924);
					definition_();
					}
				}

				setState(2928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2927);
					optconstablespace();
					}
				}

				setState(2931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2930);
					exclusionwhereclause();
					}
				}

				setState(2933);
				constraintattributespec();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2935);
				match(FOREIGN);
				setState(2936);
				match(KEY);
				setState(2937);
				match(OPEN_PAREN);
				setState(2938);
				columnlist();
				setState(2939);
				match(CLOSE_PAREN);
				setState(2940);
				match(REFERENCES);
				setState(2941);
				qualified_name();
				setState(2943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2942);
					column_list_();
					}
				}

				setState(2946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(2945);
					key_match();
					}
				}

				setState(2949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2948);
					key_actions();
					}
				}

				setState(2951);
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class No_inherit_Context extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public No_inherit_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_no_inherit_; }
	}

	public final No_inherit_Context no_inherit_() throws RecognitionException {
		No_inherit_Context _localctx = new No_inherit_Context(_ctx, getState());
		enterRule(_localctx, 208, RULE_no_inherit_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2955);
			match(NO);
			setState(2956);
			match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_list_Context extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Column_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list_; }
	}

	public final Column_list_Context column_list_() throws RecognitionException {
		Column_list_Context _localctx = new Column_list_Context(_ctx, getState());
		enterRule(_localctx, 210, RULE_column_list_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2958);
			match(OPEN_PAREN);
			setState(2959);
			columnlist();
			setState(2960);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnlistContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnlist; }
	}

	public final ColumnlistContext columnlist() throws RecognitionException {
		ColumnlistContext _localctx = new ColumnlistContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_columnlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2962);
			columnElem();
			setState(2967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2963);
				match(COMMA);
				setState(2964);
				columnElem();
				}
				}
				setState(2969);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnElemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2970);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_include_Context extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public C_include_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_include_; }
	}

	public final C_include_Context c_include_() throws RecognitionException {
		C_include_Context _localctx = new C_include_Context(_ctx, getState());
		enterRule(_localctx, 216, RULE_c_include_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2972);
			match(INCLUDE);
			setState(2973);
			match(OPEN_PAREN);
			setState(2974);
			columnlist();
			setState(2975);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_key_match);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2977);
			match(MATCH);
			setState(2978);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionconstraintlistContext extends ParserRuleContext {
		public List<ExclusionconstraintelemContext> exclusionconstraintelem() {
			return getRuleContexts(ExclusionconstraintelemContext.class);
		}
		public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return getRuleContext(ExclusionconstraintelemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintlist; }
	}

	public final ExclusionconstraintlistContext exclusionconstraintlist() throws RecognitionException {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_exclusionconstraintlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2980);
			exclusionconstraintelem();
			setState(2985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2981);
				match(COMMA);
				setState(2982);
				exclusionconstraintelem();
				}
				}
				setState(2987);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionconstraintelemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintelem; }
	}

	public final ExclusionconstraintelemContext exclusionconstraintelem() throws RecognitionException {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_exclusionconstraintelem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			index_elem();
			setState(2989);
			match(WITH);
			setState(2996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2990);
				any_operator();
				}
				break;
			case 2:
				{
				setState(2991);
				match(OPERATOR);
				setState(2992);
				match(OPEN_PAREN);
				setState(2993);
				any_operator();
				setState(2994);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExclusionwhereclauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionwhereclause; }
	}

	public final ExclusionwhereclauseContext exclusionwhereclause() throws RecognitionException {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_exclusionwhereclause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2998);
			match(WHERE);
			setState(2999);
			match(OPEN_PAREN);
			setState(3000);
			a_expr();
			setState(3001);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_key_actions);
		try {
			setState(3011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3003);
				key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3004);
				key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3005);
				key_update();
				setState(3006);
				key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3008);
				key_delete();
				setState(3009);
				key_update();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3013);
			match(ON);
			setState(3014);
			match(UPDATE);
			setState(3015);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3017);
			match(ON);
			setState(3018);
			match(DELETE_P);
			setState(3019);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_key_action);
		int _la;
		try {
			setState(3027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3021);
				match(NO);
				setState(3022);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3023);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3024);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3025);
				match(SET);
				setState(3026);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptinheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optinherit; }
	}

	public final OptinheritContext optinherit() throws RecognitionException {
		OptinheritContext _localctx = new OptinheritContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_optinherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3029);
			match(INHERITS);
			setState(3030);
			match(OPEN_PAREN);
			setState(3031);
			qualified_name_list();
			setState(3032);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptpartitionspecContext extends ParserRuleContext {
		public PartitionspecContext partitionspec() {
			return getRuleContext(PartitionspecContext.class,0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optpartitionspec; }
	}

	public final OptpartitionspecContext optpartitionspec() throws RecognitionException {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_optpartitionspec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3034);
			partitionspec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionspecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Part_paramsContext part_params() {
			return getRuleContext(Part_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionspec; }
	}

	public final PartitionspecContext partitionspec() throws RecognitionException {
		PartitionspecContext _localctx = new PartitionspecContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_partitionspec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3036);
			match(PARTITION);
			setState(3037);
			match(BY);
			setState(3038);
			colid();
			setState(3039);
			match(OPEN_PAREN);
			setState(3040);
			part_params();
			setState(3041);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Part_paramsContext extends ParserRuleContext {
		public List<Part_elemContext> part_elem() {
			return getRuleContexts(Part_elemContext.class);
		}
		public Part_elemContext part_elem(int i) {
			return getRuleContext(Part_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_params; }
	}

	public final Part_paramsContext part_params() throws RecognitionException {
		Part_paramsContext _localctx = new Part_paramsContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_part_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043);
			part_elem();
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3044);
				match(COMMA);
				setState(3045);
				part_elem();
				}
				}
				setState(3050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Part_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Collate_Context collate_() {
			return getRuleContext(Collate_Context.class,0);
		}
		public Class_Context class_() {
			return getRuleContext(Class_Context.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_elem; }
	}

	public final Part_elemContext part_elem() throws RecognitionException {
		Part_elemContext _localctx = new Part_elemContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_part_elem);
		int _la;
		try {
			setState(3074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3051);
				colid();
				setState(3053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3052);
					collate_();
					}
				}

				setState(3056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(3055);
					class_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3058);
				func_expr_windowless();
				setState(3060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3059);
					collate_();
					}
				}

				setState(3063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(3062);
					class_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3065);
				match(OPEN_PAREN);
				setState(3066);
				a_expr();
				setState(3067);
				match(CLOSE_PAREN);
				setState(3069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3068);
					collate_();
					}
				}

				setState(3072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(3071);
					class_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_access_method_clause; }
	}

	public final Table_access_method_clauseContext table_access_method_clause() throws RecognitionException {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_table_access_method_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3076);
			match(USING);
			setState(3077);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptwithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optwith; }
	}

	public final OptwithContext optwith() throws RecognitionException {
		OptwithContext _localctx = new OptwithContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_optwith);
		try {
			setState(3083);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3079);
				match(WITH);
				setState(3080);
				reloptions();
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3081);
				match(WITHOUT);
				setState(3082);
				match(OIDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OncommitoptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oncommitoption; }
	}

	public final OncommitoptionContext oncommitoption() throws RecognitionException {
		OncommitoptionContext _localctx = new OncommitoptionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_oncommitoption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3085);
			match(ON);
			setState(3086);
			match(COMMIT);
			setState(3092);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				{
				setState(3087);
				match(DROP);
				}
				break;
			case DELETE_P:
				{
				setState(3088);
				match(DELETE_P);
				setState(3089);
				match(ROWS);
				}
				break;
			case PRESERVE:
				{
				setState(3090);
				match(PRESERVE);
				setState(3091);
				match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespace; }
	}

	public final OpttablespaceContext opttablespace() throws RecognitionException {
		OpttablespaceContext _localctx = new OpttablespaceContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_opttablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3094);
			match(TABLESPACE);
			setState(3095);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptconstablespaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstablespace; }
	}

	public final OptconstablespaceContext optconstablespace() throws RecognitionException {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_optconstablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3097);
			match(USING);
			setState(3098);
			match(INDEX);
			setState(3099);
			match(TABLESPACE);
			setState(3100);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExistingindexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingindex; }
	}

	public final ExistingindexContext existingindex() throws RecognitionException {
		ExistingindexContext _localctx = new ExistingindexContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_existingindex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3102);
			match(USING);
			setState(3103);
			match(INDEX);
			setState(3104);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatestatsstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Name_list_Context name_list_() {
			return getRuleContext(Name_list_Context.class,0);
		}
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstatsstmt; }
	}

	public final CreatestatsstmtContext createstatsstmt() throws RecognitionException {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_createstatsstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			match(CREATE);
			setState(3107);
			match(STATISTICS);
			setState(3111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(3108);
				match(IF_P);
				setState(3109);
				match(NOT);
				setState(3110);
				match(EXISTS);
				}
				break;
			}
			setState(3113);
			any_name();
			setState(3115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3114);
				name_list_();
				}
			}

			setState(3117);
			match(ON);
			setState(3118);
			expr_list();
			setState(3119);
			match(FROM);
			setState(3120);
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterstatsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLParser.STATISTICS, i);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterstatsstmt; }
	}

	public final AlterstatsstmtContext alterstatsstmt() throws RecognitionException {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_alterstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3122);
			match(ALTER);
			setState(3123);
			match(STATISTICS);
			setState(3126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(3124);
				match(IF_P);
				setState(3125);
				match(EXISTS);
				}
				break;
			}
			setState(3128);
			any_name();
			setState(3129);
			match(SET);
			setState(3130);
			match(STATISTICS);
			setState(3131);
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateasstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public With_data_Context with_data_() {
			return getRuleContext(With_data_Context.class,0);
		}
		public CreateasstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createasstmt; }
	}

	public final CreateasstmtContext createasstmt() throws RecognitionException {
		CreateasstmtContext _localctx = new CreateasstmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_createasstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3133);
			match(CREATE);
			setState(3135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				setState(3134);
				opttemp();
				}
			}

			setState(3137);
			match(TABLE);
			setState(3141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(3138);
				match(IF_P);
				setState(3139);
				match(NOT);
				setState(3140);
				match(EXISTS);
				}
				break;
			}
			setState(3143);
			create_as_target();
			setState(3144);
			match(AS);
			setState(3145);
			selectstmt();
			setState(3147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3146);
				with_data_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_create_as_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3149);
			qualified_name();
			setState(3151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3150);
				column_list_();
				}
			}

			setState(3154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3153);
				table_access_method_clause();
				}
			}

			setState(3157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(3156);
				optwith();
				}
			}

			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3159);
				oncommitoption();
				}
			}

			setState(3163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3162);
				opttablespace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_data_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public With_data_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_data_; }
	}

	public final With_data_Context with_data_() throws RecognitionException {
		With_data_Context _localctx = new With_data_Context(_ctx, getState());
		enterRule(_localctx, 264, RULE_with_data_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3165);
			match(WITH);
			setState(3169);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_P:
				{
				setState(3166);
				match(DATA_P);
				}
				break;
			case NO:
				{
				setState(3167);
				match(NO);
				setState(3168);
				match(DATA_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatematviewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Create_mv_targetContext create_mv_target() {
			return getRuleContext(Create_mv_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public OptnologContext optnolog() {
			return getRuleContext(OptnologContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public With_data_Context with_data_() {
			return getRuleContext(With_data_Context.class,0);
		}
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creatematviewstmt; }
	}

	public final CreatematviewstmtContext creatematviewstmt() throws RecognitionException {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_creatematviewstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3171);
			match(CREATE);
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNLOGGED) {
				{
				setState(3172);
				optnolog();
				}
			}

			setState(3175);
			match(MATERIALIZED);
			setState(3176);
			match(VIEW);
			setState(3180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(3177);
				match(IF_P);
				setState(3178);
				match(NOT);
				setState(3179);
				match(EXISTS);
				}
				break;
			}
			setState(3182);
			create_mv_target();
			setState(3183);
			match(AS);
			setState(3184);
			selectstmt();
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3185);
				with_data_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_mv_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public Reloptions_Context reloptions_() {
			return getRuleContext(Reloptions_Context.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_target; }
	}

	public final Create_mv_targetContext create_mv_target() throws RecognitionException {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_create_mv_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3188);
			qualified_name();
			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3189);
				column_list_();
				}
			}

			setState(3193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3192);
				table_access_method_clause();
				}
			}

			setState(3196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3195);
				reloptions_();
				}
			}

			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3198);
				opttablespace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptnologContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optnolog; }
	}

	public final OptnologContext optnolog() throws RecognitionException {
		OptnologContext _localctx = new OptnologContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_optnolog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3201);
			match(UNLOGGED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RefreshmatviewstmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Concurrently_Context concurrently_() {
			return getRuleContext(Concurrently_Context.class,0);
		}
		public With_data_Context with_data_() {
			return getRuleContext(With_data_Context.class,0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshmatviewstmt; }
	}

	public final RefreshmatviewstmtContext refreshmatviewstmt() throws RecognitionException {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_refreshmatviewstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			match(REFRESH);
			setState(3204);
			match(MATERIALIZED);
			setState(3205);
			match(VIEW);
			setState(3207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(3206);
				concurrently_();
				}
			}

			setState(3209);
			qualified_name();
			setState(3211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3210);
				with_data_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateseqstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public OptseqoptlistContext optseqoptlist() {
			return getRuleContext(OptseqoptlistContext.class,0);
		}
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createseqstmt; }
	}

	public final CreateseqstmtContext createseqstmt() throws RecognitionException {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_createseqstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3213);
			match(CREATE);
			setState(3215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				setState(3214);
				opttemp();
				}
			}

			setState(3217);
			match(SEQUENCE);
			setState(3221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(3218);
				match(IF_P);
				setState(3219);
				match(NOT);
				setState(3220);
				match(EXISTS);
				}
				break;
			}
			setState(3223);
			qualified_name();
			setState(3225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==CACHE || _la==CYCLE || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & 563088600334337L) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & 67125249L) != 0)) {
				{
				setState(3224);
				optseqoptlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterseqstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterseqstmt; }
	}

	public final AlterseqstmtContext alterseqstmt() throws RecognitionException {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_alterseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			match(ALTER);
			setState(3228);
			match(SEQUENCE);
			setState(3231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(3229);
				match(IF_P);
				setState(3230);
				match(EXISTS);
				}
				break;
			}
			setState(3233);
			qualified_name();
			setState(3234);
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptseqoptlistContext extends ParserRuleContext {
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqoptlist; }
	}

	public final OptseqoptlistContext optseqoptlist() throws RecognitionException {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_optseqoptlist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3236);
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptparenthesizedseqoptlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optparenthesizedseqoptlist; }
	}

	public final OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() throws RecognitionException {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_optparenthesizedseqoptlist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			match(OPEN_PAREN);
			setState(3239);
			seqoptlist();
			setState(3240);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeqoptlistContext extends ParserRuleContext {
		public List<SeqoptelemContext> seqoptelem() {
			return getRuleContexts(SeqoptelemContext.class);
		}
		public SeqoptelemContext seqoptelem(int i) {
			return getRuleContext(SeqoptelemContext.class,i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptlist; }
	}

	public final SeqoptlistContext seqoptlist() throws RecognitionException {
		SeqoptlistContext _localctx = new SeqoptlistContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_seqoptlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3243); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3242);
				seqoptelem();
				}
				}
				setState(3245); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || _la==CACHE || _la==CYCLE || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & 563088600334337L) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & 67125249L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeqoptelemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public By_Context by_() {
			return getRuleContext(By_Context.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptelem; }
	}

	public final SeqoptelemContext seqoptelem() throws RecognitionException {
		SeqoptelemContext _localctx = new SeqoptelemContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_seqoptelem);
		int _la;
		try {
			setState(3281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3247);
				match(AS);
				setState(3248);
				simpletypename();
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3249);
				match(CACHE);
				setState(3250);
				numericonly();
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3251);
				match(CYCLE);
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3252);
				match(INCREMENT);
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(3253);
					by_();
					}
				}

				setState(3256);
				numericonly();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3257);
				match(MAXVALUE);
				setState(3258);
				numericonly();
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3259);
				match(MINVALUE);
				setState(3260);
				numericonly();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 7);
				{
				setState(3261);
				match(NO);
				setState(3262);
				_la = _input.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNED:
				enterOuterAlt(_localctx, 8);
				{
				setState(3263);
				match(OWNED);
				setState(3264);
				match(BY);
				setState(3265);
				any_name();
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3266);
				match(SEQUENCE);
				setState(3267);
				match(NAME_P);
				setState(3268);
				any_name();
				}
				break;
			case START:
				enterOuterAlt(_localctx, 10);
				{
				setState(3269);
				match(START);
				setState(3271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3270);
					with_();
					}
				}

				setState(3273);
				numericonly();
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 11);
				{
				setState(3274);
				match(RESTART);
				setState(3276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3275);
					with_();
					}
				}

				setState(3279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & 47L) != 0)) {
					{
					setState(3278);
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class By_Context extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public By_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_by_; }
	}

	public final By_Context by_() throws RecognitionException {
		By_Context _localctx = new By_Context(_ctx, getState());
		enterRule(_localctx, 286, RULE_by_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			match(BY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericonlyContext extends ParserRuleContext {
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly; }
	}

	public final NumericonlyContext numericonly() throws RecognitionException {
		NumericonlyContext _localctx = new NumericonlyContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_numericonly);
		try {
			setState(3291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3285);
				fconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3286);
				match(PLUS);
				setState(3287);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3288);
				match(MINUS);
				setState(3289);
				fconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3290);
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Numericonly_listContext extends ParserRuleContext {
		public List<NumericonlyContext> numericonly() {
			return getRuleContexts(NumericonlyContext.class);
		}
		public NumericonlyContext numericonly(int i) {
			return getRuleContext(NumericonlyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly_list; }
	}

	public final Numericonly_listContext numericonly_list() throws RecognitionException {
		Numericonly_listContext _localctx = new Numericonly_listContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_numericonly_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3293);
			numericonly();
			setState(3298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3294);
				match(COMMA);
				setState(3295);
				numericonly();
				}
				}
				setState(3300);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateplangstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Or_replace_Context or_replace_() {
			return getRuleContext(Or_replace_Context.class,0);
		}
		public Trusted_Context trusted_() {
			return getRuleContext(Trusted_Context.class,0);
		}
		public Procedural_Context procedural_() {
			return getRuleContext(Procedural_Context.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Inline_handler_Context inline_handler_() {
			return getRuleContext(Inline_handler_Context.class,0);
		}
		public Validator_Context validator_() {
			return getRuleContext(Validator_Context.class,0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createplangstmt; }
	}

	public final CreateplangstmtContext createplangstmt() throws RecognitionException {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_createplangstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301);
			match(CREATE);
			setState(3303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3302);
				or_replace_();
				}
			}

			setState(3306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(3305);
				trusted_();
				}
			}

			setState(3309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(3308);
				procedural_();
				}
			}

			setState(3311);
			match(LANGUAGE);
			setState(3312);
			name();
			setState(3321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(3313);
				match(HANDLER);
				setState(3314);
				handler_name();
				setState(3316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE_P) {
					{
					setState(3315);
					inline_handler_();
					}
				}

				setState(3319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==VALIDATOR) {
					{
					setState(3318);
					validator_();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trusted_Context extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public Trusted_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trusted_; }
	}

	public final Trusted_Context trusted_() throws RecognitionException {
		Trusted_Context _localctx = new Trusted_Context(_ctx, getState());
		enterRule(_localctx, 294, RULE_trusted_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			match(TRUSTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_handler_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3325);
			name();
			setState(3327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(3326);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Inline_handler_Context extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Inline_handler_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_handler_; }
	}

	public final Inline_handler_Context inline_handler_() throws RecognitionException {
		Inline_handler_Context _localctx = new Inline_handler_Context(_ctx, getState());
		enterRule(_localctx, 298, RULE_inline_handler_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3329);
			match(INLINE_P);
			setState(3330);
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_validator_clause);
		try {
			setState(3336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3332);
				match(VALIDATOR);
				setState(3333);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3334);
				match(NO);
				setState(3335);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Validator_Context extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Validator_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_; }
	}

	public final Validator_Context validator_() throws RecognitionException {
		Validator_Context _localctx = new Validator_Context(_ctx, getState());
		enterRule(_localctx, 302, RULE_validator_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3338);
			validator_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedural_Context extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Procedural_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedural_; }
	}

	public final Procedural_Context procedural_() throws RecognitionException {
		Procedural_Context _localctx = new Procedural_Context(_ctx, getState());
		enterRule(_localctx, 304, RULE_procedural_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			match(PROCEDURAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatetablespacestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public OpttablespaceownerContext opttablespaceowner() {
			return getRuleContext(OpttablespaceownerContext.class,0);
		}
		public Reloptions_Context reloptions_() {
			return getRuleContext(Reloptions_Context.class,0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtablespacestmt; }
	}

	public final CreatetablespacestmtContext createtablespacestmt() throws RecognitionException {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_createtablespacestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			match(CREATE);
			setState(3343);
			match(TABLESPACE);
			setState(3344);
			name();
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(3345);
				opttablespaceowner();
				}
			}

			setState(3348);
			match(LOCATION);
			setState(3349);
			sconst();
			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3350);
				reloptions_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttablespaceownerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespaceowner; }
	}

	public final OpttablespaceownerContext opttablespaceowner() throws RecognitionException {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_opttablespaceowner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3353);
			match(OWNER);
			setState(3354);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DroptablespacestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptablespacestmt; }
	}

	public final DroptablespacestmtContext droptablespacestmt() throws RecognitionException {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_droptablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3356);
			match(DROP);
			setState(3357);
			match(TABLESPACE);
			setState(3360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(3358);
				match(IF_P);
				setState(3359);
				match(EXISTS);
				}
				break;
			}
			setState(3362);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateextensionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createextensionstmt; }
	}

	public final CreateextensionstmtContext createextensionstmt() throws RecognitionException {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_createextensionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3364);
			match(CREATE);
			setState(3365);
			match(EXTENSION);
			setState(3369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(3366);
				match(IF_P);
				setState(3367);
				match(NOT);
				setState(3368);
				match(EXISTS);
				}
				break;
			}
			setState(3371);
			name();
			setState(3373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3372);
				with_();
				}
			}

			setState(3375);
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public List<Create_extension_opt_itemContext> create_extension_opt_item() {
			return getRuleContexts(Create_extension_opt_itemContext.class);
		}
		public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return getRuleContext(Create_extension_opt_itemContext.class,i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_create_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				setState(3377);
				create_extension_opt_item();
				}
				}
				setState(3382);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_create_extension_opt_item);
		try {
			setState(3390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3383);
				match(SCHEMA);
				setState(3384);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3385);
				match(VERSION_P);
				setState(3386);
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3387);
				match(FROM);
				setState(3388);
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3389);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterextensionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensionstmt; }
	}

	public final AlterextensionstmtContext alterextensionstmt() throws RecognitionException {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alterextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			match(ALTER);
			setState(3393);
			match(EXTENSION);
			setState(3394);
			name();
			setState(3395);
			match(UPDATE);
			setState(3396);
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public List<Alter_extension_opt_itemContext> alter_extension_opt_item() {
			return getRuleContexts(Alter_extension_opt_itemContext.class);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return getRuleContext(Alter_extension_opt_itemContext.class,i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alter_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(3398);
				alter_extension_opt_item();
				}
				}
				setState(3403);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(TO);
			setState(3405);
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterextensioncontentsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensioncontentsstmt; }
	}

	public final AlterextensioncontentsstmtContext alterextensioncontentsstmt() throws RecognitionException {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alterextensioncontentsstmt);
		try {
			setState(3511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3407);
				match(ALTER);
				setState(3408);
				match(EXTENSION);
				setState(3409);
				name();
				setState(3410);
				add_drop();
				setState(3411);
				object_type_name();
				setState(3412);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3414);
				match(ALTER);
				setState(3415);
				match(EXTENSION);
				setState(3416);
				name();
				setState(3417);
				add_drop();
				setState(3418);
				object_type_any_name();
				setState(3419);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3421);
				match(ALTER);
				setState(3422);
				match(EXTENSION);
				setState(3423);
				name();
				setState(3424);
				add_drop();
				setState(3425);
				match(AGGREGATE);
				setState(3426);
				aggregate_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3428);
				match(ALTER);
				setState(3429);
				match(EXTENSION);
				setState(3430);
				name();
				setState(3431);
				add_drop();
				setState(3432);
				match(CAST);
				setState(3433);
				match(OPEN_PAREN);
				setState(3434);
				typename();
				setState(3435);
				match(AS);
				setState(3436);
				typename();
				setState(3437);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3439);
				match(ALTER);
				setState(3440);
				match(EXTENSION);
				setState(3441);
				name();
				setState(3442);
				add_drop();
				setState(3443);
				match(DOMAIN_P);
				setState(3444);
				typename();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3446);
				match(ALTER);
				setState(3447);
				match(EXTENSION);
				setState(3448);
				name();
				setState(3449);
				add_drop();
				setState(3450);
				match(FUNCTION);
				setState(3451);
				function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3453);
				match(ALTER);
				setState(3454);
				match(EXTENSION);
				setState(3455);
				name();
				setState(3456);
				add_drop();
				setState(3457);
				match(OPERATOR);
				setState(3458);
				operator_with_argtypes();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3460);
				match(ALTER);
				setState(3461);
				match(EXTENSION);
				setState(3462);
				name();
				setState(3463);
				add_drop();
				setState(3464);
				match(OPERATOR);
				setState(3465);
				match(CLASS);
				setState(3466);
				any_name();
				setState(3467);
				match(USING);
				setState(3468);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3470);
				match(ALTER);
				setState(3471);
				match(EXTENSION);
				setState(3472);
				name();
				setState(3473);
				add_drop();
				setState(3474);
				match(OPERATOR);
				setState(3475);
				match(FAMILY);
				setState(3476);
				any_name();
				setState(3477);
				match(USING);
				setState(3478);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3480);
				match(ALTER);
				setState(3481);
				match(EXTENSION);
				setState(3482);
				name();
				setState(3483);
				add_drop();
				setState(3484);
				match(PROCEDURE);
				setState(3485);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3487);
				match(ALTER);
				setState(3488);
				match(EXTENSION);
				setState(3489);
				name();
				setState(3490);
				add_drop();
				setState(3491);
				match(ROUTINE);
				setState(3492);
				function_with_argtypes();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3494);
				match(ALTER);
				setState(3495);
				match(EXTENSION);
				setState(3496);
				name();
				setState(3497);
				add_drop();
				setState(3498);
				match(TRANSFORM);
				setState(3499);
				match(FOR);
				setState(3500);
				typename();
				setState(3501);
				match(LANGUAGE);
				setState(3502);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3504);
				match(ALTER);
				setState(3505);
				match(EXTENSION);
				setState(3506);
				name();
				setState(3507);
				add_drop();
				setState(3508);
				match(TYPE_P);
				setState(3509);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatefdwstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Fdw_options_Context fdw_options_() {
			return getRuleContext(Fdw_options_Context.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfdwstmt; }
	}

	public final CreatefdwstmtContext createfdwstmt() throws RecognitionException {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_createfdwstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			match(CREATE);
			setState(3514);
			match(FOREIGN);
			setState(3515);
			match(DATA_P);
			setState(3516);
			match(WRAPPER);
			setState(3517);
			name();
			setState(3519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER || _la==NO || _la==VALIDATOR) {
				{
				setState(3518);
				fdw_options_();
				}
			}

			setState(3522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3521);
				create_generic_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_fdw_option);
		try {
			setState(3532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3524);
				match(HANDLER);
				setState(3525);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3526);
				match(NO);
				setState(3527);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3528);
				match(VALIDATOR);
				setState(3529);
				handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3530);
				match(NO);
				setState(3531);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fdw_optionsContext extends ParserRuleContext {
		public List<Fdw_optionContext> fdw_option() {
			return getRuleContexts(Fdw_optionContext.class);
		}
		public Fdw_optionContext fdw_option(int i) {
			return getRuleContext(Fdw_optionContext.class,i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_fdw_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3535); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3534);
				fdw_option();
				}
				}
				setState(3537); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fdw_options_Context extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Fdw_options_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options_; }
	}

	public final Fdw_options_Context fdw_options_() throws RecognitionException {
		Fdw_options_Context _localctx = new Fdw_options_Context(_ctx, getState());
		enterRule(_localctx, 332, RULE_fdw_options_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3539);
			fdw_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterfdwstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_options_Context fdw_options_() {
			return getRuleContext(Fdw_options_Context.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfdwstmt; }
	}

	public final AlterfdwstmtContext alterfdwstmt() throws RecognitionException {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alterfdwstmt);
		int _la;
		try {
			setState(3558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3541);
				match(ALTER);
				setState(3542);
				match(FOREIGN);
				setState(3543);
				match(DATA_P);
				setState(3544);
				match(WRAPPER);
				setState(3545);
				name();
				setState(3547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HANDLER || _la==NO || _la==VALIDATOR) {
					{
					setState(3546);
					fdw_options_();
					}
				}

				setState(3549);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3551);
				match(ALTER);
				setState(3552);
				match(FOREIGN);
				setState(3553);
				match(DATA_P);
				setState(3554);
				match(WRAPPER);
				setState(3555);
				name();
				setState(3556);
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_create_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3560);
			match(OPTIONS);
			setState(3561);
			match(OPEN_PAREN);
			setState(3562);
			generic_option_list();
			setState(3563);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_listContext extends ParserRuleContext {
		public List<Generic_option_elemContext> generic_option_elem() {
			return getRuleContexts(Generic_option_elemContext.class);
		}
		public Generic_option_elemContext generic_option_elem(int i) {
			return getRuleContext(Generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3565);
			generic_option_elem();
			setState(3570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3566);
				match(COMMA);
				setState(3567);
				generic_option_elem();
				}
				}
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			match(OPTIONS);
			setState(3574);
			match(OPEN_PAREN);
			setState(3575);
			alter_generic_option_list();
			setState(3576);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public List<Alter_generic_option_elemContext> alter_generic_option_elem() {
			return getRuleContexts(Alter_generic_option_elemContext.class);
		}
		public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return getRuleContext(Alter_generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alter_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3578);
			alter_generic_option_elem();
			setState(3583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3579);
				match(COMMA);
				setState(3580);
				alter_generic_option_elem();
				}
				}
				setState(3585);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_generic_option_elem);
		try {
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3586);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3587);
				match(SET);
				setState(3588);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3589);
				match(ADD_P);
				setState(3590);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3591);
				match(DROP);
				setState(3592);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3595);
			generic_option_name();
			setState(3596);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3598);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3600);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Type_Context type_() {
			return getRuleContext(Type_Context.class,0);
		}
		public Foreign_server_version_Context foreign_server_version_() {
			return getRuleContext(Foreign_server_version_Context.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeignserverstmt; }
	}

	public final CreateforeignserverstmtContext createforeignserverstmt() throws RecognitionException {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_createforeignserverstmt);
		int _la;
		try {
			setState(3637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3602);
				match(CREATE);
				setState(3603);
				match(SERVER);
				setState(3604);
				name();
				setState(3606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE_P) {
					{
					setState(3605);
					type_();
					}
				}

				setState(3609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION_P) {
					{
					setState(3608);
					foreign_server_version_();
					}
				}

				setState(3611);
				match(FOREIGN);
				setState(3612);
				match(DATA_P);
				setState(3613);
				match(WRAPPER);
				setState(3614);
				name();
				setState(3616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3615);
					create_generic_options();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3618);
				match(CREATE);
				setState(3619);
				match(SERVER);
				setState(3620);
				match(IF_P);
				setState(3621);
				match(NOT);
				setState(3622);
				match(EXISTS);
				setState(3623);
				name();
				setState(3625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE_P) {
					{
					setState(3624);
					type_();
					}
				}

				setState(3628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION_P) {
					{
					setState(3627);
					foreign_server_version_();
					}
				}

				setState(3630);
				match(FOREIGN);
				setState(3631);
				match(DATA_P);
				setState(3632);
				match(WRAPPER);
				setState(3633);
				name();
				setState(3635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3634);
					create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_Context extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_; }
	}

	public final Type_Context type_() throws RecognitionException {
		Type_Context _localctx = new Type_Context(_ctx, getState());
		enterRule(_localctx, 354, RULE_type_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3639);
			match(TYPE_P);
			setState(3640);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_foreign_server_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3642);
			match(VERSION_P);
			setState(3645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				setState(3643);
				sconst();
				}
				break;
			case NULL_P:
				{
				setState(3644);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreign_server_version_Context extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Foreign_server_version_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version_; }
	}

	public final Foreign_server_version_Context foreign_server_version_() throws RecognitionException {
		Foreign_server_version_Context _localctx = new Foreign_server_version_Context(_ctx, getState());
		enterRule(_localctx, 358, RULE_foreign_server_version_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3647);
			foreign_server_version();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterforeignserverstmt; }
	}

	public final AlterforeignserverstmtContext alterforeignserverstmt() throws RecognitionException {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alterforeignserverstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			match(ALTER);
			setState(3650);
			match(SERVER);
			setState(3651);
			name();
			setState(3657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				{
				setState(3652);
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				setState(3653);
				foreign_server_version();
				setState(3655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3654);
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateforeigntablestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeigntablestmt; }
	}

	public final CreateforeigntablestmtContext createforeigntablestmt() throws RecognitionException {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_createforeigntablestmt);
		int _la;
		try {
			setState(3731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3659);
				match(CREATE);
				setState(3660);
				match(FOREIGN);
				setState(3661);
				match(TABLE);
				setState(3662);
				qualified_name();
				setState(3663);
				match(OPEN_PAREN);
				setState(3665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120252928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576460889742966791L) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & -2076180479L) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & -1L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & -1L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & -33L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & -1L) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & -4644337652596737L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 576460825787662341L) != 0)) {
					{
					setState(3664);
					opttableelementlist();
					}
				}

				setState(3667);
				match(CLOSE_PAREN);
				setState(3669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(3668);
					optinherit();
					}
				}

				setState(3671);
				match(SERVER);
				setState(3672);
				name();
				setState(3674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3673);
					create_generic_options();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3676);
				match(CREATE);
				setState(3677);
				match(FOREIGN);
				setState(3678);
				match(TABLE);
				setState(3679);
				match(IF_P);
				setState(3680);
				match(NOT);
				setState(3681);
				match(EXISTS);
				setState(3682);
				qualified_name();
				setState(3683);
				match(OPEN_PAREN);
				setState(3685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4399120252928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 576460889742966791L) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & -2076180479L) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & -1L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & -1L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & -33L) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & -1L) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & -4644337652596737L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 576460825787662341L) != 0)) {
					{
					setState(3684);
					opttableelementlist();
					}
				}

				setState(3687);
				match(CLOSE_PAREN);
				setState(3689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(3688);
					optinherit();
					}
				}

				setState(3691);
				match(SERVER);
				setState(3692);
				name();
				setState(3694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3693);
					create_generic_options();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3696);
				match(CREATE);
				setState(3697);
				match(FOREIGN);
				setState(3698);
				match(TABLE);
				setState(3699);
				qualified_name();
				setState(3700);
				match(PARTITION);
				setState(3701);
				match(OF);
				setState(3702);
				qualified_name();
				setState(3704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3703);
					opttypedtableelementlist();
					}
				}

				setState(3706);
				partitionboundspec();
				setState(3707);
				match(SERVER);
				setState(3708);
				name();
				setState(3710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3709);
					create_generic_options();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3712);
				match(CREATE);
				setState(3713);
				match(FOREIGN);
				setState(3714);
				match(TABLE);
				setState(3715);
				match(IF_P);
				setState(3716);
				match(NOT);
				setState(3717);
				match(EXISTS);
				setState(3718);
				qualified_name();
				setState(3719);
				match(PARTITION);
				setState(3720);
				match(OF);
				setState(3721);
				qualified_name();
				setState(3723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3722);
					opttypedtableelementlist();
					}
				}

				setState(3725);
				partitionboundspec();
				setState(3726);
				match(SERVER);
				setState(3727);
				name();
				setState(3729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3728);
					create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImportforeignschemastmtContext extends ParserRuleContext {
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Import_qualificationContext import_qualification() {
			return getRuleContext(Import_qualificationContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importforeignschemastmt; }
	}

	public final ImportforeignschemastmtContext importforeignschemastmt() throws RecognitionException {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_importforeignschemastmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			match(IMPORT_P);
			setState(3734);
			match(FOREIGN);
			setState(3735);
			match(SCHEMA);
			setState(3736);
			name();
			setState(3738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPT || _la==LIMIT) {
				{
				setState(3737);
				import_qualification();
				}
			}

			setState(3740);
			match(FROM);
			setState(3741);
			match(SERVER);
			setState(3742);
			name();
			setState(3743);
			match(INTO);
			setState(3744);
			name();
			setState(3746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3745);
				create_generic_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Import_qualification_typeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification_type; }
	}

	public final Import_qualification_typeContext import_qualification_type() throws RecognitionException {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_import_qualification_type);
		try {
			setState(3751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3748);
				match(LIMIT);
				setState(3749);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3750);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Import_qualificationContext extends ParserRuleContext {
		public Import_qualification_typeContext import_qualification_type() {
			return getRuleContext(Import_qualification_typeContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification; }
	}

	public final Import_qualificationContext import_qualification() throws RecognitionException {
		Import_qualificationContext _localctx = new Import_qualificationContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_import_qualification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			import_qualification_type();
			setState(3754);
			match(OPEN_PAREN);
			setState(3755);
			relation_expr_list();
			setState(3756);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateusermappingstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createusermappingstmt; }
	}

	public final CreateusermappingstmtContext createusermappingstmt() throws RecognitionException {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_createusermappingstmt);
		int _la;
		try {
			setState(3781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3758);
				match(CREATE);
				setState(3759);
				match(USER);
				setState(3760);
				match(MAPPING);
				setState(3761);
				match(FOR);
				setState(3762);
				auth_ident();
				setState(3763);
				match(SERVER);
				setState(3764);
				name();
				setState(3766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3765);
					create_generic_options();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3768);
				match(CREATE);
				setState(3769);
				match(USER);
				setState(3770);
				match(MAPPING);
				setState(3771);
				match(IF_P);
				setState(3772);
				match(NOT);
				setState(3773);
				match(EXISTS);
				setState(3774);
				match(FOR);
				setState(3775);
				auth_ident();
				setState(3776);
				match(SERVER);
				setState(3777);
				name();
				setState(3779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3778);
					create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Auth_identContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_auth_ident);
		try {
			setState(3785);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case CURRENT_USER:
			case SESSION_USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(3783);
				rolespec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3784);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropusermappingstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropusermappingstmt; }
	}

	public final DropusermappingstmtContext dropusermappingstmt() throws RecognitionException {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_dropusermappingstmt);
		try {
			setState(3805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3787);
				match(DROP);
				setState(3788);
				match(USER);
				setState(3789);
				match(MAPPING);
				setState(3790);
				match(FOR);
				setState(3791);
				auth_ident();
				setState(3792);
				match(SERVER);
				setState(3793);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3795);
				match(DROP);
				setState(3796);
				match(USER);
				setState(3797);
				match(MAPPING);
				setState(3798);
				match(IF_P);
				setState(3799);
				match(EXISTS);
				setState(3800);
				match(FOR);
				setState(3801);
				auth_ident();
				setState(3802);
				match(SERVER);
				setState(3803);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterusermappingstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterusermappingstmt; }
	}

	public final AlterusermappingstmtContext alterusermappingstmt() throws RecognitionException {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alterusermappingstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3807);
			match(ALTER);
			setState(3808);
			match(USER);
			setState(3809);
			match(MAPPING);
			setState(3810);
			match(FOR);
			setState(3811);
			auth_ident();
			setState(3812);
			match(SERVER);
			setState(3813);
			name();
			setState(3814);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatepolicystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return getRuleContext(RowsecuritydefaultpermissiveContext.class,0);
		}
		public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return getRuleContext(RowsecuritydefaultforcmdContext.class,0);
		}
		public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return getRuleContext(RowsecuritydefaulttoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpolicystmt; }
	}

	public final CreatepolicystmtContext createpolicystmt() throws RecognitionException {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_createpolicystmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816);
			match(CREATE);
			setState(3817);
			match(POLICY);
			setState(3818);
			name();
			setState(3819);
			match(ON);
			setState(3820);
			qualified_name();
			setState(3822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3821);
				rowsecuritydefaultpermissive();
				}
			}

			setState(3825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3824);
				rowsecuritydefaultforcmd();
				}
			}

			setState(3828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(3827);
				rowsecuritydefaulttorole();
				}
			}

			setState(3831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3830);
				rowsecurityoptionalexpr();
				}
			}

			setState(3834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3833);
				rowsecurityoptionalwithcheck();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterpolicystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return getRuleContext(RowsecurityoptionaltoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpolicystmt; }
	}

	public final AlterpolicystmtContext alterpolicystmt() throws RecognitionException {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterpolicystmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			match(ALTER);
			setState(3837);
			match(POLICY);
			setState(3838);
			name();
			setState(3839);
			match(ON);
			setState(3840);
			qualified_name();
			setState(3842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(3841);
				rowsecurityoptionaltorole();
				}
			}

			setState(3845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3844);
				rowsecurityoptionalexpr();
				}
			}

			setState(3848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3847);
				rowsecurityoptionalwithcheck();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecurityoptionalexprContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalexpr; }
	}

	public final RowsecurityoptionalexprContext rowsecurityoptionalexpr() throws RecognitionException {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_rowsecurityoptionalexpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			match(USING);
			setState(3851);
			match(OPEN_PAREN);
			setState(3852);
			a_expr();
			setState(3853);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalwithcheck; }
	}

	public final RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() throws RecognitionException {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_rowsecurityoptionalwithcheck);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3855);
			match(WITH);
			setState(3856);
			match(CHECK);
			setState(3857);
			match(OPEN_PAREN);
			setState(3858);
			a_expr();
			setState(3859);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecuritydefaulttoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaulttorole; }
	}

	public final RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() throws RecognitionException {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_rowsecuritydefaulttorole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3861);
			match(TO);
			setState(3862);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecurityoptionaltoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionaltorole; }
	}

	public final RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() throws RecognitionException {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_rowsecurityoptionaltorole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			match(TO);
			setState(3865);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultpermissive; }
	}

	public final RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() throws RecognitionException {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_rowsecuritydefaultpermissive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3867);
			match(AS);
			setState(3868);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowsecuritydefaultforcmdContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Row_security_cmdContext row_security_cmd() {
			return getRuleContext(Row_security_cmdContext.class,0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultforcmd; }
	}

	public final RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() throws RecognitionException {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_rowsecuritydefaultforcmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			match(FOR);
			setState(3871);
			row_security_cmd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_security_cmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_security_cmd; }
	}

	public final Row_security_cmdContext row_security_cmd() throws RecognitionException {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_row_security_cmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3873);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateamstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Am_typeContext am_type() {
			return getRuleContext(Am_typeContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createamstmt; }
	}

	public final CreateamstmtContext createamstmt() throws RecognitionException {
		CreateamstmtContext _localctx = new CreateamstmtContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_createamstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3875);
			match(CREATE);
			setState(3876);
			match(ACCESS);
			setState(3877);
			match(METHOD);
			setState(3878);
			name();
			setState(3879);
			match(TYPE_P);
			setState(3880);
			am_type();
			setState(3881);
			match(HANDLER);
			setState(3882);
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Am_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_am_type; }
	}

	public final Am_typeContext am_type() throws RecognitionException {
		Am_typeContext _localctx = new Am_typeContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_am_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3884);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatetrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggeractiontimeContext triggeractiontime() {
			return getRuleContext(TriggeractiontimeContext.class,0);
		}
		public TriggereventsContext triggerevents() {
			return getRuleContext(TriggereventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TriggerfuncargsContext triggerfuncargs() {
			return getRuleContext(TriggerfuncargsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerreferencingContext triggerreferencing() {
			return getRuleContext(TriggerreferencingContext.class,0);
		}
		public TriggerforspecContext triggerforspec() {
			return getRuleContext(TriggerforspecContext.class,0);
		}
		public TriggerwhenContext triggerwhen() {
			return getRuleContext(TriggerwhenContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public OptconstrfromtableContext optconstrfromtable() {
			return getRuleContext(OptconstrfromtableContext.class,0);
		}
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtrigstmt; }
	}

	public final CreatetrigstmtContext createtrigstmt() throws RecognitionException {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_createtrigstmt);
		int _la;
		try {
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3886);
				match(CREATE);
				setState(3887);
				match(TRIGGER);
				setState(3888);
				name();
				setState(3889);
				triggeractiontime();
				setState(3890);
				triggerevents();
				setState(3891);
				match(ON);
				setState(3892);
				qualified_name();
				setState(3894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFERENCING) {
					{
					setState(3893);
					triggerreferencing();
					}
				}

				setState(3897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3896);
					triggerforspec();
					}
				}

				setState(3900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3899);
					triggerwhen();
					}
				}

				setState(3902);
				match(EXECUTE);
				setState(3903);
				function_or_procedure();
				setState(3904);
				func_name();
				setState(3905);
				match(OPEN_PAREN);
				setState(3906);
				triggerfuncargs();
				setState(3907);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3909);
				match(CREATE);
				setState(3910);
				match(CONSTRAINT);
				setState(3911);
				match(TRIGGER);
				setState(3912);
				name();
				setState(3913);
				match(AFTER);
				setState(3914);
				triggerevents();
				setState(3915);
				match(ON);
				setState(3916);
				qualified_name();
				setState(3918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3917);
					optconstrfromtable();
					}
				}

				setState(3920);
				constraintattributespec();
				setState(3921);
				match(FOR);
				setState(3922);
				match(EACH);
				setState(3923);
				match(ROW);
				setState(3925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3924);
					triggerwhen();
					}
				}

				setState(3927);
				match(EXECUTE);
				setState(3928);
				function_or_procedure();
				setState(3929);
				func_name();
				setState(3930);
				match(OPEN_PAREN);
				setState(3931);
				triggerfuncargs();
				setState(3932);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggeractiontimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeractiontime; }
	}

	public final TriggeractiontimeContext triggeractiontime() throws RecognitionException {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_triggeractiontime);
		try {
			setState(3940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3936);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3937);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3938);
				match(INSTEAD);
				setState(3939);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggereventsContext extends ParserRuleContext {
		public List<TriggeroneeventContext> triggeroneevent() {
			return getRuleContexts(TriggeroneeventContext.class);
		}
		public TriggeroneeventContext triggeroneevent(int i) {
			return getRuleContext(TriggeroneeventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerevents; }
	}

	public final TriggereventsContext triggerevents() throws RecognitionException {
		TriggereventsContext _localctx = new TriggereventsContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_triggerevents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			triggeroneevent();
			setState(3947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(3943);
				match(OR);
				setState(3944);
				triggeroneevent();
				}
				}
				setState(3949);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggeroneeventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeroneevent; }
	}

	public final TriggeroneeventContext triggeroneevent() throws RecognitionException {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_triggeroneevent);
		try {
			setState(3957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3950);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3951);
				match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3952);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3953);
				match(UPDATE);
				setState(3954);
				match(OF);
				setState(3955);
				columnlist();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3956);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerreferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TriggertransitionsContext triggertransitions() {
			return getRuleContext(TriggertransitionsContext.class,0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerreferencing; }
	}

	public final TriggerreferencingContext triggerreferencing() throws RecognitionException {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_triggerreferencing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			match(REFERENCING);
			setState(3960);
			triggertransitions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggertransitionsContext extends ParserRuleContext {
		public List<TriggertransitionContext> triggertransition() {
			return getRuleContexts(TriggertransitionContext.class);
		}
		public TriggertransitionContext triggertransition(int i) {
			return getRuleContext(TriggertransitionContext.class,i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransitions; }
	}

	public final TriggertransitionsContext triggertransitions() throws RecognitionException {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_triggertransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3963); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3962);
				triggertransition();
				}
				}
				setState(3965); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggertransitionContext extends ParserRuleContext {
		public TransitionoldornewContext transitionoldornew() {
			return getRuleContext(TransitionoldornewContext.class,0);
		}
		public TransitionrowortableContext transitionrowortable() {
			return getRuleContext(TransitionrowortableContext.class,0);
		}
		public TransitionrelnameContext transitionrelname() {
			return getRuleContext(TransitionrelnameContext.class,0);
		}
		public As_Context as_() {
			return getRuleContext(As_Context.class,0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransition; }
	}

	public final TriggertransitionContext triggertransition() throws RecognitionException {
		TriggertransitionContext _localctx = new TriggertransitionContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_triggertransition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			transitionoldornew();
			setState(3968);
			transitionrowortable();
			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3969);
				as_();
				}
			}

			setState(3972);
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionoldornewContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionoldornew; }
	}

	public final TransitionoldornewContext transitionoldornew() throws RecognitionException {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_transitionoldornew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionrowortableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrowortable; }
	}

	public final TransitionrowortableContext transitionrowortable() throws RecognitionException {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_transitionrowortable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransitionrelnameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrelname; }
	}

	public final TransitionrelnameContext transitionrelname() throws RecognitionException {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_transitionrelname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerforspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TriggerfortypeContext triggerfortype() {
			return getRuleContext(TriggerfortypeContext.class,0);
		}
		public TriggerforopteachContext triggerforopteach() {
			return getRuleContext(TriggerforopteachContext.class,0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforspec; }
	}

	public final TriggerforspecContext triggerforspec() throws RecognitionException {
		TriggerforspecContext _localctx = new TriggerforspecContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_triggerforspec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			match(FOR);
			setState(3982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EACH) {
				{
				setState(3981);
				triggerforopteach();
				}
			}

			setState(3984);
			triggerfortype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerforopteachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforopteach; }
	}

	public final TriggerforopteachContext triggerforopteach() throws RecognitionException {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_triggerforopteach);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3986);
			match(EACH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerfortypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfortype; }
	}

	public final TriggerfortypeContext triggerfortype() throws RecognitionException {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_triggerfortype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			_la = _input.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerwhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerwhen; }
	}

	public final TriggerwhenContext triggerwhen() throws RecognitionException {
		TriggerwhenContext _localctx = new TriggerwhenContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_triggerwhen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3990);
			match(WHEN);
			setState(3991);
			match(OPEN_PAREN);
			setState(3992);
			a_expr();
			setState(3993);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_or_procedureContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_or_procedure; }
	}

	public final Function_or_procedureContext function_or_procedure() throws RecognitionException {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_function_or_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3995);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerfuncargsContext extends ParserRuleContext {
		public List<TriggerfuncargContext> triggerfuncarg() {
			return getRuleContexts(TriggerfuncargContext.class);
		}
		public TriggerfuncargContext triggerfuncarg(int i) {
			return getRuleContext(TriggerfuncargContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncargs; }
	}

	public final TriggerfuncargsContext triggerfuncargs() throws RecognitionException {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_triggerfuncargs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case EXIT:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				setState(3997);
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4001);
				match(COMMA);
				setState(4002);
				triggerfuncarg();
				}
				}
				setState(4007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerfuncargContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncarg; }
	}

	public final TriggerfuncargContext triggerfuncarg() throws RecognitionException {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_triggerfuncarg);
		try {
			setState(4012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				enterOuterAlt(_localctx, 1);
				{
				setState(4008);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(4009);
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(4010);
				sconst();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case EXIT:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(4011);
				colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptconstrfromtableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstrfromtable; }
	}

	public final OptconstrfromtableContext optconstrfromtable() throws RecognitionException {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_optconstrfromtable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4014);
			match(FROM);
			setState(4015);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintattributespecContext extends ParserRuleContext {
		public List<ConstraintattributeElemContext> constraintattributeElem() {
			return getRuleContexts(ConstraintattributeElemContext.class);
		}
		public ConstraintattributeElemContext constraintattributeElem(int i) {
			return getRuleContext(ConstraintattributeElemContext.class,i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributespec; }
	}

	public final ConstraintattributespecContext constraintattributespec() throws RecognitionException {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_constraintattributespec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 8421377L) != 0) || _la==NO) {
				{
				{
				setState(4017);
				constraintattributeElem();
				}
				}
				setState(4022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintattributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributeElem; }
	}

	public final ConstraintattributeElemContext constraintattributeElem() throws RecognitionException {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_constraintattributeElem);
		try {
			setState(4034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4023);
				match(NOT);
				setState(4024);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4026);
				match(INITIALLY);
				setState(4027);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4028);
				match(INITIALLY);
				setState(4029);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4030);
				match(NOT);
				setState(4031);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4032);
				match(NO);
				setState(4033);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateeventtrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Event_trigger_when_listContext event_trigger_when_list() {
			return getRuleContext(Event_trigger_when_listContext.class,0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createeventtrigstmt; }
	}

	public final CreateeventtrigstmtContext createeventtrigstmt() throws RecognitionException {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_createeventtrigstmt);
		try {
			setState(4062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4036);
				match(CREATE);
				setState(4037);
				match(EVENT);
				setState(4038);
				match(TRIGGER);
				setState(4039);
				name();
				setState(4040);
				match(ON);
				setState(4041);
				colLabel();
				setState(4042);
				match(EXECUTE);
				setState(4043);
				function_or_procedure();
				setState(4044);
				func_name();
				setState(4045);
				match(OPEN_PAREN);
				setState(4046);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4048);
				match(CREATE);
				setState(4049);
				match(EVENT);
				setState(4050);
				match(TRIGGER);
				setState(4051);
				name();
				setState(4052);
				match(ON);
				setState(4053);
				colLabel();
				setState(4054);
				match(WHEN);
				setState(4055);
				event_trigger_when_list();
				setState(4056);
				match(EXECUTE);
				setState(4057);
				function_or_procedure();
				setState(4058);
				func_name();
				setState(4059);
				match(OPEN_PAREN);
				setState(4060);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Event_trigger_when_listContext extends ParserRuleContext {
		public List<Event_trigger_when_itemContext> event_trigger_when_item() {
			return getRuleContexts(Event_trigger_when_itemContext.class);
		}
		public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return getRuleContext(Event_trigger_when_itemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_list; }
	}

	public final Event_trigger_when_listContext event_trigger_when_list() throws RecognitionException {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_event_trigger_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4064);
			event_trigger_when_item();
			setState(4069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4065);
				match(AND);
				setState(4066);
				event_trigger_when_item();
				}
				}
				setState(4071);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Event_trigger_when_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Event_trigger_value_listContext event_trigger_value_list() {
			return getRuleContext(Event_trigger_value_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_item; }
	}

	public final Event_trigger_when_itemContext event_trigger_when_item() throws RecognitionException {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_event_trigger_when_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4072);
			colid();
			setState(4073);
			match(IN_P);
			setState(4074);
			match(OPEN_PAREN);
			setState(4075);
			event_trigger_value_list();
			setState(4076);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Event_trigger_value_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_value_list; }
	}

	public final Event_trigger_value_listContext event_trigger_value_list() throws RecognitionException {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_event_trigger_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			sconst();
			setState(4083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4079);
				match(COMMA);
				setState(4080);
				sconst();
				}
				}
				setState(4085);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltereventtrigstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altereventtrigstmt; }
	}

	public final AltereventtrigstmtContext altereventtrigstmt() throws RecognitionException {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_altereventtrigstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			match(ALTER);
			setState(4087);
			match(EVENT);
			setState(4088);
			match(TRIGGER);
			setState(4089);
			name();
			setState(4090);
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enable_triggerContext extends ParserRuleContext {
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_enable_trigger);
		try {
			setState(4098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4092);
				match(ENABLE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4093);
				match(ENABLE_P);
				setState(4094);
				match(REPLICA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4095);
				match(ENABLE_P);
				setState(4096);
				match(ALWAYS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4097);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateassertionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createassertionstmt; }
	}

	public final CreateassertionstmtContext createassertionstmt() throws RecognitionException {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_createassertionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4100);
			match(CREATE);
			setState(4101);
			match(ASSERTION);
			setState(4102);
			any_name();
			setState(4103);
			match(CHECK);
			setState(4104);
			match(OPEN_PAREN);
			setState(4105);
			a_expr();
			setState(4106);
			match(CLOSE_PAREN);
			setState(4107);
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Or_replace_Context or_replace_() {
			return getRuleContext(Or_replace_Context.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttablefuncelementlistContext opttablefuncelementlist() {
			return getRuleContext(OpttablefuncelementlistContext.class,0);
		}
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public Enum_val_list_Context enum_val_list_() {
			return getRuleContext(Enum_val_list_Context.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definestmt; }
	}

	public final DefinestmtContext definestmt() throws RecognitionException {
		DefinestmtContext _localctx = new DefinestmtContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_definestmt);
		int _la;
		try {
			setState(4223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4109);
				match(CREATE);
				setState(4111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(4110);
					or_replace_();
					}
				}

				setState(4113);
				match(AGGREGATE);
				setState(4114);
				func_name();
				setState(4115);
				aggr_args();
				setState(4116);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4118);
				match(CREATE);
				setState(4120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(4119);
					or_replace_();
					}
				}

				setState(4122);
				match(AGGREGATE);
				setState(4123);
				func_name();
				setState(4124);
				old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4126);
				match(CREATE);
				setState(4127);
				match(OPERATOR);
				setState(4128);
				any_operator();
				setState(4129);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4131);
				match(CREATE);
				setState(4132);
				match(TYPE_P);
				setState(4133);
				any_name();
				setState(4134);
				definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4136);
				match(CREATE);
				setState(4137);
				match(TYPE_P);
				setState(4138);
				any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4139);
				match(CREATE);
				setState(4140);
				match(TYPE_P);
				setState(4141);
				any_name();
				setState(4142);
				match(AS);
				setState(4143);
				match(OPEN_PAREN);
				setState(4145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(4144);
					opttablefuncelementlist();
					}
				}

				setState(4147);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4149);
				match(CREATE);
				setState(4150);
				match(TYPE_P);
				setState(4151);
				any_name();
				setState(4152);
				match(AS);
				setState(4153);
				match(ENUM_P);
				setState(4154);
				match(OPEN_PAREN);
				setState(4156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & 134217749L) != 0)) {
					{
					setState(4155);
					enum_val_list_();
					}
				}

				setState(4158);
				match(CLOSE_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4160);
				match(CREATE);
				setState(4161);
				match(TYPE_P);
				setState(4162);
				any_name();
				setState(4163);
				match(AS);
				setState(4164);
				match(RANGE);
				setState(4165);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4167);
				match(CREATE);
				setState(4168);
				match(TEXT_P);
				setState(4169);
				match(SEARCH);
				setState(4170);
				match(PARSER);
				setState(4171);
				any_name();
				setState(4172);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4174);
				match(CREATE);
				setState(4175);
				match(TEXT_P);
				setState(4176);
				match(SEARCH);
				setState(4177);
				match(DICTIONARY);
				setState(4178);
				any_name();
				setState(4179);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4181);
				match(CREATE);
				setState(4182);
				match(TEXT_P);
				setState(4183);
				match(SEARCH);
				setState(4184);
				match(TEMPLATE);
				setState(4185);
				any_name();
				setState(4186);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4188);
				match(CREATE);
				setState(4189);
				match(TEXT_P);
				setState(4190);
				match(SEARCH);
				setState(4191);
				match(CONFIGURATION);
				setState(4192);
				any_name();
				setState(4193);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4195);
				match(CREATE);
				setState(4196);
				match(COLLATION);
				setState(4197);
				any_name();
				setState(4198);
				definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4200);
				match(CREATE);
				setState(4201);
				match(COLLATION);
				setState(4202);
				match(IF_P);
				setState(4203);
				match(NOT);
				setState(4204);
				match(EXISTS);
				setState(4205);
				any_name();
				setState(4206);
				definition();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4208);
				match(CREATE);
				setState(4209);
				match(COLLATION);
				setState(4210);
				any_name();
				setState(4211);
				match(FROM);
				setState(4212);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4214);
				match(CREATE);
				setState(4215);
				match(COLLATION);
				setState(4216);
				match(IF_P);
				setState(4217);
				match(NOT);
				setState(4218);
				match(EXISTS);
				setState(4219);
				any_name();
				setState(4220);
				match(FROM);
				setState(4221);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4225);
			match(OPEN_PAREN);
			setState(4226);
			def_list();
			setState(4227);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Def_listContext extends ParserRuleContext {
		public List<Def_elemContext> def_elem() {
			return getRuleContexts(Def_elemContext.class);
		}
		public Def_elemContext def_elem(int i) {
			return getRuleContext(Def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
	}

	public final Def_listContext def_list() throws RecognitionException {
		Def_listContext _localctx = new Def_listContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			def_elem();
			setState(4234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4230);
				match(COMMA);
				setState(4231);
				def_elem();
				}
				}
				setState(4236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Def_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_def_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4237);
			colLabel();
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(4238);
				match(EQUAL);
				setState(4239);
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_def_arg);
		try {
			setState(4248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4242);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4243);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4244);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4245);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4246);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4247);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4250);
			match(OPEN_PAREN);
			setState(4251);
			old_aggr_list();
			setState(4252);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_aggr_listContext extends ParserRuleContext {
		public List<Old_aggr_elemContext> old_aggr_elem() {
			return getRuleContexts(Old_aggr_elemContext.class);
		}
		public Old_aggr_elemContext old_aggr_elem(int i) {
			return getRuleContext(Old_aggr_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_old_aggr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4254);
			old_aggr_elem();
			setState(4259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4255);
				match(COMMA);
				setState(4256);
				old_aggr_elem();
				}
				}
				setState(4261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_aggr_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			identifier();
			setState(4263);
			match(EQUAL);
			setState(4264);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enum_val_list_Context extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Enum_val_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list_; }
	}

	public final Enum_val_list_Context enum_val_list_() throws RecognitionException {
		Enum_val_list_Context _localctx = new Enum_val_list_Context(_ctx, getState());
		enterRule(_localctx, 470, RULE_enum_val_list_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4266);
			enum_val_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enum_val_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_enum_val_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4268);
			sconst();
			setState(4273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4269);
				match(COMMA);
				setState(4270);
				sconst();
				}
				}
				setState(4275);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterenumstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public If_not_exists_Context if_not_exists_() {
			return getRuleContext(If_not_exists_Context.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterenumstmt; }
	}

	public final AlterenumstmtContext alterenumstmt() throws RecognitionException {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_alterenumstmt);
		int _la;
		try {
			setState(4319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4276);
				match(ALTER);
				setState(4277);
				match(TYPE_P);
				setState(4278);
				any_name();
				setState(4279);
				match(ADD_P);
				setState(4280);
				match(VALUE_P);
				setState(4282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_P) {
					{
					setState(4281);
					if_not_exists_();
					}
				}

				setState(4284);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4286);
				match(ALTER);
				setState(4287);
				match(TYPE_P);
				setState(4288);
				any_name();
				setState(4289);
				match(ADD_P);
				setState(4290);
				match(VALUE_P);
				setState(4292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_P) {
					{
					setState(4291);
					if_not_exists_();
					}
				}

				setState(4294);
				sconst();
				setState(4295);
				match(BEFORE);
				setState(4296);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4298);
				match(ALTER);
				setState(4299);
				match(TYPE_P);
				setState(4300);
				any_name();
				setState(4301);
				match(ADD_P);
				setState(4302);
				match(VALUE_P);
				setState(4304);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_P) {
					{
					setState(4303);
					if_not_exists_();
					}
				}

				setState(4306);
				sconst();
				setState(4307);
				match(AFTER);
				setState(4308);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4310);
				match(ALTER);
				setState(4311);
				match(TYPE_P);
				setState(4312);
				any_name();
				setState(4313);
				match(RENAME);
				setState(4314);
				match(VALUE_P);
				setState(4315);
				sconst();
				setState(4316);
				match(TO);
				setState(4317);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_not_exists_Context extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public If_not_exists_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_not_exists_; }
	}

	public final If_not_exists_Context if_not_exists_() throws RecognitionException {
		If_not_exists_Context _localctx = new If_not_exists_Context(_ctx, getState());
		enterRule(_localctx, 476, RULE_if_not_exists_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4321);
			match(IF_P);
			setState(4322);
			match(NOT);
			setState(4323);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateopclassstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public Default_Context default_() {
			return getRuleContext(Default_Context.class,0);
		}
		public Opfamily_Context opfamily_() {
			return getRuleContext(Opfamily_Context.class,0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopclassstmt; }
	}

	public final CreateopclassstmtContext createopclassstmt() throws RecognitionException {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_createopclassstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4325);
			match(CREATE);
			setState(4326);
			match(OPERATOR);
			setState(4327);
			match(CLASS);
			setState(4328);
			any_name();
			setState(4330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4329);
				default_();
				}
			}

			setState(4332);
			match(FOR);
			setState(4333);
			match(TYPE_P);
			setState(4334);
			typename();
			setState(4335);
			match(USING);
			setState(4336);
			name();
			setState(4338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(4337);
				opfamily_();
				}
			}

			setState(4340);
			match(AS);
			setState(4341);
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_item_listContext extends ParserRuleContext {
		public List<Opclass_itemContext> opclass_item() {
			return getRuleContexts(Opclass_itemContext.class);
		}
		public Opclass_itemContext opclass_item(int i) {
			return getRuleContext(Opclass_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_opclass_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			opclass_item();
			setState(4348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4344);
				match(COMMA);
				setState(4345);
				opclass_item();
				}
				}
				setState(4350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Recheck_Context recheck_() {
			return getRuleContext(Recheck_Context.class,0);
		}
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_opclass_item);
		int _la;
		try {
			setState(4382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4351);
				match(OPERATOR);
				setState(4352);
				iconst();
				setState(4353);
				any_operator();
				setState(4355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4354);
					opclass_purpose();
					}
				}

				setState(4358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(4357);
					recheck_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4360);
				match(OPERATOR);
				setState(4361);
				iconst();
				setState(4362);
				operator_with_argtypes();
				setState(4364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4363);
					opclass_purpose();
					}
				}

				setState(4367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(4366);
					recheck_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4369);
				match(FUNCTION);
				setState(4370);
				iconst();
				setState(4371);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4373);
				match(FUNCTION);
				setState(4374);
				iconst();
				setState(4375);
				match(OPEN_PAREN);
				setState(4376);
				type_list();
				setState(4377);
				match(CLOSE_PAREN);
				setState(4378);
				function_with_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4380);
				match(STORAGE);
				setState(4381);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_Context extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Default_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_; }
	}

	public final Default_Context default_() throws RecognitionException {
		Default_Context _localctx = new Default_Context(_ctx, getState());
		enterRule(_localctx, 484, RULE_default_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4384);
			match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opfamily_Context extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opfamily_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opfamily_; }
	}

	public final Opfamily_Context opfamily_() throws RecognitionException {
		Opfamily_Context _localctx = new Opfamily_Context(_ctx, getState());
		enterRule(_localctx, 486, RULE_opfamily_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4386);
			match(FAMILY);
			setState(4387);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opclass_purpose);
		try {
			setState(4395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4389);
				match(FOR);
				setState(4390);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4391);
				match(FOR);
				setState(4392);
				match(ORDER);
				setState(4393);
				match(BY);
				setState(4394);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Recheck_Context extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public Recheck_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recheck_; }
	}

	public final Recheck_Context recheck_() throws RecognitionException {
		Recheck_Context _localctx = new Recheck_Context(_ctx, getState());
		enterRule(_localctx, 490, RULE_recheck_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			match(RECHECK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateopfamilystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopfamilystmt; }
	}

	public final CreateopfamilystmtContext createopfamilystmt() throws RecognitionException {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_createopfamilystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4399);
			match(CREATE);
			setState(4400);
			match(OPERATOR);
			setState(4401);
			match(FAMILY);
			setState(4402);
			any_name();
			setState(4403);
			match(USING);
			setState(4404);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteropfamilystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteropfamilystmt; }
	}

	public final AlteropfamilystmtContext alteropfamilystmt() throws RecognitionException {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_alteropfamilystmt);
		try {
			setState(4424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4406);
				match(ALTER);
				setState(4407);
				match(OPERATOR);
				setState(4408);
				match(FAMILY);
				setState(4409);
				any_name();
				setState(4410);
				match(USING);
				setState(4411);
				name();
				setState(4412);
				match(ADD_P);
				setState(4413);
				opclass_item_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4415);
				match(ALTER);
				setState(4416);
				match(OPERATOR);
				setState(4417);
				match(FAMILY);
				setState(4418);
				any_name();
				setState(4419);
				match(USING);
				setState(4420);
				name();
				setState(4421);
				match(DROP);
				setState(4422);
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_drop_listContext extends ParserRuleContext {
		public List<Opclass_dropContext> opclass_drop() {
			return getRuleContexts(Opclass_dropContext.class);
		}
		public Opclass_dropContext opclass_drop(int i) {
			return getRuleContext(Opclass_dropContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_opclass_drop_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4426);
			opclass_drop();
			setState(4431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4427);
				match(COMMA);
				setState(4428);
				opclass_drop();
				}
				}
				setState(4433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_opclass_drop);
		try {
			setState(4446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4434);
				match(OPERATOR);
				setState(4435);
				iconst();
				setState(4436);
				match(OPEN_PAREN);
				setState(4437);
				type_list();
				setState(4438);
				match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4440);
				match(FUNCTION);
				setState(4441);
				iconst();
				setState(4442);
				match(OPEN_PAREN);
				setState(4443);
				type_list();
				setState(4444);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropopclassstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopclassstmt; }
	}

	public final DropopclassstmtContext dropopclassstmt() throws RecognitionException {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_dropopclassstmt);
		int _la;
		try {
			setState(4468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4448);
				match(DROP);
				setState(4449);
				match(OPERATOR);
				setState(4450);
				match(CLASS);
				setState(4451);
				any_name();
				setState(4452);
				match(USING);
				setState(4453);
				name();
				setState(4455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4454);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4457);
				match(DROP);
				setState(4458);
				match(OPERATOR);
				setState(4459);
				match(CLASS);
				setState(4460);
				match(IF_P);
				setState(4461);
				match(EXISTS);
				setState(4462);
				any_name();
				setState(4463);
				match(USING);
				setState(4464);
				name();
				setState(4466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4465);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropopfamilystmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopfamilystmt; }
	}

	public final DropopfamilystmtContext dropopfamilystmt() throws RecognitionException {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_dropopfamilystmt);
		int _la;
		try {
			setState(4490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4470);
				match(DROP);
				setState(4471);
				match(OPERATOR);
				setState(4472);
				match(FAMILY);
				setState(4473);
				any_name();
				setState(4474);
				match(USING);
				setState(4475);
				name();
				setState(4477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4476);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4479);
				match(DROP);
				setState(4480);
				match(OPERATOR);
				setState(4481);
				match(FAMILY);
				setState(4482);
				match(IF_P);
				setState(4483);
				match(EXISTS);
				setState(4484);
				any_name();
				setState(4485);
				match(USING);
				setState(4486);
				name();
				setState(4488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4487);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropownedstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropownedstmt; }
	}

	public final DropownedstmtContext dropownedstmt() throws RecognitionException {
		DropownedstmtContext _localctx = new DropownedstmtContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_dropownedstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4492);
			match(DROP);
			setState(4493);
			match(OWNED);
			setState(4494);
			match(BY);
			setState(4495);
			role_list();
			setState(4497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4496);
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReassignownedstmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignownedstmt; }
	}

	public final ReassignownedstmtContext reassignownedstmt() throws RecognitionException {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_reassignownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4499);
			match(REASSIGN);
			setState(4500);
			match(OWNED);
			setState(4501);
			match(BY);
			setState(4502);
			role_list();
			setState(4503);
			match(TO);
			setState(4504);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Any_name_list_Context any_name_list_() {
			return getRuleContext(Any_name_list_Context.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Type_name_listContext type_name_list() {
			return getRuleContext(Type_name_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropstmt; }
	}

	public final DropstmtContext dropstmt() throws RecognitionException {
		DropstmtContext _localctx = new DropstmtContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dropstmt);
		int _la;
		try {
			setState(4596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4506);
				match(DROP);
				setState(4507);
				object_type_any_name();
				setState(4508);
				match(IF_P);
				setState(4509);
				match(EXISTS);
				setState(4510);
				any_name_list_();
				setState(4512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4511);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4514);
				match(DROP);
				setState(4515);
				object_type_any_name();
				setState(4516);
				any_name_list_();
				setState(4518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4517);
					drop_behavior_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4520);
				match(DROP);
				setState(4521);
				drop_type_name();
				setState(4522);
				match(IF_P);
				setState(4523);
				match(EXISTS);
				setState(4524);
				name_list();
				setState(4526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4525);
					drop_behavior_();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4528);
				match(DROP);
				setState(4529);
				drop_type_name();
				setState(4530);
				name_list();
				setState(4532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4531);
					drop_behavior_();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4534);
				match(DROP);
				setState(4535);
				object_type_name_on_any_name();
				setState(4536);
				name();
				setState(4537);
				match(ON);
				setState(4538);
				any_name();
				setState(4540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4539);
					drop_behavior_();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4542);
				match(DROP);
				setState(4543);
				object_type_name_on_any_name();
				setState(4544);
				match(IF_P);
				setState(4545);
				match(EXISTS);
				setState(4546);
				name();
				setState(4547);
				match(ON);
				setState(4548);
				any_name();
				setState(4550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4549);
					drop_behavior_();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4552);
				match(DROP);
				setState(4553);
				match(TYPE_P);
				setState(4554);
				type_name_list();
				setState(4556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4555);
					drop_behavior_();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4558);
				match(DROP);
				setState(4559);
				match(TYPE_P);
				setState(4560);
				match(IF_P);
				setState(4561);
				match(EXISTS);
				setState(4562);
				type_name_list();
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4563);
					drop_behavior_();
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4566);
				match(DROP);
				setState(4567);
				match(DOMAIN_P);
				setState(4568);
				type_name_list();
				setState(4570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4569);
					drop_behavior_();
					}
				}

				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4572);
				match(DROP);
				setState(4573);
				match(DOMAIN_P);
				setState(4574);
				match(IF_P);
				setState(4575);
				match(EXISTS);
				setState(4576);
				type_name_list();
				setState(4578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4577);
					drop_behavior_();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4580);
				match(DROP);
				setState(4581);
				match(INDEX);
				setState(4582);
				match(CONCURRENTLY);
				setState(4583);
				any_name_list_();
				setState(4585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4584);
					drop_behavior_();
					}
				}

				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4587);
				match(DROP);
				setState(4588);
				match(INDEX);
				setState(4589);
				match(CONCURRENTLY);
				setState(4590);
				match(IF_P);
				setState(4591);
				match(EXISTS);
				setState(4592);
				any_name_list_();
				setState(4594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4593);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_any_nameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_any_name; }
	}

	public final Object_type_any_nameContext object_type_any_name() throws RecognitionException {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_object_type_any_name);
		try {
			setState(4621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4598);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4599);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4600);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4601);
				match(MATERIALIZED);
				setState(4602);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4603);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4604);
				match(FOREIGN);
				setState(4605);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4606);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4607);
				match(CONVERSION_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4608);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4609);
				match(TEXT_P);
				setState(4610);
				match(SEARCH);
				setState(4611);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4612);
				match(TEXT_P);
				setState(4613);
				match(SEARCH);
				setState(4614);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4615);
				match(TEXT_P);
				setState(4616);
				match(SEARCH);
				setState(4617);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4618);
				match(TEXT_P);
				setState(4619);
				match(SEARCH);
				setState(4620);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_nameContext extends ParserRuleContext {
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name; }
	}

	public final Object_type_nameContext object_type_name() throws RecognitionException {
		Object_type_nameContext _localctx = new Object_type_nameContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_object_type_name);
		try {
			setState(4628);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4623);
				drop_type_name();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4624);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4625);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4626);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4627);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_type_nameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Procedural_Context procedural_() {
			return getRuleContext(Procedural_Context.class,0);
		}
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_name; }
	}

	public final Drop_type_nameContext drop_type_name() throws RecognitionException {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_drop_type_name);
		int _la;
		try {
			setState(4645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4630);
				match(ACCESS);
				setState(4631);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4632);
				match(EVENT);
				setState(4633);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4634);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4635);
				match(FOREIGN);
				setState(4636);
				match(DATA_P);
				setState(4637);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(4638);
					procedural_();
					}
				}

				setState(4641);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4642);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(4643);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(4644);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_name_on_any_nameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name_on_any_name; }
	}

	public final Object_type_name_on_any_nameContext object_type_name_on_any_name() throws RecognitionException {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_object_type_name_on_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4647);
			_la = _input.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_name_list_Context extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list_; }
	}

	public final Any_name_list_Context any_name_list_() throws RecognitionException {
		Any_name_list_Context _localctx = new Any_name_list_Context(_ctx, getState());
		enterRule(_localctx, 518, RULE_any_name_list_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4649);
			any_name();
			setState(4654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4650);
				match(COMMA);
				setState(4651);
				any_name();
				}
				}
				setState(4656);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_any_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4657);
			colid();
			setState(4659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				setState(4658);
				attrs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AttrsContext extends ParserRuleContext {
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public List<Attr_nameContext> attr_name() {
			return getRuleContexts(Attr_nameContext.class);
		}
		public Attr_nameContext attr_name(int i) {
			return getRuleContext(Attr_nameContext.class,i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
	}

	public final AttrsContext attrs() throws RecognitionException {
		AttrsContext _localctx = new AttrsContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_attrs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4663); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4661);
					match(DOT);
					setState(4662);
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4665); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,375,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_name_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name_list; }
	}

	public final Type_name_listContext type_name_list() throws RecognitionException {
		Type_name_listContext _localctx = new Type_name_listContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_type_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4667);
			typename();
			setState(4672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4668);
				match(COMMA);
				setState(4669);
				typename();
				}
				}
				setState(4674);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncatestmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Table_Context table_() {
			return getRuleContext(Table_Context.class,0);
		}
		public Restart_seqs_Context restart_seqs_() {
			return getRuleContext(Restart_seqs_Context.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncatestmt; }
	}

	public final TruncatestmtContext truncatestmt() throws RecognitionException {
		TruncatestmtContext _localctx = new TruncatestmtContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_truncatestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4675);
			match(TRUNCATE);
			setState(4677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(4676);
				table_();
				}
			}

			setState(4679);
			relation_expr_list();
			setState(4681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTINUE_P || _la==RESTART) {
				{
				setState(4680);
				restart_seqs_();
				}
			}

			setState(4684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4683);
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Restart_seqs_Context extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Restart_seqs_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restart_seqs_; }
	}

	public final Restart_seqs_Context restart_seqs_() throws RecognitionException {
		Restart_seqs_Context _localctx = new Restart_seqs_Context(_ctx, getState());
		enterRule(_localctx, 528, RULE_restart_seqs_);
		try {
			setState(4690);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4686);
				match(CONTINUE_P);
				setState(4687);
				match(IDENTITY_P);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(4688);
				match(RESTART);
				setState(4689);
				match(IDENTITY_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentstmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentstmt; }
	}

	public final CommentstmtContext commentstmt() throws RecognitionException {
		CommentstmtContext _localctx = new CommentstmtContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_commentstmt);
		try {
			setState(4839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4692);
				match(COMMENT);
				setState(4693);
				match(ON);
				setState(4694);
				object_type_any_name();
				setState(4695);
				any_name();
				setState(4696);
				match(IS);
				setState(4697);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4699);
				match(COMMENT);
				setState(4700);
				match(ON);
				setState(4701);
				match(COLUMN);
				setState(4702);
				any_name();
				setState(4703);
				match(IS);
				setState(4704);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4706);
				match(COMMENT);
				setState(4707);
				match(ON);
				setState(4708);
				object_type_name();
				setState(4709);
				name();
				setState(4710);
				match(IS);
				setState(4711);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4713);
				match(COMMENT);
				setState(4714);
				match(ON);
				setState(4715);
				match(TYPE_P);
				setState(4716);
				typename();
				setState(4717);
				match(IS);
				setState(4718);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4720);
				match(COMMENT);
				setState(4721);
				match(ON);
				setState(4722);
				match(DOMAIN_P);
				setState(4723);
				typename();
				setState(4724);
				match(IS);
				setState(4725);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4727);
				match(COMMENT);
				setState(4728);
				match(ON);
				setState(4729);
				match(AGGREGATE);
				setState(4730);
				aggregate_with_argtypes();
				setState(4731);
				match(IS);
				setState(4732);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4734);
				match(COMMENT);
				setState(4735);
				match(ON);
				setState(4736);
				match(FUNCTION);
				setState(4737);
				function_with_argtypes();
				setState(4738);
				match(IS);
				setState(4739);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4741);
				match(COMMENT);
				setState(4742);
				match(ON);
				setState(4743);
				match(OPERATOR);
				setState(4744);
				operator_with_argtypes();
				setState(4745);
				match(IS);
				setState(4746);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4748);
				match(COMMENT);
				setState(4749);
				match(ON);
				setState(4750);
				match(CONSTRAINT);
				setState(4751);
				name();
				setState(4752);
				match(ON);
				setState(4753);
				any_name();
				setState(4754);
				match(IS);
				setState(4755);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4757);
				match(COMMENT);
				setState(4758);
				match(ON);
				setState(4759);
				match(CONSTRAINT);
				setState(4760);
				name();
				setState(4761);
				match(ON);
				setState(4762);
				match(DOMAIN_P);
				setState(4763);
				any_name();
				setState(4764);
				match(IS);
				setState(4765);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4767);
				match(COMMENT);
				setState(4768);
				match(ON);
				setState(4769);
				object_type_name_on_any_name();
				setState(4770);
				name();
				setState(4771);
				match(ON);
				setState(4772);
				any_name();
				setState(4773);
				match(IS);
				setState(4774);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4776);
				match(COMMENT);
				setState(4777);
				match(ON);
				setState(4778);
				match(PROCEDURE);
				setState(4779);
				function_with_argtypes();
				setState(4780);
				match(IS);
				setState(4781);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4783);
				match(COMMENT);
				setState(4784);
				match(ON);
				setState(4785);
				match(ROUTINE);
				setState(4786);
				function_with_argtypes();
				setState(4787);
				match(IS);
				setState(4788);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4790);
				match(COMMENT);
				setState(4791);
				match(ON);
				setState(4792);
				match(TRANSFORM);
				setState(4793);
				match(FOR);
				setState(4794);
				typename();
				setState(4795);
				match(LANGUAGE);
				setState(4796);
				name();
				setState(4797);
				match(IS);
				setState(4798);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4800);
				match(COMMENT);
				setState(4801);
				match(ON);
				setState(4802);
				match(OPERATOR);
				setState(4803);
				match(CLASS);
				setState(4804);
				any_name();
				setState(4805);
				match(USING);
				setState(4806);
				name();
				setState(4807);
				match(IS);
				setState(4808);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4810);
				match(COMMENT);
				setState(4811);
				match(ON);
				setState(4812);
				match(OPERATOR);
				setState(4813);
				match(FAMILY);
				setState(4814);
				any_name();
				setState(4815);
				match(USING);
				setState(4816);
				name();
				setState(4817);
				match(IS);
				setState(4818);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4820);
				match(COMMENT);
				setState(4821);
				match(ON);
				setState(4822);
				match(LARGE_P);
				setState(4823);
				match(OBJECT_P);
				setState(4824);
				numericonly();
				setState(4825);
				match(IS);
				setState(4826);
				comment_text();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4828);
				match(COMMENT);
				setState(4829);
				match(ON);
				setState(4830);
				match(CAST);
				setState(4831);
				match(OPEN_PAREN);
				setState(4832);
				typename();
				setState(4833);
				match(AS);
				setState(4834);
				typename();
				setState(4835);
				match(CLOSE_PAREN);
				setState(4836);
				match(IS);
				setState(4837);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_comment_text);
		try {
			setState(4843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4841);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4842);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SeclabelstmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public Provider_Context provider_() {
			return getRuleContext(Provider_Context.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelstmt; }
	}

	public final SeclabelstmtContext seclabelstmt() throws RecognitionException {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_seclabelstmt);
		int _la;
		try {
			setState(4956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4845);
				match(SECURITY);
				setState(4846);
				match(LABEL);
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4847);
					provider_();
					}
				}

				setState(4850);
				match(ON);
				setState(4851);
				object_type_any_name();
				setState(4852);
				any_name();
				setState(4853);
				match(IS);
				setState(4854);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4856);
				match(SECURITY);
				setState(4857);
				match(LABEL);
				setState(4859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4858);
					provider_();
					}
				}

				setState(4861);
				match(ON);
				setState(4862);
				match(COLUMN);
				setState(4863);
				any_name();
				setState(4864);
				match(IS);
				setState(4865);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4867);
				match(SECURITY);
				setState(4868);
				match(LABEL);
				setState(4870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4869);
					provider_();
					}
				}

				setState(4872);
				match(ON);
				setState(4873);
				object_type_name();
				setState(4874);
				name();
				setState(4875);
				match(IS);
				setState(4876);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4878);
				match(SECURITY);
				setState(4879);
				match(LABEL);
				setState(4881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4880);
					provider_();
					}
				}

				setState(4883);
				match(ON);
				setState(4884);
				match(TYPE_P);
				setState(4885);
				typename();
				setState(4886);
				match(IS);
				setState(4887);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4889);
				match(SECURITY);
				setState(4890);
				match(LABEL);
				setState(4892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4891);
					provider_();
					}
				}

				setState(4894);
				match(ON);
				setState(4895);
				match(DOMAIN_P);
				setState(4896);
				typename();
				setState(4897);
				match(IS);
				setState(4898);
				security_label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4900);
				match(SECURITY);
				setState(4901);
				match(LABEL);
				setState(4903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4902);
					provider_();
					}
				}

				setState(4905);
				match(ON);
				setState(4906);
				match(AGGREGATE);
				setState(4907);
				aggregate_with_argtypes();
				setState(4908);
				match(IS);
				setState(4909);
				security_label();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4911);
				match(SECURITY);
				setState(4912);
				match(LABEL);
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4913);
					provider_();
					}
				}

				setState(4916);
				match(ON);
				setState(4917);
				match(FUNCTION);
				setState(4918);
				function_with_argtypes();
				setState(4919);
				match(IS);
				setState(4920);
				security_label();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4922);
				match(SECURITY);
				setState(4923);
				match(LABEL);
				setState(4925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4924);
					provider_();
					}
				}

				setState(4927);
				match(ON);
				setState(4928);
				match(LARGE_P);
				setState(4929);
				match(OBJECT_P);
				setState(4930);
				numericonly();
				setState(4931);
				match(IS);
				setState(4932);
				security_label();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4934);
				match(SECURITY);
				setState(4935);
				match(LABEL);
				setState(4937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4936);
					provider_();
					}
				}

				setState(4939);
				match(ON);
				setState(4940);
				match(PROCEDURE);
				setState(4941);
				function_with_argtypes();
				setState(4942);
				match(IS);
				setState(4943);
				security_label();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4945);
				match(SECURITY);
				setState(4946);
				match(LABEL);
				setState(4948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4947);
					provider_();
					}
				}

				setState(4950);
				match(ON);
				setState(4951);
				match(ROUTINE);
				setState(4952);
				function_with_argtypes();
				setState(4953);
				match(IS);
				setState(4954);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Provider_Context extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Provider_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_provider_; }
	}

	public final Provider_Context provider_() throws RecognitionException {
		Provider_Context _localctx = new Provider_Context(_ctx, getState());
		enterRule(_localctx, 536, RULE_provider_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4958);
			match(FOR);
			setState(4959);
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_security_label);
		try {
			setState(4963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4961);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4962);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FetchstmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchstmt; }
	}

	public final FetchstmtContext fetchstmt() throws RecognitionException {
		FetchstmtContext _localctx = new FetchstmtContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_fetchstmt);
		try {
			setState(4969);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4965);
				match(FETCH);
				setState(4966);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4967);
				match(MOVE);
				setState(4968);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_argsContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public From_in_Context from_in_() {
			return getRuleContext(From_in_Context.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_fetch_args);
		int _la;
		try {
			setState(5056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4971);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4972);
				from_in();
				setState(4973);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4975);
				match(NEXT);
				setState(4977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(4976);
					from_in_();
					}
				}

				setState(4979);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4980);
				match(PRIOR);
				setState(4982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(4981);
					from_in_();
					}
				}

				setState(4984);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4985);
				match(FIRST_P);
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(4986);
					from_in_();
					}
				}

				setState(4989);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4990);
				match(LAST_P);
				setState(4992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(4991);
					from_in_();
					}
				}

				setState(4994);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4995);
				match(ABSOLUTE_P);
				setState(4996);
				signediconst();
				setState(4998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(4997);
					from_in_();
					}
				}

				setState(5000);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5002);
				match(RELATIVE_P);
				setState(5003);
				signediconst();
				setState(5005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5004);
					from_in_();
					}
				}

				setState(5007);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5009);
				signediconst();
				setState(5011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5010);
					from_in_();
					}
				}

				setState(5013);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5015);
				match(ALL);
				setState(5017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5016);
					from_in_();
					}
				}

				setState(5019);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5020);
				match(FORWARD);
				setState(5022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5021);
					from_in_();
					}
				}

				setState(5024);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5025);
				match(FORWARD);
				setState(5026);
				signediconst();
				setState(5028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5027);
					from_in_();
					}
				}

				setState(5030);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5032);
				match(FORWARD);
				setState(5033);
				match(ALL);
				setState(5035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5034);
					from_in_();
					}
				}

				setState(5037);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5038);
				match(BACKWARD);
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5039);
					from_in_();
					}
				}

				setState(5042);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5043);
				match(BACKWARD);
				setState(5044);
				signediconst();
				setState(5046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5045);
					from_in_();
					}
				}

				setState(5048);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5050);
				match(BACKWARD);
				setState(5051);
				match(ALL);
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN_P) {
					{
					setState(5052);
					from_in_();
					}
				}

				setState(5055);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5058);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_in_Context extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public From_in_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in_; }
	}

	public final From_in_Context from_in_() throws RecognitionException {
		From_in_Context _localctx = new From_in_Context(_ctx, getState());
		enterRule(_localctx, 546, RULE_from_in_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5060);
			from_in();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantstmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Grant_grant_option_Context grant_grant_option_() {
			return getRuleContext(Grant_grant_option_Context.class,0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantstmt; }
	}

	public final GrantstmtContext grantstmt() throws RecognitionException {
		GrantstmtContext _localctx = new GrantstmtContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_grantstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5062);
			match(GRANT);
			setState(5063);
			privileges();
			setState(5064);
			match(ON);
			setState(5065);
			privilege_target();
			setState(5066);
			match(TO);
			setState(5067);
			grantee_list();
			setState(5069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5068);
				grant_grant_option_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokestmt; }
	}

	public final RevokestmtContext revokestmt() throws RecognitionException {
		RevokestmtContext _localctx = new RevokestmtContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_revokestmt);
		int _la;
		try {
			setState(5092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5071);
				match(REVOKE);
				setState(5072);
				privileges();
				setState(5073);
				match(ON);
				setState(5074);
				privilege_target();
				setState(5075);
				match(FROM);
				setState(5076);
				grantee_list();
				setState(5078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5077);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5080);
				match(REVOKE);
				setState(5081);
				match(GRANT);
				setState(5082);
				match(OPTION);
				setState(5083);
				match(FOR);
				setState(5084);
				privileges();
				setState(5085);
				match(ON);
				setState(5086);
				privilege_target();
				setState(5087);
				match(FROM);
				setState(5088);
				grantee_list();
				setState(5090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5089);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegesContext extends ParserRuleContext {
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_privileges);
		try {
			setState(5109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5094);
				privilege_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5095);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5096);
				match(ALL);
				setState(5097);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5098);
				match(ALL);
				setState(5099);
				match(OPEN_PAREN);
				setState(5100);
				columnlist();
				setState(5101);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5103);
				match(ALL);
				setState(5104);
				match(PRIVILEGES);
				setState(5105);
				match(OPEN_PAREN);
				setState(5106);
				columnlist();
				setState(5107);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Privilege_listContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_privilege_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5111);
			privilege();
			setState(5116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5112);
				match(COMMA);
				setState(5113);
				privilege();
				}
				}
				setState(5118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_privilege);
		int _la;
		try {
			setState(5135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5119);
				match(SELECT);
				setState(5121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5120);
					column_list_();
					}
				}

				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(5123);
				match(REFERENCES);
				setState(5125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5124);
					column_list_();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5127);
				match(CREATE);
				setState(5129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5128);
					column_list_();
					}
				}

				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(5131);
				colid();
				setState(5133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5132);
					column_list_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_name_list_Context any_name_list_() {
			return getRuleContext(Any_name_list_Context.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public Numericonly_listContext numericonly_list() {
			return getRuleContext(Numericonly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_privilege_target);
		try {
			setState(5195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5137);
				qualified_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5138);
				match(TABLE);
				setState(5139);
				qualified_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5140);
				match(SEQUENCE);
				setState(5141);
				qualified_name_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5142);
				match(FOREIGN);
				setState(5143);
				match(DATA_P);
				setState(5144);
				match(WRAPPER);
				setState(5145);
				name_list();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5146);
				match(FOREIGN);
				setState(5147);
				match(SERVER);
				setState(5148);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5149);
				match(FUNCTION);
				setState(5150);
				function_with_argtypes_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5151);
				match(PROCEDURE);
				setState(5152);
				function_with_argtypes_list();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5153);
				match(ROUTINE);
				setState(5154);
				function_with_argtypes_list();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5155);
				match(DATABASE);
				setState(5156);
				name_list();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5157);
				match(DOMAIN_P);
				setState(5158);
				any_name_list_();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5159);
				match(LANGUAGE);
				setState(5160);
				name_list();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5161);
				match(LARGE_P);
				setState(5162);
				match(OBJECT_P);
				setState(5163);
				numericonly_list();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5164);
				match(SCHEMA);
				setState(5165);
				name_list();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5166);
				match(TABLESPACE);
				setState(5167);
				name_list();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5168);
				match(TYPE_P);
				setState(5169);
				any_name_list_();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5170);
				match(ALL);
				setState(5171);
				match(TABLES);
				setState(5172);
				match(IN_P);
				setState(5173);
				match(SCHEMA);
				setState(5174);
				name_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5175);
				match(ALL);
				setState(5176);
				match(SEQUENCES);
				setState(5177);
				match(IN_P);
				setState(5178);
				match(SCHEMA);
				setState(5179);
				name_list();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5180);
				match(ALL);
				setState(5181);
				match(FUNCTIONS);
				setState(5182);
				match(IN_P);
				setState(5183);
				match(SCHEMA);
				setState(5184);
				name_list();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5185);
				match(ALL);
				setState(5186);
				match(PROCEDURES);
				setState(5187);
				match(IN_P);
				setState(5188);
				match(SCHEMA);
				setState(5189);
				name_list();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5190);
				match(ALL);
				setState(5191);
				match(ROUTINES);
				setState(5192);
				match(IN_P);
				setState(5193);
				match(SCHEMA);
				setState(5194);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grantee_listContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_grantee_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5197);
			grantee();
			setState(5202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5198);
				match(COMMA);
				setState(5199);
				grantee();
				}
				}
				setState(5204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GranteeContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_grantee);
		try {
			setState(5208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case CURRENT_USER:
			case SESSION_USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(5205);
				rolespec();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5206);
				match(GROUP_P);
				setState(5207);
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_grant_option_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Grant_grant_option_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_grant_option_; }
	}

	public final Grant_grant_option_Context grant_grant_option_() throws RecognitionException {
		Grant_grant_option_Context _localctx = new Grant_grant_option_Context(_ctx, getState());
		enterRule(_localctx, 564, RULE_grant_grant_option_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5210);
			match(WITH);
			setState(5211);
			match(GRANT);
			setState(5212);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantrolestmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Grant_admin_option_Context grant_admin_option_() {
			return getRuleContext(Grant_admin_option_Context.class,0);
		}
		public Granted_by_Context granted_by_() {
			return getRuleContext(Granted_by_Context.class,0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantrolestmt; }
	}

	public final GrantrolestmtContext grantrolestmt() throws RecognitionException {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_grantrolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5214);
			match(GRANT);
			setState(5215);
			privilege_list();
			setState(5216);
			match(TO);
			setState(5217);
			role_list();
			setState(5219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5218);
				grant_admin_option_();
				}
			}

			setState(5222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRANTED) {
				{
				setState(5221);
				granted_by_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokerolestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Granted_by_Context granted_by_() {
			return getRuleContext(Granted_by_Context.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokerolestmt; }
	}

	public final RevokerolestmtContext revokerolestmt() throws RecognitionException {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_revokerolestmt);
		int _la;
		try {
			setState(5247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5224);
				match(REVOKE);
				setState(5225);
				privilege_list();
				setState(5226);
				match(FROM);
				setState(5227);
				role_list();
				setState(5229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANTED) {
					{
					setState(5228);
					granted_by_();
					}
				}

				setState(5232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5231);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5234);
				match(REVOKE);
				setState(5235);
				match(ADMIN);
				setState(5236);
				match(OPTION);
				setState(5237);
				match(FOR);
				setState(5238);
				privilege_list();
				setState(5239);
				match(FROM);
				setState(5240);
				role_list();
				setState(5242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANTED) {
					{
					setState(5241);
					granted_by_();
					}
				}

				setState(5245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5244);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_admin_option_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Grant_admin_option_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_admin_option_; }
	}

	public final Grant_admin_option_Context grant_admin_option_() throws RecognitionException {
		Grant_admin_option_Context _localctx = new Grant_admin_option_Context(_ctx, getState());
		enterRule(_localctx, 570, RULE_grant_admin_option_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5249);
			match(WITH);
			setState(5250);
			match(ADMIN);
			setState(5251);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Granted_by_Context extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Granted_by_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_granted_by_; }
	}

	public final Granted_by_Context granted_by_() throws RecognitionException {
		Granted_by_Context _localctx = new Granted_by_Context(_ctx, getState());
		enterRule(_localctx, 572, RULE_granted_by_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			match(GRANTED);
			setState(5254);
			match(BY);
			setState(5255);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public DefacloptionlistContext defacloptionlist() {
			return getRuleContext(DefacloptionlistContext.class,0);
		}
		public DefaclactionContext defaclaction() {
			return getRuleContext(DefaclactionContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdefaultprivilegesstmt; }
	}

	public final AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() throws RecognitionException {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_alterdefaultprivilegesstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257);
			match(ALTER);
			setState(5258);
			match(DEFAULT);
			setState(5259);
			match(PRIVILEGES);
			setState(5260);
			defacloptionlist();
			setState(5261);
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefacloptionlistContext extends ParserRuleContext {
		public List<DefacloptionContext> defacloption() {
			return getRuleContexts(DefacloptionContext.class);
		}
		public DefacloptionContext defacloption(int i) {
			return getRuleContext(DefacloptionContext.class,i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloptionlist; }
	}

	public final DefacloptionlistContext defacloptionlist() throws RecognitionException {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_defacloptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				setState(5263);
				defacloption();
				}
				}
				setState(5268);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefacloptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloption; }
	}

	public final DefacloptionContext defacloption() throws RecognitionException {
		DefacloptionContext _localctx = new DefacloptionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_defacloption);
		try {
			setState(5278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5269);
				match(IN_P);
				setState(5270);
				match(SCHEMA);
				setState(5271);
				name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5272);
				match(FOR);
				setState(5273);
				match(ROLE);
				setState(5274);
				role_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5275);
				match(FOR);
				setState(5276);
				match(USER);
				setState(5277);
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaclactionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Grant_grant_option_Context grant_grant_option_() {
			return getRuleContext(Grant_grant_option_Context.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclaction; }
	}

	public final DefaclactionContext defaclaction() throws RecognitionException {
		DefaclactionContext _localctx = new DefaclactionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_defaclaction);
		int _la;
		try {
			setState(5310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5280);
				match(GRANT);
				setState(5281);
				privileges();
				setState(5282);
				match(ON);
				setState(5283);
				defacl_privilege_target();
				setState(5284);
				match(TO);
				setState(5285);
				grantee_list();
				setState(5287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5286);
					grant_grant_option_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289);
				match(REVOKE);
				setState(5290);
				privileges();
				setState(5291);
				match(ON);
				setState(5292);
				defacl_privilege_target();
				setState(5293);
				match(FROM);
				setState(5294);
				grantee_list();
				setState(5296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5295);
					drop_behavior_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5298);
				match(REVOKE);
				setState(5299);
				match(GRANT);
				setState(5300);
				match(OPTION);
				setState(5301);
				match(FOR);
				setState(5302);
				privileges();
				setState(5303);
				match(ON);
				setState(5304);
				defacl_privilege_target();
				setState(5305);
				match(FROM);
				setState(5306);
				grantee_list();
				setState(5308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5307);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & 4297064449L) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Unique_Context unique_() {
			return getRuleContext(Unique_Context.class,0);
		}
		public Concurrently_Context concurrently_() {
			return getRuleContext(Concurrently_Context.class,0);
		}
		public Index_name_Context index_name_() {
			return getRuleContext(Index_name_Context.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public Include_Context include_() {
			return getRuleContext(Include_Context.class,0);
		}
		public Reloptions_Context reloptions_() {
			return getRuleContext(Reloptions_Context.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexstmt; }
	}

	public final IndexstmtContext indexstmt() throws RecognitionException {
		IndexstmtContext _localctx = new IndexstmtContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_indexstmt);
		int _la;
		try {
			setState(5377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5314);
				match(CREATE);
				setState(5316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE) {
					{
					setState(5315);
					unique_();
					}
				}

				setState(5318);
				match(INDEX);
				setState(5320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5319);
					concurrently_();
					}
				}

				setState(5323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(5322);
					index_name_();
					}
				}

				setState(5325);
				match(ON);
				setState(5326);
				relation_expr();
				setState(5328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5327);
					access_method_clause();
					}
				}

				setState(5330);
				match(OPEN_PAREN);
				setState(5331);
				index_params();
				setState(5332);
				match(CLOSE_PAREN);
				setState(5334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUDE) {
					{
					setState(5333);
					include_();
					}
				}

				setState(5337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5336);
					reloptions_();
					}
				}

				setState(5340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(5339);
					opttablespace();
					}
				}

				setState(5343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5342);
					where_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(CREATE);
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE) {
					{
					setState(5346);
					unique_();
					}
				}

				setState(5349);
				match(INDEX);
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5350);
					concurrently_();
					}
				}

				setState(5353);
				match(IF_P);
				setState(5354);
				match(NOT);
				setState(5355);
				match(EXISTS);
				setState(5356);
				name();
				setState(5357);
				match(ON);
				setState(5358);
				relation_expr();
				setState(5360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5359);
					access_method_clause();
					}
				}

				setState(5362);
				match(OPEN_PAREN);
				setState(5363);
				index_params();
				setState(5364);
				match(CLOSE_PAREN);
				setState(5366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCLUDE) {
					{
					setState(5365);
					include_();
					}
				}

				setState(5369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5368);
					reloptions_();
					}
				}

				setState(5372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(5371);
					opttablespace();
					}
				}

				setState(5375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5374);
					where_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unique_Context extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Unique_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_; }
	}

	public final Unique_Context unique_() throws RecognitionException {
		Unique_Context _localctx = new Unique_Context(_ctx, getState());
		enterRule(_localctx, 586, RULE_unique_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5379);
			match(UNIQUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Single_name_Context extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Single_name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_name_; }
	}

	public final Single_name_Context single_name_() throws RecognitionException {
		Single_name_Context _localctx = new Single_name_Context(_ctx, getState());
		enterRule(_localctx, 588, RULE_single_name_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Concurrently_Context extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Concurrently_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concurrently_; }
	}

	public final Concurrently_Context concurrently_() throws RecognitionException {
		Concurrently_Context _localctx = new Concurrently_Context(_ctx, getState());
		enterRule(_localctx, 590, RULE_concurrently_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5383);
			match(CONCURRENTLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_name_Context extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Index_name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name_; }
	}

	public final Index_name_Context index_name_() throws RecognitionException {
		Index_name_Context _localctx = new Index_name_Context(_ctx, getState());
		enterRule(_localctx, 592, RULE_index_name_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5385);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_access_method_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			match(USING);
			setState(5388);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_index_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5390);
			index_elem();
			setState(5395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5391);
				match(COMMA);
				setState(5392);
				index_elem();
				}
				}
				setState(5397);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_elem_optionsContext extends ParserRuleContext {
		public Collate_Context collate_() {
			return getRuleContext(Collate_Context.class,0);
		}
		public Class_Context class_() {
			return getRuleContext(Class_Context.class,0);
		}
		public Asc_desc_Context asc_desc_() {
			return getRuleContext(Asc_desc_Context.class,0);
		}
		public Nulls_order_Context nulls_order_() {
			return getRuleContext(Nulls_order_Context.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem_options; }
	}

	public final Index_elem_optionsContext index_elem_options() throws RecognitionException {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_index_elem_options);
		int _la;
		try {
			setState(5421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5398);
					collate_();
					}
				}

				setState(5402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(5401);
					class_();
					}
					break;
				}
				setState(5405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(5404);
					asc_desc_();
					}
				}

				setState(5408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS_P) {
					{
					setState(5407);
					nulls_order_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5410);
					collate_();
					}
				}

				setState(5413);
				any_name();
				setState(5414);
				reloptions();
				setState(5416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(5415);
					asc_desc_();
					}
				}

				setState(5419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS_P) {
					{
					setState(5418);
					nulls_order_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Index_elem_optionsContext index_elem_options() {
			return getRuleContext(Index_elem_optionsContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_index_elem);
		try {
			setState(5434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5423);
				colid();
				setState(5424);
				index_elem_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5426);
				func_expr_windowless();
				setState(5427);
				index_elem_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5429);
				match(OPEN_PAREN);
				setState(5430);
				a_expr();
				setState(5431);
				match(CLOSE_PAREN);
				setState(5432);
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Include_Context extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_including_paramsContext index_including_params() {
			return getRuleContext(Index_including_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Include_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_include_; }
	}

	public final Include_Context include_() throws RecognitionException {
		Include_Context _localctx = new Include_Context(_ctx, getState());
		enterRule(_localctx, 602, RULE_include_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5436);
			match(INCLUDE);
			setState(5437);
			match(OPEN_PAREN);
			setState(5438);
			index_including_params();
			setState(5439);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_including_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_including_params; }
	}

	public final Index_including_paramsContext index_including_params() throws RecognitionException {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_index_including_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5441);
			index_elem();
			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5442);
				match(COMMA);
				setState(5443);
				index_elem();
				}
				}
				setState(5448);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collate_Context extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Collate_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate_; }
	}

	public final Collate_Context collate_() throws RecognitionException {
		Collate_Context _localctx = new Collate_Context(_ctx, getState());
		enterRule(_localctx, 606, RULE_collate_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5449);
			match(COLLATE);
			setState(5450);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Class_Context extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Class_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_; }
	}

	public final Class_Context class_() throws RecognitionException {
		Class_Context _localctx = new Class_Context(_ctx, getState());
		enterRule(_localctx, 608, RULE_class_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5452);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Asc_desc_Context extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public Asc_desc_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asc_desc_; }
	}

	public final Asc_desc_Context asc_desc_() throws RecognitionException {
		Asc_desc_Context _localctx = new Asc_desc_Context(_ctx, getState());
		enterRule(_localctx, 610, RULE_asc_desc_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5454);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nulls_order_Context extends ParserRuleContext {
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public Nulls_order_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nulls_order_; }
	}

	public final Nulls_order_Context nulls_order_() throws RecognitionException {
		Nulls_order_Context _localctx = new Nulls_order_Context(_ctx, getState());
		enterRule(_localctx, 612, RULE_nulls_order_);
		try {
			setState(5460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5456);
				match(NULLS_P);
				setState(5457);
				match(FIRST_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5458);
				match(NULLS_P);
				setState(5459);
				match(LAST_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatefunctionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public Or_replace_Context or_replace_() {
			return getRuleContext(Or_replace_Context.class,0);
		}
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunctionstmt; }
	}

	public final CreatefunctionstmtContext createfunctionstmt() throws RecognitionException {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_createfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5462);
			match(CREATE);
			setState(5464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(5463);
				or_replace_();
				}
			}

			setState(5466);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5467);
			func_name();
			setState(5468);
			func_args_with_defaults();
			setState(5478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(5469);
				match(RETURNS);
				setState(5476);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JSON:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case DEC:
				case DECIMAL_P:
				case FLOAT_P:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case NATIONAL:
				case NCHAR:
				case NUMERIC:
				case REAL:
				case SETOF:
				case SMALLINT:
				case TIME:
				case TIMESTAMP:
				case VARCHAR:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case COLUMNS:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case TickedIdentifier:
				case PLSQLVARIABLENAME:
					{
					setState(5470);
					func_return();
					}
					break;
				case TABLE:
					{
					setState(5471);
					match(TABLE);
					setState(5472);
					match(OPEN_PAREN);
					setState(5473);
					table_func_column_list();
					setState(5474);
					match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5480);
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Or_replace_Context extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Or_replace_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_or_replace_; }
	}

	public final Or_replace_Context or_replace_() throws RecognitionException {
		Or_replace_Context _localctx = new Or_replace_Context(_ctx, getState());
		enterRule(_localctx, 616, RULE_or_replace_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			match(OR);
			setState(5483);
			match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_func_args);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5485);
			match(OPEN_PAREN);
			setState(5487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8795019280384L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046511111L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -31L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -1L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -5L) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & 637865130389929983L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 360259245446266879L) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 17592188286977L) != 0)) {
				{
				setState(5486);
				func_args_list();
				}
			}

			setState(5489);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_args_listContext extends ParserRuleContext {
		public List<Func_argContext> func_arg() {
			return getRuleContexts(Func_argContext.class);
		}
		public Func_argContext func_arg(int i) {
			return getRuleContext(Func_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_func_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5491);
			func_arg();
			setState(5496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5492);
				match(COMMA);
				setState(5493);
				func_arg();
				}
				}
				setState(5498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_function_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5499);
			function_with_argtypes();
			setState(5504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5500);
				match(COMMA);
				setState(5501);
				function_with_argtypes();
				}
				}
				setState(5506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_function_with_argtypes);
		int _la;
		try {
			setState(5515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5507);
				func_name();
				setState(5508);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5510);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5511);
				colid();
				setState(5513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					setState(5512);
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_func_args_with_defaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5517);
			match(OPEN_PAREN);
			setState(5519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8795019280384L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046511111L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -31L) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -1L) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -5L) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & 637865130389929983L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 360259245446266879L) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 17592188286977L) != 0)) {
				{
				setState(5518);
				func_args_with_defaults_list();
				}
			}

			setState(5521);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public List<Func_arg_with_defaultContext> func_arg_with_default() {
			return getRuleContexts(Func_arg_with_defaultContext.class);
		}
		public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return getRuleContext(Func_arg_with_defaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_func_args_with_defaults_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5523);
			func_arg_with_default();
			setState(5528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5524);
				match(COMMA);
				setState(5525);
				func_arg_with_default();
				}
				}
				setState(5530);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_func_arg);
		int _la;
		try {
			setState(5544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5531);
				arg_class();
				setState(5533);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(5532);
					param_name();
					}
					break;
				}
				setState(5535);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5537);
				param_name();
				setState(5539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN_P || _la==VARIADIC || _la==INOUT || _la==OUT_P) {
					{
					setState(5538);
					arg_class();
					}
				}

				setState(5541);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5543);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_arg_class);
		int _la;
		try {
			setState(5553);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5546);
				match(IN_P);
				setState(5548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUT_P) {
					{
					setState(5547);
					match(OUT_P);
					}
				}

				}
				break;
			case OUT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5550);
				match(OUT_P);
				}
				break;
			case INOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5551);
				match(INOUT);
				}
				break;
			case VARIADIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(5552);
				match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5555);
			type_function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5557);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_typeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_func_type);
		int _la;
		try {
			setState(5568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5559);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SETOF) {
					{
					setState(5560);
					match(SETOF);
					}
				}

				setState(5563);
				type_function_name();
				setState(5564);
				attrs();
				setState(5565);
				match(PERCENT);
				setState(5566);
				match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_func_arg_with_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			func_arg();
			setState(5573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				setState(5571);
				_la = _input.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5572);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggr_argContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_arg; }
	}

	public final Aggr_argContext aggr_arg() throws RecognitionException {
		Aggr_argContext _localctx = new Aggr_argContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_aggr_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5575);
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggr_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<Aggr_args_listContext> aggr_args_list() {
			return getRuleContexts(Aggr_args_listContext.class);
		}
		public Aggr_args_listContext aggr_args_list(int i) {
			return getRuleContext(Aggr_args_listContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_aggr_args);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5577);
			match(OPEN_PAREN);
			setState(5588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(5578);
				match(STAR);
				}
				break;
			case 2:
				{
				setState(5579);
				aggr_args_list();
				}
				break;
			case 3:
				{
				setState(5580);
				match(ORDER);
				setState(5581);
				match(BY);
				setState(5582);
				aggr_args_list();
				}
				break;
			case 4:
				{
				setState(5583);
				aggr_args_list();
				setState(5584);
				match(ORDER);
				setState(5585);
				match(BY);
				setState(5586);
				aggr_args_list();
				}
				break;
			}
			setState(5590);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggr_args_listContext extends ParserRuleContext {
		public List<Aggr_argContext> aggr_arg() {
			return getRuleContexts(Aggr_argContext.class);
		}
		public Aggr_argContext aggr_arg(int i) {
			return getRuleContext(Aggr_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args_list; }
	}

	public final Aggr_args_listContext aggr_args_list() throws RecognitionException {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_aggr_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5592);
			aggr_arg();
			setState(5597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5593);
				match(COMMA);
				setState(5594);
				aggr_arg();
				}
				}
				setState(5599);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes; }
	}

	public final Aggregate_with_argtypesContext aggregate_with_argtypes() throws RecognitionException {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_aggregate_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5600);
			func_name();
			setState(5601);
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_with_argtypes_listContext extends ParserRuleContext {
		public List<Aggregate_with_argtypesContext> aggregate_with_argtypes() {
			return getRuleContexts(Aggregate_with_argtypesContext.class);
		}
		public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return getRuleContext(Aggregate_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes_list; }
	}

	public final Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() throws RecognitionException {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			aggregate_with_argtypes();
			setState(5608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5604);
				match(COMMA);
				setState(5605);
				aggregate_with_argtypes();
				}
				}
				setState(5610);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public List<Createfunc_opt_itemContext> createfunc_opt_item() {
			return getRuleContexts(Createfunc_opt_itemContext.class);
		}
		public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return getRuleContext(Createfunc_opt_itemContext.class,i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_createfunc_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5612); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5611);
				createfunc_opt_item();
				}
				}
				setState(5614); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || _la==NOT || _la==WINDOW || _la==CALLED || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 4503633987108865L) != 0) || _la==LANGUAGE || _la==LEAKPROOF || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 8624554121L) != 0) || _la==VOLATILE || ((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & 196609L) != 0) );
			this.ParseRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public FunctionsetresetclauseContext functionsetresetclause() {
			return getRuleContext(FunctionsetresetclauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_common_func_opt_item);
		try {
			setState(5653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5618);
				match(CALLED);
				setState(5619);
				match(ON);
				setState(5620);
				match(NULL_P);
				setState(5621);
				match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5622);
				match(RETURNS);
				setState(5623);
				match(NULL_P);
				setState(5624);
				match(ON);
				setState(5625);
				match(NULL_P);
				setState(5626);
				match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5627);
				match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5628);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5629);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5630);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5631);
				match(EXTERNAL);
				setState(5632);
				match(SECURITY);
				setState(5633);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5634);
				match(EXTERNAL);
				setState(5635);
				match(SECURITY);
				setState(5636);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5637);
				match(SECURITY);
				setState(5638);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5639);
				match(SECURITY);
				setState(5640);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5641);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5642);
				match(NOT);
				setState(5643);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5644);
				match(COST);
				setState(5645);
				numericonly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5646);
				match(ROWS);
				setState(5647);
				numericonly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5648);
				match(SUPPORT);
				setState(5649);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5650);
				functionsetresetclause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5651);
				match(PARALLEL);
				setState(5652);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Transform_type_listContext transform_type_list() {
			return getRuleContext(Transform_type_listContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_createfunc_opt_item);
		try {
			setState(5663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5655);
				match(AS);
				setState(5656);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5657);
				match(LANGUAGE);
				setState(5658);
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(5659);
				match(TRANSFORM);
				setState(5660);
				transform_type_list();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(5661);
				match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5662);
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_asContext extends ParserRuleContext {
		public SconstContext def;
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_func_as);
		try {
			setState(5670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5665);
				((Func_asContext)_localctx).def = sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5666);
				sconst();
				setState(5667);
				match(COMMA);
				setState(5668);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transform_type_listContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(PostgreSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(PostgreSQLParser.FOR, i);
		}
		public List<TerminalNode> TYPE_P() { return getTokens(PostgreSQLParser.TYPE_P); }
		public TerminalNode TYPE_P(int i) {
			return getToken(PostgreSQLParser.TYPE_P, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_type_list; }
	}

	public final Transform_type_listContext transform_type_list() throws RecognitionException {
		Transform_type_listContext _localctx = new Transform_type_listContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_transform_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5672);
			match(FOR);
			setState(5673);
			match(TYPE_P);
			setState(5674);
			typename();
			setState(5681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5675);
				match(COMMA);
				setState(5676);
				match(FOR);
				setState(5677);
				match(TYPE_P);
				setState(5678);
				typename();
				}
				}
				setState(5683);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Definition_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Definition_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition_; }
	}

	public final Definition_Context definition_() throws RecognitionException {
		Definition_Context _localctx = new Definition_Context(_ctx, getState());
		enterRule(_localctx, 662, RULE_definition_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5684);
			match(WITH);
			setState(5685);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5687);
			param_name();
			setState(5688);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_func_column_listContext extends ParserRuleContext {
		public List<Table_func_columnContext> table_func_column() {
			return getRuleContexts(Table_func_columnContext.class);
		}
		public Table_func_columnContext table_func_column(int i) {
			return getRuleContext(Table_func_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_table_func_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5690);
			table_func_column();
			setState(5695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5691);
				match(COMMA);
				setState(5692);
				table_func_column();
				}
				}
				setState(5697);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterfunctionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public Restrict_Context restrict_() {
			return getRuleContext(Restrict_Context.class,0);
		}
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunctionstmt; }
	}

	public final AlterfunctionstmtContext alterfunctionstmt() throws RecognitionException {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_alterfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5698);
			match(ALTER);
			setState(5699);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5700);
			function_with_argtypes();
			setState(5701);
			alterfunc_opt_list();
			setState(5703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTRICT) {
				{
				setState(5702);
				restrict_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public List<Common_func_opt_itemContext> common_func_opt_item() {
			return getRuleContexts(Common_func_opt_itemContext.class);
		}
		public Common_func_opt_itemContext common_func_opt_item(int i) {
			return getRuleContext(Common_func_opt_itemContext.class,i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_alterfunc_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5706); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5705);
				common_func_opt_item();
				}
				}
				setState(5708); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NOT || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & 72057594040025089L) != 0) || _la==IMMUTABLE || _la==LEAKPROOF || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 8624554121L) != 0) || _la==VOLATILE || _la==SUPPORT || _la==PARALLEL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Restrict_Context extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Restrict_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrict_; }
	}

	public final Restrict_Context restrict_() throws RecognitionException {
		Restrict_Context _localctx = new Restrict_Context(_ctx, getState());
		enterRule(_localctx, 672, RULE_restrict_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5710);
			match(RESTRICT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemovefuncstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removefuncstmt; }
	}

	public final RemovefuncstmtContext removefuncstmt() throws RecognitionException {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_removefuncstmt);
		int _la;
		try {
			setState(5754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5712);
				match(DROP);
				setState(5713);
				match(FUNCTION);
				setState(5714);
				function_with_argtypes_list();
				setState(5716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5715);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5718);
				match(DROP);
				setState(5719);
				match(FUNCTION);
				setState(5720);
				match(IF_P);
				setState(5721);
				match(EXISTS);
				setState(5722);
				function_with_argtypes_list();
				setState(5724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5723);
					drop_behavior_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5726);
				match(DROP);
				setState(5727);
				match(PROCEDURE);
				setState(5728);
				function_with_argtypes_list();
				setState(5730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5729);
					drop_behavior_();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5732);
				match(DROP);
				setState(5733);
				match(PROCEDURE);
				setState(5734);
				match(IF_P);
				setState(5735);
				match(EXISTS);
				setState(5736);
				function_with_argtypes_list();
				setState(5738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5737);
					drop_behavior_();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5740);
				match(DROP);
				setState(5741);
				match(ROUTINE);
				setState(5742);
				function_with_argtypes_list();
				setState(5744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5743);
					drop_behavior_();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5746);
				match(DROP);
				setState(5747);
				match(ROUTINE);
				setState(5748);
				match(IF_P);
				setState(5749);
				match(EXISTS);
				setState(5750);
				function_with_argtypes_list();
				setState(5752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5751);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveaggrstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return getRuleContext(Aggregate_with_argtypes_listContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeaggrstmt; }
	}

	public final RemoveaggrstmtContext removeaggrstmt() throws RecognitionException {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_removeaggrstmt);
		int _la;
		try {
			setState(5770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5756);
				match(DROP);
				setState(5757);
				match(AGGREGATE);
				setState(5758);
				aggregate_with_argtypes_list();
				setState(5760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5759);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5762);
				match(DROP);
				setState(5763);
				match(AGGREGATE);
				setState(5764);
				match(IF_P);
				setState(5765);
				match(EXISTS);
				setState(5766);
				aggregate_with_argtypes_list();
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5767);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveoperstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return getRuleContext(Operator_with_argtypes_listContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeoperstmt; }
	}

	public final RemoveoperstmtContext removeoperstmt() throws RecognitionException {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_removeoperstmt);
		int _la;
		try {
			setState(5786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5772);
				match(DROP);
				setState(5773);
				match(OPERATOR);
				setState(5774);
				operator_with_argtypes_list();
				setState(5776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5775);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5778);
				match(DROP);
				setState(5779);
				match(OPERATOR);
				setState(5780);
				match(IF_P);
				setState(5781);
				match(EXISTS);
				setState(5782);
				operator_with_argtypes_list();
				setState(5784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5783);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Oper_argtypesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_oper_argtypes);
		try {
			setState(5810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5788);
				match(OPEN_PAREN);
				setState(5789);
				typename();
				setState(5790);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5792);
				match(OPEN_PAREN);
				setState(5793);
				typename();
				setState(5794);
				match(COMMA);
				setState(5795);
				typename();
				setState(5796);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5798);
				match(OPEN_PAREN);
				setState(5799);
				match(NONE);
				setState(5800);
				match(COMMA);
				setState(5801);
				typename();
				setState(5802);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5804);
				match(OPEN_PAREN);
				setState(5805);
				typename();
				setState(5806);
				match(COMMA);
				setState(5807);
				match(NONE);
				setState(5808);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_operatorContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_any_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
				{
				{
				setState(5812);
				colid();
				setState(5813);
				match(DOT);
				}
				}
				setState(5819);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5820);
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_with_argtypes_listContext extends ParserRuleContext {
		public List<Operator_with_argtypesContext> operator_with_argtypes() {
			return getRuleContexts(Operator_with_argtypesContext.class);
		}
		public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return getRuleContext(Operator_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes_list; }
	}

	public final Operator_with_argtypes_listContext operator_with_argtypes_list() throws RecognitionException {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_operator_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5822);
			operator_with_argtypes();
			setState(5827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5823);
				match(COMMA);
				setState(5824);
				operator_with_argtypes();
				}
				}
				setState(5829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_with_argtypesContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes; }
	}

	public final Operator_with_argtypesContext operator_with_argtypes() throws RecognitionException {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_operator_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5830);
			any_operator();
			setState(5831);
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DostmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt; }
	}

	public final DostmtContext dostmt() throws RecognitionException {
		DostmtContext _localctx = new DostmtContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_dostmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5833);
			match(DO);
			setState(5834);
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public List<Dostmt_opt_itemContext> dostmt_opt_item() {
			return getRuleContexts(Dostmt_opt_itemContext.class);
		}
		public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return getRuleContext(Dostmt_opt_itemContext.class,i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_dostmt_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5837); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5836);
				dostmt_opt_item();
				}
				}
				setState(5839); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & 134217749L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_dostmt_opt_item);
		try {
			setState(5844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5841);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5842);
				match(LANGUAGE);
				setState(5843);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatecaststmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createcaststmt; }
	}

	public final CreatecaststmtContext createcaststmt() throws RecognitionException {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_createcaststmt);
		int _la;
		try {
			setState(5883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5846);
				match(CREATE);
				setState(5847);
				match(CAST);
				setState(5848);
				match(OPEN_PAREN);
				setState(5849);
				typename();
				setState(5850);
				match(AS);
				setState(5851);
				typename();
				setState(5852);
				match(CLOSE_PAREN);
				setState(5853);
				match(WITH);
				setState(5854);
				match(FUNCTION);
				setState(5855);
				function_with_argtypes();
				setState(5857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5856);
					cast_context();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5859);
				match(CREATE);
				setState(5860);
				match(CAST);
				setState(5861);
				match(OPEN_PAREN);
				setState(5862);
				typename();
				setState(5863);
				match(AS);
				setState(5864);
				typename();
				setState(5865);
				match(CLOSE_PAREN);
				setState(5866);
				match(WITHOUT);
				setState(5867);
				match(FUNCTION);
				setState(5869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5868);
					cast_context();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5871);
				match(CREATE);
				setState(5872);
				match(CAST);
				setState(5873);
				match(OPEN_PAREN);
				setState(5874);
				typename();
				setState(5875);
				match(AS);
				setState(5876);
				typename();
				setState(5877);
				match(CLOSE_PAREN);
				setState(5878);
				match(WITH);
				setState(5879);
				match(INOUT);
				setState(5881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5880);
					cast_context();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_cast_context);
		try {
			setState(5889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5885);
				match(AS);
				setState(5886);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5887);
				match(AS);
				setState(5888);
				match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropcaststmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public If_exists_Context if_exists_() {
			return getRuleContext(If_exists_Context.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropcaststmt; }
	}

	public final DropcaststmtContext dropcaststmt() throws RecognitionException {
		DropcaststmtContext _localctx = new DropcaststmtContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_dropcaststmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5891);
			match(DROP);
			setState(5892);
			match(CAST);
			setState(5894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF_P) {
				{
				setState(5893);
				if_exists_();
				}
			}

			setState(5896);
			match(OPEN_PAREN);
			setState(5897);
			typename();
			setState(5898);
			match(AS);
			setState(5899);
			typename();
			setState(5900);
			match(CLOSE_PAREN);
			setState(5902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5901);
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_exists_Context extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public If_exists_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_exists_; }
	}

	public final If_exists_Context if_exists_() throws RecognitionException {
		If_exists_Context _localctx = new If_exists_Context(_ctx, getState());
		enterRule(_localctx, 700, RULE_if_exists_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5904);
			match(IF_P);
			setState(5905);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatetransformstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Transform_element_listContext transform_element_list() {
			return getRuleContext(Transform_element_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Or_replace_Context or_replace_() {
			return getRuleContext(Or_replace_Context.class,0);
		}
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtransformstmt; }
	}

	public final CreatetransformstmtContext createtransformstmt() throws RecognitionException {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_createtransformstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5907);
			match(CREATE);
			setState(5909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(5908);
				or_replace_();
				}
			}

			setState(5911);
			match(TRANSFORM);
			setState(5912);
			match(FOR);
			setState(5913);
			typename();
			setState(5914);
			match(LANGUAGE);
			setState(5915);
			name();
			setState(5916);
			match(OPEN_PAREN);
			setState(5917);
			transform_element_list();
			setState(5918);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transform_element_listContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<TerminalNode> SQL_P() { return getTokens(PostgreSQLParser.SQL_P); }
		public TerminalNode SQL_P(int i) {
			return getToken(PostgreSQLParser.SQL_P, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLParser.FUNCTION, i);
		}
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_element_list; }
	}

	public final Transform_element_listContext transform_element_list() throws RecognitionException {
		Transform_element_listContext _localctx = new Transform_element_listContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_transform_element_list);
		try {
			setState(5954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5920);
				match(FROM);
				setState(5921);
				match(SQL_P);
				setState(5922);
				match(WITH);
				setState(5923);
				match(FUNCTION);
				setState(5924);
				function_with_argtypes();
				setState(5925);
				match(COMMA);
				setState(5926);
				match(TO);
				setState(5927);
				match(SQL_P);
				setState(5928);
				match(WITH);
				setState(5929);
				match(FUNCTION);
				setState(5930);
				function_with_argtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5932);
				match(TO);
				setState(5933);
				match(SQL_P);
				setState(5934);
				match(WITH);
				setState(5935);
				match(FUNCTION);
				setState(5936);
				function_with_argtypes();
				setState(5937);
				match(COMMA);
				setState(5938);
				match(FROM);
				setState(5939);
				match(SQL_P);
				setState(5940);
				match(WITH);
				setState(5941);
				match(FUNCTION);
				setState(5942);
				function_with_argtypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5944);
				match(FROM);
				setState(5945);
				match(SQL_P);
				setState(5946);
				match(WITH);
				setState(5947);
				match(FUNCTION);
				setState(5948);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5949);
				match(TO);
				setState(5950);
				match(SQL_P);
				setState(5951);
				match(WITH);
				setState(5952);
				match(FUNCTION);
				setState(5953);
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DroptransformstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public If_exists_Context if_exists_() {
			return getRuleContext(If_exists_Context.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptransformstmt; }
	}

	public final DroptransformstmtContext droptransformstmt() throws RecognitionException {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_droptransformstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5956);
			match(DROP);
			setState(5957);
			match(TRANSFORM);
			setState(5959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF_P) {
				{
				setState(5958);
				if_exists_();
				}
			}

			setState(5961);
			match(FOR);
			setState(5962);
			typename();
			setState(5963);
			match(LANGUAGE);
			setState(5964);
			name();
			setState(5966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5965);
				drop_behavior_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReindexstmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public Reindex_target_relationContext reindex_target_relation() {
			return getRuleContext(Reindex_target_relationContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Reindex_option_listContext reindex_option_list() {
			return getRuleContext(Reindex_option_listContext.class,0);
		}
		public Concurrently_Context concurrently_() {
			return getRuleContext(Concurrently_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Reindex_target_allContext reindex_target_all() {
			return getRuleContext(Reindex_target_allContext.class,0);
		}
		public Single_name_Context single_name_() {
			return getRuleContext(Single_name_Context.class,0);
		}
		public ReindexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexstmt; }
	}

	public final ReindexstmtContext reindexstmt() throws RecognitionException {
		ReindexstmtContext _localctx = new ReindexstmtContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_reindexstmt);
		int _la;
		try {
			setState(5998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5968);
				match(REINDEX);
				setState(5970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5969);
					reindex_option_list();
					}
				}

				setState(5972);
				reindex_target_relation();
				setState(5974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5973);
					concurrently_();
					}
				}

				setState(5976);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5978);
				match(REINDEX);
				setState(5980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5979);
					reindex_option_list();
					}
				}

				setState(5982);
				match(SCHEMA);
				setState(5984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5983);
					concurrently_();
					}
				}

				setState(5986);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5987);
				match(REINDEX);
				setState(5989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(5988);
					reindex_option_list();
					}
				}

				setState(5991);
				reindex_target_all();
				setState(5993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5992);
					concurrently_();
					}
				}

				setState(5996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(5995);
					single_name_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_target_relationContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_relation; }
	}

	public final Reindex_target_relationContext reindex_target_relation() throws RecognitionException {
		Reindex_target_relationContext _localctx = new Reindex_target_relationContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_reindex_target_relation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6000);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_target_allContext extends ParserRuleContext {
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_all; }
	}

	public final Reindex_target_allContext reindex_target_all() throws RecognitionException {
		Reindex_target_allContext _localctx = new Reindex_target_allContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_reindex_target_all);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6002);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_option_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Utility_option_listContext utility_option_list() {
			return getRuleContext(Utility_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_list; }
	}

	public final Reindex_option_listContext reindex_option_list() throws RecognitionException {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_reindex_option_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6004);
			match(OPEN_PAREN);
			setState(6005);
			utility_option_list();
			setState(6006);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertblspcstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertblspcstmt; }
	}

	public final AltertblspcstmtContext altertblspcstmt() throws RecognitionException {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_altertblspcstmt);
		try {
			setState(6020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6008);
				match(ALTER);
				setState(6009);
				match(TABLESPACE);
				setState(6010);
				name();
				setState(6011);
				match(SET);
				setState(6012);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6014);
				match(ALTER);
				setState(6015);
				match(TABLESPACE);
				setState(6016);
				name();
				setState(6017);
				match(RESET);
				setState(6018);
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenamestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public List<RoleidContext> roleid() {
			return getRuleContexts(RoleidContext.class);
		}
		public RoleidContext roleid(int i) {
			return getRuleContext(RoleidContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Procedural_Context procedural_() {
			return getRuleContext(Procedural_Context.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Column_Context column_() {
			return getRuleContext(Column_Context.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamestmt; }
	}

	public final RenamestmtContext renamestmt() throws RecognitionException {
		RenamestmtContext _localctx = new RenamestmtContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_renamestmt);
		int _la;
		try {
			setState(6509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6022);
				match(ALTER);
				setState(6023);
				match(AGGREGATE);
				setState(6024);
				aggregate_with_argtypes();
				setState(6025);
				match(RENAME);
				setState(6026);
				match(TO);
				setState(6027);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6029);
				match(ALTER);
				setState(6030);
				match(COLLATION);
				setState(6031);
				any_name();
				setState(6032);
				match(RENAME);
				setState(6033);
				match(TO);
				setState(6034);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6036);
				match(ALTER);
				setState(6037);
				match(CONVERSION_P);
				setState(6038);
				any_name();
				setState(6039);
				match(RENAME);
				setState(6040);
				match(TO);
				setState(6041);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6043);
				match(ALTER);
				setState(6044);
				match(DATABASE);
				setState(6045);
				name();
				setState(6046);
				match(RENAME);
				setState(6047);
				match(TO);
				setState(6048);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6050);
				match(ALTER);
				setState(6051);
				match(DOMAIN_P);
				setState(6052);
				any_name();
				setState(6053);
				match(RENAME);
				setState(6054);
				match(TO);
				setState(6055);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6057);
				match(ALTER);
				setState(6058);
				match(DOMAIN_P);
				setState(6059);
				any_name();
				setState(6060);
				match(RENAME);
				setState(6061);
				match(CONSTRAINT);
				setState(6062);
				name();
				setState(6063);
				match(TO);
				setState(6064);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6066);
				match(ALTER);
				setState(6067);
				match(FOREIGN);
				setState(6068);
				match(DATA_P);
				setState(6069);
				match(WRAPPER);
				setState(6070);
				name();
				setState(6071);
				match(RENAME);
				setState(6072);
				match(TO);
				setState(6073);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6075);
				match(ALTER);
				setState(6076);
				match(FUNCTION);
				setState(6077);
				function_with_argtypes();
				setState(6078);
				match(RENAME);
				setState(6079);
				match(TO);
				setState(6080);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6082);
				match(ALTER);
				setState(6083);
				match(GROUP_P);
				setState(6084);
				roleid();
				setState(6085);
				match(RENAME);
				setState(6086);
				match(TO);
				setState(6087);
				roleid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6089);
				match(ALTER);
				setState(6091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(6090);
					procedural_();
					}
				}

				setState(6093);
				match(LANGUAGE);
				setState(6094);
				name();
				setState(6095);
				match(RENAME);
				setState(6096);
				match(TO);
				setState(6097);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6099);
				match(ALTER);
				setState(6100);
				match(OPERATOR);
				setState(6101);
				match(CLASS);
				setState(6102);
				any_name();
				setState(6103);
				match(USING);
				setState(6104);
				name();
				setState(6105);
				match(RENAME);
				setState(6106);
				match(TO);
				setState(6107);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6109);
				match(ALTER);
				setState(6110);
				match(OPERATOR);
				setState(6111);
				match(FAMILY);
				setState(6112);
				any_name();
				setState(6113);
				match(USING);
				setState(6114);
				name();
				setState(6115);
				match(RENAME);
				setState(6116);
				match(TO);
				setState(6117);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6119);
				match(ALTER);
				setState(6120);
				match(POLICY);
				setState(6121);
				name();
				setState(6122);
				match(ON);
				setState(6123);
				qualified_name();
				setState(6124);
				match(RENAME);
				setState(6125);
				match(TO);
				setState(6126);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6128);
				match(ALTER);
				setState(6129);
				match(POLICY);
				setState(6130);
				match(IF_P);
				setState(6131);
				match(EXISTS);
				setState(6132);
				name();
				setState(6133);
				match(ON);
				setState(6134);
				qualified_name();
				setState(6135);
				match(RENAME);
				setState(6136);
				match(TO);
				setState(6137);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6139);
				match(ALTER);
				setState(6140);
				match(PROCEDURE);
				setState(6141);
				function_with_argtypes();
				setState(6142);
				match(RENAME);
				setState(6143);
				match(TO);
				setState(6144);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6146);
				match(ALTER);
				setState(6147);
				match(PUBLICATION);
				setState(6148);
				name();
				setState(6149);
				match(RENAME);
				setState(6150);
				match(TO);
				setState(6151);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6153);
				match(ALTER);
				setState(6154);
				match(ROUTINE);
				setState(6155);
				function_with_argtypes();
				setState(6156);
				match(RENAME);
				setState(6157);
				match(TO);
				setState(6158);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6160);
				match(ALTER);
				setState(6161);
				match(SCHEMA);
				setState(6162);
				name();
				setState(6163);
				match(RENAME);
				setState(6164);
				match(TO);
				setState(6165);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6167);
				match(ALTER);
				setState(6168);
				match(SERVER);
				setState(6169);
				name();
				setState(6170);
				match(RENAME);
				setState(6171);
				match(TO);
				setState(6172);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6174);
				match(ALTER);
				setState(6175);
				match(SUBSCRIPTION);
				setState(6176);
				name();
				setState(6177);
				match(RENAME);
				setState(6178);
				match(TO);
				setState(6179);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6181);
				match(ALTER);
				setState(6182);
				match(TABLE);
				setState(6183);
				relation_expr();
				setState(6184);
				match(RENAME);
				setState(6185);
				match(TO);
				setState(6186);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6188);
				match(ALTER);
				setState(6189);
				match(TABLE);
				setState(6190);
				match(IF_P);
				setState(6191);
				match(EXISTS);
				setState(6192);
				relation_expr();
				setState(6193);
				match(RENAME);
				setState(6194);
				match(TO);
				setState(6195);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6197);
				match(ALTER);
				setState(6198);
				match(SEQUENCE);
				setState(6199);
				qualified_name();
				setState(6200);
				match(RENAME);
				setState(6201);
				match(TO);
				setState(6202);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6204);
				match(ALTER);
				setState(6205);
				match(SEQUENCE);
				setState(6206);
				match(IF_P);
				setState(6207);
				match(EXISTS);
				setState(6208);
				qualified_name();
				setState(6209);
				match(RENAME);
				setState(6210);
				match(TO);
				setState(6211);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6213);
				match(ALTER);
				setState(6214);
				match(VIEW);
				setState(6215);
				qualified_name();
				setState(6216);
				match(RENAME);
				setState(6217);
				match(TO);
				setState(6218);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6220);
				match(ALTER);
				setState(6221);
				match(VIEW);
				setState(6222);
				match(IF_P);
				setState(6223);
				match(EXISTS);
				setState(6224);
				qualified_name();
				setState(6225);
				match(RENAME);
				setState(6226);
				match(TO);
				setState(6227);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6229);
				match(ALTER);
				setState(6230);
				match(MATERIALIZED);
				setState(6231);
				match(VIEW);
				setState(6232);
				qualified_name();
				setState(6233);
				match(RENAME);
				setState(6234);
				match(TO);
				setState(6235);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6237);
				match(ALTER);
				setState(6238);
				match(MATERIALIZED);
				setState(6239);
				match(VIEW);
				setState(6240);
				match(IF_P);
				setState(6241);
				match(EXISTS);
				setState(6242);
				qualified_name();
				setState(6243);
				match(RENAME);
				setState(6244);
				match(TO);
				setState(6245);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6247);
				match(ALTER);
				setState(6248);
				match(INDEX);
				setState(6249);
				qualified_name();
				setState(6250);
				match(RENAME);
				setState(6251);
				match(TO);
				setState(6252);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6254);
				match(ALTER);
				setState(6255);
				match(INDEX);
				setState(6256);
				match(IF_P);
				setState(6257);
				match(EXISTS);
				setState(6258);
				qualified_name();
				setState(6259);
				match(RENAME);
				setState(6260);
				match(TO);
				setState(6261);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6263);
				match(ALTER);
				setState(6264);
				match(FOREIGN);
				setState(6265);
				match(TABLE);
				setState(6266);
				relation_expr();
				setState(6267);
				match(RENAME);
				setState(6268);
				match(TO);
				setState(6269);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6271);
				match(ALTER);
				setState(6272);
				match(FOREIGN);
				setState(6273);
				match(TABLE);
				setState(6274);
				match(IF_P);
				setState(6275);
				match(EXISTS);
				setState(6276);
				relation_expr();
				setState(6277);
				match(RENAME);
				setState(6278);
				match(TO);
				setState(6279);
				name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6281);
				match(ALTER);
				setState(6282);
				match(TABLE);
				setState(6283);
				relation_expr();
				setState(6284);
				match(RENAME);
				setState(6286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6285);
					column_();
					}
				}

				setState(6288);
				name();
				setState(6289);
				match(TO);
				setState(6290);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6292);
				match(ALTER);
				setState(6293);
				match(TABLE);
				setState(6294);
				match(IF_P);
				setState(6295);
				match(EXISTS);
				setState(6296);
				relation_expr();
				setState(6297);
				match(RENAME);
				setState(6299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6298);
					column_();
					}
				}

				setState(6301);
				name();
				setState(6302);
				match(TO);
				setState(6303);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6305);
				match(ALTER);
				setState(6306);
				match(VIEW);
				setState(6307);
				qualified_name();
				setState(6308);
				match(RENAME);
				setState(6310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6309);
					column_();
					}
				}

				setState(6312);
				name();
				setState(6313);
				match(TO);
				setState(6314);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6316);
				match(ALTER);
				setState(6317);
				match(VIEW);
				setState(6318);
				match(IF_P);
				setState(6319);
				match(EXISTS);
				setState(6320);
				qualified_name();
				setState(6321);
				match(RENAME);
				setState(6323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6322);
					column_();
					}
				}

				setState(6325);
				name();
				setState(6326);
				match(TO);
				setState(6327);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6329);
				match(ALTER);
				setState(6330);
				match(MATERIALIZED);
				setState(6331);
				match(VIEW);
				setState(6332);
				qualified_name();
				setState(6333);
				match(RENAME);
				setState(6335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6334);
					column_();
					}
				}

				setState(6337);
				name();
				setState(6338);
				match(TO);
				setState(6339);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6341);
				match(ALTER);
				setState(6342);
				match(MATERIALIZED);
				setState(6343);
				match(VIEW);
				setState(6344);
				match(IF_P);
				setState(6345);
				match(EXISTS);
				setState(6346);
				qualified_name();
				setState(6347);
				match(RENAME);
				setState(6349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6348);
					column_();
					}
				}

				setState(6351);
				name();
				setState(6352);
				match(TO);
				setState(6353);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6355);
				match(ALTER);
				setState(6356);
				match(TABLE);
				setState(6357);
				relation_expr();
				setState(6358);
				match(RENAME);
				setState(6359);
				match(CONSTRAINT);
				setState(6360);
				name();
				setState(6361);
				match(TO);
				setState(6362);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6364);
				match(ALTER);
				setState(6365);
				match(TABLE);
				setState(6366);
				match(IF_P);
				setState(6367);
				match(EXISTS);
				setState(6368);
				relation_expr();
				setState(6369);
				match(RENAME);
				setState(6370);
				match(CONSTRAINT);
				setState(6371);
				name();
				setState(6372);
				match(TO);
				setState(6373);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6375);
				match(ALTER);
				setState(6376);
				match(FOREIGN);
				setState(6377);
				match(TABLE);
				setState(6378);
				relation_expr();
				setState(6379);
				match(RENAME);
				setState(6381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6380);
					column_();
					}
				}

				setState(6383);
				name();
				setState(6384);
				match(TO);
				setState(6385);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6387);
				match(ALTER);
				setState(6388);
				match(FOREIGN);
				setState(6389);
				match(TABLE);
				setState(6390);
				match(IF_P);
				setState(6391);
				match(EXISTS);
				setState(6392);
				relation_expr();
				setState(6393);
				match(RENAME);
				setState(6395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(6394);
					column_();
					}
				}

				setState(6397);
				name();
				setState(6398);
				match(TO);
				setState(6399);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6401);
				match(ALTER);
				setState(6402);
				match(RULE);
				setState(6403);
				name();
				setState(6404);
				match(ON);
				setState(6405);
				qualified_name();
				setState(6406);
				match(RENAME);
				setState(6407);
				match(TO);
				setState(6408);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6410);
				match(ALTER);
				setState(6411);
				match(TRIGGER);
				setState(6412);
				name();
				setState(6413);
				match(ON);
				setState(6414);
				qualified_name();
				setState(6415);
				match(RENAME);
				setState(6416);
				match(TO);
				setState(6417);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6419);
				match(ALTER);
				setState(6420);
				match(EVENT);
				setState(6421);
				match(TRIGGER);
				setState(6422);
				name();
				setState(6423);
				match(RENAME);
				setState(6424);
				match(TO);
				setState(6425);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6427);
				match(ALTER);
				setState(6428);
				match(ROLE);
				setState(6429);
				roleid();
				setState(6430);
				match(RENAME);
				setState(6431);
				match(TO);
				setState(6432);
				roleid();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6434);
				match(ALTER);
				setState(6435);
				match(USER);
				setState(6436);
				roleid();
				setState(6437);
				match(RENAME);
				setState(6438);
				match(TO);
				setState(6439);
				roleid();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6441);
				match(ALTER);
				setState(6442);
				match(TABLESPACE);
				setState(6443);
				name();
				setState(6444);
				match(RENAME);
				setState(6445);
				match(TO);
				setState(6446);
				name();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6448);
				match(ALTER);
				setState(6449);
				match(STATISTICS);
				setState(6450);
				any_name();
				setState(6451);
				match(RENAME);
				setState(6452);
				match(TO);
				setState(6453);
				name();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6455);
				match(ALTER);
				setState(6456);
				match(TEXT_P);
				setState(6457);
				match(SEARCH);
				setState(6458);
				match(PARSER);
				setState(6459);
				any_name();
				setState(6460);
				match(RENAME);
				setState(6461);
				match(TO);
				setState(6462);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6464);
				match(ALTER);
				setState(6465);
				match(TEXT_P);
				setState(6466);
				match(SEARCH);
				setState(6467);
				match(DICTIONARY);
				setState(6468);
				any_name();
				setState(6469);
				match(RENAME);
				setState(6470);
				match(TO);
				setState(6471);
				name();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6473);
				match(ALTER);
				setState(6474);
				match(TEXT_P);
				setState(6475);
				match(SEARCH);
				setState(6476);
				match(TEMPLATE);
				setState(6477);
				any_name();
				setState(6478);
				match(RENAME);
				setState(6479);
				match(TO);
				setState(6480);
				name();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6482);
				match(ALTER);
				setState(6483);
				match(TEXT_P);
				setState(6484);
				match(SEARCH);
				setState(6485);
				match(CONFIGURATION);
				setState(6486);
				any_name();
				setState(6487);
				match(RENAME);
				setState(6488);
				match(TO);
				setState(6489);
				name();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(6491);
				match(ALTER);
				setState(6492);
				match(TYPE_P);
				setState(6493);
				any_name();
				setState(6494);
				match(RENAME);
				setState(6495);
				match(TO);
				setState(6496);
				name();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(6498);
				match(ALTER);
				setState(6499);
				match(TYPE_P);
				setState(6500);
				any_name();
				setState(6501);
				match(RENAME);
				setState(6502);
				match(ATTRIBUTE);
				setState(6503);
				name();
				setState(6504);
				match(TO);
				setState(6505);
				name();
				setState(6507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6506);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_Context extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Column_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_; }
	}

	public final Column_Context column_() throws RecognitionException {
		Column_Context _localctx = new Column_Context(_ctx, getState());
		enterRule(_localctx, 720, RULE_column_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6511);
			match(COLUMN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_data_Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public Set_data_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_data_; }
	}

	public final Set_data_Context set_data_() throws RecognitionException {
		Set_data_Context _localctx = new Set_data_Context(_ctx, getState());
		enterRule(_localctx, 722, RULE_set_data_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6513);
			match(SET);
			setState(6514);
			match(DATA_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterobjectdependsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public No_Context no_() {
			return getRuleContext(No_Context.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectdependsstmt; }
	}

	public final AlterobjectdependsstmtContext alterobjectdependsstmt() throws RecognitionException {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_alterobjectdependsstmt);
		int _la;
		try {
			setState(6585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6516);
				match(ALTER);
				setState(6517);
				match(FUNCTION);
				setState(6518);
				function_with_argtypes();
				setState(6520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(6519);
					no_();
					}
				}

				setState(6522);
				match(DEPENDS);
				setState(6523);
				match(ON);
				setState(6524);
				match(EXTENSION);
				setState(6525);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6527);
				match(ALTER);
				setState(6528);
				match(PROCEDURE);
				setState(6529);
				function_with_argtypes();
				setState(6531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(6530);
					no_();
					}
				}

				setState(6533);
				match(DEPENDS);
				setState(6534);
				match(ON);
				setState(6535);
				match(EXTENSION);
				setState(6536);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6538);
				match(ALTER);
				setState(6539);
				match(ROUTINE);
				setState(6540);
				function_with_argtypes();
				setState(6542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(6541);
					no_();
					}
				}

				setState(6544);
				match(DEPENDS);
				setState(6545);
				match(ON);
				setState(6546);
				match(EXTENSION);
				setState(6547);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6549);
				match(ALTER);
				setState(6550);
				match(TRIGGER);
				setState(6551);
				name();
				setState(6552);
				match(ON);
				setState(6553);
				qualified_name();
				setState(6555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(6554);
					no_();
					}
				}

				setState(6557);
				match(DEPENDS);
				setState(6558);
				match(ON);
				setState(6559);
				match(EXTENSION);
				setState(6560);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6562);
				match(ALTER);
				setState(6563);
				match(MATERIALIZED);
				setState(6564);
				match(VIEW);
				setState(6565);
				qualified_name();
				setState(6567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(6566);
					no_();
					}
				}

				setState(6569);
				match(DEPENDS);
				setState(6570);
				match(ON);
				setState(6571);
				match(EXTENSION);
				setState(6572);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6574);
				match(ALTER);
				setState(6575);
				match(INDEX);
				setState(6576);
				qualified_name();
				setState(6578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(6577);
					no_();
					}
				}

				setState(6580);
				match(DEPENDS);
				setState(6581);
				match(ON);
				setState(6582);
				match(EXTENSION);
				setState(6583);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class No_Context extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public No_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_no_; }
	}

	public final No_Context no_() throws RecognitionException {
		No_Context _localctx = new No_Context(_ctx, getState());
		enterRule(_localctx, 726, RULE_no_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6587);
			match(NO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterobjectschemastmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectschemastmt; }
	}

	public final AlterobjectschemastmtContext alterobjectschemastmt() throws RecognitionException {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_alterobjectschemastmt);
		try {
			setState(6806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6589);
				match(ALTER);
				setState(6590);
				match(AGGREGATE);
				setState(6591);
				aggregate_with_argtypes();
				setState(6592);
				match(SET);
				setState(6593);
				match(SCHEMA);
				setState(6594);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6596);
				match(ALTER);
				setState(6597);
				match(COLLATION);
				setState(6598);
				any_name();
				setState(6599);
				match(SET);
				setState(6600);
				match(SCHEMA);
				setState(6601);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6603);
				match(ALTER);
				setState(6604);
				match(CONVERSION_P);
				setState(6605);
				any_name();
				setState(6606);
				match(SET);
				setState(6607);
				match(SCHEMA);
				setState(6608);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6610);
				match(ALTER);
				setState(6611);
				match(DOMAIN_P);
				setState(6612);
				any_name();
				setState(6613);
				match(SET);
				setState(6614);
				match(SCHEMA);
				setState(6615);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6617);
				match(ALTER);
				setState(6618);
				match(EXTENSION);
				setState(6619);
				name();
				setState(6620);
				match(SET);
				setState(6621);
				match(SCHEMA);
				setState(6622);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6624);
				match(ALTER);
				setState(6625);
				match(FUNCTION);
				setState(6626);
				function_with_argtypes();
				setState(6627);
				match(SET);
				setState(6628);
				match(SCHEMA);
				setState(6629);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6631);
				match(ALTER);
				setState(6632);
				match(OPERATOR);
				setState(6633);
				operator_with_argtypes();
				setState(6634);
				match(SET);
				setState(6635);
				match(SCHEMA);
				setState(6636);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6638);
				match(ALTER);
				setState(6639);
				match(OPERATOR);
				setState(6640);
				match(CLASS);
				setState(6641);
				any_name();
				setState(6642);
				match(USING);
				setState(6643);
				name();
				setState(6644);
				match(SET);
				setState(6645);
				match(SCHEMA);
				setState(6646);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6648);
				match(ALTER);
				setState(6649);
				match(OPERATOR);
				setState(6650);
				match(FAMILY);
				setState(6651);
				any_name();
				setState(6652);
				match(USING);
				setState(6653);
				name();
				setState(6654);
				match(SET);
				setState(6655);
				match(SCHEMA);
				setState(6656);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6658);
				match(ALTER);
				setState(6659);
				match(PROCEDURE);
				setState(6660);
				function_with_argtypes();
				setState(6661);
				match(SET);
				setState(6662);
				match(SCHEMA);
				setState(6663);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6665);
				match(ALTER);
				setState(6666);
				match(ROUTINE);
				setState(6667);
				function_with_argtypes();
				setState(6668);
				match(SET);
				setState(6669);
				match(SCHEMA);
				setState(6670);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6672);
				match(ALTER);
				setState(6673);
				match(TABLE);
				setState(6674);
				relation_expr();
				setState(6675);
				match(SET);
				setState(6676);
				match(SCHEMA);
				setState(6677);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6679);
				match(ALTER);
				setState(6680);
				match(TABLE);
				setState(6681);
				match(IF_P);
				setState(6682);
				match(EXISTS);
				setState(6683);
				relation_expr();
				setState(6684);
				match(SET);
				setState(6685);
				match(SCHEMA);
				setState(6686);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6688);
				match(ALTER);
				setState(6689);
				match(STATISTICS);
				setState(6690);
				any_name();
				setState(6691);
				match(SET);
				setState(6692);
				match(SCHEMA);
				setState(6693);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6695);
				match(ALTER);
				setState(6696);
				match(TEXT_P);
				setState(6697);
				match(SEARCH);
				setState(6698);
				match(PARSER);
				setState(6699);
				any_name();
				setState(6700);
				match(SET);
				setState(6701);
				match(SCHEMA);
				setState(6702);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6704);
				match(ALTER);
				setState(6705);
				match(TEXT_P);
				setState(6706);
				match(SEARCH);
				setState(6707);
				match(DICTIONARY);
				setState(6708);
				any_name();
				setState(6709);
				match(SET);
				setState(6710);
				match(SCHEMA);
				setState(6711);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6713);
				match(ALTER);
				setState(6714);
				match(TEXT_P);
				setState(6715);
				match(SEARCH);
				setState(6716);
				match(TEMPLATE);
				setState(6717);
				any_name();
				setState(6718);
				match(SET);
				setState(6719);
				match(SCHEMA);
				setState(6720);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6722);
				match(ALTER);
				setState(6723);
				match(TEXT_P);
				setState(6724);
				match(SEARCH);
				setState(6725);
				match(CONFIGURATION);
				setState(6726);
				any_name();
				setState(6727);
				match(SET);
				setState(6728);
				match(SCHEMA);
				setState(6729);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6731);
				match(ALTER);
				setState(6732);
				match(SEQUENCE);
				setState(6733);
				qualified_name();
				setState(6734);
				match(SET);
				setState(6735);
				match(SCHEMA);
				setState(6736);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6738);
				match(ALTER);
				setState(6739);
				match(SEQUENCE);
				setState(6740);
				match(IF_P);
				setState(6741);
				match(EXISTS);
				setState(6742);
				qualified_name();
				setState(6743);
				match(SET);
				setState(6744);
				match(SCHEMA);
				setState(6745);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6747);
				match(ALTER);
				setState(6748);
				match(VIEW);
				setState(6749);
				qualified_name();
				setState(6750);
				match(SET);
				setState(6751);
				match(SCHEMA);
				setState(6752);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6754);
				match(ALTER);
				setState(6755);
				match(VIEW);
				setState(6756);
				match(IF_P);
				setState(6757);
				match(EXISTS);
				setState(6758);
				qualified_name();
				setState(6759);
				match(SET);
				setState(6760);
				match(SCHEMA);
				setState(6761);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6763);
				match(ALTER);
				setState(6764);
				match(MATERIALIZED);
				setState(6765);
				match(VIEW);
				setState(6766);
				qualified_name();
				setState(6767);
				match(SET);
				setState(6768);
				match(SCHEMA);
				setState(6769);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6771);
				match(ALTER);
				setState(6772);
				match(MATERIALIZED);
				setState(6773);
				match(VIEW);
				setState(6774);
				match(IF_P);
				setState(6775);
				match(EXISTS);
				setState(6776);
				qualified_name();
				setState(6777);
				match(SET);
				setState(6778);
				match(SCHEMA);
				setState(6779);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6781);
				match(ALTER);
				setState(6782);
				match(FOREIGN);
				setState(6783);
				match(TABLE);
				setState(6784);
				relation_expr();
				setState(6785);
				match(SET);
				setState(6786);
				match(SCHEMA);
				setState(6787);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6789);
				match(ALTER);
				setState(6790);
				match(FOREIGN);
				setState(6791);
				match(TABLE);
				setState(6792);
				match(IF_P);
				setState(6793);
				match(EXISTS);
				setState(6794);
				relation_expr();
				setState(6795);
				match(SET);
				setState(6796);
				match(SCHEMA);
				setState(6797);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6799);
				match(ALTER);
				setState(6800);
				match(TYPE_P);
				setState(6801);
				any_name();
				setState(6802);
				match(SET);
				setState(6803);
				match(SCHEMA);
				setState(6804);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlteroperatorstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroperatorstmt; }
	}

	public final AlteroperatorstmtContext alteroperatorstmt() throws RecognitionException {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_alteroperatorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6808);
			match(ALTER);
			setState(6809);
			match(OPERATOR);
			setState(6810);
			operator_with_argtypes();
			setState(6811);
			match(SET);
			setState(6812);
			match(OPEN_PAREN);
			setState(6813);
			operator_def_list();
			setState(6814);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_def_listContext extends ParserRuleContext {
		public List<Operator_def_elemContext> operator_def_elem() {
			return getRuleContexts(Operator_def_elemContext.class);
		}
		public Operator_def_elemContext operator_def_elem(int i) {
			return getRuleContext(Operator_def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_list; }
	}

	public final Operator_def_listContext operator_def_list() throws RecognitionException {
		Operator_def_listContext _localctx = new Operator_def_listContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_operator_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6816);
			operator_def_elem();
			setState(6821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6817);
				match(COMMA);
				setState(6818);
				operator_def_elem();
				}
				}
				setState(6823);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_def_elemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Operator_def_argContext operator_def_arg() {
			return getRuleContext(Operator_def_argContext.class,0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_elem; }
	}

	public final Operator_def_elemContext operator_def_elem() throws RecognitionException {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_operator_def_elem);
		try {
			setState(6832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6824);
				colLabel();
				setState(6825);
				match(EQUAL);
				setState(6826);
				match(NONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6828);
				colLabel();
				setState(6829);
				match(EQUAL);
				setState(6830);
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Operator_def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_arg; }
	}

	public final Operator_def_argContext operator_def_arg() throws RecognitionException {
		Operator_def_argContext _localctx = new Operator_def_argContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_operator_def_arg);
		try {
			setState(6839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6834);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6835);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6836);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6837);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6838);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertypestmt; }
	}

	public final AltertypestmtContext altertypestmt() throws RecognitionException {
		AltertypestmtContext _localctx = new AltertypestmtContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_altertypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6841);
			match(ALTER);
			setState(6842);
			match(TYPE_P);
			setState(6843);
			any_name();
			setState(6844);
			match(SET);
			setState(6845);
			match(OPEN_PAREN);
			setState(6846);
			operator_def_list();
			setState(6847);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterownerstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Procedural_Context procedural_() {
			return getRuleContext(Procedural_Context.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterownerstmt; }
	}

	public final AlterownerstmtContext alterownerstmt() throws RecognitionException {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_alterownerstmt);
		int _la;
		try {
			setState(7034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6849);
				match(ALTER);
				setState(6850);
				match(AGGREGATE);
				setState(6851);
				aggregate_with_argtypes();
				setState(6852);
				match(OWNER);
				setState(6853);
				match(TO);
				setState(6854);
				rolespec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6856);
				match(ALTER);
				setState(6857);
				match(COLLATION);
				setState(6858);
				any_name();
				setState(6859);
				match(OWNER);
				setState(6860);
				match(TO);
				setState(6861);
				rolespec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6863);
				match(ALTER);
				setState(6864);
				match(CONVERSION_P);
				setState(6865);
				any_name();
				setState(6866);
				match(OWNER);
				setState(6867);
				match(TO);
				setState(6868);
				rolespec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6870);
				match(ALTER);
				setState(6871);
				match(DATABASE);
				setState(6872);
				name();
				setState(6873);
				match(OWNER);
				setState(6874);
				match(TO);
				setState(6875);
				rolespec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6877);
				match(ALTER);
				setState(6878);
				match(DOMAIN_P);
				setState(6879);
				any_name();
				setState(6880);
				match(OWNER);
				setState(6881);
				match(TO);
				setState(6882);
				rolespec();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6884);
				match(ALTER);
				setState(6885);
				match(FUNCTION);
				setState(6886);
				function_with_argtypes();
				setState(6887);
				match(OWNER);
				setState(6888);
				match(TO);
				setState(6889);
				rolespec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6891);
				match(ALTER);
				setState(6893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(6892);
					procedural_();
					}
				}

				setState(6895);
				match(LANGUAGE);
				setState(6896);
				name();
				setState(6897);
				match(OWNER);
				setState(6898);
				match(TO);
				setState(6899);
				rolespec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6901);
				match(ALTER);
				setState(6902);
				match(LARGE_P);
				setState(6903);
				match(OBJECT_P);
				setState(6904);
				numericonly();
				setState(6905);
				match(OWNER);
				setState(6906);
				match(TO);
				setState(6907);
				rolespec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6909);
				match(ALTER);
				setState(6910);
				match(OPERATOR);
				setState(6911);
				operator_with_argtypes();
				setState(6912);
				match(OWNER);
				setState(6913);
				match(TO);
				setState(6914);
				rolespec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6916);
				match(ALTER);
				setState(6917);
				match(OPERATOR);
				setState(6918);
				match(CLASS);
				setState(6919);
				any_name();
				setState(6920);
				match(USING);
				setState(6921);
				name();
				setState(6922);
				match(OWNER);
				setState(6923);
				match(TO);
				setState(6924);
				rolespec();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6926);
				match(ALTER);
				setState(6927);
				match(OPERATOR);
				setState(6928);
				match(FAMILY);
				setState(6929);
				any_name();
				setState(6930);
				match(USING);
				setState(6931);
				name();
				setState(6932);
				match(OWNER);
				setState(6933);
				match(TO);
				setState(6934);
				rolespec();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6936);
				match(ALTER);
				setState(6937);
				match(PROCEDURE);
				setState(6938);
				function_with_argtypes();
				setState(6939);
				match(OWNER);
				setState(6940);
				match(TO);
				setState(6941);
				rolespec();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6943);
				match(ALTER);
				setState(6944);
				match(ROUTINE);
				setState(6945);
				function_with_argtypes();
				setState(6946);
				match(OWNER);
				setState(6947);
				match(TO);
				setState(6948);
				rolespec();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6950);
				match(ALTER);
				setState(6951);
				match(SCHEMA);
				setState(6952);
				name();
				setState(6953);
				match(OWNER);
				setState(6954);
				match(TO);
				setState(6955);
				rolespec();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6957);
				match(ALTER);
				setState(6958);
				match(TYPE_P);
				setState(6959);
				any_name();
				setState(6960);
				match(OWNER);
				setState(6961);
				match(TO);
				setState(6962);
				rolespec();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6964);
				match(ALTER);
				setState(6965);
				match(TABLESPACE);
				setState(6966);
				name();
				setState(6967);
				match(OWNER);
				setState(6968);
				match(TO);
				setState(6969);
				rolespec();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6971);
				match(ALTER);
				setState(6972);
				match(STATISTICS);
				setState(6973);
				any_name();
				setState(6974);
				match(OWNER);
				setState(6975);
				match(TO);
				setState(6976);
				rolespec();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6978);
				match(ALTER);
				setState(6979);
				match(TEXT_P);
				setState(6980);
				match(SEARCH);
				setState(6981);
				match(DICTIONARY);
				setState(6982);
				any_name();
				setState(6983);
				match(OWNER);
				setState(6984);
				match(TO);
				setState(6985);
				rolespec();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6987);
				match(ALTER);
				setState(6988);
				match(TEXT_P);
				setState(6989);
				match(SEARCH);
				setState(6990);
				match(CONFIGURATION);
				setState(6991);
				any_name();
				setState(6992);
				match(OWNER);
				setState(6993);
				match(TO);
				setState(6994);
				rolespec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6996);
				match(ALTER);
				setState(6997);
				match(FOREIGN);
				setState(6998);
				match(DATA_P);
				setState(6999);
				match(WRAPPER);
				setState(7000);
				name();
				setState(7001);
				match(OWNER);
				setState(7002);
				match(TO);
				setState(7003);
				rolespec();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7005);
				match(ALTER);
				setState(7006);
				match(SERVER);
				setState(7007);
				name();
				setState(7008);
				match(OWNER);
				setState(7009);
				match(TO);
				setState(7010);
				rolespec();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7012);
				match(ALTER);
				setState(7013);
				match(EVENT);
				setState(7014);
				match(TRIGGER);
				setState(7015);
				name();
				setState(7016);
				match(OWNER);
				setState(7017);
				match(TO);
				setState(7018);
				rolespec();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7020);
				match(ALTER);
				setState(7021);
				match(PUBLICATION);
				setState(7022);
				name();
				setState(7023);
				match(OWNER);
				setState(7024);
				match(TO);
				setState(7025);
				rolespec();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7027);
				match(ALTER);
				setState(7028);
				match(SUBSCRIPTION);
				setState(7029);
				name();
				setState(7030);
				match(OWNER);
				setState(7031);
				match(TO);
				setState(7032);
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatepublicationstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Publication_for_tables_Context publication_for_tables_() {
			return getRuleContext(Publication_for_tables_Context.class,0);
		}
		public Definition_Context definition_() {
			return getRuleContext(Definition_Context.class,0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpublicationstmt; }
	}

	public final CreatepublicationstmtContext createpublicationstmt() throws RecognitionException {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_createpublicationstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7036);
			match(CREATE);
			setState(7037);
			match(PUBLICATION);
			setState(7038);
			name();
			setState(7040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(7039);
				publication_for_tables_();
				}
			}

			setState(7043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7042);
				definition_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_for_tables_Context extends ParserRuleContext {
		public Publication_for_tablesContext publication_for_tables() {
			return getRuleContext(Publication_for_tablesContext.class,0);
		}
		public Publication_for_tables_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_for_tables_; }
	}

	public final Publication_for_tables_Context publication_for_tables_() throws RecognitionException {
		Publication_for_tables_Context _localctx = new Publication_for_tables_Context(_ctx, getState());
		enterRule(_localctx, 744, RULE_publication_for_tables_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7045);
			publication_for_tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_for_tablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_for_tables; }
	}

	public final Publication_for_tablesContext publication_for_tables() throws RecognitionException {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_publication_for_tables);
		try {
			setState(7053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7047);
				match(FOR);
				setState(7048);
				match(TABLE);
				setState(7049);
				relation_expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7050);
				match(FOR);
				setState(7051);
				match(ALL);
				setState(7052);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterpublicationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpublicationstmt; }
	}

	public final AlterpublicationstmtContext alterpublicationstmt() throws RecognitionException {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_alterpublicationstmt);
		try {
			setState(7082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7055);
				match(ALTER);
				setState(7056);
				match(PUBLICATION);
				setState(7057);
				name();
				setState(7058);
				match(SET);
				setState(7059);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7061);
				match(ALTER);
				setState(7062);
				match(PUBLICATION);
				setState(7063);
				name();
				setState(7064);
				match(ADD_P);
				setState(7065);
				match(TABLE);
				setState(7066);
				relation_expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7068);
				match(ALTER);
				setState(7069);
				match(PUBLICATION);
				setState(7070);
				name();
				setState(7071);
				match(SET);
				setState(7072);
				match(TABLE);
				setState(7073);
				relation_expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7075);
				match(ALTER);
				setState(7076);
				match(PUBLICATION);
				setState(7077);
				name();
				setState(7078);
				match(DROP);
				setState(7079);
				match(TABLE);
				setState(7080);
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatesubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public Definition_Context definition_() {
			return getRuleContext(Definition_Context.class,0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createsubscriptionstmt; }
	}

	public final CreatesubscriptionstmtContext createsubscriptionstmt() throws RecognitionException {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_createsubscriptionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7084);
			match(CREATE);
			setState(7085);
			match(SUBSCRIPTION);
			setState(7086);
			name();
			setState(7087);
			match(CONNECTION);
			setState(7088);
			sconst();
			setState(7089);
			match(PUBLICATION);
			setState(7090);
			publication_name_list();
			setState(7092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7091);
				definition_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_name_listContext extends ParserRuleContext {
		public List<Publication_name_itemContext> publication_name_item() {
			return getRuleContexts(Publication_name_itemContext.class);
		}
		public Publication_name_itemContext publication_name_item(int i) {
			return getRuleContext(Publication_name_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_list; }
	}

	public final Publication_name_listContext publication_name_list() throws RecognitionException {
		Publication_name_listContext _localctx = new Publication_name_listContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_publication_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7094);
			publication_name_item();
			setState(7099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7095);
				match(COMMA);
				setState(7096);
				publication_name_item();
				}
				}
				setState(7101);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Publication_name_itemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_item; }
	}

	public final Publication_name_itemContext publication_name_item() throws RecognitionException {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_publication_name_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7102);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltersubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Definition_Context definition_() {
			return getRuleContext(Definition_Context.class,0);
		}
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersubscriptionstmt; }
	}

	public final AltersubscriptionstmtContext altersubscriptionstmt() throws RecognitionException {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_altersubscriptionstmt);
		int _la;
		try {
			setState(7143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7104);
				match(ALTER);
				setState(7105);
				match(SUBSCRIPTION);
				setState(7106);
				name();
				setState(7107);
				match(SET);
				setState(7108);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7110);
				match(ALTER);
				setState(7111);
				match(SUBSCRIPTION);
				setState(7112);
				name();
				setState(7113);
				match(CONNECTION);
				setState(7114);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7116);
				match(ALTER);
				setState(7117);
				match(SUBSCRIPTION);
				setState(7118);
				name();
				setState(7119);
				match(REFRESH);
				setState(7120);
				match(PUBLICATION);
				setState(7122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7121);
					definition_();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7124);
				match(ALTER);
				setState(7125);
				match(SUBSCRIPTION);
				setState(7126);
				name();
				setState(7127);
				match(SET);
				setState(7128);
				match(PUBLICATION);
				setState(7129);
				publication_name_list();
				setState(7131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7130);
					definition_();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7133);
				match(ALTER);
				setState(7134);
				match(SUBSCRIPTION);
				setState(7135);
				name();
				setState(7136);
				match(ENABLE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7138);
				match(ALTER);
				setState(7139);
				match(SUBSCRIPTION);
				setState(7140);
				name();
				setState(7141);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropsubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropsubscriptionstmt; }
	}

	public final DropsubscriptionstmtContext dropsubscriptionstmt() throws RecognitionException {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_dropsubscriptionstmt);
		int _la;
		try {
			setState(7159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7145);
				match(DROP);
				setState(7146);
				match(SUBSCRIPTION);
				setState(7147);
				name();
				setState(7149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7148);
					drop_behavior_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7151);
				match(DROP);
				setState(7152);
				match(SUBSCRIPTION);
				setState(7153);
				match(IF_P);
				setState(7154);
				match(EXISTS);
				setState(7155);
				name();
				setState(7157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7156);
					drop_behavior_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RulestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public RuleactionlistContext ruleactionlist() {
			return getRuleContext(RuleactionlistContext.class,0);
		}
		public Or_replace_Context or_replace_() {
			return getRuleContext(Or_replace_Context.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Instead_Context instead_() {
			return getRuleContext(Instead_Context.class,0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rulestmt; }
	}

	public final RulestmtContext rulestmt() throws RecognitionException {
		RulestmtContext _localctx = new RulestmtContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_rulestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7161);
			match(CREATE);
			setState(7163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7162);
				or_replace_();
				}
			}

			setState(7165);
			match(RULE);
			setState(7166);
			name();
			setState(7167);
			match(AS);
			setState(7168);
			match(ON);
			setState(7169);
			event();
			setState(7170);
			match(TO);
			setState(7171);
			qualified_name();
			setState(7173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(7172);
				where_clause();
				}
			}

			setState(7175);
			match(DO);
			setState(7177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(7176);
				instead_();
				}
			}

			setState(7179);
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionlistContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public RuleactionmultiContext ruleactionmulti() {
			return getRuleContext(RuleactionmultiContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionlist; }
	}

	public final RuleactionlistContext ruleactionlist() throws RecognitionException {
		RuleactionlistContext _localctx = new RuleactionlistContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_ruleactionlist);
		try {
			setState(7187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7181);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7182);
				ruleactionstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7183);
				match(OPEN_PAREN);
				setState(7184);
				ruleactionmulti();
				setState(7185);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionmultiContext extends ParserRuleContext {
		public List<RuleactionstmtOrEmptyContext> ruleactionstmtOrEmpty() {
			return getRuleContexts(RuleactionstmtOrEmptyContext.class);
		}
		public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return getRuleContext(RuleactionstmtOrEmptyContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionmulti; }
	}

	public final RuleactionmultiContext ruleactionmulti() throws RecognitionException {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_ruleactionmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 131089L) != 0) || _la==DELETE_P || _la==INSERT || _la==NOTIFY || _la==UPDATE || _la==VALUES) {
				{
				setState(7189);
				ruleactionstmtOrEmpty();
				}
			}

			setState(7198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI) {
				{
				{
				setState(7192);
				match(SEMI);
				setState(7194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 131089L) != 0) || _la==DELETE_P || _la==INSERT || _la==NOTIFY || _la==UPDATE || _la==VALUES) {
					{
					setState(7193);
					ruleactionstmtOrEmpty();
					}
				}

				}
				}
				setState(7200);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionstmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmt; }
	}

	public final RuleactionstmtContext ruleactionstmt() throws RecognitionException {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_ruleactionstmt);
		try {
			setState(7206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7201);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7202);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7203);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7204);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7205);
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RuleactionstmtOrEmptyContext extends ParserRuleContext {
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmtOrEmpty; }
	}

	public final RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() throws RecognitionException {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_ruleactionstmtOrEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7208);
			ruleactionstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7210);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Instead_Context extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public Instead_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instead_; }
	}

	public final Instead_Context instead_() throws RecognitionException {
		Instead_Context _localctx = new Instead_Context(_ctx, getState());
		enterRule(_localctx, 772, RULE_instead_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7212);
			_la = _input.LA(1);
			if ( !(_la==ALSO || _la==INSTEAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotifystmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifystmt; }
	}

	public final NotifystmtContext notifystmt() throws RecognitionException {
		NotifystmtContext _localctx = new NotifystmtContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_notifystmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7214);
			match(NOTIFY);
			setState(7215);
			colid();
			setState(7217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7216);
				notify_payload();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notify_payloadContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_notify_payload);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7219);
			match(COMMA);
			setState(7220);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListenstmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenstmt; }
	}

	public final ListenstmtContext listenstmt() throws RecognitionException {
		ListenstmtContext _localctx = new ListenstmtContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_listenstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7222);
			match(LISTEN);
			setState(7223);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlistenstmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenstmt; }
	}

	public final UnlistenstmtContext unlistenstmt() throws RecognitionException {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_unlistenstmt);
		try {
			setState(7229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7225);
				match(UNLISTEN);
				setState(7226);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7227);
				match(UNLISTEN);
				setState(7228);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionstmtContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public Transaction_Context transaction_() {
			return getRuleContext(Transaction_Context.class,0);
		}
		public Transaction_chain_Context transaction_chain_() {
			return getRuleContext(Transaction_chain_Context.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionstmt; }
	}

	public final TransactionstmtContext transactionstmt() throws RecognitionException {
		TransactionstmtContext _localctx = new TransactionstmtContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_transactionstmt);
		int _la;
		try {
			setState(7300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7231);
				match(ABORT_P);
				setState(7233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7232);
					transaction_();
					}
				}

				setState(7236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(7235);
					transaction_chain_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7238);
				match(BEGIN_P);
				setState(7240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7239);
					transaction_();
					}
				}

				setState(7243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
					{
					setState(7242);
					transaction_mode_list_or_empty();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7245);
				match(START);
				setState(7246);
				match(TRANSACTION);
				setState(7248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
					{
					setState(7247);
					transaction_mode_list_or_empty();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7250);
				match(COMMIT);
				setState(7252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7251);
					transaction_();
					}
				}

				setState(7255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(7254);
					transaction_chain_();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7257);
				match(END_P);
				setState(7259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7258);
					transaction_();
					}
				}

				setState(7262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(7261);
					transaction_chain_();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7264);
				match(ROLLBACK);
				setState(7266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7265);
					transaction_();
					}
				}

				setState(7269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(7268);
					transaction_chain_();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7271);
				match(SAVEPOINT);
				setState(7272);
				colid();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7273);
				match(RELEASE);
				setState(7274);
				match(SAVEPOINT);
				setState(7275);
				colid();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7276);
				match(RELEASE);
				setState(7277);
				colid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7278);
				match(ROLLBACK);
				setState(7280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7279);
					transaction_();
					}
				}

				setState(7282);
				match(TO);
				setState(7283);
				match(SAVEPOINT);
				setState(7284);
				colid();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7285);
				match(ROLLBACK);
				setState(7287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(7286);
					transaction_();
					}
				}

				setState(7289);
				match(TO);
				setState(7290);
				colid();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7291);
				match(PREPARE);
				setState(7292);
				match(TRANSACTION);
				setState(7293);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7294);
				match(COMMIT);
				setState(7295);
				match(PREPARED);
				setState(7296);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7297);
				match(ROLLBACK);
				setState(7298);
				match(PREPARED);
				setState(7299);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_Context extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_; }
	}

	public final Transaction_Context transaction_() throws RecognitionException {
		Transaction_Context _localctx = new Transaction_Context(_ctx, getState());
		enterRule(_localctx, 784, RULE_transaction_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7302);
			_la = _input.LA(1);
			if ( !(_la==TRANSACTION || _la==WORK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_transaction_mode_item);
		try {
			setState(7314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7304);
				match(ISOLATION);
				setState(7305);
				match(LEVEL);
				setState(7306);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7307);
				match(READ);
				setState(7308);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7309);
				match(READ);
				setState(7310);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7311);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7312);
				match(NOT);
				setState(7313);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_listContext extends ParserRuleContext {
		public List<Transaction_mode_itemContext> transaction_mode_item() {
			return getRuleContexts(Transaction_mode_itemContext.class);
		}
		public Transaction_mode_itemContext transaction_mode_item(int i) {
			return getRuleContext(Transaction_mode_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_transaction_mode_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7316);
			transaction_mode_item();
			setState(7323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				setState(7318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7317);
					match(COMMA);
					}
				}

				setState(7320);
				transaction_mode_item();
				}
				}
				setState(7325);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_transaction_mode_list_or_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7326);
			transaction_mode_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_chain_Context extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Transaction_chain_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_chain_; }
	}

	public final Transaction_chain_Context transaction_chain_() throws RecognitionException {
		Transaction_chain_Context _localctx = new Transaction_chain_Context(_ctx, getState());
		enterRule(_localctx, 792, RULE_transaction_chain_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7328);
			match(AND);
			setState(7330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(7329);
				match(NO);
				}
			}

			setState(7332);
			match(CHAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public Check_option_Context check_option_() {
			return getRuleContext(Check_option_Context.class,0);
		}
		public Column_list_Context column_list_() {
			return getRuleContext(Column_list_Context.class,0);
		}
		public Reloptions_Context reloptions_() {
			return getRuleContext(Reloptions_Context.class,0);
		}
		public ViewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewstmt; }
	}

	public final ViewstmtContext viewstmt() throws RecognitionException {
		ViewstmtContext _localctx = new ViewstmtContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_viewstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7334);
			match(CREATE);
			setState(7337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7335);
				match(OR);
				setState(7336);
				match(REPLACE);
				}
			}

			setState(7340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
				{
				setState(7339);
				opttemp();
				}
			}

			setState(7359);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VIEW:
				{
				setState(7342);
				match(VIEW);
				setState(7343);
				qualified_name();
				setState(7345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(7344);
					column_list_();
					}
				}

				setState(7348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7347);
					reloptions_();
					}
				}

				}
				break;
			case RECURSIVE:
				{
				setState(7350);
				match(RECURSIVE);
				setState(7351);
				match(VIEW);
				setState(7352);
				qualified_name();
				setState(7353);
				match(OPEN_PAREN);
				setState(7354);
				columnlist();
				setState(7355);
				match(CLOSE_PAREN);
				setState(7357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7356);
					reloptions_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7361);
			match(AS);
			setState(7362);
			selectstmt();
			setState(7364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7363);
				check_option_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Check_option_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Check_option_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_option_; }
	}

	public final Check_option_Context check_option_() throws RecognitionException {
		Check_option_Context _localctx = new Check_option_Context(_ctx, getState());
		enterRule(_localctx, 796, RULE_check_option_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7366);
			match(WITH);
			setState(7368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				setState(7367);
				_la = _input.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7370);
			match(CHECK);
			setState(7371);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadstmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadstmt; }
	}

	public final LoadstmtContext loadstmt() throws RecognitionException {
		LoadstmtContext _localctx = new LoadstmtContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_loadstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7373);
			match(LOAD);
			setState(7374);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedbstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbstmt; }
	}

	public final CreatedbstmtContext createdbstmt() throws RecognitionException {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_createdbstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7376);
			match(CREATE);
			setState(7377);
			match(DATABASE);
			setState(7378);
			name();
			setState(7380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7379);
				with_();
				}
			}

			setState(7383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0)) {
				{
				setState(7382);
				createdb_opt_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_itemsContext createdb_opt_items() {
			return getRuleContext(Createdb_opt_itemsContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_createdb_opt_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7385);
			createdb_opt_items();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_itemsContext extends ParserRuleContext {
		public List<Createdb_opt_itemContext> createdb_opt_item() {
			return getRuleContexts(Createdb_opt_itemContext.class);
		}
		public Createdb_opt_itemContext createdb_opt_item(int i) {
			return getRuleContext(Createdb_opt_itemContext.class,i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_items; }
	}

	public final Createdb_opt_itemsContext createdb_opt_items() throws RecognitionException {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_createdb_opt_items);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7388); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7387);
				createdb_opt_item();
				}
				}
				setState(7390); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public Createdb_opt_nameContext createdb_opt_name() {
			return getRuleContext(Createdb_opt_nameContext.class,0);
		}
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Equal_Context equal_() {
			return getRuleContext(Equal_Context.class,0);
		}
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_createdb_opt_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7392);
			createdb_opt_name();
			setState(7394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(7393);
				equal_();
				}
			}

			setState(7399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				{
				setState(7396);
				signediconst();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				setState(7397);
				boolean_or_string_();
				}
				break;
			case DEFAULT:
				{
				setState(7398);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Createdb_opt_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_name; }
	}

	public final Createdb_opt_nameContext createdb_opt_name() throws RecognitionException {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_createdb_opt_name);
		try {
			setState(7409);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7401);
				identifier();
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7402);
				match(CONNECTION);
				setState(7403);
				match(LIMIT);
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7404);
				match(ENCODING);
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(7405);
				match(LOCATION);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 5);
				{
				setState(7406);
				match(OWNER);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 6);
				{
				setState(7407);
				match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7408);
				match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Equal_Context extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Equal_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal_; }
	}

	public final Equal_Context equal_() throws RecognitionException {
		Equal_Context _localctx = new Equal_Context(_ctx, getState());
		enterRule(_localctx, 810, RULE_equal_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7411);
			match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdatabasestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasestmt; }
	}

	public final AlterdatabasestmtContext alterdatabasestmt() throws RecognitionException {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_alterdatabasestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7413);
			match(ALTER);
			setState(7414);
			match(DATABASE);
			setState(7415);
			name();
			setState(7426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(7416);
				match(WITH);
				setState(7418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0)) {
					{
					setState(7417);
					createdb_opt_list();
					}
				}

				}
				break;
			case EOF:
			case SEMI:
			case CONNECTION:
			case ENCODING:
			case LOCATION:
			case OWNER:
			case TABLESPACE:
			case TEMPLATE:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				{
				setState(7421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECTION || _la==ENCODING || _la==LOCATION || _la==OWNER || _la==TABLESPACE || _la==TEMPLATE || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0)) {
					{
					setState(7420);
					createdb_opt_list();
					}
				}

				}
				break;
			case SET:
				{
				setState(7423);
				match(SET);
				setState(7424);
				match(TABLESPACE);
				setState(7425);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdatabasesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasesetstmt; }
	}

	public final AlterdatabasesetstmtContext alterdatabasesetstmt() throws RecognitionException {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_alterdatabasesetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7428);
			match(ALTER);
			setState(7429);
			match(DATABASE);
			setState(7430);
			name();
			setState(7431);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropdbstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Drop_option_listContext drop_option_list() {
			return getRuleContext(Drop_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public With_Context with_() {
			return getRuleContext(With_Context.class,0);
		}
		public DropdbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbstmt; }
	}

	public final DropdbstmtContext dropdbstmt() throws RecognitionException {
		DropdbstmtContext _localctx = new DropdbstmtContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_dropdbstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7433);
			match(DROP);
			setState(7434);
			match(DATABASE);
			setState(7437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
			case 1:
				{
				setState(7435);
				match(IF_P);
				setState(7436);
				match(EXISTS);
				}
				break;
			}
			setState(7439);
			name();
			setState(7447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN || _la==WITH) {
				{
				setState(7441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7440);
					with_();
					}
				}

				setState(7443);
				match(OPEN_PAREN);
				setState(7444);
				drop_option_list();
				setState(7445);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_option_listContext extends ParserRuleContext {
		public List<Drop_optionContext> drop_option() {
			return getRuleContexts(Drop_optionContext.class);
		}
		public Drop_optionContext drop_option(int i) {
			return getRuleContext(Drop_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option_list; }
	}

	public final Drop_option_listContext drop_option_list() throws RecognitionException {
		Drop_option_listContext _localctx = new Drop_option_listContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_drop_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7449);
			drop_option();
			setState(7454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7450);
				match(COMMA);
				setState(7451);
				drop_option();
				}
				}
				setState(7456);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_optionContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option; }
	}

	public final Drop_optionContext drop_option() throws RecognitionException {
		Drop_optionContext _localctx = new Drop_optionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_drop_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7457);
			match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltercollationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercollationstmt; }
	}

	public final AltercollationstmtContext altercollationstmt() throws RecognitionException {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_altercollationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7459);
			match(ALTER);
			setState(7460);
			match(COLLATION);
			setState(7461);
			any_name();
			setState(7462);
			match(REFRESH);
			setState(7463);
			match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltersystemstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersystemstmt; }
	}

	public final AltersystemstmtContext altersystemstmt() throws RecognitionException {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_altersystemstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7465);
			match(ALTER);
			setState(7466);
			match(SYSTEM_P);
			setState(7467);
			_la = _input.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7468);
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreatedomainstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public As_Context as_() {
			return getRuleContext(As_Context.class,0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdomainstmt; }
	}

	public final CreatedomainstmtContext createdomainstmt() throws RecognitionException {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_createdomainstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7470);
			match(CREATE);
			setState(7471);
			match(DOMAIN_P);
			setState(7472);
			any_name();
			setState(7474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7473);
				as_();
				}
			}

			setState(7476);
			typename();
			setState(7477);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterdomainstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_behavior_Context drop_behavior_() {
			return getRuleContext(Drop_behavior_Context.class,0);
		}
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdomainstmt; }
	}

	public final AlterdomainstmtContext alterdomainstmt() throws RecognitionException {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_alterdomainstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7479);
			match(ALTER);
			setState(7480);
			match(DOMAIN_P);
			setState(7481);
			any_name();
			setState(7504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(7482);
				alter_column_default();
				}
				break;
			case 2:
				{
				setState(7483);
				match(DROP);
				setState(7484);
				match(NOT);
				setState(7485);
				match(NULL_P);
				}
				break;
			case 3:
				{
				setState(7486);
				match(SET);
				setState(7487);
				match(NOT);
				setState(7488);
				match(NULL_P);
				}
				break;
			case 4:
				{
				setState(7489);
				match(ADD_P);
				setState(7490);
				tableconstraint();
				}
				break;
			case 5:
				{
				setState(7491);
				match(DROP);
				setState(7492);
				match(CONSTRAINT);
				setState(7495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
				case 1:
					{
					setState(7493);
					match(IF_P);
					setState(7494);
					match(EXISTS);
					}
					break;
				}
				setState(7497);
				name();
				setState(7499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(7498);
					drop_behavior_();
					}
				}

				}
				break;
			case 6:
				{
				setState(7501);
				match(VALIDATE);
				setState(7502);
				match(CONSTRAINT);
				setState(7503);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class As_Context extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public As_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_; }
	}

	public final As_Context as_() throws RecognitionException {
		As_Context _localctx = new As_Context(_ctx, getState());
		enterRule(_localctx, 830, RULE_as_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7506);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertsdictionarystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsdictionarystmt; }
	}

	public final AltertsdictionarystmtContext altertsdictionarystmt() throws RecognitionException {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_altertsdictionarystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7508);
			match(ALTER);
			setState(7509);
			match(TEXT_P);
			setState(7510);
			match(SEARCH);
			setState(7511);
			match(DICTIONARY);
			setState(7512);
			any_name();
			setState(7513);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AltertsconfigurationstmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(PostgreSQLParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSQLParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Any_withContext any_with() {
			return getRuleContext(Any_withContext.class,0);
		}
		public Any_name_list_Context any_name_list_() {
			return getRuleContext(Any_name_list_Context.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsconfigurationstmt; }
	}

	public final AltertsconfigurationstmtContext altertsconfigurationstmt() throws RecognitionException {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_altertsconfigurationstmt);
		try {
			setState(7587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7515);
				match(ALTER);
				setState(7516);
				match(TEXT_P);
				setState(7517);
				match(SEARCH);
				setState(7518);
				match(CONFIGURATION);
				setState(7519);
				any_name();
				setState(7520);
				match(ADD_P);
				setState(7521);
				match(MAPPING);
				setState(7522);
				match(FOR);
				setState(7523);
				name_list();
				setState(7524);
				any_with();
				setState(7525);
				any_name_list_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7527);
				match(ALTER);
				setState(7528);
				match(TEXT_P);
				setState(7529);
				match(SEARCH);
				setState(7530);
				match(CONFIGURATION);
				setState(7531);
				any_name();
				setState(7532);
				match(ALTER);
				setState(7533);
				match(MAPPING);
				setState(7534);
				match(FOR);
				setState(7535);
				name_list();
				setState(7536);
				any_with();
				setState(7537);
				any_name_list_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7539);
				match(ALTER);
				setState(7540);
				match(TEXT_P);
				setState(7541);
				match(SEARCH);
				setState(7542);
				match(CONFIGURATION);
				setState(7543);
				any_name();
				setState(7544);
				match(ALTER);
				setState(7545);
				match(MAPPING);
				setState(7546);
				match(REPLACE);
				setState(7547);
				any_name();
				setState(7548);
				any_with();
				setState(7549);
				any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7551);
				match(ALTER);
				setState(7552);
				match(TEXT_P);
				setState(7553);
				match(SEARCH);
				setState(7554);
				match(CONFIGURATION);
				setState(7555);
				any_name();
				setState(7556);
				match(ALTER);
				setState(7557);
				match(MAPPING);
				setState(7558);
				match(FOR);
				setState(7559);
				name_list();
				setState(7560);
				match(REPLACE);
				setState(7561);
				any_name();
				setState(7562);
				any_with();
				setState(7563);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7565);
				match(ALTER);
				setState(7566);
				match(TEXT_P);
				setState(7567);
				match(SEARCH);
				setState(7568);
				match(CONFIGURATION);
				setState(7569);
				any_name();
				setState(7570);
				match(DROP);
				setState(7571);
				match(MAPPING);
				setState(7572);
				match(FOR);
				setState(7573);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7575);
				match(ALTER);
				setState(7576);
				match(TEXT_P);
				setState(7577);
				match(SEARCH);
				setState(7578);
				match(CONFIGURATION);
				setState(7579);
				any_name();
				setState(7580);
				match(DROP);
				setState(7581);
				match(MAPPING);
				setState(7582);
				match(IF_P);
				setState(7583);
				match(EXISTS);
				setState(7584);
				match(FOR);
				setState(7585);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_with; }
	}

	public final Any_withContext any_with() throws RecognitionException {
		Any_withContext _localctx = new Any_withContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_any_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7589);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateconversionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Default_Context default_() {
			return getRuleContext(Default_Context.class,0);
		}
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createconversionstmt; }
	}

	public final CreateconversionstmtContext createconversionstmt() throws RecognitionException {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_createconversionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7591);
			match(CREATE);
			setState(7593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(7592);
				default_();
				}
			}

			setState(7595);
			match(CONVERSION_P);
			setState(7596);
			any_name();
			setState(7597);
			match(FOR);
			setState(7598);
			sconst();
			setState(7599);
			match(TO);
			setState(7600);
			sconst();
			setState(7601);
			match(FROM);
			setState(7602);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterstmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Verbose_Context verbose_() {
			return getRuleContext(Verbose_Context.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterstmt; }
	}

	public final ClusterstmtContext clusterstmt() throws RecognitionException {
		ClusterstmtContext _localctx = new ClusterstmtContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_clusterstmt);
		int _la;
		try {
			setState(7624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7604);
				match(CLUSTER);
				setState(7606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(7605);
					verbose_();
					}
				}

				setState(7608);
				qualified_name();
				setState(7610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7609);
					cluster_index_specification();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7612);
				match(CLUSTER);
				setState(7614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(7613);
					verbose_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7616);
				match(CLUSTER);
				setState(7618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(7617);
					verbose_();
					}
				}

				setState(7620);
				name();
				setState(7621);
				match(ON);
				setState(7622);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_cluster_index_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7626);
			match(USING);
			setState(7627);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VacuumstmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public Full_Context full_() {
			return getRuleContext(Full_Context.class,0);
		}
		public Freeze_Context freeze_() {
			return getRuleContext(Freeze_Context.class,0);
		}
		public Verbose_Context verbose_() {
			return getRuleContext(Verbose_Context.class,0);
		}
		public Analyze_Context analyze_() {
			return getRuleContext(Analyze_Context.class,0);
		}
		public Vacuum_relation_list_Context vacuum_relation_list_() {
			return getRuleContext(Vacuum_relation_list_Context.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumstmt; }
	}

	public final VacuumstmtContext vacuumstmt() throws RecognitionException {
		VacuumstmtContext _localctx = new VacuumstmtContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_vacuumstmt);
		int _la;
		try {
			setState(7652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7629);
				match(VACUUM);
				setState(7631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(7630);
					full_();
					}
				}

				setState(7634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(7633);
					freeze_();
					}
				}

				setState(7637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(7636);
					verbose_();
					}
				}

				setState(7640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYSE || _la==ANALYZE) {
					{
					setState(7639);
					analyze_();
					}
				}

				setState(7643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(7642);
					vacuum_relation_list_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7645);
				match(VACUUM);
				setState(7646);
				match(OPEN_PAREN);
				setState(7647);
				vac_analyze_option_list();
				setState(7648);
				match(CLOSE_PAREN);
				setState(7650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(7649);
					vacuum_relation_list_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzestmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Verbose_Context verbose_() {
			return getRuleContext(Verbose_Context.class,0);
		}
		public Vacuum_relation_list_Context vacuum_relation_list_() {
			return getRuleContext(Vacuum_relation_list_Context.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzestmt; }
	}

	public final AnalyzestmtContext analyzestmt() throws RecognitionException {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_analyzestmt);
		int _la;
		try {
			setState(7668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7654);
				analyze_keyword();
				setState(7656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(7655);
					verbose_();
					}
				}

				setState(7659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(7658);
					vacuum_relation_list_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7661);
				analyze_keyword();
				setState(7662);
				match(OPEN_PAREN);
				setState(7663);
				vac_analyze_option_list();
				setState(7664);
				match(CLOSE_PAREN);
				setState(7666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(7665);
					vacuum_relation_list_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Utility_option_listContext extends ParserRuleContext {
		public List<Utility_option_elemContext> utility_option_elem() {
			return getRuleContexts(Utility_option_elemContext.class);
		}
		public Utility_option_elemContext utility_option_elem(int i) {
			return getRuleContext(Utility_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Utility_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utility_option_list; }
	}

	public final Utility_option_listContext utility_option_list() throws RecognitionException {
		Utility_option_listContext _localctx = new Utility_option_listContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_utility_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7670);
			utility_option_elem();
			setState(7675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7671);
				match(COMMA);
				setState(7672);
				utility_option_elem();
				}
				}
				setState(7677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_listContext extends ParserRuleContext {
		public List<Vac_analyze_option_elemContext> vac_analyze_option_elem() {
			return getRuleContexts(Vac_analyze_option_elemContext.class);
		}
		public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return getRuleContext(Vac_analyze_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_list; }
	}

	public final Vac_analyze_option_listContext vac_analyze_option_list() throws RecognitionException {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_vac_analyze_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7678);
			vac_analyze_option_elem();
			setState(7683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7679);
				match(COMMA);
				setState(7680);
				vac_analyze_option_elem();
				}
				}
				setState(7685);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7686);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Utility_option_elemContext extends ParserRuleContext {
		public Utility_option_nameContext utility_option_name() {
			return getRuleContext(Utility_option_nameContext.class,0);
		}
		public Utility_option_argContext utility_option_arg() {
			return getRuleContext(Utility_option_argContext.class,0);
		}
		public Utility_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utility_option_elem; }
	}

	public final Utility_option_elemContext utility_option_elem() throws RecognitionException {
		Utility_option_elemContext _localctx = new Utility_option_elemContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_utility_option_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7688);
			utility_option_name();
			setState(7690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36028795944960003L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -70300023652351L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -1L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132602249444351L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 2213921768519L) != 0)) {
				{
				setState(7689);
				utility_option_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Utility_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public TerminalNode FORMAT_LA() { return getToken(PostgreSQLParser.FORMAT_LA, 0); }
		public Utility_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utility_option_name; }
	}

	public final Utility_option_nameContext utility_option_name() throws RecognitionException {
		Utility_option_nameContext _localctx = new Utility_option_nameContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_utility_option_name);
		try {
			setState(7695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7692);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7693);
				analyze_keyword();
				}
				break;
			case FORMAT_LA:
				enterOuterAlt(_localctx, 3);
				{
				setState(7694);
				match(FORMAT_LA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Utility_option_argContext extends ParserRuleContext {
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Utility_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utility_option_arg; }
	}

	public final Utility_option_argContext utility_option_arg() throws RecognitionException {
		Utility_option_argContext _localctx = new Utility_option_argContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_utility_option_arg);
		try {
			setState(7699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7697);
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7698);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_elemContext extends ParserRuleContext {
		public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return getRuleContext(Vac_analyze_option_nameContext.class,0);
		}
		public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return getRuleContext(Vac_analyze_option_argContext.class,0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_elem; }
	}

	public final Vac_analyze_option_elemContext vac_analyze_option_elem() throws RecognitionException {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_vac_analyze_option_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7701);
			vac_analyze_option_name();
			setState(7703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36028795944960003L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -70300023652351L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -1L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132602249444351L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 2213921768519L) != 0)) {
				{
				setState(7702);
				vac_analyze_option_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_name; }
	}

	public final Vac_analyze_option_nameContext vac_analyze_option_name() throws RecognitionException {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_vac_analyze_option_name);
		try {
			setState(7707);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7705);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7706);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vac_analyze_option_argContext extends ParserRuleContext {
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_arg; }
	}

	public final Vac_analyze_option_argContext vac_analyze_option_arg() throws RecognitionException {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_vac_analyze_option_arg);
		try {
			setState(7711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7709);
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7710);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Analyze_Context extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Analyze_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_; }
	}

	public final Analyze_Context analyze_() throws RecognitionException {
		Analyze_Context _localctx = new Analyze_Context(_ctx, getState());
		enterRule(_localctx, 866, RULE_analyze_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7713);
			analyze_keyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Verbose_Context extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Verbose_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_verbose_; }
	}

	public final Verbose_Context verbose_() throws RecognitionException {
		Verbose_Context _localctx = new Verbose_Context(_ctx, getState());
		enterRule(_localctx, 868, RULE_verbose_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7715);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_Context extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public Full_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_; }
	}

	public final Full_Context full_() throws RecognitionException {
		Full_Context _localctx = new Full_Context(_ctx, getState());
		enterRule(_localctx, 870, RULE_full_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7717);
			match(FULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Freeze_Context extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public Freeze_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeze_; }
	}

	public final Freeze_Context freeze_() throws RecognitionException {
		Freeze_Context _localctx = new Freeze_Context(_ctx, getState());
		enterRule(_localctx, 872, RULE_freeze_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7719);
			match(FREEZE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_list_Context extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Name_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list_; }
	}

	public final Name_list_Context name_list_() throws RecognitionException {
		Name_list_Context _localctx = new Name_list_Context(_ctx, getState());
		enterRule(_localctx, 874, RULE_name_list_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7721);
			match(OPEN_PAREN);
			setState(7722);
			name_list();
			setState(7723);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_relationContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Name_list_Context name_list_() {
			return getRuleContext(Name_list_Context.class,0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation; }
	}

	public final Vacuum_relationContext vacuum_relation() throws RecognitionException {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_vacuum_relation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7725);
			qualified_name();
			setState(7727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(7726);
				name_list_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_relation_listContext extends ParserRuleContext {
		public List<Vacuum_relationContext> vacuum_relation() {
			return getRuleContexts(Vacuum_relationContext.class);
		}
		public Vacuum_relationContext vacuum_relation(int i) {
			return getRuleContext(Vacuum_relationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation_list; }
	}

	public final Vacuum_relation_listContext vacuum_relation_list() throws RecognitionException {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_vacuum_relation_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7729);
			vacuum_relation();
			setState(7734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7730);
				match(COMMA);
				setState(7731);
				vacuum_relation();
				}
				}
				setState(7736);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_relation_list_Context extends ParserRuleContext {
		public Vacuum_relation_listContext vacuum_relation_list() {
			return getRuleContext(Vacuum_relation_listContext.class,0);
		}
		public Vacuum_relation_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation_list_; }
	}

	public final Vacuum_relation_list_Context vacuum_relation_list_() throws RecognitionException {
		Vacuum_relation_list_Context _localctx = new Vacuum_relation_list_Context(_ctx, getState());
		enterRule(_localctx, 880, RULE_vacuum_relation_list_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7737);
			vacuum_relation_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainstmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public ExplainablestmtContext explainablestmt() {
			return getRuleContext(ExplainablestmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Verbose_Context verbose_() {
			return getRuleContext(Verbose_Context.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainstmt; }
	}

	public final ExplainstmtContext explainstmt() throws RecognitionException {
		ExplainstmtContext _localctx = new ExplainstmtContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_explainstmt);
		int _la;
		try {
			setState(7757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7739);
				match(EXPLAIN);
				setState(7740);
				explainablestmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7741);
				match(EXPLAIN);
				setState(7742);
				analyze_keyword();
				setState(7744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(7743);
					verbose_();
					}
				}

				setState(7746);
				explainablestmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7748);
				match(EXPLAIN);
				setState(7749);
				match(VERBOSE);
				setState(7750);
				explainablestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7751);
				match(EXPLAIN);
				setState(7752);
				match(OPEN_PAREN);
				setState(7753);
				explain_option_list();
				setState(7754);
				match(CLOSE_PAREN);
				setState(7755);
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainablestmt; }
	}

	public final ExplainablestmtContext explainablestmt() throws RecognitionException {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_explainablestmt);
		try {
			setState(7768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7759);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7760);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7761);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7762);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7763);
				declarecursorstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7764);
				createasstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7765);
				creatematviewstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7766);
				refreshmatviewstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7767);
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_listContext extends ParserRuleContext {
		public List<Explain_option_elemContext> explain_option_elem() {
			return getRuleContexts(Explain_option_elemContext.class);
		}
		public Explain_option_elemContext explain_option_elem(int i) {
			return getRuleContext(Explain_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_explain_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7770);
			explain_option_elem();
			setState(7775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7771);
				match(COMMA);
				setState(7772);
				explain_option_elem();
				}
				}
				setState(7777);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_explain_option_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7778);
			explain_option_name();
			setState(7780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36028795944960003L) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & -70300023652351L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -1L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132602249444351L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 2213921768519L) != 0)) {
				{
				setState(7779);
				explain_option_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_explain_option_name);
		try {
			setState(7784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(7782);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7783);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_option_argContext extends ParserRuleContext {
		public Boolean_or_string_Context boolean_or_string_() {
			return getRuleContext(Boolean_or_string_Context.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_explain_option_arg);
		try {
			setState(7788);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case FALSE_P:
			case ON:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7786);
				boolean_or_string_();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7787);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparestmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparestmt; }
	}

	public final PreparestmtContext preparestmt() throws RecognitionException {
		PreparestmtContext _localctx = new PreparestmtContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_preparestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7790);
			match(PREPARE);
			setState(7791);
			name();
			setState(7793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(7792);
				prep_type_clause();
				}
			}

			setState(7795);
			match(AS);
			setState(7796);
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prep_type_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_prep_type_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7798);
			match(OPEN_PAREN);
			setState(7799);
			type_list();
			setState(7800);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparablestmt; }
	}

	public final PreparablestmtContext preparablestmt() throws RecognitionException {
		PreparablestmtContext _localctx = new PreparablestmtContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_preparablestmt);
		try {
			setState(7806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7802);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7803);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7804);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7805);
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecutestmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public With_data_Context with_data_() {
			return getRuleContext(With_data_Context.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executestmt; }
	}

	public final ExecutestmtContext executestmt() throws RecognitionException {
		ExecutestmtContext _localctx = new ExecutestmtContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_executestmt);
		int _la;
		try {
			setState(7846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7808);
				match(EXECUTE);
				setState(7809);
				name();
				setState(7811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(7810);
					execute_param_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7813);
				match(CREATE);
				setState(7815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
					{
					setState(7814);
					opttemp();
					}
				}

				setState(7817);
				match(TABLE);
				setState(7818);
				create_as_target();
				setState(7819);
				match(AS);
				setState(7820);
				match(EXECUTE);
				setState(7821);
				name();
				setState(7823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(7822);
					execute_param_clause();
					}
				}

				setState(7826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7825);
					with_data_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7828);
				match(CREATE);
				setState(7830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & 32773L) != 0)) {
					{
					setState(7829);
					opttemp();
					}
				}

				setState(7832);
				match(TABLE);
				setState(7833);
				match(IF_P);
				setState(7834);
				match(NOT);
				setState(7835);
				match(EXISTS);
				setState(7836);
				create_as_target();
				setState(7837);
				match(AS);
				setState(7838);
				match(EXECUTE);
				setState(7839);
				name();
				setState(7841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(7840);
					execute_param_clause();
					}
				}

				setState(7844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7843);
					with_data_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_param_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_execute_param_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7848);
			match(OPEN_PAREN);
			setState(7849);
			expr_list();
			setState(7850);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeallocatestmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatestmt; }
	}

	public final DeallocatestmtContext deallocatestmt() throws RecognitionException {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_deallocatestmt);
		try {
			setState(7862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7852);
				match(DEALLOCATE);
				setState(7853);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7854);
				match(DEALLOCATE);
				setState(7855);
				match(PREPARE);
				setState(7856);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7857);
				match(DEALLOCATE);
				setState(7858);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7859);
				match(DEALLOCATE);
				setState(7860);
				match(PREPARE);
				setState(7861);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertstmtContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Insert_targetContext insert_target() {
			return getRuleContext(Insert_targetContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public With_clause_Context with_clause_() {
			return getRuleContext(With_clause_Context.class,0);
		}
		public On_conflict_Context on_conflict_() {
			return getRuleContext(On_conflict_Context.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertstmt; }
	}

	public final InsertstmtContext insertstmt() throws RecognitionException {
		InsertstmtContext _localctx = new InsertstmtContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_insertstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7864);
				with_clause_();
				}
			}

			setState(7867);
			match(INSERT);
			setState(7868);
			match(INTO);
			setState(7869);
			insert_target();
			setState(7870);
			insert_rest();
			setState(7872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(7871);
				on_conflict_();
				}
			}

			setState(7875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(7874);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_target; }
	}

	public final Insert_targetContext insert_target() throws RecognitionException {
		Insert_targetContext _localctx = new Insert_targetContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_insert_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7877);
			qualified_name();
			setState(7880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7878);
				match(AS);
				setState(7879);
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_restContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public Override_kindContext override_kind() {
			return getRuleContext(Override_kindContext.class,0);
		}
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_insert_rest);
		int _la;
		try {
			setState(7901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7882);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7883);
				match(OVERRIDING);
				setState(7884);
				override_kind();
				setState(7885);
				match(VALUE_P);
				setState(7886);
				selectstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7888);
				match(OPEN_PAREN);
				setState(7889);
				insert_column_list();
				setState(7890);
				match(CLOSE_PAREN);
				setState(7895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERRIDING) {
					{
					setState(7891);
					match(OVERRIDING);
					setState(7892);
					override_kind();
					setState(7893);
					match(VALUE_P);
					}
				}

				setState(7897);
				selectstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7899);
				match(DEFAULT);
				setState(7900);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Override_kindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_override_kind; }
	}

	public final Override_kindContext override_kind() throws RecognitionException {
		Override_kindContext _localctx = new Override_kindContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_override_kind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7903);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_column_listContext extends ParserRuleContext {
		public List<Insert_column_itemContext> insert_column_item() {
			return getRuleContexts(Insert_column_itemContext.class);
		}
		public Insert_column_itemContext insert_column_item(int i) {
			return getRuleContext(Insert_column_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_insert_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7905);
			insert_column_item();
			setState(7910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7906);
				match(COMMA);
				setState(7907);
				insert_column_item();
				}
				}
				setState(7912);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7913);
			colid();
			setState(7914);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_conflict_Context extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public Conf_expr_Context conf_expr_() {
			return getRuleContext(Conf_expr_Context.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public On_conflict_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_conflict_; }
	}

	public final On_conflict_Context on_conflict_() throws RecognitionException {
		On_conflict_Context _localctx = new On_conflict_Context(_ctx, getState());
		enterRule(_localctx, 918, RULE_on_conflict_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7916);
			match(ON);
			setState(7917);
			match(CONFLICT);
			setState(7919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN || _la==ON) {
				{
				setState(7918);
				conf_expr_();
				}
			}

			setState(7921);
			match(DO);
			setState(7929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(7922);
				match(UPDATE);
				setState(7923);
				match(SET);
				setState(7924);
				set_clause_list();
				setState(7926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(7925);
					where_clause();
					}
				}

				}
				break;
			case NOTHING:
				{
				setState(7928);
				match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conf_expr_Context extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Conf_expr_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conf_expr_; }
	}

	public final Conf_expr_Context conf_expr_() throws RecognitionException {
		Conf_expr_Context _localctx = new Conf_expr_Context(_ctx, getState());
		enterRule(_localctx, 920, RULE_conf_expr_);
		int _la;
		try {
			setState(7940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7931);
				match(OPEN_PAREN);
				setState(7932);
				index_params();
				setState(7933);
				match(CLOSE_PAREN);
				setState(7935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(7934);
					where_clause();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7937);
				match(ON);
				setState(7938);
				match(CONSTRAINT);
				setState(7939);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_returning_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7942);
			match(RETURNING);
			setState(7943);
			target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MergestmtContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public List<Alias_clauseContext> alias_clause() {
			return getRuleContexts(Alias_clauseContext.class);
		}
		public Alias_clauseContext alias_clause(int i) {
			return getRuleContext(Alias_clauseContext.class,i);
		}
		public Merge_delete_clauseContext merge_delete_clause() {
			return getRuleContext(Merge_delete_clauseContext.class,0);
		}
		public MergestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergestmt; }
	}

	public final MergestmtContext mergestmt() throws RecognitionException {
		MergestmtContext _localctx = new MergestmtContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_mergestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7945);
			match(MERGE);
			setState(7947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(7946);
				match(INTO);
				}
			}

			setState(7949);
			qualified_name();
			setState(7951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
				{
				setState(7950);
				alias_clause();
				}
			}

			setState(7953);
			match(USING);
			setState(7956);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(7954);
				select_with_parens();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				{
				setState(7955);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
				{
				setState(7958);
				alias_clause();
				}
			}

			setState(7961);
			match(ON);
			setState(7962);
			a_expr();
			setState(7971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(7963);
				merge_insert_clause();
				setState(7965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(7964);
					merge_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7967);
				merge_update_clause();
				setState(7969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
				case 1:
					{
					setState(7968);
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			}
			setState(7974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(7973);
				merge_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7976);
			match(WHEN);
			setState(7977);
			match(NOT);
			setState(7978);
			match(MATCHED);
			setState(7981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(7979);
				match(AND);
				setState(7980);
				a_expr();
				}
			}

			setState(7984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7983);
				match(THEN);
				}
			}

			setState(7986);
			match(INSERT);
			setState(7991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(7987);
				match(OPEN_PAREN);
				setState(7988);
				insert_column_list();
				setState(7989);
				match(CLOSE_PAREN);
				}
			}

			setState(7993);
			values_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7995);
			match(WHEN);
			setState(7996);
			match(MATCHED);
			setState(7999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(7997);
				match(AND);
				setState(7998);
				a_expr();
				}
			}

			setState(8002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(8001);
				match(THEN);
				}
			}

			setState(8004);
			match(UPDATE);
			setState(8005);
			match(SET);
			setState(8006);
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_delete_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Merge_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_delete_clause; }
	}

	public final Merge_delete_clauseContext merge_delete_clause() throws RecognitionException {
		Merge_delete_clauseContext _localctx = new Merge_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_merge_delete_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8008);
			match(WHEN);
			setState(8009);
			match(MATCHED);
			setState(8011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(8010);
				match(THEN);
				}
			}

			setState(8013);
			match(DELETE_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeletestmtContext extends ParserRuleContext {
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public With_clause_Context with_clause_() {
			return getRuleContext(With_clause_Context.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deletestmt; }
	}

	public final DeletestmtContext deletestmt() throws RecognitionException {
		DeletestmtContext _localctx = new DeletestmtContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_deletestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8015);
				with_clause_();
				}
			}

			setState(8018);
			match(DELETE_P);
			setState(8019);
			match(FROM);
			setState(8020);
			relation_expr_opt_alias();
			setState(8022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(8021);
				using_clause();
				}
			}

			setState(8025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8024);
				where_or_current_clause();
				}
			}

			setState(8028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8027);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_using_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8030);
			match(USING);
			setState(8031);
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockstmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Table_Context table_() {
			return getRuleContext(Table_Context.class,0);
		}
		public Lock_Context lock_() {
			return getRuleContext(Lock_Context.class,0);
		}
		public Nowait_Context nowait_() {
			return getRuleContext(Nowait_Context.class,0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockstmt; }
	}

	public final LockstmtContext lockstmt() throws RecognitionException {
		LockstmtContext _localctx = new LockstmtContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_lockstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8033);
			match(LOCK_P);
			setState(8035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(8034);
				table_();
				}
			}

			setState(8037);
			relation_expr_list();
			setState(8039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN_P) {
				{
				setState(8038);
				lock_();
				}
			}

			setState(8042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(8041);
				nowait_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_Context extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public Lock_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_; }
	}

	public final Lock_Context lock_() throws RecognitionException {
		Lock_Context _localctx = new Lock_Context(_ctx, getState());
		enterRule(_localctx, 938, RULE_lock_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8044);
			match(IN_P);
			setState(8045);
			lock_type();
			setState(8046);
			match(MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_lock_type);
		int _la;
		try {
			setState(8060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8048);
				match(ACCESS);
				setState(8049);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(8050);
				match(ROW);
				setState(8051);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8052);
				match(SHARE);
				setState(8057);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(8053);
					match(UPDATE);
					setState(8054);
					match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					setState(8055);
					match(ROW);
					setState(8056);
					match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8059);
				match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nowait_Context extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public Nowait_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowait_; }
	}

	public final Nowait_Context nowait_() throws RecognitionException {
		Nowait_Context _localctx = new Nowait_Context(_ctx, getState());
		enterRule(_localctx, 942, RULE_nowait_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8062);
			match(NOWAIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nowait_or_skip_Context extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public Nowait_or_skip_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowait_or_skip_; }
	}

	public final Nowait_or_skip_Context nowait_or_skip_() throws RecognitionException {
		Nowait_or_skip_Context _localctx = new Nowait_or_skip_Context(_ctx, getState());
		enterRule(_localctx, 944, RULE_nowait_or_skip_);
		try {
			setState(8067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8064);
				match(NOWAIT);
				}
				break;
			case SKIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(8065);
				match(SKIP_P);
				setState(8066);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdatestmtContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public With_clause_Context with_clause_() {
			return getRuleContext(With_clause_Context.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatestmt; }
	}

	public final UpdatestmtContext updatestmt() throws RecognitionException {
		UpdatestmtContext _localctx = new UpdatestmtContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_updatestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8069);
				with_clause_();
				}
			}

			setState(8072);
			match(UPDATE);
			setState(8073);
			relation_expr_opt_alias();
			setState(8074);
			match(SET);
			setState(8075);
			set_clause_list();
			setState(8077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(8076);
				from_clause();
				}
			}

			setState(8080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8079);
				where_or_current_clause();
				}
			}

			setState(8083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8082);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8085);
			set_clause();
			setState(8090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8086);
				match(COMMA);
				setState(8087);
				set_clause();
				}
				}
				setState(8092);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_set_clause);
		try {
			setState(8103);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(8093);
				set_target();
				setState(8094);
				match(EQUAL);
				setState(8095);
				a_expr();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(8097);
				match(OPEN_PAREN);
				setState(8098);
				set_target_list();
				setState(8099);
				match(CLOSE_PAREN);
				setState(8100);
				match(EQUAL);
				setState(8101);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_targetContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8105);
			colid();
			setState(8106);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_target_listContext extends ParserRuleContext {
		public List<Set_targetContext> set_target() {
			return getRuleContexts(Set_targetContext.class);
		}
		public Set_targetContext set_target(int i) {
			return getRuleContext(Set_targetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_set_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8108);
			set_target();
			setState(8113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8109);
				match(COMMA);
				setState(8110);
				set_target();
				}
				}
				setState(8115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclarecursorstmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Hold_Context hold_() {
			return getRuleContext(Hold_Context.class,0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarecursorstmt; }
	}

	public final DeclarecursorstmtContext declarecursorstmt() throws RecognitionException {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_declarecursorstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8116);
			match(DECLARE);
			setState(8117);
			cursor_name();
			setState(8118);
			cursor_options();
			setState(8119);
			match(CURSOR);
			setState(8121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(8120);
				hold_();
				}
			}

			setState(8123);
			match(FOR);
			setState(8124);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8126);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_optionsContext extends ParserRuleContext {
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public List<TerminalNode> SCROLL() { return getTokens(PostgreSQLParser.SCROLL); }
		public TerminalNode SCROLL(int i) {
			return getToken(PostgreSQLParser.SCROLL, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(PostgreSQLParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(PostgreSQLParser.BINARY, i);
		}
		public List<TerminalNode> INSENSITIVE() { return getTokens(PostgreSQLParser.INSENSITIVE); }
		public TerminalNode INSENSITIVE(int i) {
			return getToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_cursor_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				setState(8133);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(8128);
					match(NO);
					setState(8129);
					match(SCROLL);
					}
					break;
				case SCROLL:
					{
					setState(8130);
					match(SCROLL);
					}
					break;
				case BINARY:
					{
					setState(8131);
					match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					setState(8132);
					match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(8137);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hold_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Hold_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hold_; }
	}

	public final Hold_Context hold_() throws RecognitionException {
		Hold_Context _localctx = new Hold_Context(_ctx, getState());
		enterRule(_localctx, 962, RULE_hold_);
		try {
			setState(8142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(8138);
				match(WITH);
				setState(8139);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8140);
				match(WITHOUT);
				setState(8141);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectstmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectstmt; }
	}

	public final SelectstmtContext selectstmt() throws RecognitionException {
		SelectstmtContext _localctx = new SelectstmtContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_selectstmt);
		try {
			setState(8146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8144);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8145);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_select_with_parens);
		try {
			setState(8156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8148);
				match(OPEN_PAREN);
				setState(8149);
				select_no_parens();
				setState(8150);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8152);
				match(OPEN_PAREN);
				setState(8153);
				select_with_parens();
				setState(8154);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_no_parensContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Sort_clause_Context sort_clause_() {
			return getRuleContext(Sort_clause_Context.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Select_limit_Context select_limit_() {
			return getRuleContext(Select_limit_Context.class,0);
		}
		public For_locking_clause_Context for_locking_clause_() {
			return getRuleContext(For_locking_clause_Context.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_select_no_parens);
		int _la;
		try {
			setState(8187);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(8158);
				select_clause();
				setState(8160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8159);
					sort_clause_();
					}
				}

				setState(8170);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(8162);
					for_locking_clause();
					setState(8164);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 270337L) != 0)) {
						{
						setState(8163);
						select_limit_();
						}
					}

					}
					break;
				case FETCH:
				case LIMIT:
				case OFFSET:
					{
					setState(8166);
					select_limit();
					setState(8168);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(8167);
						for_locking_clause_();
						}
					}

					}
					break;
				case EOF:
				case CLOSE_PAREN:
				case SEMI:
				case FORMAT_LA:
				case CREATE:
				case GRANT:
				case ON:
				case RETURNING:
				case WITH:
					break;
				default:
					break;
				}
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8172);
				with_clause();
				setState(8173);
				select_clause();
				setState(8175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8174);
					sort_clause_();
					}
				}

				setState(8185);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(8177);
					for_locking_clause();
					setState(8179);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 270337L) != 0)) {
						{
						setState(8178);
						select_limit_();
						}
					}

					}
					break;
				case FETCH:
				case LIMIT:
				case OFFSET:
					{
					setState(8181);
					select_limit();
					setState(8183);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(8182);
						for_locking_clause_();
						}
					}

					}
					break;
				case EOF:
				case CLOSE_PAREN:
				case SEMI:
				case FORMAT_LA:
				case CREATE:
				case GRANT:
				case ON:
				case RETURNING:
				case WITH:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_clauseContext extends ParserRuleContext {
		public List<Simple_select_intersectContext> simple_select_intersect() {
			return getRuleContexts(Simple_select_intersectContext.class);
		}
		public Simple_select_intersectContext simple_select_intersect(int i) {
			return getRuleContext(Simple_select_intersectContext.class,i);
		}
		public List<TerminalNode> UNION() { return getTokens(PostgreSQLParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(PostgreSQLParser.UNION, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(PostgreSQLParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(PostgreSQLParser.EXCEPT, i);
		}
		public List<All_or_distinctContext> all_or_distinct() {
			return getRuleContexts(All_or_distinctContext.class);
		}
		public All_or_distinctContext all_or_distinct(int i) {
			return getRuleContext(All_or_distinctContext.class,i);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_select_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8189);
			simple_select_intersect();
			setState(8197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				setState(8190);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(8191);
					all_or_distinct();
					}
				}

				setState(8194);
				simple_select_intersect();
				}
				}
				setState(8199);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_select_intersectContext extends ParserRuleContext {
		public List<Simple_select_pramaryContext> simple_select_pramary() {
			return getRuleContexts(Simple_select_pramaryContext.class);
		}
		public Simple_select_pramaryContext simple_select_pramary(int i) {
			return getRuleContext(Simple_select_pramaryContext.class,i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(PostgreSQLParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(PostgreSQLParser.INTERSECT, i);
		}
		public List<All_or_distinctContext> all_or_distinct() {
			return getRuleContexts(All_or_distinctContext.class);
		}
		public All_or_distinctContext all_or_distinct(int i) {
			return getRuleContext(All_or_distinctContext.class,i);
		}
		public Simple_select_intersectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select_intersect; }
	}

	public final Simple_select_intersectContext simple_select_intersect() throws RecognitionException {
		Simple_select_intersectContext _localctx = new Simple_select_intersectContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_simple_select_intersect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8200);
			simple_select_pramary();
			setState(8208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT) {
				{
				{
				setState(8201);
				match(INTERSECT);
				setState(8203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(8202);
					all_or_distinct();
					}
				}

				setState(8205);
				simple_select_pramary();
				}
				}
				setState(8210);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_select_pramaryContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Distinct_clauseContext distinct_clause() {
			return getRuleContext(Distinct_clauseContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public All_clause_Context all_clause_() {
			return getRuleContext(All_clause_Context.class,0);
		}
		public Target_list_Context target_list_() {
			return getRuleContext(Target_list_Context.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Simple_select_pramaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select_pramary; }
	}

	public final Simple_select_pramaryContext simple_select_pramary() throws RecognitionException {
		Simple_select_pramaryContext _localctx = new Simple_select_pramaryContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_simple_select_pramary);
		int _la;
		try {
			setState(8262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(8211);
				match(SELECT);
				setState(8256);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case Operator:
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case SYSTEM_USER:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case FORMAT_LA:
				case ALL:
				case ARRAY:
				case CASE:
				case CAST:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SESSION_USER:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case TickedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case BinaryIntegral:
				case OctalIntegral:
				case HexadecimalIntegral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case EscapeStringConstant:
					{
					setState(8213);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(8212);
						all_clause_();
						}
					}

					setState(8216);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268422652L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
						{
						setState(8215);
						target_list_();
						}
					}

					setState(8219);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INTO) {
						{
						setState(8218);
						into_clause();
						}
					}

					setState(8222);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FROM) {
						{
						setState(8221);
						from_clause();
						}
					}

					setState(8225);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE) {
						{
						setState(8224);
						where_clause();
						}
					}

					setState(8228);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GROUP_P) {
						{
						setState(8227);
						group_clause();
						}
					}

					setState(8231);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==HAVING) {
						{
						setState(8230);
						having_clause();
						}
					}

					setState(8234);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOW) {
						{
						setState(8233);
						window_clause();
						}
					}

					}
					break;
				case DISTINCT:
					{
					setState(8236);
					distinct_clause();
					setState(8237);
					target_list();
					setState(8239);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INTO) {
						{
						setState(8238);
						into_clause();
						}
					}

					setState(8242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FROM) {
						{
						setState(8241);
						from_clause();
						}
					}

					setState(8245);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE) {
						{
						setState(8244);
						where_clause();
						}
					}

					setState(8248);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GROUP_P) {
						{
						setState(8247);
						group_clause();
						}
					}

					setState(8251);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==HAVING) {
						{
						setState(8250);
						having_clause();
						}
					}

					setState(8254);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOW) {
						{
						setState(8253);
						window_clause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case VALUES:
				enterOuterAlt(_localctx, 2);
				{
				setState(8258);
				values_clause();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8259);
				match(TABLE);
				setState(8260);
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				setState(8261);
				select_with_parens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8264);
			match(WITH);
			setState(8266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(8265);
				match(RECURSIVE);
				}
				break;
			}
			setState(8268);
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cte_listContext extends ParserRuleContext {
		public List<Common_table_exprContext> common_table_expr() {
			return getRuleContexts(Common_table_exprContext.class);
		}
		public Common_table_exprContext common_table_expr(int i) {
			return getRuleContext(Common_table_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		Cte_listContext _localctx = new Cte_listContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_cte_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8270);
			common_table_expr();
			setState(8275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8271);
				match(COMMA);
				setState(8272);
				common_table_expr();
				}
				}
				setState(8277);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Name_list_Context name_list_() {
			return getRuleContext(Name_list_Context.class,0);
		}
		public Materialized_Context materialized_() {
			return getRuleContext(Materialized_Context.class,0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_common_table_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8278);
			name();
			setState(8280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(8279);
				name_list_();
				}
			}

			setState(8282);
			match(AS);
			setState(8284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==MATERIALIZED) {
				{
				setState(8283);
				materialized_();
				}
			}

			setState(8286);
			match(OPEN_PAREN);
			setState(8287);
			preparablestmt();
			setState(8288);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Materialized_Context extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Materialized_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_; }
	}

	public final Materialized_Context materialized_() throws RecognitionException {
		Materialized_Context _localctx = new Materialized_Context(_ctx, getState());
		enterRule(_localctx, 982, RULE_materialized_);
		try {
			setState(8293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8290);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8291);
				match(NOT);
				setState(8292);
				match(MATERIALIZED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_clause_Context extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public With_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause_; }
	}

	public final With_clause_Context with_clause_() throws RecognitionException {
		With_clause_Context _localctx = new With_clause_Context(_ctx, getState());
		enterRule(_localctx, 984, RULE_with_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8295);
			with_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public OpttempTableNameContext opttempTableName() {
			return getRuleContext(OpttempTableNameContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8297);
			match(INTO);
			setState(8298);
			opttempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Strict_Context extends ParserRuleContext {
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Strict_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strict_; }
	}

	public final Strict_Context strict_() throws RecognitionException {
		Strict_Context _localctx = new Strict_Context(_ctx, getState());
		enterRule(_localctx, 988, RULE_strict_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8300);
			match(STRICT_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttempTableNameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public Table_Context table_() {
			return getRuleContext(Table_Context.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttempTableName; }
	}

	public final OpttempTableNameContext opttempTableName() throws RecognitionException {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_opttempTableName);
		int _la;
		try {
			setState(8318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(8302);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8305);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8306);
					table_();
					}
				}

				setState(8309);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8310);
				match(UNLOGGED);
				setState(8312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8311);
					table_();
					}
				}

				setState(8314);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8315);
				match(TABLE);
				setState(8316);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8317);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_Context extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Table_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_; }
	}

	public final Table_Context table_() throws RecognitionException {
		Table_Context _localctx = new Table_Context(_ctx, getState());
		enterRule(_localctx, 992, RULE_table_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8320);
			match(TABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_or_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_or_distinct; }
	}

	public final All_or_distinctContext all_or_distinct() throws RecognitionException {
		All_or_distinctContext _localctx = new All_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_all_or_distinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8322);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Distinct_clauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_clause; }
	}

	public final Distinct_clauseContext distinct_clause() throws RecognitionException {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_distinct_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8324);
			match(DISTINCT);
			setState(8330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(8325);
				match(ON);
				setState(8326);
				match(OPEN_PAREN);
				setState(8327);
				expr_list();
				setState(8328);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_clause_Context extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public All_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_clause_; }
	}

	public final All_clause_Context all_clause_() throws RecognitionException {
		All_clause_Context _localctx = new All_clause_Context(_ctx, getState());
		enterRule(_localctx, 998, RULE_all_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8332);
			match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sort_clause_Context extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Sort_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause_; }
	}

	public final Sort_clause_Context sort_clause_() throws RecognitionException {
		Sort_clause_Context _localctx = new Sort_clause_Context(_ctx, getState());
		enterRule(_localctx, 1000, RULE_sort_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8334);
			sort_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8336);
			match(ORDER);
			setState(8337);
			match(BY);
			setState(8338);
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sortby_listContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_sortby_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8340);
			sortby();
			setState(8345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8341);
				match(COMMA);
				setState(8342);
				sortby();
				}
				}
				setState(8347);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public Nulls_order_Context nulls_order_() {
			return getRuleContext(Nulls_order_Context.class,0);
		}
		public Asc_desc_Context asc_desc_() {
			return getRuleContext(Asc_desc_Context.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_sortby);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8348);
			a_expr();
			setState(8354);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				setState(8349);
				match(USING);
				setState(8350);
				qual_all_op();
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case CLOSE_BRACKET:
			case COMMA:
			case SEMI:
			case ABSENT:
			case FORMAT_LA:
			case ASC:
			case CREATE:
			case DESC:
			case FETCH:
			case FOR:
			case GRANT:
			case LIMIT:
			case NULL_P:
			case OFFSET:
			case ON:
			case RETURNING:
			case WITH:
			case NULLS_P:
			case RANGE:
			case ROWS:
			case GROUPS:
				{
				setState(8352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(8351);
					asc_desc_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS_P) {
				{
				setState(8356);
				nulls_order_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_select_limit);
		int _la;
		try {
			setState(8367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8359);
				limit_clause();
				setState(8361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(8360);
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8363);
				offset_clause();
				setState(8365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FETCH || _la==LIMIT) {
					{
					setState(8364);
					limit_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_limit_Context extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Select_limit_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_; }
	}

	public final Select_limit_Context select_limit_() throws RecognitionException {
		Select_limit_Context _localctx = new Select_limit_Context(_ctx, getState());
		enterRule(_localctx, 1010, RULE_select_limit_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8369);
			select_limit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_limit_clause);
		int _la;
		try {
			setState(8394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8371);
				match(LIMIT);
				setState(8372);
				select_limit_value();
				setState(8375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8373);
					match(COMMA);
					setState(8374);
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8377);
				match(FETCH);
				setState(8378);
				first_or_next();
				setState(8392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(8379);
					select_fetch_first_value();
					setState(8380);
					row_or_rows();
					setState(8384);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8381);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8382);
						match(WITH);
						setState(8383);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					setState(8386);
					row_or_rows();
					setState(8390);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8387);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8388);
						match(WITH);
						setState(8389);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8396);
			match(OFFSET);
			setState(8401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
			case 1:
				{
				setState(8397);
				select_offset_value();
				}
				break;
			case 2:
				{
				setState(8398);
				select_fetch_first_value();
				setState(8399);
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_select_limit_value);
		try {
			setState(8405);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8403);
				a_expr();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8404);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8407);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_fetch_first_valueContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public I_or_f_constContext i_or_f_const() {
			return getRuleContext(I_or_f_constContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_fetch_first_value; }
	}

	public final Select_fetch_first_valueContext select_fetch_first_value() throws RecognitionException {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_select_fetch_first_value);
		try {
			setState(8414);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8409);
				c_expr();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8410);
				match(PLUS);
				setState(8411);
				i_or_f_const();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(8412);
				match(MINUS);
				setState(8413);
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class I_or_f_constContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_or_f_const; }
	}

	public final I_or_f_constContext i_or_f_const() throws RecognitionException {
		I_or_f_constContext _localctx = new I_or_f_constContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_i_or_f_const);
		try {
			setState(8418);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				enterOuterAlt(_localctx, 1);
				{
				setState(8416);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(8417);
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8420);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8422);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_group_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8424);
			match(GROUP_P);
			setState(8425);
			match(BY);
			setState(8426);
			group_by_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_listContext extends ParserRuleContext {
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_list; }
	}

	public final Group_by_listContext group_by_list() throws RecognitionException {
		Group_by_listContext _localctx = new Group_by_listContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_group_by_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8428);
			group_by_item();
			setState(8433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8429);
				match(COMMA);
				setState(8430);
				group_by_item();
				}
				}
				setState(8435);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_itemContext extends ParserRuleContext {
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Cube_clauseContext cube_clause() {
			return getRuleContext(Cube_clauseContext.class,0);
		}
		public Rollup_clauseContext rollup_clause() {
			return getRuleContext(Rollup_clauseContext.class,0);
		}
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_group_by_item);
		try {
			setState(8441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8436);
				empty_grouping_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8437);
				cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8438);
				rollup_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8439);
				grouping_sets_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8440);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8443);
			match(OPEN_PAREN);
			setState(8444);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollup_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_clause; }
	}

	public final Rollup_clauseContext rollup_clause() throws RecognitionException {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_rollup_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8446);
			match(ROLLUP);
			setState(8447);
			match(OPEN_PAREN);
			setState(8448);
			expr_list();
			setState(8449);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cube_clauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_clause; }
	}

	public final Cube_clauseContext cube_clause() throws RecognitionException {
		Cube_clauseContext _localctx = new Cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_cube_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8451);
			match(CUBE);
			setState(8452);
			match(OPEN_PAREN);
			setState(8453);
			expr_list();
			setState(8454);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_grouping_sets_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8456);
			match(GROUPING);
			setState(8457);
			match(SETS);
			setState(8458);
			match(OPEN_PAREN);
			setState(8459);
			group_by_list();
			setState(8460);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8462);
			match(HAVING);
			setState(8463);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_for_locking_clause);
		try {
			setState(8469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8465);
				for_locking_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8466);
				match(FOR);
				setState(8467);
				match(READ);
				setState(8468);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_clause_Context extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public For_locking_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause_; }
	}

	public final For_locking_clause_Context for_locking_clause_() throws RecognitionException {
		For_locking_clause_Context _localctx = new For_locking_clause_Context(_ctx, getState());
		enterRule(_localctx, 1046, RULE_for_locking_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8471);
			for_locking_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_itemsContext extends ParserRuleContext {
		public List<For_locking_itemContext> for_locking_item() {
			return getRuleContexts(For_locking_itemContext.class);
		}
		public For_locking_itemContext for_locking_item(int i) {
			return getRuleContext(For_locking_itemContext.class,i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_for_locking_items);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8474); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8473);
				for_locking_item();
				}
				}
				setState(8476); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_itemContext extends ParserRuleContext {
		public For_locking_strengthContext for_locking_strength() {
			return getRuleContext(For_locking_strengthContext.class,0);
		}
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Nowait_or_skip_Context nowait_or_skip_() {
			return getRuleContext(Nowait_or_skip_Context.class,0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_for_locking_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8478);
			for_locking_strength();
			setState(8480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(8479);
				locked_rels_list();
				}
			}

			setState(8483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_P) {
				{
				setState(8482);
				nowait_or_skip_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_locking_strengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_strength; }
	}

	public final For_locking_strengthContext for_locking_strength() throws RecognitionException {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_for_locking_strength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8485);
			match(FOR);
			setState(8495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case UPDATE:
				{
				setState(8488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(8486);
					match(NO);
					setState(8487);
					match(KEY);
					}
				}

				setState(8490);
				match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				setState(8492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(8491);
					match(KEY);
					}
				}

				setState(8494);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_locked_rels_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8497);
			match(OF);
			setState(8498);
			qualified_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8500);
			match(VALUES);
			setState(8501);
			match(OPEN_PAREN);
			setState(8502);
			expr_list();
			setState(8503);
			match(CLOSE_PAREN);
			setState(8511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8504);
				match(COMMA);
				setState(8505);
				match(OPEN_PAREN);
				setState(8506);
				expr_list();
				setState(8507);
				match(CLOSE_PAREN);
				}
				}
				setState(8513);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8514);
			match(FROM);
			setState(8515);
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
	}

	public final From_listContext from_list() throws RecognitionException {
		From_listContext _localctx = new From_listContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_from_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8517);
			table_ref();
			setState(8522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8518);
				match(COMMA);
				setState(8519);
				table_ref();
				}
				}
				setState(8524);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_refContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public XmltableContext xmltable() {
			return getRuleContext(XmltableContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> CROSS() { return getTokens(PostgreSQLParser.CROSS); }
		public TerminalNode CROSS(int i) {
			return getToken(PostgreSQLParser.CROSS, i);
		}
		public List<TerminalNode> JOIN() { return getTokens(PostgreSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(PostgreSQLParser.JOIN, i);
		}
		public List<TerminalNode> NATURAL() { return getTokens(PostgreSQLParser.NATURAL); }
		public TerminalNode NATURAL(int i) {
			return getToken(PostgreSQLParser.NATURAL, i);
		}
		public List<Join_qualContext> join_qual() {
			return getRuleContexts(Join_qualContext.class);
		}
		public Join_qualContext join_qual(int i) {
			return getRuleContext(Join_qualContext.class,i);
		}
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Tablesample_clauseContext tablesample_clause() {
			return getRuleContext(Tablesample_clauseContext.class,0);
		}
		public Func_alias_clauseContext func_alias_clause() {
			return getRuleContext(Func_alias_clauseContext.class,0);
		}
		public List<Join_typeContext> join_type() {
			return getRuleContexts(Join_typeContext.class);
		}
		public Join_typeContext join_type(int i) {
			return getRuleContext(Join_typeContext.class,i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_table_ref);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				{
				setState(8525);
				relation_expr();
				setState(8527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(8526);
					alias_clause();
					}
				}

				setState(8530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESAMPLE) {
					{
					setState(8529);
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(8532);
				func_table();
				setState(8534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(8533);
					func_alias_clause();
					}
				}

				}
				break;
			case 3:
				{
				setState(8536);
				xmltable();
				setState(8538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(8537);
					alias_clause();
					}
				}

				}
				break;
			case 4:
				{
				setState(8540);
				select_with_parens();
				setState(8542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(8541);
					alias_clause();
					}
				}

				}
				break;
			case 5:
				{
				setState(8544);
				match(LATERAL_P);
				setState(8557);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(8545);
					xmltable();
					setState(8547);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
						{
						setState(8546);
						alias_clause();
						}
					}

					}
					break;
				case 2:
					{
					setState(8549);
					func_table();
					setState(8551);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
						{
						setState(8550);
						func_alias_clause();
						}
					}

					}
					break;
				case 3:
					{
					setState(8553);
					select_with_parens();
					setState(8555);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
						{
						setState(8554);
						alias_clause();
						}
					}

					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8559);
				match(OPEN_PAREN);
				setState(8560);
				table_ref();
				setState(8577);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CROSS:
					{
					setState(8561);
					match(CROSS);
					setState(8562);
					match(JOIN);
					setState(8563);
					table_ref();
					}
					break;
				case NATURAL:
					{
					setState(8564);
					match(NATURAL);
					setState(8566);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
						{
						setState(8565);
						join_type();
						}
					}

					setState(8568);
					match(JOIN);
					setState(8569);
					table_ref();
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					setState(8571);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
						{
						setState(8570);
						join_type();
						}
					}

					setState(8573);
					match(JOIN);
					setState(8574);
					table_ref();
					setState(8575);
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				setState(8579);
				match(CLOSE_PAREN);
				setState(8581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 17729624993791L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
					{
					setState(8580);
					alias_clause();
					}
				}

				}
				break;
			}
			setState(8603);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,800,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(8601);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CROSS:
						{
						setState(8585);
						match(CROSS);
						setState(8586);
						match(JOIN);
						setState(8587);
						table_ref();
						}
						break;
					case NATURAL:
						{
						setState(8588);
						match(NATURAL);
						setState(8590);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
							{
							setState(8589);
							join_type();
							}
						}

						setState(8592);
						match(JOIN);
						setState(8593);
						table_ref();
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						setState(8595);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) {
							{
							setState(8594);
							join_type();
							}
						}

						setState(8597);
						match(JOIN);
						setState(8598);
						table_ref();
						setState(8599);
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(8605);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,800,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alias_clauseContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_alias_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8606);
				match(AS);
				}
			}

			setState(8609);
			colid();
			setState(8614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(8610);
				match(OPEN_PAREN);
				setState(8611);
				name_list();
				setState(8612);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_alias_clause; }
	}

	public final Func_alias_clauseContext func_alias_clause() throws RecognitionException {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_func_alias_clause);
		int _la;
		try {
			setState(8628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8616);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8622);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(8617);
					match(AS);
					setState(8619);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 137438949375L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & -34909494181889L) != 0) || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & 1153132601981008895L) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & 8589935687L) != 0)) {
						{
						setState(8618);
						colid();
						}
					}

					}
					break;
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case TickedIdentifier:
				case PLSQLVARIABLENAME:
					{
					setState(8621);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8624);
				match(OPEN_PAREN);
				setState(8625);
				tablefuncelementlist();
				setState(8626);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8630);
			_la = _input.LA(1);
			if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 8261L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_P) {
				{
				setState(8631);
				match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_join_qual);
		try {
			setState(8641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8634);
				match(USING);
				setState(8635);
				match(OPEN_PAREN);
				setState(8636);
				name_list();
				setState(8637);
				match(CLOSE_PAREN);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8639);
				match(ON);
				setState(8640);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_relation_expr);
		int _la;
		try {
			setState(8655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(8643);
				qualified_name();
				setState(8645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(8644);
					match(STAR);
					}
				}

				}
				break;
			case ONLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(8647);
				match(ONLY);
				setState(8653);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case OVER:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case TickedIdentifier:
				case PLSQLVARIABLENAME:
					{
					setState(8648);
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					setState(8649);
					match(OPEN_PAREN);
					setState(8650);
					qualified_name();
					setState(8651);
					match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relation_expr_listContext extends ParserRuleContext {
		public List<Relation_exprContext> relation_expr() {
			return getRuleContexts(Relation_exprContext.class);
		}
		public Relation_exprContext relation_expr(int i) {
			return getRuleContext(Relation_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_relation_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8657);
			relation_expr();
			setState(8662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8658);
				match(COMMA);
				setState(8659);
				relation_expr();
				}
				}
				setState(8664);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_relation_expr_opt_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8665);
			relation_expr();
			setState(8670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				setState(8667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8666);
					match(AS);
					}
				}

				setState(8669);
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tablesample_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Repeatable_clause_Context repeatable_clause_() {
			return getRuleContext(Repeatable_clause_Context.class,0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesample_clause; }
	}

	public final Tablesample_clauseContext tablesample_clause() throws RecognitionException {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_tablesample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8672);
			match(TABLESAMPLE);
			setState(8673);
			func_name();
			setState(8674);
			match(OPEN_PAREN);
			setState(8675);
			expr_list();
			setState(8676);
			match(CLOSE_PAREN);
			setState(8678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPEATABLE) {
				{
				setState(8677);
				repeatable_clause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Repeatable_clause_Context extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Repeatable_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatable_clause_; }
	}

	public final Repeatable_clause_Context repeatable_clause_() throws RecognitionException {
		Repeatable_clause_Context _localctx = new Repeatable_clause_Context(_ctx, getState());
		enterRule(_localctx, 1080, RULE_repeatable_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8680);
			match(REPEATABLE);
			setState(8681);
			match(OPEN_PAREN);
			setState(8682);
			a_expr();
			setState(8683);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_tableContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Ordinality_Context ordinality_() {
			return getRuleContext(Ordinality_Context.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Rowsfrom_listContext rowsfrom_list() {
			return getRuleContext(Rowsfrom_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_func_table);
		try {
			setState(8697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8685);
				func_expr_windowless();
				setState(8687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(8686);
					ordinality_();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8689);
				match(ROWS);
				setState(8690);
				match(FROM);
				setState(8691);
				match(OPEN_PAREN);
				setState(8692);
				rowsfrom_list();
				setState(8693);
				match(CLOSE_PAREN);
				setState(8695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(8694);
					ordinality_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rowsfrom_itemContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Col_def_list_Context col_def_list_() {
			return getRuleContext(Col_def_list_Context.class,0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_item; }
	}

	public final Rowsfrom_itemContext rowsfrom_item() throws RecognitionException {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_rowsfrom_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8699);
			func_expr_windowless();
			setState(8701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8700);
				col_def_list_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rowsfrom_listContext extends ParserRuleContext {
		public List<Rowsfrom_itemContext> rowsfrom_item() {
			return getRuleContexts(Rowsfrom_itemContext.class);
		}
		public Rowsfrom_itemContext rowsfrom_item(int i) {
			return getRuleContext(Rowsfrom_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_list; }
	}

	public final Rowsfrom_listContext rowsfrom_list() throws RecognitionException {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_rowsfrom_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8703);
			rowsfrom_item();
			setState(8708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8704);
				match(COMMA);
				setState(8705);
				rowsfrom_item();
				}
				}
				setState(8710);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Col_def_list_Context extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Col_def_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_def_list_; }
	}

	public final Col_def_list_Context col_def_list_() throws RecognitionException {
		Col_def_list_Context _localctx = new Col_def_list_Context(_ctx, getState());
		enterRule(_localctx, 1088, RULE_col_def_list_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8711);
			match(AS);
			setState(8712);
			match(OPEN_PAREN);
			setState(8713);
			tablefuncelementlist();
			setState(8714);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ordinality_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Ordinality_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinality_; }
	}

	public final Ordinality_Context ordinality_() throws RecognitionException {
		Ordinality_Context _localctx = new Ordinality_Context(_ctx, getState());
		enterRule(_localctx, 1090, RULE_ordinality_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8716);
			match(WITH);
			setState(8717);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8719);
			match(WHERE);
			setState(8720);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_where_or_current_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8722);
			match(WHERE);
			setState(8727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				setState(8723);
				match(CURRENT_P);
				setState(8724);
				match(OF);
				setState(8725);
				cursor_name();
				}
				break;
			case 2:
				{
				setState(8726);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpttablefuncelementlistContext extends ParserRuleContext {
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablefuncelementlist; }
	}

	public final OpttablefuncelementlistContext opttablefuncelementlist() throws RecognitionException {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_opttablefuncelementlist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8729);
			tablefuncelementlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablefuncelementlistContext extends ParserRuleContext {
		public List<TablefuncelementContext> tablefuncelement() {
			return getRuleContexts(TablefuncelementContext.class);
		}
		public TablefuncelementContext tablefuncelement(int i) {
			return getRuleContext(TablefuncelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelementlist; }
	}

	public final TablefuncelementlistContext tablefuncelementlist() throws RecognitionException {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_tablefuncelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8731);
			tablefuncelement();
			setState(8736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8732);
				match(COMMA);
				setState(8733);
				tablefuncelement();
				}
				}
				setState(8738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablefuncelementContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Collate_clause_Context collate_clause_() {
			return getRuleContext(Collate_clause_Context.class,0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelement; }
	}

	public final TablefuncelementContext tablefuncelement() throws RecognitionException {
		TablefuncelementContext _localctx = new TablefuncelementContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_tablefuncelement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8739);
			colid();
			setState(8740);
			typename();
			setState(8742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(8741);
				collate_clause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XmltableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public Xmltable_column_listContext xmltable_column_list() {
			return getRuleContext(Xmltable_column_listContext.class,0);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public Xml_namespace_listContext xml_namespace_list() {
			return getRuleContext(Xml_namespace_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable; }
	}

	public final XmltableContext xmltable() throws RecognitionException {
		XmltableContext _localctx = new XmltableContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_xmltable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8744);
			match(XMLTABLE);
			setState(8745);
			match(OPEN_PAREN);
			setState(8761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				{
				setState(8746);
				c_expr();
				setState(8747);
				xmlexists_argument();
				setState(8748);
				match(COLUMNS);
				setState(8749);
				xmltable_column_list();
				}
				break;
			case 2:
				{
				setState(8751);
				match(XMLNAMESPACES);
				setState(8752);
				match(OPEN_PAREN);
				setState(8753);
				xml_namespace_list();
				setState(8754);
				match(CLOSE_PAREN);
				setState(8755);
				match(COMMA);
				setState(8756);
				c_expr();
				setState(8757);
				xmlexists_argument();
				setState(8758);
				match(COLUMNS);
				setState(8759);
				xmltable_column_list();
				}
				break;
			}
			setState(8763);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_listContext extends ParserRuleContext {
		public List<Xmltable_column_elContext> xmltable_column_el() {
			return getRuleContexts(Xmltable_column_elContext.class);
		}
		public Xmltable_column_elContext xmltable_column_el(int i) {
			return getRuleContext(Xmltable_column_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_list; }
	}

	public final Xmltable_column_listContext xmltable_column_list() throws RecognitionException {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_xmltable_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8765);
			xmltable_column_el();
			setState(8770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8766);
				match(COMMA);
				setState(8767);
				xmltable_column_el();
				}
				}
				setState(8772);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_elContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Xmltable_column_option_listContext xmltable_column_option_list() {
			return getRuleContext(Xmltable_column_option_listContext.class,0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_el; }
	}

	public final Xmltable_column_elContext xmltable_column_el() throws RecognitionException {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_xmltable_column_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8773);
			colid();
			setState(8780);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case NATIONAL:
			case NCHAR:
			case NUMERIC:
			case REAL:
			case SETOF:
			case SMALLINT:
			case TIME:
			case TIMESTAMP:
			case VARCHAR:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				{
				setState(8774);
				typename();
				setState(8776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 50331649L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0)) {
					{
					setState(8775);
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				setState(8778);
				match(FOR);
				setState(8779);
				match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_option_listContext extends ParserRuleContext {
		public List<Xmltable_column_option_elContext> xmltable_column_option_el() {
			return getRuleContexts(Xmltable_column_option_elContext.class);
		}
		public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return getRuleContext(Xmltable_column_option_elContext.class,i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_list; }
	}

	public final Xmltable_column_option_listContext xmltable_column_option_list() throws RecognitionException {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_xmltable_column_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8783); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8782);
				xmltable_column_option_el();
				}
				}
				setState(8785); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 50331649L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 4294967843L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltable_column_option_elContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_el; }
	}

	public final Xmltable_column_option_elContext xmltable_column_option_el() throws RecognitionException {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_xmltable_column_option_el);
		try {
			setState(8795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8787);
				match(DEFAULT);
				setState(8788);
				a_expr();
				}
				break;
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(8789);
				identifier();
				setState(8790);
				a_expr();
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8792);
				match(NOT);
				setState(8793);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(8794);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_namespace_listContext extends ParserRuleContext {
		public List<Xml_namespace_elContext> xml_namespace_el() {
			return getRuleContexts(Xml_namespace_elContext.class);
		}
		public Xml_namespace_elContext xml_namespace_el(int i) {
			return getRuleContext(Xml_namespace_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_list; }
	}

	public final Xml_namespace_listContext xml_namespace_list() throws RecognitionException {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_xml_namespace_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8797);
			xml_namespace_el();
			setState(8802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8798);
				match(COMMA);
				setState(8799);
				xml_namespace_el();
				}
				}
				setState(8804);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_namespace_elContext extends ParserRuleContext {
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_el; }
	}

	public final Xml_namespace_elContext xml_namespace_el() throws RecognitionException {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_xml_namespace_el);
		try {
			setState(8811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8805);
				b_expr(0);
				setState(8806);
				match(AS);
				setState(8807);
				colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8809);
				match(DEFAULT);
				setState(8810);
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypenameContext extends ParserRuleContext {
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_typename);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SETOF) {
				{
				setState(8813);
				match(SETOF);
				}
			}

			setState(8816);
			simpletypename();
			setState(8825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				setState(8817);
				opt_array_bounds();
				}
				break;
			case 2:
				{
				setState(8818);
				match(ARRAY);
				setState(8823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					setState(8819);
					match(OPEN_BRACKET);
					setState(8820);
					iconst();
					setState(8821);
					match(CLOSE_BRACKET);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_array_boundsContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public List<IconstContext> iconst() {
			return getRuleContexts(IconstContext.class);
		}
		public IconstContext iconst(int i) {
			return getRuleContext(IconstContext.class,i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8834);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,835,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8827);
					match(OPEN_BRACKET);
					setState(8829);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & 15L) != 0)) {
						{
						setState(8828);
						iconst();
						}
					}

					setState(8831);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(8836);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,835,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpletypenameContext extends ParserRuleContext {
		public GenerictypeContext generictype() {
			return getRuleContext(GenerictypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_Context interval_() {
			return getRuleContext(Interval_Context.class,0);
		}
		public JsonTypeContext jsonType() {
			return getRuleContext(JsonTypeContext.class,0);
		}
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_simpletypename);
		try {
			setState(8853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8837);
				generictype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8838);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8839);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8840);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8841);
				constdatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8842);
				constinterval();
				setState(8850);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
				case 1:
					{
					setState(8844);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
					case 1:
						{
						setState(8843);
						interval_();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(8846);
					match(OPEN_PAREN);
					setState(8847);
					iconst();
					setState(8848);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8852);
				jsonType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConsttypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public JsonTypeContext jsonType() {
			return getRuleContext(JsonTypeContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_consttypename);
		try {
			setState(8860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8855);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8856);
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(8857);
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(8858);
				constdatetime();
				}
				break;
			case JSON:
				enterOuterAlt(_localctx, 5);
				{
				setState(8859);
				jsonType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenerictypeContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Type_modifiers_Context type_modifiers_() {
			return getRuleContext(Type_modifiers_Context.class,0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generictype; }
	}

	public final GenerictypeContext generictype() throws RecognitionException {
		GenerictypeContext _localctx = new GenerictypeContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_generictype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8862);
			type_function_name();
			setState(8864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				{
				setState(8863);
				attrs();
				}
				break;
			}
			setState(8867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				{
				setState(8866);
				type_modifiers_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_modifiers_Context extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Type_modifiers_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_modifiers_; }
	}

	public final Type_modifiers_Context type_modifiers_() throws RecognitionException {
		Type_modifiers_Context _localctx = new Type_modifiers_Context(_ctx, getState());
		enterRule(_localctx, 1126, RULE_type_modifiers_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8869);
			match(OPEN_PAREN);
			setState(8870);
			expr_list();
			setState(8871);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public Float_Context float_() {
			return getRuleContext(Float_Context.class,0);
		}
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public Type_modifiers_Context type_modifiers_() {
			return getRuleContext(Type_modifiers_Context.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_numeric);
		try {
			setState(8897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8873);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8874);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8875);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8876);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8877);
				match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8878);
				match(FLOAT_P);
				setState(8880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
				case 1:
					{
					setState(8879);
					float_();
					}
					break;
				}
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8882);
				match(DOUBLE_P);
				setState(8883);
				match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(8884);
				match(DECIMAL_P);
				setState(8886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
				case 1:
					{
					setState(8885);
					type_modifiers_();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(8888);
				match(DEC);
				setState(8890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
				case 1:
					{
					setState(8889);
					type_modifiers_();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(8892);
				match(NUMERIC);
				setState(8894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
				case 1:
					{
					setState(8893);
					type_modifiers_();
					}
					break;
				}
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(8896);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Float_Context extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Float_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_float_; }
	}

	public final Float_Context float_() throws RecognitionException {
		Float_Context _localctx = new Float_Context(_ctx, getState());
		enterRule(_localctx, 1130, RULE_float_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8899);
			match(OPEN_PAREN);
			setState(8900);
			iconst();
			setState(8901);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_bit);
		try {
			setState(8905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8903);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8904);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstbitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_constbit);
		try {
			setState(8909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8907);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8908);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitwithlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Varying_Context varying_() {
			return getRuleContext(Varying_Context.class,0);
		}
		public BitwithlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithlength; }
	}

	public final BitwithlengthContext bitwithlength() throws RecognitionException {
		BitwithlengthContext _localctx = new BitwithlengthContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_bitwithlength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8911);
			match(BIT);
			setState(8913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(8912);
				varying_();
				}
			}

			setState(8915);
			match(OPEN_PAREN);
			setState(8916);
			expr_list();
			setState(8917);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitwithoutlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Varying_Context varying_() {
			return getRuleContext(Varying_Context.class,0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithoutlength; }
	}

	public final BitwithoutlengthContext bitwithoutlength() throws RecognitionException {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_bitwithoutlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8919);
			match(BIT);
			setState(8921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(8920);
				varying_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8923);
			character_c();
			setState(8928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(8924);
				match(OPEN_PAREN);
				setState(8925);
				iconst();
				setState(8926);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstcharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_constcharacter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8930);
			character_c();
			setState(8935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(8931);
				match(OPEN_PAREN);
				setState(8932);
				iconst();
				setState(8933);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Character_cContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public Varying_Context varying_() {
			return getRuleContext(Varying_Context.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_c; }
	}

	public final Character_cContext character_c() throws RecognitionException {
		Character_cContext _localctx = new Character_cContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_character_c);
		int _la;
		try {
			setState(8947);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8937);
				_la = _input.LA(1);
				if ( !(((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & 32771L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(8938);
					varying_();
					}
					break;
				}
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8941);
				match(VARCHAR);
				}
				break;
			case NATIONAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8942);
				match(NATIONAL);
				setState(8943);
				_la = _input.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(8944);
					varying_();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Varying_Context extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public Varying_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varying_; }
	}

	public final Varying_Context varying_() throws RecognitionException {
		Varying_Context _localctx = new Varying_Context(_ctx, getState());
		enterRule(_localctx, 1146, RULE_varying_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8949);
			match(VARYING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstdatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Timezone_Context timezone_() {
			return getRuleContext(Timezone_Context.class,0);
		}
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constdatetime; }
	}

	public final ConstdatetimeContext constdatetime() throws RecognitionException {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_constdatetime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8951);
			_la = _input.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(8952);
				match(OPEN_PAREN);
				setState(8953);
				iconst();
				setState(8954);
				match(CLOSE_PAREN);
				}
				break;
			}
			setState(8959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
			case 1:
				{
				setState(8958);
				timezone_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstintervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constinterval; }
	}

	public final ConstintervalContext constinterval() throws RecognitionException {
		ConstintervalContext _localctx = new ConstintervalContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_constinterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8961);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Timezone_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Timezone_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone_; }
	}

	public final Timezone_Context timezone_() throws RecognitionException {
		Timezone_Context _localctx = new Timezone_Context(_ctx, getState());
		enterRule(_localctx, 1152, RULE_timezone_);
		try {
			setState(8969);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(8963);
				match(WITH);
				setState(8964);
				match(TIME);
				setState(8965);
				match(ZONE);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8966);
				match(WITHOUT);
				setState(8967);
				match(TIME);
				setState(8968);
				match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Interval_Context extends ParserRuleContext {
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Interval_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_; }
	}

	public final Interval_Context interval_() throws RecognitionException {
		Interval_Context _localctx = new Interval_Context(_ctx, getState());
		enterRule(_localctx, 1154, RULE_interval_);
		try {
			setState(8996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8971);
				match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8972);
				match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8973);
				match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8974);
				match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8975);
				match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8976);
				interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8977);
				match(YEAR_P);
				setState(8978);
				match(TO);
				setState(8979);
				match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8980);
				match(DAY_P);
				setState(8981);
				match(TO);
				setState(8985);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOUR_P:
					{
					setState(8982);
					match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					setState(8983);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8984);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8987);
				match(HOUR_P);
				setState(8988);
				match(TO);
				setState(8991);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINUTE_P:
					{
					setState(8989);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8990);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8993);
				match(MINUTE_P);
				setState(8994);
				match(TO);
				setState(8995);
				interval_second();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_interval_second);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8998);
			match(SECOND_P);
			setState(9003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				setState(8999);
				match(OPEN_PAREN);
				setState(9000);
				iconst();
				setState(9001);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonTypeContext extends ParserRuleContext {
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public JsonTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonType; }
	}

	public final JsonTypeContext jsonType() throws RecognitionException {
		JsonTypeContext _localctx = new JsonTypeContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_jsonType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9005);
			match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Escape_Context extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Escape_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape_; }
	}

	public final Escape_Context escape_() throws RecognitionException {
		Escape_Context _localctx = new Escape_Context(_ctx, getState());
		enterRule(_localctx, 1160, RULE_escape_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9007);
			match(ESCAPE);
			setState(9008);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_exprContext extends ParserRuleContext {
		public A_expr_qualContext a_expr_qual() {
			return getRuleContext(A_expr_qualContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
	}

	public final A_exprContext a_expr() throws RecognitionException {
		A_exprContext _localctx = new A_exprContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_a_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9010);
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_qualContext extends ParserRuleContext {
		public A_expr_lesslessContext a_expr_lessless() {
			return getRuleContext(A_expr_lesslessContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual; }
	}

	public final A_expr_qualContext a_expr_qual() throws RecognitionException {
		A_expr_qualContext _localctx = new A_expr_qualContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_a_expr_qual);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9012);
			a_expr_lessless();
			setState(9016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(9013);
				if (!(this.OnlyAcceptableOps())) throw new FailedPredicateException(this, "this.OnlyAcceptableOps()");
				setState(9014);
				qual_op();
				}
				break;
			case 2:
				{
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_lesslessContext extends ParserRuleContext {
		public List<A_expr_orContext> a_expr_or() {
			return getRuleContexts(A_expr_orContext.class);
		}
		public A_expr_orContext a_expr_or(int i) {
			return getRuleContext(A_expr_orContext.class,i);
		}
		public List<TerminalNode> LESS_LESS() { return getTokens(PostgreSQLParser.LESS_LESS); }
		public TerminalNode LESS_LESS(int i) {
			return getToken(PostgreSQLParser.LESS_LESS, i);
		}
		public List<TerminalNode> GREATER_GREATER() { return getTokens(PostgreSQLParser.GREATER_GREATER); }
		public TerminalNode GREATER_GREATER(int i) {
			return getToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_lessless; }
	}

	public final A_expr_lesslessContext a_expr_lessless() throws RecognitionException {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9018);
			a_expr_or();
			setState(9023);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,864,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9019);
					_la = _input.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9020);
					a_expr_or();
					}
					} 
				}
				setState(9025);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,864,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_orContext extends ParserRuleContext {
		public List<A_expr_andContext> a_expr_and() {
			return getRuleContexts(A_expr_andContext.class);
		}
		public A_expr_andContext a_expr_and(int i) {
			return getRuleContext(A_expr_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_or; }
	}

	public final A_expr_orContext a_expr_or() throws RecognitionException {
		A_expr_orContext _localctx = new A_expr_orContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_a_expr_or);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9026);
			a_expr_and();
			setState(9031);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9027);
					match(OR);
					setState(9028);
					a_expr_and();
					}
					} 
				}
				setState(9033);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_andContext extends ParserRuleContext {
		public List<A_expr_betweenContext> a_expr_between() {
			return getRuleContexts(A_expr_betweenContext.class);
		}
		public A_expr_betweenContext a_expr_between(int i) {
			return getRuleContext(A_expr_betweenContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_and; }
	}

	public final A_expr_andContext a_expr_and() throws RecognitionException {
		A_expr_andContext _localctx = new A_expr_andContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_a_expr_and);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9034);
			a_expr_between();
			setState(9039);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,866,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9035);
					match(AND);
					setState(9036);
					a_expr_between();
					}
					} 
				}
				setState(9041);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,866,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_betweenContext extends ParserRuleContext {
		public List<A_expr_inContext> a_expr_in() {
			return getRuleContexts(A_expr_inContext.class);
		}
		public A_expr_inContext a_expr_in(int i) {
			return getRuleContext(A_expr_inContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_betweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_between; }
	}

	public final A_expr_betweenContext a_expr_between() throws RecognitionException {
		A_expr_betweenContext _localctx = new A_expr_betweenContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_a_expr_between);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9042);
			a_expr_in();
			setState(9054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
			case 1:
				{
				setState(9044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9043);
					match(NOT);
					}
				}

				setState(9046);
				match(BETWEEN);
				setState(9048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYMMETRIC) {
					{
					setState(9047);
					match(SYMMETRIC);
					}
				}

				setState(9050);
				a_expr_in();
				setState(9051);
				match(AND);
				setState(9052);
				a_expr_in();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_inContext extends ParserRuleContext {
		public A_expr_unary_notContext a_expr_unary_not() {
			return getRuleContext(A_expr_unary_notContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_in; }
	}

	public final A_expr_inContext a_expr_in() throws RecognitionException {
		A_expr_inContext _localctx = new A_expr_inContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_a_expr_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9056);
			a_expr_unary_not();
			setState(9062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				setState(9058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9057);
					match(NOT);
					}
				}

				setState(9060);
				match(IN_P);
				setState(9061);
				in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_unary_notContext extends ParserRuleContext {
		public A_expr_isnullContext a_expr_isnull() {
			return getRuleContext(A_expr_isnullContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_not; }
	}

	public final A_expr_unary_notContext a_expr_unary_not() throws RecognitionException {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_a_expr_unary_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(9064);
				match(NOT);
				}
			}

			setState(9067);
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_isnullContext extends ParserRuleContext {
		public A_expr_is_notContext a_expr_is_not() {
			return getRuleContext(A_expr_is_notContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_isnull; }
	}

	public final A_expr_isnullContext a_expr_isnull() throws RecognitionException {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_a_expr_isnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9069);
			a_expr_is_not();
			setState(9071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				setState(9070);
				_la = _input.LA(1);
				if ( !(_la==ISNULL || _la==NOTNULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_is_notContext extends ParserRuleContext {
		public A_expr_compareContext a_expr_compare() {
			return getRuleContext(A_expr_compareContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_is_not; }
	}

	public final A_expr_is_notContext a_expr_is_not() throws RecognitionException {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_a_expr_is_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9073);
			a_expr_compare();
			setState(9097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
			case 1:
				{
				setState(9074);
				match(IS);
				setState(9076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9075);
					match(NOT);
					}
				}

				setState(9095);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL_P:
					{
					setState(9078);
					match(NULL_P);
					}
					break;
				case TRUE_P:
					{
					setState(9079);
					match(TRUE_P);
					}
					break;
				case FALSE_P:
					{
					setState(9080);
					match(FALSE_P);
					}
					break;
				case UNKNOWN:
					{
					setState(9081);
					match(UNKNOWN);
					}
					break;
				case DISTINCT:
					{
					setState(9082);
					match(DISTINCT);
					setState(9083);
					match(FROM);
					setState(9084);
					a_expr();
					}
					break;
				case OF:
					{
					setState(9085);
					match(OF);
					setState(9086);
					match(OPEN_PAREN);
					setState(9087);
					type_list();
					setState(9088);
					match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					setState(9090);
					match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					setState(9092);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & 15L) != 0)) {
						{
						setState(9091);
						unicode_normal_form();
						}
					}

					setState(9094);
					match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_compareContext extends ParserRuleContext {
		public List<A_expr_likeContext> a_expr_like() {
			return getRuleContexts(A_expr_likeContext.class);
		}
		public A_expr_likeContext a_expr_like(int i) {
			return getRuleContext(A_expr_likeContext.class,i);
		}
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_expr_compareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_compare; }
	}

	public final A_expr_compareContext a_expr_compare() throws RecognitionException {
		A_expr_compareContext _localctx = new A_expr_compareContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_a_expr_compare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9099);
			a_expr_like();
			setState(9111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				{
				setState(9100);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9101);
				a_expr_like();
				}
				break;
			case 2:
				{
				setState(9102);
				subquery_Op();
				setState(9103);
				sub_type();
				setState(9109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(9104);
					select_with_parens();
					}
					break;
				case 2:
					{
					setState(9105);
					match(OPEN_PAREN);
					setState(9106);
					a_expr();
					setState(9107);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_likeContext extends ParserRuleContext {
		public List<A_expr_qual_opContext> a_expr_qual_op() {
			return getRuleContexts(A_expr_qual_opContext.class);
		}
		public A_expr_qual_opContext a_expr_qual_op(int i) {
			return getRuleContext(A_expr_qual_opContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Escape_Context escape_() {
			return getRuleContext(Escape_Context.class,0);
		}
		public A_expr_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_like; }
	}

	public final A_expr_likeContext a_expr_like() throws RecognitionException {
		A_expr_likeContext _localctx = new A_expr_likeContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_a_expr_like);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9113);
			a_expr_qual_op();
			setState(9127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
			case 1:
				{
				setState(9115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9114);
					match(NOT);
					}
				}

				setState(9121);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(9117);
					match(LIKE);
					}
					break;
				case ILIKE:
					{
					setState(9118);
					match(ILIKE);
					}
					break;
				case SIMILAR:
					{
					setState(9119);
					match(SIMILAR);
					setState(9120);
					match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9123);
				a_expr_qual_op();
				setState(9125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
				case 1:
					{
					setState(9124);
					escape_();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_qual_opContext extends ParserRuleContext {
		public List<A_expr_unary_qualopContext> a_expr_unary_qualop() {
			return getRuleContexts(A_expr_unary_qualopContext.class);
		}
		public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return getRuleContext(A_expr_unary_qualopContext.class,i);
		}
		public List<Qual_opContext> qual_op() {
			return getRuleContexts(Qual_opContext.class);
		}
		public Qual_opContext qual_op(int i) {
			return getRuleContext(Qual_opContext.class,i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual_op; }
	}

	public final A_expr_qual_opContext a_expr_qual_op() throws RecognitionException {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_a_expr_qual_op);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9129);
			a_expr_unary_qualop();
			setState(9135);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9130);
					qual_op();
					setState(9131);
					a_expr_unary_qualop();
					}
					} 
				}
				setState(9137);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_unary_qualopContext extends ParserRuleContext {
		public A_expr_addContext a_expr_add() {
			return getRuleContext(A_expr_addContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_qualop; }
	}

	public final A_expr_unary_qualopContext a_expr_unary_qualop() throws RecognitionException {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_a_expr_unary_qualop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
			case 1:
				{
				setState(9138);
				qual_op();
				}
				break;
			}
			setState(9141);
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_addContext extends ParserRuleContext {
		public List<A_expr_mulContext> a_expr_mul() {
			return getRuleContexts(A_expr_mulContext.class);
		}
		public A_expr_mulContext a_expr_mul(int i) {
			return getRuleContext(A_expr_mulContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(PostgreSQLParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(PostgreSQLParser.MINUS, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(PostgreSQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_add; }
	}

	public final A_expr_addContext a_expr_add() throws RecognitionException {
		A_expr_addContext _localctx = new A_expr_addContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9143);
			a_expr_mul();
			setState(9148);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,886,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9144);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9145);
					a_expr_mul();
					}
					} 
				}
				setState(9150);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,886,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_mulContext extends ParserRuleContext {
		public List<A_expr_caretContext> a_expr_caret() {
			return getRuleContexts(A_expr_caretContext.class);
		}
		public A_expr_caretContext a_expr_caret(int i) {
			return getRuleContext(A_expr_caretContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(PostgreSQLParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSQLParser.STAR, i);
		}
		public List<TerminalNode> SLASH() { return getTokens(PostgreSQLParser.SLASH); }
		public TerminalNode SLASH(int i) {
			return getToken(PostgreSQLParser.SLASH, i);
		}
		public List<TerminalNode> PERCENT() { return getTokens(PostgreSQLParser.PERCENT); }
		public TerminalNode PERCENT(int i) {
			return getToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_mul; }
	}

	public final A_expr_mulContext a_expr_mul() throws RecognitionException {
		A_expr_mulContext _localctx = new A_expr_mulContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9151);
			a_expr_caret();
			setState(9156);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9152);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9153);
					a_expr_caret();
					}
					} 
				}
				setState(9158);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_caretContext extends ParserRuleContext {
		public List<A_expr_unary_signContext> a_expr_unary_sign() {
			return getRuleContexts(A_expr_unary_signContext.class);
		}
		public A_expr_unary_signContext a_expr_unary_sign(int i) {
			return getRuleContext(A_expr_unary_signContext.class,i);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public A_expr_caretContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_caret; }
	}

	public final A_expr_caretContext a_expr_caret() throws RecognitionException {
		A_expr_caretContext _localctx = new A_expr_caretContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_a_expr_caret);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9159);
			a_expr_unary_sign();
			setState(9162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
			case 1:
				{
				setState(9160);
				match(CARET);
				setState(9161);
				a_expr_unary_sign();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_unary_signContext extends ParserRuleContext {
		public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return getRuleContext(A_expr_at_time_zoneContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_sign; }
	}

	public final A_expr_unary_signContext a_expr_unary_sign() throws RecognitionException {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_a_expr_unary_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(9164);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9167);
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_at_time_zoneContext extends ParserRuleContext {
		public A_expr_collateContext a_expr_collate() {
			return getRuleContext(A_expr_collateContext.class,0);
		}
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_at_time_zone; }
	}

	public final A_expr_at_time_zoneContext a_expr_at_time_zone() throws RecognitionException {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_a_expr_at_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9169);
			a_expr_collate();
			setState(9174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
			case 1:
				{
				setState(9170);
				match(AT);
				setState(9171);
				match(TIME);
				setState(9172);
				match(ZONE);
				setState(9173);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_collateContext extends ParserRuleContext {
		public A_expr_typecastContext a_expr_typecast() {
			return getRuleContext(A_expr_typecastContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_collate; }
	}

	public final A_expr_collateContext a_expr_collate() throws RecognitionException {
		A_expr_collateContext _localctx = new A_expr_collateContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_a_expr_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9176);
			a_expr_typecast();
			setState(9179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
			case 1:
				{
				setState(9177);
				match(COLLATE);
				setState(9178);
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class A_expr_typecastContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> TYPECAST() { return getTokens(PostgreSQLParser.TYPECAST); }
		public TerminalNode TYPECAST(int i) {
			return getToken(PostgreSQLParser.TYPECAST, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_typecast; }
	}

	public final A_expr_typecastContext a_expr_typecast() throws RecognitionException {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_a_expr_typecast);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9181);
			c_expr();
			setState(9186);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,892,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9182);
					match(TYPECAST);
					setState(9183);
					typename();
					}
					} 
				}
				setState(9188);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,892,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class B_exprContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode TYPECAST() { return getToken(PostgreSQLParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1204;
		enterRecursionRule(_localctx, 1204, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				{
				setState(9190);
				c_expr();
				}
				break;
			case 2:
				{
				setState(9191);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9192);
				b_expr(9);
				}
				break;
			case 3:
				{
				setState(9193);
				qual_op();
				setState(9194);
				b_expr(3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9237);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,897,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9235);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9198);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(9199);
						match(CARET);
						setState(9200);
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9201);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(9202);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9203);
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9204);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(9205);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9206);
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9207);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(9208);
						qual_op();
						setState(9209);
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9211);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9212);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9213);
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9214);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9215);
						match(TYPECAST);
						setState(9216);
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9217);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9218);
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(9219);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(9220);
						match(IS);
						setState(9222);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(9221);
							match(NOT);
							}
						}

						setState(9233);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DISTINCT:
							{
							setState(9224);
							match(DISTINCT);
							setState(9225);
							match(FROM);
							setState(9226);
							b_expr(0);
							}
							break;
						case OF:
							{
							setState(9227);
							match(OF);
							setState(9228);
							match(OPEN_PAREN);
							setState(9229);
							type_list();
							setState(9230);
							match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							setState(9232);
							match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(9239);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,897,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_exprContext extends ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
	 
		public C_exprContext() { }
		public void copyFrom(C_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class C_expr_existsContext extends C_exprContext {
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public C_expr_existsContext(C_exprContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class C_expr_caseContext extends C_exprContext {
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public C_expr_caseContext(C_exprContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class C_expr_exprContext extends C_exprContext {
		public A_exprContext a_expr_in_parens;
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprconstContext aexprconst() {
			return getRuleContext(AexprconstContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Explicit_rowContext explicit_row() {
			return getRuleContext(Explicit_rowContext.class,0);
		}
		public Implicit_rowContext implicit_row() {
			return getRuleContext(Implicit_rowContext.class,0);
		}
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public C_expr_exprContext(C_exprContext ctx) { copyFrom(ctx); }
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_c_expr);
		try {
			setState(9276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9240);
				match(EXISTS);
				setState(9241);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9242);
				match(ARRAY);
				setState(9245);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9243);
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					setState(9244);
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9247);
				match(PARAM);
				setState(9248);
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9249);
				match(GROUPING);
				setState(9250);
				match(OPEN_PAREN);
				setState(9251);
				expr_list();
				setState(9252);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9254);
				match(UNIQUE);
				setState(9255);
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9256);
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9257);
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9258);
				match(OPEN_PAREN);
				setState(9259);
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				setState(9260);
				match(CLOSE_PAREN);
				setState(9261);
				opt_indirection();
				}
				break;
			case 9:
				_localctx = new C_expr_caseContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9263);
				case_expr();
				}
				break;
			case 10:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9264);
				func_expr();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9265);
				select_with_parens();
				setState(9267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(9266);
					indirection();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9269);
				explicit_row();
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9270);
				implicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9271);
				row();
				setState(9272);
				match(OVERLAPS);
				setState(9273);
				row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(9275);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PlsqlvariablenameContext extends ParserRuleContext {
		public TerminalNode PLSQLVARIABLENAME() { return getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlvariablename; }
	}

	public final PlsqlvariablenameContext plsqlvariablename() throws RecognitionException {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_plsqlvariablename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9278);
			match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_applicationContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public Enclosed_bracket_exprContext enclosed_bracket_expr() {
			return getRuleContext(Enclosed_bracket_exprContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Sort_clause_Context sort_clause_() {
			return getRuleContext(Sort_clause_Context.class,0);
		}
		public Func_applicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_application; }
	}

	public final Func_applicationContext func_application() throws RecognitionException {
		Func_applicationContext _localctx = new Func_applicationContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_func_application);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9280);
			func_name();
			setState(9281);
			match(OPEN_PAREN);
			setState(9303);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				setState(9282);
				func_arg_list();
				setState(9286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9283);
					match(COMMA);
					setState(9284);
					match(VARIADIC);
					setState(9285);
					func_arg_expr();
					}
				}

				setState(9289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9288);
					sort_clause_();
					}
				}

				}
				break;
			case VARIADIC:
				{
				setState(9291);
				match(VARIADIC);
				setState(9292);
				func_arg_expr();
				setState(9294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9293);
					sort_clause_();
					}
				}

				}
				break;
			case ALL:
			case DISTINCT:
				{
				setState(9296);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9297);
				func_arg_list();
				setState(9299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9298);
					sort_clause_();
					}
				}

				}
				break;
			case STAR:
				{
				setState(9301);
				match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9305);
			match(CLOSE_PAREN);
			setState(9307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				setState(9306);
				enclosed_bracket_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enclosed_bracket_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Sort_clause_Context sort_clause_() {
			return getRuleContext(Sort_clause_Context.class,0);
		}
		public Enclosed_bracket_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enclosed_bracket_expr; }
	}

	public final Enclosed_bracket_exprContext enclosed_bracket_expr() throws RecognitionException {
		Enclosed_bracket_exprContext _localctx = new Enclosed_bracket_exprContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_enclosed_bracket_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9309);
			match(OPEN_BRACKET);
			setState(9331);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				setState(9310);
				func_arg_list();
				setState(9314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9311);
					match(COMMA);
					setState(9312);
					match(VARIADIC);
					setState(9313);
					func_arg_expr();
					}
				}

				setState(9317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9316);
					sort_clause_();
					}
				}

				}
				break;
			case VARIADIC:
				{
				setState(9319);
				match(VARIADIC);
				setState(9320);
				func_arg_expr();
				setState(9322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9321);
					sort_clause_();
					}
				}

				}
				break;
			case ALL:
			case DISTINCT:
				{
				setState(9324);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9325);
				func_arg_list();
				setState(9327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9326);
					sort_clause_();
					}
				}

				}
				break;
			case STAR:
				{
				setState(9329);
				match(STAR);
				}
				break;
			case CLOSE_BRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9333);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_exprContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Within_group_clauseContext within_group_clause() {
			return getRuleContext(Within_group_clauseContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_func_expr);
		try {
			setState(9346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9335);
				func_application();
				setState(9337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
				case 1:
					{
					setState(9336);
					within_group_clause();
					}
					break;
				}
				setState(9340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
				case 1:
					{
					setState(9339);
					filter_clause();
					}
					break;
				}
				setState(9343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
				case 1:
					{
					setState(9342);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9345);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_expr_windowlessContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_windowless; }
	}

	public final Func_expr_windowlessContext func_expr_windowless() throws RecognitionException {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_func_expr_windowless);
		try {
			setState(9350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9348);
				func_application();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9349);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_expr_common_subexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(PostgreSQLParser.SYSTEM_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Xml_root_standalone_Context xml_root_standalone_() {
			return getRuleContext(Xml_root_standalone_Context.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode JSON_OBJECT() { return getToken(PostgreSQLParser.JSON_OBJECT, 0); }
		public Json_name_and_value_listContext json_name_and_value_list() {
			return getRuleContext(Json_name_and_value_listContext.class,0);
		}
		public Json_object_constructor_null_clauseContext json_object_constructor_null_clause() {
			return getRuleContext(Json_object_constructor_null_clauseContext.class,0);
		}
		public Json_key_uniqueness_constraintContext json_key_uniqueness_constraint() {
			return getRuleContext(Json_key_uniqueness_constraintContext.class,0);
		}
		public Json_returning_clauseContext json_returning_clause() {
			return getRuleContext(Json_returning_clauseContext.class,0);
		}
		public TerminalNode JSON_ARRAY() { return getToken(PostgreSQLParser.JSON_ARRAY, 0); }
		public Json_value_expr_listContext json_value_expr_list() {
			return getRuleContext(Json_value_expr_listContext.class,0);
		}
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Json_array_constructor_null_clauseContext json_array_constructor_null_clause() {
			return getRuleContext(Json_array_constructor_null_clauseContext.class,0);
		}
		public Json_format_clauseContext json_format_clause() {
			return getRuleContext(Json_format_clauseContext.class,0);
		}
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public Json_value_exprContext json_value_expr() {
			return getRuleContext(Json_value_exprContext.class,0);
		}
		public TerminalNode JSON_SCALAR() { return getToken(PostgreSQLParser.JSON_SCALAR, 0); }
		public TerminalNode JSON_SERIALIZE() { return getToken(PostgreSQLParser.JSON_SERIALIZE, 0); }
		public TerminalNode MERGE_ACTION() { return getToken(PostgreSQLParser.MERGE_ACTION, 0); }
		public TerminalNode JSON_QUERY() { return getToken(PostgreSQLParser.JSON_QUERY, 0); }
		public Json_wrapper_behaviorContext json_wrapper_behavior() {
			return getRuleContext(Json_wrapper_behaviorContext.class,0);
		}
		public Json_passing_clauseContext json_passing_clause() {
			return getRuleContext(Json_passing_clauseContext.class,0);
		}
		public Json_quotes_clauseContext json_quotes_clause() {
			return getRuleContext(Json_quotes_clauseContext.class,0);
		}
		public Json_behavior_clauseContext json_behavior_clause() {
			return getRuleContext(Json_behavior_clauseContext.class,0);
		}
		public TerminalNode JSON_EXISTS() { return getToken(PostgreSQLParser.JSON_EXISTS, 0); }
		public Json_on_error_clauseContext json_on_error_clause() {
			return getRuleContext(Json_on_error_clauseContext.class,0);
		}
		public TerminalNode JSON_VALUE() { return getToken(PostgreSQLParser.JSON_VALUE, 0); }
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_common_subexpr; }
	}

	public final Func_expr_common_subexprContext func_expr_common_subexpr() throws RecognitionException {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_func_expr_common_subexpr);
		int _la;
		try {
			setState(9658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9352);
				match(COLLATION);
				setState(9353);
				match(FOR);
				setState(9354);
				match(OPEN_PAREN);
				setState(9355);
				a_expr();
				setState(9356);
				match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9358);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(9359);
				match(CURRENT_TIME);
				setState(9364);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					setState(9360);
					match(OPEN_PAREN);
					setState(9361);
					iconst();
					setState(9362);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(9366);
				match(CURRENT_TIMESTAMP);
				setState(9371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
				case 1:
					{
					setState(9367);
					match(OPEN_PAREN);
					setState(9368);
					iconst();
					setState(9369);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(9373);
				match(LOCALTIME);
				setState(9378);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
				case 1:
					{
					setState(9374);
					match(OPEN_PAREN);
					setState(9375);
					iconst();
					setState(9376);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(9380);
				match(LOCALTIMESTAMP);
				setState(9385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(9381);
					match(OPEN_PAREN);
					setState(9382);
					iconst();
					setState(9383);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9387);
				match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 8);
				{
				setState(9388);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 9);
				{
				setState(9389);
				match(SESSION_USER);
				}
				break;
			case SYSTEM_USER:
				enterOuterAlt(_localctx, 10);
				{
				setState(9390);
				match(SYSTEM_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 11);
				{
				setState(9391);
				match(USER);
				}
				break;
			case CURRENT_CATALOG:
				enterOuterAlt(_localctx, 12);
				{
				setState(9392);
				match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				enterOuterAlt(_localctx, 13);
				{
				setState(9393);
				match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				enterOuterAlt(_localctx, 14);
				{
				setState(9394);
				match(CAST);
				setState(9395);
				match(OPEN_PAREN);
				setState(9396);
				a_expr();
				setState(9397);
				match(AS);
				setState(9398);
				typename();
				setState(9399);
				match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				enterOuterAlt(_localctx, 15);
				{
				setState(9401);
				match(EXTRACT);
				setState(9402);
				match(OPEN_PAREN);
				setState(9404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DAY_P || _la==HOUR_P || _la==MINUTE_P || _la==MONTH_P || _la==SECOND_P || _la==YEAR_P || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & 1103806767651L) != 0)) {
					{
					setState(9403);
					extract_list();
					}
				}

				setState(9406);
				match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				enterOuterAlt(_localctx, 16);
				{
				setState(9407);
				match(NORMALIZE);
				setState(9408);
				match(OPEN_PAREN);
				setState(9409);
				a_expr();
				setState(9412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9410);
					match(COMMA);
					setState(9411);
					unicode_normal_form();
					}
				}

				setState(9414);
				match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				enterOuterAlt(_localctx, 17);
				{
				setState(9416);
				match(OVERLAY);
				setState(9417);
				match(OPEN_PAREN);
				setState(9422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(9418);
					overlay_list();
					}
					break;
				case 2:
					{
					setState(9420);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
						{
						setState(9419);
						func_arg_list();
						}
					}

					}
					break;
				}
				setState(9424);
				match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				enterOuterAlt(_localctx, 18);
				{
				setState(9425);
				match(POSITION);
				setState(9426);
				match(OPEN_PAREN);
				setState(9428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9217179569920884217L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
					{
					setState(9427);
					position_list();
					}
				}

				setState(9430);
				match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 19);
				{
				setState(9431);
				match(SUBSTRING);
				setState(9432);
				match(OPEN_PAREN);
				setState(9437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(9433);
					substr_list();
					}
					break;
				case 2:
					{
					setState(9435);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
						{
						setState(9434);
						func_arg_list();
						}
					}

					}
					break;
				}
				setState(9439);
				match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(9440);
				match(TREAT);
				setState(9441);
				match(OPEN_PAREN);
				setState(9442);
				a_expr();
				setState(9443);
				match(AS);
				setState(9444);
				typename();
				setState(9445);
				match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 21);
				{
				setState(9447);
				match(TRIM);
				setState(9448);
				match(OPEN_PAREN);
				setState(9450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 72057611217797121L) != 0)) {
					{
					setState(9449);
					_la = _input.LA(1);
					if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 72057611217797121L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9452);
				trim_list();
				setState(9453);
				match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				enterOuterAlt(_localctx, 22);
				{
				setState(9455);
				match(NULLIF);
				setState(9456);
				match(OPEN_PAREN);
				setState(9457);
				a_expr();
				setState(9458);
				match(COMMA);
				setState(9459);
				a_expr();
				setState(9460);
				match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 23);
				{
				setState(9462);
				match(COALESCE);
				setState(9463);
				match(OPEN_PAREN);
				setState(9464);
				expr_list();
				setState(9465);
				match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 24);
				{
				setState(9467);
				match(GREATEST);
				setState(9468);
				match(OPEN_PAREN);
				setState(9469);
				expr_list();
				setState(9470);
				match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 25);
				{
				setState(9472);
				match(LEAST);
				setState(9473);
				match(OPEN_PAREN);
				setState(9474);
				expr_list();
				setState(9475);
				match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				enterOuterAlt(_localctx, 26);
				{
				setState(9477);
				match(XMLCONCAT);
				setState(9478);
				match(OPEN_PAREN);
				setState(9479);
				expr_list();
				setState(9480);
				match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				enterOuterAlt(_localctx, 27);
				{
				setState(9482);
				match(XMLELEMENT);
				setState(9483);
				match(OPEN_PAREN);
				setState(9484);
				match(NAME_P);
				setState(9485);
				colLabel();
				setState(9491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9486);
					match(COMMA);
					setState(9489);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
					case 1:
						{
						setState(9487);
						xml_attributes();
						}
						break;
					case 2:
						{
						setState(9488);
						expr_list();
						}
						break;
					}
					}
				}

				setState(9493);
				match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				enterOuterAlt(_localctx, 28);
				{
				setState(9495);
				match(XMLEXISTS);
				setState(9496);
				match(OPEN_PAREN);
				setState(9497);
				c_expr();
				setState(9498);
				xmlexists_argument();
				setState(9499);
				match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				enterOuterAlt(_localctx, 29);
				{
				setState(9501);
				match(XMLFOREST);
				setState(9502);
				match(OPEN_PAREN);
				setState(9503);
				xml_attribute_list();
				setState(9504);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				enterOuterAlt(_localctx, 30);
				{
				setState(9506);
				match(XMLPARSE);
				setState(9507);
				match(OPEN_PAREN);
				setState(9508);
				document_or_content();
				setState(9509);
				a_expr();
				setState(9511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRESERVE || _la==STRIP_P) {
					{
					setState(9510);
					xml_whitespace_option();
					}
				}

				setState(9513);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				enterOuterAlt(_localctx, 31);
				{
				setState(9515);
				match(XMLPI);
				setState(9516);
				match(OPEN_PAREN);
				setState(9517);
				match(NAME_P);
				setState(9518);
				colLabel();
				setState(9521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9519);
					match(COMMA);
					setState(9520);
					a_expr();
					}
				}

				setState(9523);
				match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				enterOuterAlt(_localctx, 32);
				{
				setState(9525);
				match(XMLROOT);
				setState(9526);
				match(OPEN_PAREN);
				setState(9527);
				match(XML_P);
				setState(9528);
				a_expr();
				setState(9529);
				match(COMMA);
				setState(9530);
				xml_root_version();
				setState(9532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9531);
					xml_root_standalone_();
					}
				}

				setState(9534);
				match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 33);
				{
				setState(9536);
				match(XMLSERIALIZE);
				setState(9537);
				match(OPEN_PAREN);
				setState(9538);
				document_or_content();
				setState(9539);
				a_expr();
				setState(9540);
				match(AS);
				setState(9541);
				simpletypename();
				setState(9542);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_OBJECT:
				enterOuterAlt(_localctx, 34);
				{
				setState(9544);
				match(JSON_OBJECT);
				setState(9545);
				match(OPEN_PAREN);
				setState(9560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(9546);
					func_arg_list();
					}
					break;
				case 2:
					{
					setState(9547);
					json_name_and_value_list(0);
					setState(9549);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ABSENT || _la==NULL_P) {
						{
						setState(9548);
						json_object_constructor_null_clause();
						}
					}

					setState(9552);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH || _la==WITHOUT) {
						{
						setState(9551);
						json_key_uniqueness_constraint();
						}
					}

					setState(9555);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETURNING) {
						{
						setState(9554);
						json_returning_clause();
						}
					}

					}
					break;
				case 3:
					{
					setState(9558);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETURNING) {
						{
						setState(9557);
						json_returning_clause();
						}
					}

					}
					break;
				}
				setState(9562);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_ARRAY:
				enterOuterAlt(_localctx, 35);
				{
				setState(9563);
				match(JSON_ARRAY);
				setState(9564);
				match(OPEN_PAREN);
				setState(9582);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(9565);
					json_value_expr_list(0);
					setState(9567);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ABSENT || _la==NULL_P) {
						{
						setState(9566);
						json_array_constructor_null_clause();
						}
					}

					setState(9570);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETURNING) {
						{
						setState(9569);
						json_returning_clause();
						}
					}

					}
					break;
				case 2:
					{
					setState(9572);
					select_no_parens();
					setState(9574);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FORMAT_LA) {
						{
						setState(9573);
						json_format_clause();
						}
					}

					setState(9577);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETURNING) {
						{
						setState(9576);
						json_returning_clause();
						}
					}

					}
					break;
				case 3:
					{
					setState(9580);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETURNING) {
						{
						setState(9579);
						json_returning_clause();
						}
					}

					}
					break;
				}
				setState(9584);
				match(CLOSE_PAREN);
				}
				break;
			case JSON:
				enterOuterAlt(_localctx, 36);
				{
				setState(9585);
				match(JSON);
				setState(9586);
				match(OPEN_PAREN);
				setState(9587);
				json_value_expr();
				setState(9589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(9588);
					json_key_uniqueness_constraint();
					}
				}

				setState(9591);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_SCALAR:
				enterOuterAlt(_localctx, 37);
				{
				setState(9593);
				match(JSON_SCALAR);
				setState(9594);
				match(OPEN_PAREN);
				setState(9595);
				a_expr();
				setState(9596);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_SERIALIZE:
				enterOuterAlt(_localctx, 38);
				{
				setState(9598);
				match(JSON_SERIALIZE);
				setState(9599);
				match(OPEN_PAREN);
				setState(9600);
				json_value_expr();
				setState(9602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(9601);
					json_returning_clause();
					}
				}

				setState(9604);
				match(CLOSE_PAREN);
				}
				break;
			case MERGE_ACTION:
				enterOuterAlt(_localctx, 39);
				{
				setState(9606);
				match(MERGE_ACTION);
				setState(9607);
				match(OPEN_PAREN);
				setState(9608);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_QUERY:
				enterOuterAlt(_localctx, 40);
				{
				setState(9609);
				match(JSON_QUERY);
				setState(9610);
				match(OPEN_PAREN);
				setState(9611);
				json_value_expr();
				setState(9612);
				match(COMMA);
				setState(9613);
				a_expr();
				setState(9615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(9614);
					json_passing_clause();
					}
				}

				setState(9618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(9617);
					json_returning_clause();
					}
				}

				setState(9620);
				json_wrapper_behavior();
				setState(9622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEEP || _la==OMIT) {
					{
					setState(9621);
					json_quotes_clause();
					}
				}

				setState(9625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EMPTY_P || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 8796126576769L) != 0) || _la==UNKNOWN || _la==ERROR) {
					{
					setState(9624);
					json_behavior_clause();
					}
				}

				setState(9627);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_EXISTS:
				enterOuterAlt(_localctx, 41);
				{
				setState(9629);
				match(JSON_EXISTS);
				setState(9630);
				match(OPEN_PAREN);
				setState(9631);
				json_value_expr();
				setState(9632);
				match(COMMA);
				setState(9633);
				a_expr();
				setState(9635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(9634);
					json_passing_clause();
					}
				}

				setState(9638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EMPTY_P || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 8796126576769L) != 0) || _la==UNKNOWN || _la==ERROR) {
					{
					setState(9637);
					json_on_error_clause();
					}
				}

				setState(9640);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_VALUE:
				enterOuterAlt(_localctx, 42);
				{
				setState(9642);
				match(JSON_VALUE);
				setState(9643);
				match(OPEN_PAREN);
				setState(9644);
				json_value_expr();
				setState(9645);
				match(COMMA);
				setState(9646);
				a_expr();
				setState(9648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(9647);
					json_passing_clause();
					}
				}

				setState(9651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(9650);
					json_returning_clause();
					}
				}

				setState(9654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EMPTY_P || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 8796126576769L) != 0) || _la==UNKNOWN || _la==ERROR) {
					{
					setState(9653);
					json_behavior_clause();
					}
				}

				setState(9656);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_xml_root_version);
		try {
			setState(9665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9660);
				match(VERSION_P);
				setState(9661);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9662);
				match(VERSION_P);
				setState(9663);
				match(NO);
				setState(9664);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_root_standalone_Context extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_standalone_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_standalone_; }
	}

	public final Xml_root_standalone_Context xml_root_standalone_() throws RecognitionException {
		Xml_root_standalone_Context _localctx = new Xml_root_standalone_Context(_ctx, getState());
		enterRule(_localctx, 1222, RULE_xml_root_standalone_);
		try {
			setState(9677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9667);
				match(COMMA);
				setState(9668);
				match(STANDALONE_P);
				setState(9669);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9670);
				match(COMMA);
				setState(9671);
				match(STANDALONE_P);
				setState(9672);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9673);
				match(COMMA);
				setState(9674);
				match(STANDALONE_P);
				setState(9675);
				match(NO);
				setState(9676);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9679);
			match(XMLATTRIBUTES);
			setState(9680);
			match(OPEN_PAREN);
			setState(9681);
			xml_attribute_list();
			setState(9682);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attribute_listContext extends ParserRuleContext {
		public List<Xml_attribute_elContext> xml_attribute_el() {
			return getRuleContexts(Xml_attribute_elContext.class);
		}
		public Xml_attribute_elContext xml_attribute_el(int i) {
			return getRuleContext(Xml_attribute_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_xml_attribute_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9684);
			xml_attribute_el();
			setState(9689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9685);
				match(COMMA);
				setState(9686);
				xml_attribute_el();
				}
				}
				setState(9691);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_xml_attribute_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9692);
			a_expr();
			setState(9695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9693);
				match(AS);
				setState(9694);
				colLabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9697);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_xml_whitespace_option);
		try {
			setState(9703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9699);
				match(PRESERVE);
				setState(9700);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9701);
				match(STRIP_P);
				setState(9702);
				match(WHITESPACE_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<Xml_passing_mechContext> xml_passing_mech() {
			return getRuleContexts(Xml_passing_mechContext.class);
		}
		public Xml_passing_mechContext xml_passing_mech(int i) {
			return getRuleContext(Xml_passing_mechContext.class,i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_xmlexists_argument);
		try {
			setState(9720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9705);
				match(PASSING);
				setState(9706);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9707);
				match(PASSING);
				setState(9708);
				c_expr();
				setState(9709);
				xml_passing_mech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9711);
				match(PASSING);
				setState(9712);
				xml_passing_mech();
				setState(9713);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9715);
				match(PASSING);
				setState(9716);
				xml_passing_mech();
				setState(9717);
				c_expr();
				setState(9718);
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_passing_mechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_mech; }
	}

	public final Xml_passing_mechContext xml_passing_mech() throws RecognitionException {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_xml_passing_mech);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9722);
			match(BY);
			setState(9723);
			_la = _input.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Within_group_clauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_group_clause; }
	}

	public final Within_group_clauseContext within_group_clause() throws RecognitionException {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_within_group_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9725);
			match(WITHIN);
			setState(9726);
			match(GROUP_P);
			setState(9727);
			match(OPEN_PAREN);
			setState(9728);
			sort_clause();
			setState(9729);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_filter_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9731);
			match(FILTER);
			setState(9732);
			match(OPEN_PAREN);
			setState(9733);
			match(WHERE);
			setState(9734);
			a_expr();
			setState(9735);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_window_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9737);
			match(WINDOW);
			setState(9738);
			window_definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_definition_listContext extends ParserRuleContext {
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_window_definition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9740);
			window_definition();
			setState(9745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9741);
				match(COMMA);
				setState(9742);
				window_definition();
				}
				}
				setState(9747);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_definitionContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9748);
			colid();
			setState(9749);
			match(AS);
			setState(9750);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_over_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9752);
			match(OVER);
			setState(9755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(9753);
				window_specification();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				{
				setState(9754);
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_specificationContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Existing_window_name_Context existing_window_name_() {
			return getRuleContext(Existing_window_name_Context.class,0);
		}
		public Partition_clause_Context partition_clause_() {
			return getRuleContext(Partition_clause_Context.class,0);
		}
		public Sort_clause_Context sort_clause_() {
			return getRuleContext(Sort_clause_Context.class,0);
		}
		public Frame_clause_Context frame_clause_() {
			return getRuleContext(Frame_clause_Context.class,0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_window_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9757);
			match(OPEN_PAREN);
			setState(9759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
			case 1:
				{
				setState(9758);
				existing_window_name_();
				}
				break;
			}
			setState(9762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(9761);
				partition_clause_();
				}
			}

			setState(9765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(9764);
				sort_clause_();
				}
			}

			setState(9768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS || _la==GROUPS) {
				{
				setState(9767);
				frame_clause_();
				}
			}

			setState(9770);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Existing_window_name_Context extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Existing_window_name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_window_name_; }
	}

	public final Existing_window_name_Context existing_window_name_() throws RecognitionException {
		Existing_window_name_Context _localctx = new Existing_window_name_Context(_ctx, getState());
		enterRule(_localctx, 1252, RULE_existing_window_name_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9772);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_clause_Context extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Partition_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_clause_; }
	}

	public final Partition_clause_Context partition_clause_() throws RecognitionException {
		Partition_clause_Context _localctx = new Partition_clause_Context(_ctx, getState());
		enterRule(_localctx, 1254, RULE_partition_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9774);
			match(PARTITION);
			setState(9775);
			match(BY);
			setState(9776);
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_clause_Context extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Window_exclusion_clause_Context window_exclusion_clause_() {
			return getRuleContext(Window_exclusion_clause_Context.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public Frame_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_clause_; }
	}

	public final Frame_clause_Context frame_clause_() throws RecognitionException {
		Frame_clause_Context _localctx = new Frame_clause_Context(_ctx, getState());
		enterRule(_localctx, 1256, RULE_frame_clause_);
		int _la;
		try {
			setState(9793);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9778);
				match(RANGE);
				setState(9779);
				frame_extent();
				setState(9781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCLUDE) {
					{
					setState(9780);
					window_exclusion_clause_();
					}
				}

				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9783);
				match(ROWS);
				setState(9784);
				frame_extent();
				setState(9786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCLUDE) {
					{
					setState(9785);
					window_exclusion_clause_();
					}
				}

				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9788);
				match(GROUPS);
				setState(9789);
				frame_extent();
				setState(9791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCLUDE) {
					{
					setState(9790);
					window_exclusion_clause_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_extentContext extends ParserRuleContext {
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_frame_extent);
		try {
			setState(9801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9795);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9796);
				match(BETWEEN);
				setState(9797);
				frame_bound();
				setState(9798);
				match(AND);
				setState(9799);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_boundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_frame_bound);
		int _la;
		try {
			setState(9810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9803);
				match(UNBOUNDED);
				setState(9804);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9805);
				match(CURRENT_P);
				setState(9806);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9807);
				a_expr();
				setState(9808);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_exclusion_clause_Context extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public Window_exclusion_clause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_exclusion_clause_; }
	}

	public final Window_exclusion_clause_Context window_exclusion_clause_() throws RecognitionException {
		Window_exclusion_clause_Context _localctx = new Window_exclusion_clause_Context(_ctx, getState());
		enterRule(_localctx, 1262, RULE_window_exclusion_clause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9812);
			match(EXCLUDE);
			setState(9819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_P:
				{
				setState(9813);
				match(CURRENT_P);
				setState(9814);
				match(ROW);
				}
				break;
			case GROUP_P:
				{
				setState(9815);
				match(GROUP_P);
				}
				break;
			case TIES:
				{
				setState(9816);
				match(TIES);
				}
				break;
			case NO:
				{
				setState(9817);
				match(NO);
				setState(9818);
				match(OTHERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_row);
		int _la;
		try {
			setState(9833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9821);
				match(ROW);
				setState(9822);
				match(OPEN_PAREN);
				setState(9824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
					{
					setState(9823);
					expr_list();
					}
				}

				setState(9826);
				match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9827);
				match(OPEN_PAREN);
				setState(9828);
				expr_list();
				setState(9829);
				match(COMMA);
				setState(9830);
				a_expr();
				setState(9831);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explicit_rowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row; }
	}

	public final Explicit_rowContext explicit_row() throws RecognitionException {
		Explicit_rowContext _localctx = new Explicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_explicit_row);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9835);
			match(ROW);
			setState(9836);
			match(OPEN_PAREN);
			setState(9838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
				{
				setState(9837);
				expr_list();
				}
			}

			setState(9840);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Implicit_rowContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_row; }
	}

	public final Implicit_rowContext implicit_row() throws RecognitionException {
		Implicit_rowContext _localctx = new Implicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_implicit_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9842);
			match(OPEN_PAREN);
			setState(9843);
			expr_list();
			setState(9844);
			match(COMMA);
			setState(9845);
			a_expr();
			setState(9846);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9848);
			_la = _input.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 1152921504606846993L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public MathopContext mathop() {
			return getRuleContext(MathopContext.class,0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op; }
	}

	public final All_opContext all_op() throws RecognitionException {
		All_opContext _localctx = new All_opContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_all_op);
		try {
			setState(9852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9850);
				match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9851);
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MathopContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathop; }
	}

	public final MathopContext mathop() throws RecognitionException {
		MathopContext _localctx = new MathopContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_mathop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9854);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 178517504L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qual_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_op; }
	}

	public final Qual_opContext qual_op() throws RecognitionException {
		Qual_opContext _localctx = new Qual_opContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_qual_op);
		try {
			setState(9862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9856);
				match(Operator);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9857);
				match(OPERATOR);
				setState(9858);
				match(OPEN_PAREN);
				setState(9859);
				any_operator();
				setState(9860);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qual_all_opContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_op; }
	}

	public final Qual_all_opContext qual_all_op() throws RecognitionException {
		Qual_all_opContext _localctx = new Qual_all_opContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_qual_all_op);
		try {
			setState(9870);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9864);
				all_op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9865);
				match(OPERATOR);
				setState(9866);
				match(OPEN_PAREN);
				setState(9867);
				any_operator();
				setState(9868);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_OpContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_subquery_Op);
		try {
			setState(9884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9872);
				all_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9873);
				match(OPERATOR);
				setState(9874);
				match(OPEN_PAREN);
				setState(9875);
				any_operator();
				setState(9876);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9878);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9879);
				match(NOT);
				setState(9880);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9881);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9882);
				match(NOT);
				setState(9883);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_expr_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9886);
			a_expr();
			setState(9891);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,983,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9887);
					match(COMMA);
					setState(9888);
					a_expr();
					}
					} 
				}
				setState(9893);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,983,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_arg_listContext extends ParserRuleContext {
		public List<Func_arg_exprContext> func_arg_expr() {
			return getRuleContexts(Func_arg_exprContext.class);
		}
		public Func_arg_exprContext func_arg_expr(int i) {
			return getRuleContext(Func_arg_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_func_arg_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9894);
			func_arg_expr();
			setState(9899);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,984,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9895);
					match(COMMA);
					setState(9896);
					func_arg_expr();
					}
					} 
				}
				setState(9901);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,984,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public TerminalNode EQUALS_GREATER() { return getToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_func_arg_expr);
		int _la;
		try {
			setState(9907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9902);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9903);
				param_name();
				setState(9904);
				_la = _input.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9905);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9909);
			typename();
			setState(9914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9910);
				match(COMMA);
				setState(9911);
				typename();
				}
				}
				setState(9916);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Array_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_array_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9917);
			match(OPEN_BRACKET);
			setState(9920);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				{
				setState(9918);
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				setState(9919);
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			setState(9922);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Array_expr_listContext extends ParserRuleContext {
		public List<Array_exprContext> array_expr() {
			return getRuleContexts(Array_exprContext.class);
		}
		public Array_exprContext array_expr(int i) {
			return getRuleContext(Array_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_array_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9924);
			array_expr();
			setState(9929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9925);
				match(COMMA);
				setState(9926);
				array_expr();
				}
				}
				setState(9931);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_extract_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9932);
			extract_arg();
			setState(9933);
			match(FROM);
			setState(9934);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Extract_argContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_extract_arg);
		try {
			setState(9944);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(9936);
				identifier();
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9937);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(9938);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(9939);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(9940);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(9941);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(9942);
				match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 8);
				{
				setState(9943);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unicode_normal_formContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode_normal_form; }
	}

	public final Unicode_normal_formContext unicode_normal_form() throws RecognitionException {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_unicode_normal_form);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9946);
			_la = _input.LA(1);
			if ( !(((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Overlay_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_overlay_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9948);
			a_expr();
			setState(9949);
			match(PLACING);
			setState(9950);
			a_expr();
			setState(9951);
			match(FROM);
			setState(9952);
			a_expr();
			setState(9955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(9953);
				match(FOR);
				setState(9954);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_position_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9957);
			b_expr(0);
			setState(9958);
			match(IN_P);
			setState(9959);
			b_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Substr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_substr_list);
		try {
			setState(9987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9961);
				a_expr();
				setState(9962);
				match(FROM);
				setState(9963);
				a_expr();
				setState(9964);
				match(FOR);
				setState(9965);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9967);
				a_expr();
				setState(9968);
				match(FOR);
				setState(9969);
				a_expr();
				setState(9970);
				match(FROM);
				setState(9971);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9973);
				a_expr();
				setState(9974);
				match(FROM);
				setState(9975);
				a_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9977);
				a_expr();
				setState(9978);
				match(FOR);
				setState(9979);
				a_expr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9981);
				a_expr();
				setState(9982);
				match(SIMILAR);
				setState(9983);
				a_expr();
				setState(9984);
				match(ESCAPE);
				setState(9985);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_trim_list);
		try {
			setState(9996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9989);
				a_expr();
				setState(9990);
				match(FROM);
				setState(9991);
				expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9993);
				match(FROM);
				setState(9994);
				expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9995);
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_exprContext extends ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
	 
		public In_exprContext() { }
		public void copyFrom(In_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class In_expr_listContext extends In_exprContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class In_expr_selectContext extends In_exprContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_expr_selectContext(In_exprContext ctx) { copyFrom(ctx); }
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_in_expr);
		try {
			setState(10003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9998);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9999);
				match(OPEN_PAREN);
				setState(10000);
				expr_list();
				setState(10001);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_case_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10005);
			match(CASE);
			setState(10007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
				{
				setState(10006);
				case_arg();
				}
			}

			setState(10009);
			when_clause_list();
			setState(10011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(10010);
				case_default();
				}
			}

			setState(10013);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class When_clause_listContext extends ParserRuleContext {
		public List<When_clauseContext> when_clause() {
			return getRuleContexts(When_clauseContext.class);
		}
		public When_clauseContext when_clause(int i) {
			return getRuleContext(When_clauseContext.class,i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_when_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10016); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10015);
				when_clause();
				}
				}
				setState(10018); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10020);
			match(WHEN);
			setState(10021);
			a_expr();
			setState(10022);
			match(THEN);
			setState(10023);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_case_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10025);
			match(ELSE);
			setState(10026);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_case_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10028);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnrefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_columnref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10030);
			colid();
			setState(10032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(10031);
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Indirection_elContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public List<Slice_bound_Context> slice_bound_() {
			return getRuleContexts(Slice_bound_Context.class);
		}
		public Slice_bound_Context slice_bound_(int i) {
			return getRuleContext(Slice_bound_Context.class,i);
		}
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_indirection_el);
		int _la;
		try {
			setState(10051);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(10034);
				match(DOT);
				setState(10037);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JSON:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_EXISTS:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_QUERY:
				case JSON_SCALAR:
				case JSON_SERIALIZE:
				case JSON_TABLE:
				case JSON_VALUE:
				case MERGE_ACTION:
				case SYSTEM_USER:
				case ABSENT:
				case ASENSITIVE:
				case ATOMIC:
				case BREADTH:
				case COMPRESSION:
				case CONDITIONAL:
				case DEPTH:
				case EMPTY_P:
				case FINALIZE:
				case INDENT:
				case KEEP:
				case KEYS:
				case NESTED:
				case OMIT:
				case PARAMETER:
				case PATH:
				case PLAN:
				case QUOTES:
				case SCALAR:
				case SOURCE:
				case STRING_P:
				case TARGET:
				case UNCONDITIONAL:
				case PERIOD:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case INTO:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATCHED:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case ERROR:
				case EXIT:
				case RETURN:
				case FORMAT:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case TickedIdentifier:
				case PLSQLVARIABLENAME:
					{
					setState(10035);
					attr_name();
					}
					break;
				case STAR:
					{
					setState(10036);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10039);
				match(OPEN_BRACKET);
				setState(10048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
				case 1:
					{
					setState(10040);
					a_expr();
					}
					break;
				case 2:
					{
					setState(10042);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
						{
						setState(10041);
						slice_bound_();
						}
					}

					setState(10044);
					match(COLON);
					setState(10046);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268423164L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9214927770107198969L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & -1011L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & -1L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & -1L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -129L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & -1L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -2305843284091601405L) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & -4293581670814053377L) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & 4123L) != 0)) {
						{
						setState(10045);
						slice_bound_();
						}
					}

					}
					break;
				}
				setState(10050);
				match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Slice_bound_Context extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Slice_bound_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slice_bound_; }
	}

	public final Slice_bound_Context slice_bound_() throws RecognitionException {
		Slice_bound_Context _localctx = new Slice_bound_Context(_ctx, getState());
		enterRule(_localctx, 1324, RULE_slice_bound_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10053);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
	}

	public final IndirectionContext indirection() throws RecognitionException {
		IndirectionContext _localctx = new IndirectionContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10056); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(10055);
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10058); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1003,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Opt_indirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_opt_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10063);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1004,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10060);
					indirection_el();
					}
					} 
				}
				setState(10065);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1004,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public Json_argumentsContext json_arguments() {
			return getRuleContext(Json_argumentsContext.class,0);
		}
		public Json_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_passing_clause; }
	}

	public final Json_passing_clauseContext json_passing_clause() throws RecognitionException {
		Json_passing_clauseContext _localctx = new Json_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_json_passing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10066);
			match(PASSING);
			setState(10067);
			json_arguments(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_argumentsContext extends ParserRuleContext {
		public Json_argumentContext json_argument() {
			return getRuleContext(Json_argumentContext.class,0);
		}
		public Json_argumentsContext json_arguments() {
			return getRuleContext(Json_argumentsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Json_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_arguments; }
	}

	public final Json_argumentsContext json_arguments() throws RecognitionException {
		return json_arguments(0);
	}

	private Json_argumentsContext json_arguments(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Json_argumentsContext _localctx = new Json_argumentsContext(_ctx, _parentState);
		Json_argumentsContext _prevctx = _localctx;
		int _startState = 1332;
		enterRecursionRule(_localctx, 1332, RULE_json_arguments, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10070);
			json_argument();
			}
			_ctx.stop = _input.LT(-1);
			setState(10077);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1005,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Json_argumentsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_json_arguments);
					setState(10072);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10073);
					match(COMMA);
					setState(10074);
					json_argument();
					}
					} 
				}
				setState(10079);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1005,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_argumentContext extends ParserRuleContext {
		public Json_value_exprContext json_value_expr() {
			return getRuleContext(Json_value_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Json_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_argument; }
	}

	public final Json_argumentContext json_argument() throws RecognitionException {
		Json_argumentContext _localctx = new Json_argumentContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_json_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10080);
			json_value_expr();
			setState(10081);
			match(AS);
			setState(10082);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_wrapper_behaviorContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CONDITIONAL() { return getToken(PostgreSQLParser.CONDITIONAL, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(PostgreSQLParser.UNCONDITIONAL, 0); }
		public Json_wrapper_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_wrapper_behavior; }
	}

	public final Json_wrapper_behaviorContext json_wrapper_behavior() throws RecognitionException {
		Json_wrapper_behaviorContext _localctx = new Json_wrapper_behaviorContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_json_wrapper_behavior);
		try {
			setState(10109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10084);
				match(WITHOUT);
				setState(10085);
				match(WRAPPER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10086);
				match(WITHOUT);
				setState(10087);
				match(ARRAY);
				setState(10088);
				match(WRAPPER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10089);
				match(WITH);
				setState(10090);
				match(WRAPPER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10091);
				match(WITH);
				setState(10092);
				match(ARRAY);
				setState(10093);
				match(WRAPPER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10094);
				match(WITH);
				setState(10095);
				match(CONDITIONAL);
				setState(10096);
				match(ARRAY);
				setState(10097);
				match(WRAPPER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10098);
				match(WITH);
				setState(10099);
				match(UNCONDITIONAL);
				setState(10100);
				match(ARRAY);
				setState(10101);
				match(WRAPPER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10102);
				match(WITH);
				setState(10103);
				match(CONDITIONAL);
				setState(10104);
				match(WRAPPER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10105);
				match(WITH);
				setState(10106);
				match(UNCONDITIONAL);
				setState(10107);
				match(WRAPPER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_behaviorContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Json_behavior_typeContext json_behavior_type() {
			return getRuleContext(Json_behavior_typeContext.class,0);
		}
		public Json_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_behavior; }
	}

	public final Json_behaviorContext json_behavior() throws RecognitionException {
		Json_behaviorContext _localctx = new Json_behaviorContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_json_behavior);
		try {
			setState(10114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(10111);
				match(DEFAULT);
				setState(10112);
				a_expr();
				}
				break;
			case EMPTY_P:
			case FALSE_P:
			case NULL_P:
			case TRUE_P:
			case UNKNOWN:
			case ERROR:
				enterOuterAlt(_localctx, 2);
				{
				setState(10113);
				json_behavior_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_behavior_typeContext extends ParserRuleContext {
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode EMPTY_P() { return getToken(PostgreSQLParser.EMPTY_P, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public Json_behavior_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_behavior_type; }
	}

	public final Json_behavior_typeContext json_behavior_type() throws RecognitionException {
		Json_behavior_typeContext _localctx = new Json_behavior_typeContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_json_behavior_type);
		try {
			setState(10126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10116);
				match(ERROR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10117);
				match(NULL_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10118);
				match(TRUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10119);
				match(FALSE_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10120);
				match(UNKNOWN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10121);
				match(EMPTY_P);
				setState(10122);
				match(ARRAY);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10123);
				match(EMPTY_P);
				setState(10124);
				match(OBJECT_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10125);
				match(EMPTY_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_behavior_clauseContext extends ParserRuleContext {
		public List<Json_behaviorContext> json_behavior() {
			return getRuleContexts(Json_behaviorContext.class);
		}
		public Json_behaviorContext json_behavior(int i) {
			return getRuleContext(Json_behaviorContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode EMPTY_P() { return getToken(PostgreSQLParser.EMPTY_P, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public Json_behavior_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_behavior_clause; }
	}

	public final Json_behavior_clauseContext json_behavior_clause() throws RecognitionException {
		Json_behavior_clauseContext _localctx = new Json_behavior_clauseContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_json_behavior_clause);
		try {
			setState(10143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10128);
				json_behavior();
				setState(10129);
				match(ON);
				setState(10130);
				match(EMPTY_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10132);
				json_behavior();
				setState(10133);
				match(ON);
				setState(10134);
				match(ERROR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10136);
				json_behavior();
				setState(10137);
				match(ON);
				setState(10138);
				match(EMPTY_P);
				setState(10139);
				json_behavior();
				setState(10140);
				match(ON);
				setState(10141);
				match(ERROR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_on_error_clauseContext extends ParserRuleContext {
		public Json_behaviorContext json_behavior() {
			return getRuleContext(Json_behaviorContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public Json_on_error_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_on_error_clause; }
	}

	public final Json_on_error_clauseContext json_on_error_clause() throws RecognitionException {
		Json_on_error_clauseContext _localctx = new Json_on_error_clauseContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_json_on_error_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10145);
			json_behavior();
			setState(10146);
			match(ON);
			setState(10147);
			match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_value_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Json_format_clauseContext json_format_clause() {
			return getRuleContext(Json_format_clauseContext.class,0);
		}
		public Json_value_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_value_expr; }
	}

	public final Json_value_exprContext json_value_expr() throws RecognitionException {
		Json_value_exprContext _localctx = new Json_value_exprContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_json_value_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10149);
			a_expr();
			setState(10151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
			case 1:
				{
				setState(10150);
				json_format_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_format_clauseContext extends ParserRuleContext {
		public TerminalNode FORMAT_LA() { return getToken(PostgreSQLParser.FORMAT_LA, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Json_format_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_format_clause; }
	}

	public final Json_format_clauseContext json_format_clause() throws RecognitionException {
		Json_format_clauseContext _localctx = new Json_format_clauseContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_json_format_clause);
		try {
			setState(10159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10153);
				match(FORMAT_LA);
				setState(10154);
				match(JSON);
				setState(10155);
				match(ENCODING);
				setState(10156);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10157);
				match(FORMAT_LA);
				setState(10158);
				match(JSON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_quotes_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PostgreSQLParser.KEEP, 0); }
		public TerminalNode QUOTES() { return getToken(PostgreSQLParser.QUOTES, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode SCALAR() { return getToken(PostgreSQLParser.SCALAR, 0); }
		public TerminalNode STRING_P() { return getToken(PostgreSQLParser.STRING_P, 0); }
		public TerminalNode OMIT() { return getToken(PostgreSQLParser.OMIT, 0); }
		public Json_quotes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_quotes_clause; }
	}

	public final Json_quotes_clauseContext json_quotes_clause() throws RecognitionException {
		Json_quotes_clauseContext _localctx = new Json_quotes_clauseContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_json_quotes_clause);
		try {
			setState(10175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10161);
				match(KEEP);
				setState(10162);
				match(QUOTES);
				setState(10163);
				match(ON);
				setState(10164);
				match(SCALAR);
				setState(10165);
				match(STRING_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10166);
				match(KEEP);
				setState(10167);
				match(QUOTES);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10168);
				match(OMIT);
				setState(10169);
				match(QUOTES);
				setState(10170);
				match(ON);
				setState(10171);
				match(SCALAR);
				setState(10172);
				match(STRING_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10173);
				match(OMIT);
				setState(10174);
				match(QUOTES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Json_format_clauseContext json_format_clause() {
			return getRuleContext(Json_format_clauseContext.class,0);
		}
		public Json_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_returning_clause; }
	}

	public final Json_returning_clauseContext json_returning_clause() throws RecognitionException {
		Json_returning_clauseContext _localctx = new Json_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_json_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10177);
			match(RETURNING);
			setState(10178);
			typename();
			setState(10180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORMAT_LA) {
				{
				setState(10179);
				json_format_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_predicate_type_constraintContext extends ParserRuleContext {
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode SCALAR() { return getToken(PostgreSQLParser.SCALAR, 0); }
		public Json_predicate_type_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_predicate_type_constraint; }
	}

	public final Json_predicate_type_constraintContext json_predicate_type_constraint() throws RecognitionException {
		Json_predicate_type_constraintContext _localctx = new Json_predicate_type_constraintContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_json_predicate_type_constraint);
		try {
			setState(10191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10182);
				match(JSON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10183);
				match(JSON);
				setState(10184);
				match(VALUE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10185);
				match(JSON);
				setState(10186);
				match(ARRAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10187);
				match(JSON);
				setState(10188);
				match(OBJECT_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10189);
				match(JSON);
				setState(10190);
				match(SCALAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_key_uniqueness_constraintContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode KEYS() { return getToken(PostgreSQLParser.KEYS, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Json_key_uniqueness_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_key_uniqueness_constraint; }
	}

	public final Json_key_uniqueness_constraintContext json_key_uniqueness_constraint() throws RecognitionException {
		Json_key_uniqueness_constraintContext _localctx = new Json_key_uniqueness_constraintContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_json_key_uniqueness_constraint);
		try {
			setState(10203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10193);
				match(WITH);
				setState(10194);
				match(UNIQUE);
				setState(10195);
				match(KEYS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10196);
				match(WITH);
				setState(10197);
				match(UNIQUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10198);
				match(WITHOUT);
				setState(10199);
				match(UNIQUE);
				setState(10200);
				match(KEYS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10201);
				match(WITHOUT);
				setState(10202);
				match(UNIQUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_name_and_value_listContext extends ParserRuleContext {
		public Json_name_and_valueContext json_name_and_value() {
			return getRuleContext(Json_name_and_valueContext.class,0);
		}
		public Json_name_and_value_listContext json_name_and_value_list() {
			return getRuleContext(Json_name_and_value_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Json_name_and_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_name_and_value_list; }
	}

	public final Json_name_and_value_listContext json_name_and_value_list() throws RecognitionException {
		return json_name_and_value_list(0);
	}

	private Json_name_and_value_listContext json_name_and_value_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Json_name_and_value_listContext _localctx = new Json_name_and_value_listContext(_ctx, _parentState);
		Json_name_and_value_listContext _prevctx = _localctx;
		int _startState = 1358;
		enterRecursionRule(_localctx, 1358, RULE_json_name_and_value_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10206);
			json_name_and_value();
			}
			_ctx.stop = _input.LT(-1);
			setState(10213);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1016,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Json_name_and_value_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_json_name_and_value_list);
					setState(10208);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10209);
					match(COMMA);
					setState(10210);
					json_name_and_value();
					}
					} 
				}
				setState(10215);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1016,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_name_and_valueContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Json_value_exprContext json_value_expr() {
			return getRuleContext(Json_value_exprContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public Json_name_and_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_name_and_value; }
	}

	public final Json_name_and_valueContext json_name_and_value() throws RecognitionException {
		Json_name_and_valueContext _localctx = new Json_name_and_valueContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_json_name_and_value);
		try {
			setState(10224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10216);
				c_expr();
				setState(10217);
				match(VALUE_P);
				setState(10218);
				json_value_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10220);
				a_expr();
				setState(10221);
				match(COLON);
				setState(10222);
				json_value_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_object_constructor_null_clauseContext extends ParserRuleContext {
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ABSENT() { return getToken(PostgreSQLParser.ABSENT, 0); }
		public Json_object_constructor_null_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_object_constructor_null_clause; }
	}

	public final Json_object_constructor_null_clauseContext json_object_constructor_null_clause() throws RecognitionException {
		Json_object_constructor_null_clauseContext _localctx = new Json_object_constructor_null_clauseContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_json_object_constructor_null_clause);
		try {
			setState(10232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(10226);
				match(NULL_P);
				setState(10227);
				match(ON);
				setState(10228);
				match(NULL_P);
				}
				break;
			case ABSENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10229);
				match(ABSENT);
				setState(10230);
				match(ON);
				setState(10231);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_array_constructor_null_clauseContext extends ParserRuleContext {
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ABSENT() { return getToken(PostgreSQLParser.ABSENT, 0); }
		public Json_array_constructor_null_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_array_constructor_null_clause; }
	}

	public final Json_array_constructor_null_clauseContext json_array_constructor_null_clause() throws RecognitionException {
		Json_array_constructor_null_clauseContext _localctx = new Json_array_constructor_null_clauseContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_json_array_constructor_null_clause);
		try {
			setState(10240);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(10234);
				match(NULL_P);
				setState(10235);
				match(ON);
				setState(10236);
				match(NULL_P);
				}
				break;
			case ABSENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10237);
				match(ABSENT);
				setState(10238);
				match(ON);
				setState(10239);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_value_expr_listContext extends ParserRuleContext {
		public Json_value_exprContext json_value_expr() {
			return getRuleContext(Json_value_exprContext.class,0);
		}
		public Json_value_expr_listContext json_value_expr_list() {
			return getRuleContext(Json_value_expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Json_value_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_value_expr_list; }
	}

	public final Json_value_expr_listContext json_value_expr_list() throws RecognitionException {
		return json_value_expr_list(0);
	}

	private Json_value_expr_listContext json_value_expr_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Json_value_expr_listContext _localctx = new Json_value_expr_listContext(_ctx, _parentState);
		Json_value_expr_listContext _prevctx = _localctx;
		int _startState = 1366;
		enterRecursionRule(_localctx, 1366, RULE_json_value_expr_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(10243);
			json_value_expr();
			}
			_ctx.stop = _input.LT(-1);
			setState(10250);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1020,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Json_value_expr_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_json_value_expr_list);
					setState(10245);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10246);
					match(COMMA);
					setState(10247);
					json_value_expr();
					}
					} 
				}
				setState(10252);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1020,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_aggregate_funcContext extends ParserRuleContext {
		public TerminalNode JSON_OBJECTAGG() { return getToken(PostgreSQLParser.JSON_OBJECTAGG, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Json_name_and_valueContext json_name_and_value() {
			return getRuleContext(Json_name_and_valueContext.class,0);
		}
		public Json_returning_clauseContext json_returning_clause() {
			return getRuleContext(Json_returning_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Json_object_constructor_null_clauseContext json_object_constructor_null_clause() {
			return getRuleContext(Json_object_constructor_null_clauseContext.class,0);
		}
		public Json_key_uniqueness_constraintContext json_key_uniqueness_constraint() {
			return getRuleContext(Json_key_uniqueness_constraintContext.class,0);
		}
		public TerminalNode JSON_ARRAYAGG() { return getToken(PostgreSQLParser.JSON_ARRAYAGG, 0); }
		public Json_value_exprContext json_value_expr() {
			return getRuleContext(Json_value_exprContext.class,0);
		}
		public Json_array_aggregate_order_by_clauseContext json_array_aggregate_order_by_clause() {
			return getRuleContext(Json_array_aggregate_order_by_clauseContext.class,0);
		}
		public Json_array_constructor_null_clauseContext json_array_constructor_null_clause() {
			return getRuleContext(Json_array_constructor_null_clauseContext.class,0);
		}
		public Json_aggregate_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_aggregate_func; }
	}

	public final Json_aggregate_funcContext json_aggregate_func() throws RecognitionException {
		Json_aggregate_funcContext _localctx = new Json_aggregate_funcContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_json_aggregate_func);
		int _la;
		try {
			setState(10277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_OBJECTAGG:
				enterOuterAlt(_localctx, 1);
				{
				setState(10253);
				match(JSON_OBJECTAGG);
				setState(10254);
				match(OPEN_PAREN);
				setState(10255);
				json_name_and_value();
				setState(10257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ABSENT || _la==NULL_P) {
					{
					setState(10256);
					json_object_constructor_null_clause();
					}
				}

				setState(10260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(10259);
					json_key_uniqueness_constraint();
					}
				}

				setState(10262);
				json_returning_clause();
				setState(10263);
				match(CLOSE_PAREN);
				}
				break;
			case JSON_ARRAYAGG:
				enterOuterAlt(_localctx, 2);
				{
				setState(10265);
				match(JSON_ARRAYAGG);
				setState(10266);
				match(OPEN_PAREN);
				setState(10267);
				json_value_expr();
				setState(10269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(10268);
					json_array_aggregate_order_by_clause();
					}
				}

				setState(10272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ABSENT || _la==NULL_P) {
					{
					setState(10271);
					json_array_constructor_null_clause();
					}
				}

				setState(10274);
				json_returning_clause();
				setState(10275);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_array_aggregate_order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Json_array_aggregate_order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_array_aggregate_order_by_clause; }
	}

	public final Json_array_aggregate_order_by_clauseContext json_array_aggregate_order_by_clause() throws RecognitionException {
		Json_array_aggregate_order_by_clauseContext _localctx = new Json_array_aggregate_order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_json_array_aggregate_order_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10279);
			match(ORDER);
			setState(10280);
			match(BY);
			setState(10281);
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Target_list_Context extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Target_list_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list_; }
	}

	public final Target_list_Context target_list_() throws RecognitionException {
		Target_list_Context _localctx = new Target_list_Context(_ctx, getState());
		enterRule(_localctx, 1372, RULE_target_list_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10283);
			target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Target_listContext extends ParserRuleContext {
		public List<Target_elContext> target_el() {
			return getRuleContexts(Target_elContext.class);
		}
		public Target_elContext target_el(int i) {
			return getRuleContext(Target_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
	}

	public final Target_listContext target_list() throws RecognitionException {
		Target_listContext _localctx = new Target_listContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10285);
			target_el();
			setState(10290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10286);
				match(COMMA);
				setState(10287);
				target_el();
				}
				}
				setState(10292);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Target_elContext extends ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
	 
		public Target_elContext() { }
		public void copyFrom(Target_elContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Target_labelContext extends Target_elContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Target_el_aliasContext target_el_alias() {
			return getRuleContext(Target_el_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Target_labelContext(Target_elContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Target_starContext extends Target_elContext {
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext ctx) { copyFrom(ctx); }
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_target_el);
		try {
			setState(10300);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case FALSE_P:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10293);
				a_expr();
				setState(10297);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					setState(10294);
					target_el_alias();
					}
					break;
				case 2:
					{
					{
					setState(10295);
					match(AS);
					setState(10296);
					target_el_alias();
					}
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10299);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Target_el_aliasContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public BareColLabelContext bareColLabel() {
			return getRuleContext(BareColLabelContext.class,0);
		}
		public Target_el_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el_alias; }
	}

	public final Target_el_aliasContext target_el_alias() throws RecognitionException {
		Target_el_aliasContext _localctx = new Target_el_aliasContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_target_el_alias);
		try {
			setState(10304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10302);
				colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10303);
				bareColLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qualified_name_listContext extends ParserRuleContext {
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_qualified_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10306);
			qualified_name();
			setState(10311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10307);
				match(COMMA);
				setState(10308);
				qualified_name();
				}
				}
				setState(10313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qualified_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_qualified_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10314);
			colid();
			setState(10316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				setState(10315);
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_listContext extends ParserRuleContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10318);
			name();
			setState(10323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10319);
				match(COMMA);
				setState(10320);
				name();
				}
				}
				setState(10325);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10326);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Attr_nameContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10328);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10330);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_func_name);
		try {
			setState(10336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10332);
				type_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10333);
				colid();
				setState(10334);
				indirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AexprconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public BconstContext bconst() {
			return getRuleContext(BconstContext.class,0);
		}
		public XconstContext xconst() {
			return getRuleContext(XconstContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Sort_clause_Context sort_clause_() {
			return getRuleContext(Sort_clause_Context.class,0);
		}
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Interval_Context interval_() {
			return getRuleContext(Interval_Context.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprconst; }
	}

	public final AexprconstContext aexprconst() throws RecognitionException {
		AexprconstContext _localctx = new AexprconstContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_aexprconst);
		int _la;
		try {
			setState(10373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10338);
				iconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10339);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10340);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10341);
				bconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10342);
				xconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10343);
				func_name();
				setState(10353);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(10344);
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					setState(10345);
					match(OPEN_PAREN);
					setState(10346);
					func_arg_list();
					setState(10348);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER) {
						{
						setState(10347);
						sort_clause_();
						}
					}

					setState(10350);
					match(CLOSE_PAREN);
					setState(10351);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10355);
				consttypename();
				setState(10356);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10358);
				constinterval();
				setState(10368);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(10359);
					sconst();
					setState(10361);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
					case 1:
						{
						setState(10360);
						interval_();
						}
						break;
					}
					}
					break;
				case OPEN_PAREN:
					{
					setState(10363);
					match(OPEN_PAREN);
					setState(10364);
					iconst();
					setState(10365);
					match(CLOSE_PAREN);
					setState(10366);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10370);
				match(TRUE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10371);
				match(FALSE_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10372);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XconstContext extends ParserRuleContext {
		public TerminalNode HexadecimalStringConstant() { return getToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xconst; }
	}

	public final XconstContext xconst() throws RecognitionException {
		XconstContext _localctx = new XconstContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_xconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10375);
			match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BconstContext extends ParserRuleContext {
		public TerminalNode BinaryStringConstant() { return getToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bconst; }
	}

	public final BconstContext bconst() throws RecognitionException {
		BconstContext _localctx = new BconstContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_bconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10377);
			match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FconstContext extends ParserRuleContext {
		public TerminalNode Numeric() { return getToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fconst; }
	}

	public final FconstContext fconst() throws RecognitionException {
		FconstContext _localctx = new FconstContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_fconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10379);
			match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IconstContext extends ParserRuleContext {
		public TerminalNode Integral() { return getToken(PostgreSQLParser.Integral, 0); }
		public TerminalNode BinaryIntegral() { return getToken(PostgreSQLParser.BinaryIntegral, 0); }
		public TerminalNode OctalIntegral() { return getToken(PostgreSQLParser.OctalIntegral, 0); }
		public TerminalNode HexadecimalIntegral() { return getToken(PostgreSQLParser.HexadecimalIntegral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_iconst);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10381);
			_la = _input.LA(1);
			if ( !(((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SconstContext extends ParserRuleContext {
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Uescape_Context uescape_() {
			return getRuleContext(Uescape_Context.class,0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10383);
			anysconst();
			setState(10385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
			case 1:
				{
				setState(10384);
				uescape_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnysconstContext extends ParserRuleContext {
		public TerminalNode StringConstant() { return getToken(PostgreSQLParser.StringConstant, 0); }
		public TerminalNode UnicodeEscapeStringConstant() { return getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		public TerminalNode BeginDollarStringConstant() { return getToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> DollarText() { return getTokens(PostgreSQLParser.DollarText); }
		public TerminalNode DollarText(int i) {
			return getToken(PostgreSQLParser.DollarText, i);
		}
		public TerminalNode EscapeStringConstant() { return getToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anysconst; }
	}

	public final AnysconstContext anysconst() throws RecognitionException {
		AnysconstContext _localctx = new AnysconstContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_anysconst);
		int _la;
		try {
			setState(10398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(10387);
				match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(10388);
				match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(10389);
				match(BeginDollarStringConstant);
				setState(10393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DollarText) {
					{
					{
					setState(10390);
					match(DollarText);
					}
					}
					setState(10395);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(10396);
				match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(10397);
				match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Uescape_Context extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Uescape_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uescape_; }
	}

	public final Uescape_Context uescape_() throws RecognitionException {
		Uescape_Context _localctx = new Uescape_Context(_ctx, getState());
		enterRule(_localctx, 1408, RULE_uescape_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10400);
			match(UESCAPE);
			setState(10401);
			anysconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignediconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signediconst; }
	}

	public final SignediconstContext signediconst() throws RecognitionException {
		SignediconstContext _localctx = new SignediconstContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_signediconst);
		try {
			setState(10408);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
			case BinaryIntegral:
			case OctalIntegral:
			case HexadecimalIntegral:
				enterOuterAlt(_localctx, 1);
				{
				setState(10403);
				iconst();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10404);
				match(PLUS);
				setState(10405);
				iconst();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(10406);
				match(MINUS);
				setState(10407);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleidContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleid; }
	}

	public final RoleidContext roleid() throws RecognitionException {
		RoleidContext _localctx = new RoleidContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_roleid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10410);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RolespecContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rolespec; }
	}

	public final RolespecContext rolespec() throws RecognitionException {
		RolespecContext _localctx = new RolespecContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_rolespec);
		try {
			setState(10415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10412);
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10413);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(10414);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_listContext extends ParserRuleContext {
		public List<RolespecContext> rolespec() {
			return getRuleContexts(RolespecContext.class);
		}
		public RolespecContext rolespec(int i) {
			return getRuleContext(RolespecContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_list; }
	}

	public final Role_listContext role_list() throws RecognitionException {
		Role_listContext _localctx = new Role_listContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_role_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10417);
			rolespec();
			setState(10422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10418);
				match(COMMA);
				setState(10419);
				rolespec();
				}
				}
				setState(10424);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColidContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public ColidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colid; }
	}

	public final ColidContext colid() throws RecognitionException {
		ColidContext _localctx = new ColidContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_colid);
		try {
			setState(10428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10425);
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10426);
				unreserved_keyword();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case OUT_P:
			case GROUPING:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NORMALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10427);
				col_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_type_function_name);
		try {
			setState(10433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10430);
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10431);
				unreserved_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case TABLESAMPLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10432);
				type_func_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonreservedwordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword; }
	}

	public final NonreservedwordContext nonreservedword() throws RecognitionException {
		NonreservedwordContext _localctx = new NonreservedwordContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_nonreservedword);
		try {
			setState(10439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10435);
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10436);
				unreserved_keyword();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case OUT_P:
			case GROUPING:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NORMALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10437);
				col_name_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case TABLESAMPLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(10438);
				type_func_name_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_colLabel);
		try {
			setState(10447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10441);
				identifier();
				}
				break;
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case OVER:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case ORDINALITY:
			case COLUMNS:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case ERROR:
			case RETURN:
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10442);
				unreserved_keyword();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case OUT_P:
			case GROUPING:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NORMALIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10443);
				col_name_keyword();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case TABLESAMPLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(10444);
				type_func_name_keyword();
				}
				break;
			case SYSTEM_USER:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case END_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(10445);
				reserved_keyword();
				}
				break;
			case EXIT:
				enterOuterAlt(_localctx, 6);
				{
				setState(10446);
				match(EXIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BareColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bare_label_keywordContext bare_label_keyword() {
			return getRuleContext(Bare_label_keywordContext.class,0);
		}
		public BareColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bareColLabel; }
	}

	public final BareColLabelContext bareColLabel() throws RecognitionException {
		BareColLabelContext _localctx = new BareColLabelContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_bareColLabel);
		try {
			setState(10451);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case TickedIdentifier:
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(10449);
				identifier();
				}
				break;
			case JSON:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_EXISTS:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_QUERY:
			case JSON_SCALAR:
			case JSON_SERIALIZE:
			case JSON_TABLE:
			case JSON_VALUE:
			case MERGE_ACTION:
			case SYSTEM_USER:
			case ABSENT:
			case ASENSITIVE:
			case ATOMIC:
			case BREADTH:
			case COMPRESSION:
			case CONDITIONAL:
			case DEPTH:
			case EMPTY_P:
			case FINALIZE:
			case INDENT:
			case KEEP:
			case KEYS:
			case NESTED:
			case OMIT:
			case PARAMETER:
			case PATH:
			case PLAN:
			case QUOTES:
			case SCALAR:
			case SOURCE:
			case STRING_P:
			case TARGET:
			case UNCONDITIONAL:
			case PERIOD:
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case FALSE_P:
			case FOREIGN:
			case IN_P:
			case INITIALLY:
			case LATERAL_P:
			case LEADING:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case ONLY:
			case OR:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TRAILING:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case OUTER_P:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATCHED:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINVALUE:
			case MODE:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case NORMALIZED:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case ERROR:
			case RETURN:
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10450);
				bare_label_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public TerminalNode ABSENT() { return getToken(PostgreSQLParser.ABSENT, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ASENSITIVE() { return getToken(PostgreSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(PostgreSQLParser.ATOMIC, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public TerminalNode BREADTH() { return getToken(PostgreSQLParser.BREADTH, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode COMPRESSION() { return getToken(PostgreSQLParser.COMPRESSION, 0); }
		public TerminalNode CONDITIONAL() { return getToken(PostgreSQLParser.CONDITIONAL, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode DEPTH() { return getToken(PostgreSQLParser.DEPTH, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode EMPTY_P() { return getToken(PostgreSQLParser.EMPTY_P, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FINALIZE() { return getToken(PostgreSQLParser.FINALIZE, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORMAT() { return getToken(PostgreSQLParser.FORMAT, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PostgreSQLParser.INDENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode KEEP() { return getToken(PostgreSQLParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(PostgreSQLParser.KEYS, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NESTED() { return getToken(PostgreSQLParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OMIT() { return getToken(PostgreSQLParser.OMIT, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public TerminalNode PARAMETER() { return getToken(PostgreSQLParser.PARAMETER, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLParser.PATH, 0); }
		public TerminalNode PERIOD() { return getToken(PostgreSQLParser.PERIOD, 0); }
		public TerminalNode PLAN() { return getToken(PostgreSQLParser.PLAN, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode QUOTES() { return getToken(PostgreSQLParser.QUOTES, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCALAR() { return getToken(PostgreSQLParser.SCALAR, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(PostgreSQLParser.SOURCE, 0); }
		public TerminalNode SQL_P() { return getToken(PostgreSQLParser.SQL_P, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode STRING_P() { return getToken(PostgreSQLParser.STRING_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TARGET() { return getToken(PostgreSQLParser.TARGET, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(PostgreSQLParser.UNCONDITIONAL, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10453);
			_la = _input.LA(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 16777215L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & -31L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & -1L) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & -8796093022209L) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & -1L) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 360258695689404415L) != 0) || _la==RETURN || _la==FORMAT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(PostgreSQLParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(PostgreSQLParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_EXISTS() { return getToken(PostgreSQLParser.JSON_EXISTS, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(PostgreSQLParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(PostgreSQLParser.JSON_OBJECTAGG, 0); }
		public TerminalNode JSON_QUERY() { return getToken(PostgreSQLParser.JSON_QUERY, 0); }
		public TerminalNode JSON_SCALAR() { return getToken(PostgreSQLParser.JSON_SCALAR, 0); }
		public TerminalNode JSON_SERIALIZE() { return getToken(PostgreSQLParser.JSON_SERIALIZE, 0); }
		public TerminalNode JSON_TABLE() { return getToken(PostgreSQLParser.JSON_TABLE, 0); }
		public TerminalNode JSON_VALUE() { return getToken(PostgreSQLParser.JSON_VALUE, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode MERGE_ACTION() { return getToken(PostgreSQLParser.MERGE_ACTION, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_col_name_keyword);
		try {
			setState(10518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10455);
				match(BETWEEN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10456);
				match(BIGINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10457);
				match(BIT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10458);
				match(BOOLEAN_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10459);
				match(CHAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10460);
				character();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10461);
				match(COALESCE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10462);
				match(DEC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10463);
				match(DECIMAL_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10464);
				match(EXISTS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10465);
				match(EXTRACT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10466);
				match(FLOAT_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10467);
				match(GREATEST);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10468);
				match(GROUPING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10469);
				match(INOUT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10470);
				match(INT_P);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10471);
				match(INTEGER);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10472);
				match(INTERVAL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10473);
				match(JSON);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10474);
				match(JSON_ARRAY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10475);
				match(JSON_ARRAYAGG);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10476);
				match(JSON_EXISTS);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10477);
				match(JSON_OBJECT);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10478);
				match(JSON_OBJECTAGG);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10479);
				match(JSON_QUERY);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(10480);
				match(JSON_SCALAR);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(10481);
				match(JSON_SERIALIZE);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(10482);
				match(JSON_TABLE);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(10483);
				match(JSON_VALUE);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(10484);
				match(LEAST);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(10485);
				match(MERGE_ACTION);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(10486);
				match(NATIONAL);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(10487);
				match(NCHAR);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(10488);
				match(NONE);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(10489);
				match(NORMALIZE);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(10490);
				match(NULLIF);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(10491);
				match(NUMERIC);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(10492);
				match(OUT_P);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(10493);
				match(OVERLAY);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(10494);
				match(POSITION);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(10495);
				match(PRECISION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(10496);
				match(REAL);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(10497);
				match(ROW);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(10498);
				match(SETOF);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(10499);
				match(SMALLINT);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(10500);
				match(SUBSTRING);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(10501);
				match(TIME);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(10502);
				match(TIMESTAMP);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(10503);
				match(TREAT);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(10504);
				match(TRIM);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(10505);
				match(VALUES);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(10506);
				match(VARCHAR);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(10507);
				match(XMLATTRIBUTES);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(10508);
				match(XMLCONCAT);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(10509);
				match(XMLELEMENT);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(10510);
				match(XMLEXISTS);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(10511);
				match(XMLFOREST);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(10512);
				match(XMLNAMESPACES);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(10513);
				match(XMLPARSE);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(10514);
				match(XMLPI);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(10515);
				match(XMLROOT);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(10516);
				match(XMLSERIALIZE);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(10517);
				match(XMLTABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10520);
			_la = _input.LA(1);
			if ( !(((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 8126463L) != 0) || _la==TABLESAMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(PostgreSQLParser.SYSTEM_USER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10522);
			_la = _input.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & -67108863L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 274877906943L) != 0) || _la==END_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bare_label_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public TerminalNode ABSENT() { return getToken(PostgreSQLParser.ABSENT, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode ASENSITIVE() { return getToken(PostgreSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(PostgreSQLParser.ATOMIC, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode BREADTH() { return getToken(PostgreSQLParser.BREADTH, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode COMPRESSION() { return getToken(PostgreSQLParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CONDITIONAL() { return getToken(PostgreSQLParser.CONDITIONAL, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode DEPTH() { return getToken(PostgreSQLParser.DEPTH, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public TerminalNode EMPTY_P() { return getToken(PostgreSQLParser.EMPTY_P, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode FINALIZE() { return getToken(PostgreSQLParser.FINALIZE, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FORMAT() { return getToken(PostgreSQLParser.FORMAT, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PostgreSQLParser.INDENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(PostgreSQLParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(PostgreSQLParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_EXISTS() { return getToken(PostgreSQLParser.JSON_EXISTS, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(PostgreSQLParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(PostgreSQLParser.JSON_OBJECTAGG, 0); }
		public TerminalNode JSON_QUERY() { return getToken(PostgreSQLParser.JSON_QUERY, 0); }
		public TerminalNode JSON_SCALAR() { return getToken(PostgreSQLParser.JSON_SCALAR, 0); }
		public TerminalNode JSON_SERIALIZE() { return getToken(PostgreSQLParser.JSON_SERIALIZE, 0); }
		public TerminalNode JSON_TABLE() { return getToken(PostgreSQLParser.JSON_TABLE, 0); }
		public TerminalNode JSON_VALUE() { return getToken(PostgreSQLParser.JSON_VALUE, 0); }
		public TerminalNode KEEP() { return getToken(PostgreSQLParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(PostgreSQLParser.KEYS, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public TerminalNode MERGE_ACTION() { return getToken(PostgreSQLParser.MERGE_ACTION, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NESTED() { return getToken(PostgreSQLParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OMIT() { return getToken(PostgreSQLParser.OMIT, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public TerminalNode PARAMETER() { return getToken(PostgreSQLParser.PARAMETER, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLParser.PATH, 0); }
		public TerminalNode PERIOD() { return getToken(PostgreSQLParser.PERIOD, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode PLAN() { return getToken(PostgreSQLParser.PLAN, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode QUOTES() { return getToken(PostgreSQLParser.QUOTES, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCALAR() { return getToken(PostgreSQLParser.SCALAR, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(PostgreSQLParser.SOURCE, 0); }
		public TerminalNode SQL_P() { return getToken(PostgreSQLParser.SQL_P, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode STRING_P() { return getToken(PostgreSQLParser.STRING_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(PostgreSQLParser.SYSTEM_USER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TARGET() { return getToken(PostgreSQLParser.TARGET, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(PostgreSQLParser.UNCONDITIONAL, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Bare_label_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bare_label_keyword; }
	}

	public final Bare_label_keywordContext bare_label_keyword() throws RecognitionException {
		Bare_label_keywordContext _localctx = new Bare_label_keywordContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_bare_label_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10524);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -1073741824L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -2477318281427420681L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -55968850065L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -4194305L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -309237645313L) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & -68719480833L) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & -288230789576916993L) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & -16257L) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & 1100048596939L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Any_identifierContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_any_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10526);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PostgreSQLParser.Identifier, 0); }
		public Uescape_Context uescape_() {
			return getRuleContext(Uescape_Context.class,0);
		}
		public TerminalNode QuotedIdentifier() { return getToken(PostgreSQLParser.QuotedIdentifier, 0); }
		public TerminalNode TickedIdentifier() { return getToken(PostgreSQLParser.TickedIdentifier, 0); }
		public TerminalNode UnicodeQuotedIdentifier() { return getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		public TerminalNode PLSQLVARIABLENAME() { return getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_identifier);
		try {
			setState(10536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(10528);
				match(Identifier);
				setState(10530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
				case 1:
					{
					setState(10529);
					uescape_();
					}
					break;
				}
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(10532);
				match(QuotedIdentifier);
				}
				break;
			case TickedIdentifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(10533);
				match(TickedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				enterOuterAlt(_localctx, 4);
				{
				setState(10534);
				match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 5);
				{
				setState(10535);
				match(PLSQLVARIABLENAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 582:
			return a_expr_qual_sempred((A_expr_qualContext)_localctx, predIndex);
		case 602:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		case 666:
			return json_arguments_sempred((Json_argumentsContext)_localctx, predIndex);
		case 679:
			return json_name_and_value_list_sempred((Json_name_and_value_listContext)_localctx, predIndex);
		case 683:
			return json_value_expr_list_sempred((Json_value_expr_listContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean a_expr_qual_sempred(A_expr_qualContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return this.OnlyAcceptableOps();
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 7);
		case 3:
			return precpred(_ctx, 6);
		case 4:
			return precpred(_ctx, 5);
		case 5:
			return precpred(_ctx, 4);
		case 6:
			return precpred(_ctx, 10);
		case 7:
			return precpred(_ctx, 2);
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean json_arguments_sempred(Json_argumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean json_name_and_value_list_sempred(Json_name_and_value_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean json_value_expr_list_sempred(Json_value_expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u025b\u292b\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0002\u021f\u0007\u021f\u0002\u0220\u0007\u0220\u0002\u0221\u0007"+
		"\u0221\u0002\u0222\u0007\u0222\u0002\u0223\u0007\u0223\u0002\u0224\u0007"+
		"\u0224\u0002\u0225\u0007\u0225\u0002\u0226\u0007\u0226\u0002\u0227\u0007"+
		"\u0227\u0002\u0228\u0007\u0228\u0002\u0229\u0007\u0229\u0002\u022a\u0007"+
		"\u022a\u0002\u022b\u0007\u022b\u0002\u022c\u0007\u022c\u0002\u022d\u0007"+
		"\u022d\u0002\u022e\u0007\u022e\u0002\u022f\u0007\u022f\u0002\u0230\u0007"+
		"\u0230\u0002\u0231\u0007\u0231\u0002\u0232\u0007\u0232\u0002\u0233\u0007"+
		"\u0233\u0002\u0234\u0007\u0234\u0002\u0235\u0007\u0235\u0002\u0236\u0007"+
		"\u0236\u0002\u0237\u0007\u0237\u0002\u0238\u0007\u0238\u0002\u0239\u0007"+
		"\u0239\u0002\u023a\u0007\u023a\u0002\u023b\u0007\u023b\u0002\u023c\u0007"+
		"\u023c\u0002\u023d\u0007\u023d\u0002\u023e\u0007\u023e\u0002\u023f\u0007"+
		"\u023f\u0002\u0240\u0007\u0240\u0002\u0241\u0007\u0241\u0002\u0242\u0007"+
		"\u0242\u0002\u0243\u0007\u0243\u0002\u0244\u0007\u0244\u0002\u0245\u0007"+
		"\u0245\u0002\u0246\u0007\u0246\u0002\u0247\u0007\u0247\u0002\u0248\u0007"+
		"\u0248\u0002\u0249\u0007\u0249\u0002\u024a\u0007\u024a\u0002\u024b\u0007"+
		"\u024b\u0002\u024c\u0007\u024c\u0002\u024d\u0007\u024d\u0002\u024e\u0007"+
		"\u024e\u0002\u024f\u0007\u024f\u0002\u0250\u0007\u0250\u0002\u0251\u0007"+
		"\u0251\u0002\u0252\u0007\u0252\u0002\u0253\u0007\u0253\u0002\u0254\u0007"+
		"\u0254\u0002\u0255\u0007\u0255\u0002\u0256\u0007\u0256\u0002\u0257\u0007"+
		"\u0257\u0002\u0258\u0007\u0258\u0002\u0259\u0007\u0259\u0002\u025a\u0007"+
		"\u025a\u0002\u025b\u0007\u025b\u0002\u025c\u0007\u025c\u0002\u025d\u0007"+
		"\u025d\u0002\u025e\u0007\u025e\u0002\u025f\u0007\u025f\u0002\u0260\u0007"+
		"\u0260\u0002\u0261\u0007\u0261\u0002\u0262\u0007\u0262\u0002\u0263\u0007"+
		"\u0263\u0002\u0264\u0007\u0264\u0002\u0265\u0007\u0265\u0002\u0266\u0007"+
		"\u0266\u0002\u0267\u0007\u0267\u0002\u0268\u0007\u0268\u0002\u0269\u0007"+
		"\u0269\u0002\u026a\u0007\u026a\u0002\u026b\u0007\u026b\u0002\u026c\u0007"+
		"\u026c\u0002\u026d\u0007\u026d\u0002\u026e\u0007\u026e\u0002\u026f\u0007"+
		"\u026f\u0002\u0270\u0007\u0270\u0002\u0271\u0007\u0271\u0002\u0272\u0007"+
		"\u0272\u0002\u0273\u0007\u0273\u0002\u0274\u0007\u0274\u0002\u0275\u0007"+
		"\u0275\u0002\u0276\u0007\u0276\u0002\u0277\u0007\u0277\u0002\u0278\u0007"+
		"\u0278\u0002\u0279\u0007\u0279\u0002\u027a\u0007\u027a\u0002\u027b\u0007"+
		"\u027b\u0002\u027c\u0007\u027c\u0002\u027d\u0007\u027d\u0002\u027e\u0007"+
		"\u027e\u0002\u027f\u0007\u027f\u0002\u0280\u0007\u0280\u0002\u0281\u0007"+
		"\u0281\u0002\u0282\u0007\u0282\u0002\u0283\u0007\u0283\u0002\u0284\u0007"+
		"\u0284\u0002\u0285\u0007\u0285\u0002\u0286\u0007\u0286\u0002\u0287\u0007"+
		"\u0287\u0002\u0288\u0007\u0288\u0002\u0289\u0007\u0289\u0002\u028a\u0007"+
		"\u028a\u0002\u028b\u0007\u028b\u0002\u028c\u0007\u028c\u0002\u028d\u0007"+
		"\u028d\u0002\u028e\u0007\u028e\u0002\u028f\u0007\u028f\u0002\u0290\u0007"+
		"\u0290\u0002\u0291\u0007\u0291\u0002\u0292\u0007\u0292\u0002\u0293\u0007"+
		"\u0293\u0002\u0294\u0007\u0294\u0002\u0295\u0007\u0295\u0002\u0296\u0007"+
		"\u0296\u0002\u0297\u0007\u0297\u0002\u0298\u0007\u0298\u0002\u0299\u0007"+
		"\u0299\u0002\u029a\u0007\u029a\u0002\u029b\u0007\u029b\u0002\u029c\u0007"+
		"\u029c\u0002\u029d\u0007\u029d\u0002\u029e\u0007\u029e\u0002\u029f\u0007"+
		"\u029f\u0002\u02a0\u0007\u02a0\u0002\u02a1\u0007\u02a1\u0002\u02a2\u0007"+
		"\u02a2\u0002\u02a3\u0007\u02a3\u0002\u02a4\u0007\u02a4\u0002\u02a5\u0007"+
		"\u02a5\u0002\u02a6\u0007\u02a6\u0002\u02a7\u0007\u02a7\u0002\u02a8\u0007"+
		"\u02a8\u0002\u02a9\u0007\u02a9\u0002\u02aa\u0007\u02aa\u0002\u02ab\u0007"+
		"\u02ab\u0002\u02ac\u0007\u02ac\u0002\u02ad\u0007\u02ad\u0002\u02ae\u0007"+
		"\u02ae\u0002\u02af\u0007\u02af\u0002\u02b0\u0007\u02b0\u0002\u02b1\u0007"+
		"\u02b1\u0002\u02b2\u0007\u02b2\u0002\u02b3\u0007\u02b3\u0002\u02b4\u0007"+
		"\u02b4\u0002\u02b5\u0007\u02b5\u0002\u02b6\u0007\u02b6\u0002\u02b7\u0007"+
		"\u02b7\u0002\u02b8\u0007\u02b8\u0002\u02b9\u0007\u02b9\u0002\u02ba\u0007"+
		"\u02ba\u0002\u02bb\u0007\u02bb\u0002\u02bc\u0007\u02bc\u0002\u02bd\u0007"+
		"\u02bd\u0002\u02be\u0007\u02be\u0002\u02bf\u0007\u02bf\u0002\u02c0\u0007"+
		"\u02c0\u0002\u02c1\u0007\u02c1\u0002\u02c2\u0007\u02c2\u0002\u02c3\u0007"+
		"\u02c3\u0002\u02c4\u0007\u02c4\u0002\u02c5\u0007\u02c5\u0002\u02c6\u0007"+
		"\u02c6\u0002\u02c7\u0007\u02c7\u0002\u02c8\u0007\u02c8\u0002\u02c9\u0007"+
		"\u02c9\u0002\u02ca\u0007\u02ca\u0002\u02cb\u0007\u02cb\u0002\u02cc\u0007"+
		"\u02cc\u0002\u02cd\u0007\u02cd\u0002\u02ce\u0007\u02ce\u0002\u02cf\u0007"+
		"\u02cf\u0002\u02d0\u0007\u02d0\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0001\u0001\u0001\u0001\u0002\u0003\u0002\u05a9\b\u0002\u0001\u0002\u0001"+
		"\u0002\u0003\u0002\u05ad\b\u0002\u0005\u0002\u05af\b\u0002\n\u0002\f\u0002"+
		"\u05b2\t\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003"+
		"\u0630\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0003\u0005\u0639\b\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0006\u0001\u0006\u0001\u0007\u0005\u0007\u0640\b\u0007\n\u0007"+
		"\f\u0007\u0643\t\u0007\u0001\b\u0005\b\u0646\b\b\n\b\f\b\u0649\t\b\u0001"+
		"\t\u0001\t\u0001\t\u0003\t\u064e\b\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003"+
		"\t\u065d\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0003\n\u0669\b\n\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0003\u000b\u066f\b\u000b\u0001\u000b\u0001\u000b\u0001\f"+
		"\u0001\f\u0001\f\u0001\f\u0003\f\u0677\b\f\u0001\f\u0001\f\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0682"+
		"\b\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0686\b\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f"+
		"\u068e\b\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0003\u0010\u0696\b\u0010\u0001\u0010\u0001\u0010\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u06a8\b\u0013\u0001\u0013\u0003\u0013\u06ab\b"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u06b0\b\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0005\u0015\u06b7"+
		"\b\u0015\n\u0015\f\u0015\u06ba\t\u0015\u0001\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u06c2\b\u0016\u0001\u0017"+
		"\u0001\u0017\u0003\u0017\u06c6\b\u0017\u0001\u0017\u0001\u0017\u0001\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018"+
		"\u0001\u0018\u0003\u0018\u06d2\b\u0018\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0003\u0019\u06d8\b\u0019\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a"+
		"\u06e8\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0003\u001a\u06f5\b\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0005\u001b"+
		"\u06fa\b\u001b\n\u001b\f\u001b\u06fd\t\u001b\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0005\u001c\u0702\b\u001c\n\u001c\f\u001c\u0705\t\u001c\u0001\u001d"+
		"\u0001\u001d\u0003\u001d\u0709\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0003\u001e\u0710\b\u001e\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0003\u001f\u0716\b\u001f\u0001 \u0001 \u0001"+
		" \u0001 \u0001 \u0003 \u071d\b \u0001 \u0001 \u0001 \u0001 \u0001 \u0001"+
		" \u0001 \u0001 \u0001 \u0003 \u0728\b \u0001!\u0001!\u0003!\u072c\b!\u0001"+
		"\"\u0001\"\u0003\"\u0730\b\"\u0001#\u0001#\u0001#\u0001$\u0001$\u0001"+
		"$\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u073d\b$\u0001%\u0001%\u0003"+
		"%\u0741\b%\u0001&\u0001&\u0001&\u0003&\u0746\b&\u0001\'\u0001\'\u0001"+
		"\'\u0003\'\u074b\b\'\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001("+
		"\u0001(\u0001(\u0001(\u0003(\u0757\b(\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0001*\u0001*\u0003*\u0760\b*\u0001+\u0001+\u0001,\u0001,\u0001-\u0001"+
		"-\u0001-\u0001.\u0001.\u0001.\u0001.\u0003.\u076d\b.\u0001.\u0001.\u0001"+
		".\u0003.\u0772\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0003.\u077d\b.\u0001.\u0001.\u0001.\u0001.\u0003.\u0783\b.\u0001"+
		".\u0001.\u0001.\u0001.\u0003.\u0789\b.\u0001.\u0001.\u0001.\u0003.\u078e"+
		"\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003"+
		".\u0799\b.\u0001.\u0001.\u0001.\u0001.\u0003.\u079f\b.\u0001.\u0001.\u0001"+
		".\u0001.\u0003.\u07a5\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0003.\u07ae\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0003.\u07b8\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u07c7\b.\u0001.\u0001.\u0001"+
		".\u0001.\u0003.\u07cd\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u07d4"+
		"\b.\u0001.\u0001.\u0001.\u0003.\u07d9\b.\u0001/\u0001/\u0001/\u0005/\u07de"+
		"\b/\n/\f/\u07e1\t/\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00030\u07eb\b0\u00011\u00011\u00011\u00011\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00032\u0803\b2\u00012\u00012\u00012\u0001"+
		"2\u00012\u00032\u080a\b2\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00032\u0813\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0003"+
		"2\u081c\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u0824\b2\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u082e\b2\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u0837\b2\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00032\u0840\b2\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00032\u0848\b2\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00032\u0850\b2\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00032\u0859\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0003"+
		"2\u0862\b2\u00012\u00012\u00032\u0866\b2\u00012\u00012\u00012\u00012\u0001"+
		"2\u00032\u086d\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u0875"+
		"\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u087f"+
		"\b2\u00012\u00012\u00012\u00012\u00032\u0885\b2\u00012\u00012\u00032\u0889"+
		"\b2\u00012\u00012\u00032\u088d\b2\u00012\u00012\u00032\u0891\b2\u0001"+
		"2\u00012\u00032\u0895\b2\u00012\u00012\u00012\u00032\u089a\b2\u00012\u0003"+
		"2\u089d\b2\u00012\u00012\u00032\u08a1\b2\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00032\u08b6\b2\u00012\u00012\u00012\u0001"+
		"2\u00032\u08bc\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00012\u00032\u091b\b2\u00013\u00013\u0001"+
		"3\u00013\u00013\u00033\u0922\b3\u00014\u00014\u00015\u00015\u00015\u0001"+
		"6\u00016\u00016\u00017\u00017\u00017\u00017\u00017\u00017\u00037\u0932"+
		"\b7\u00018\u00018\u00018\u00018\u00019\u00019\u00019\u0001:\u0001:\u0001"+
		":\u0005:\u093e\b:\n:\f:\u0941\t:\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"+
		";\u0001;\u0003;\u094a\b;\u0003;\u094c\b;\u0001<\u0004<\u094f\b<\u000b"+
		"<\f<\u0950\u0001=\u0001=\u0003=\u0955\b=\u0001=\u0003=\u0958\b=\u0001"+
		"=\u0001=\u0001=\u0001=\u0003=\u095e\b=\u0003=\u0960\b=\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0003>\u097c\b>\u0001?\u0001?\u0001?\u0001@\u0001"+
		"@\u0001@\u0005@\u0984\b@\n@\f@\u0987\t@\u0001A\u0001A\u0001A\u0001A\u0001"+
		"A\u0001B\u0001B\u0001B\u0005B\u0991\bB\nB\fB\u0994\tB\u0001C\u0001C\u0001"+
		"C\u0001C\u0003C\u099a\bC\u0001C\u0001C\u0001C\u0001C\u0003C\u09a0\bC\u0001"+
		"C\u0001C\u0003C\u09a4\bC\u0001C\u0001C\u0001C\u0001C\u0003C\u09aa\bC\u0001"+
		"C\u0001C\u0001C\u0003C\u09af\bC\u0001C\u0003C\u09b2\bC\u0003C\u09b4\b"+
		"C\u0001D\u0001D\u0001D\u0003D\u09b9\bD\u0001E\u0001E\u0003E\u09bd\bE\u0001"+
		"E\u0001E\u0003E\u09c1\bE\u0001E\u0001E\u0003E\u09c5\bE\u0001E\u0001E\u0003"+
		"E\u09c9\bE\u0001E\u0003E\u09cc\bE\u0001E\u0001E\u0003E\u09d0\bE\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0003E\u09d8\bE\u0001E\u0001E\u0003"+
		"E\u09dc\bE\u0001E\u0001E\u0003E\u09e0\bE\u0001F\u0001F\u0001G\u0001G\u0001"+
		"H\u0001H\u0001H\u0003H\u09e9\bH\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u09f0\bI\u0001J\u0005J\u09f3\bJ\nJ\fJ\u09f6\tJ\u0001K\u0001K\u0001K"+
		"\u0001K\u0003K\u09fc\bK\u0001K\u0001K\u0001K\u0003K\u0a01\bK\u0001K\u0001"+
		"K\u0001K\u0001K\u0001K\u0003K\u0a08\bK\u0001K\u0001K\u0001K\u0003K\u0a0d"+
		"\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001"+
		"K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a1f\bK\u0001L\u0001"+
		"L\u0001M\u0003M\u0a24\bM\u0001M\u0001M\u0001M\u0001N\u0001N\u0001O\u0001"+
		"O\u0001O\u0005O\u0a2e\bO\nO\fO\u0a31\tO\u0001P\u0001P\u0003P\u0a35\bP"+
		"\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u0a3e\bQ\u0001"+
		"R\u0001R\u0001R\u0005R\u0a43\bR\nR\fR\u0a46\tR\u0001S\u0001S\u0001T\u0001"+
		"T\u0003T\u0a4c\bT\u0001T\u0001T\u0001T\u0001T\u0003T\u0a52\bT\u0001T\u0001"+
		"T\u0001T\u0003T\u0a57\bT\u0001T\u0001T\u0003T\u0a5b\bT\u0001T\u0003T\u0a5e"+
		"\bT\u0001T\u0003T\u0a61\bT\u0001T\u0003T\u0a64\bT\u0001T\u0003T\u0a67"+
		"\bT\u0001T\u0003T\u0a6a\bT\u0001T\u0001T\u0001T\u0003T\u0a6f\bT\u0001"+
		"T\u0003T\u0a72\bT\u0001T\u0003T\u0a75\bT\u0001T\u0003T\u0a78\bT\u0001"+
		"T\u0003T\u0a7b\bT\u0001T\u0003T\u0a7e\bT\u0001T\u0001T\u0001T\u0001T\u0003"+
		"T\u0a84\bT\u0001T\u0001T\u0003T\u0a88\bT\u0001T\u0003T\u0a8b\bT\u0001"+
		"T\u0003T\u0a8e\bT\u0001T\u0003T\u0a91\bT\u0001T\u0003T\u0a94\bT\u0003"+
		"T\u0a96\bT\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0a9f"+
		"\bU\u0001V\u0001V\u0001W\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0005"+
		"X\u0aaa\bX\nX\fX\u0aad\tX\u0001Y\u0001Y\u0001Y\u0005Y\u0ab2\bY\nY\fY\u0ab5"+
		"\tY\u0001Z\u0001Z\u0001Z\u0003Z\u0aba\bZ\u0001[\u0001[\u0003[\u0abe\b"+
		"[\u0001\\\u0001\\\u0001\\\u0003\\\u0ac3\b\\\u0001\\\u0001\\\u0001]\u0001"+
		"]\u0001]\u0003]\u0aca\b]\u0001]\u0001]\u0001^\u0005^\u0acf\b^\n^\f^\u0ad2"+
		"\t^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0003_\u0adc"+
		"\b_\u0001`\u0001`\u0001`\u0001`\u0001`\u0003`\u0ae3\b`\u0001`\u0003`\u0ae6"+
		"\b`\u0001`\u0001`\u0001`\u0003`\u0aeb\b`\u0001`\u0003`\u0aee\b`\u0001"+
		"`\u0001`\u0001`\u0001`\u0001`\u0003`\u0af5\b`\u0001`\u0001`\u0001`\u0001"+
		"`\u0001`\u0001`\u0001`\u0003`\u0afe\b`\u0001`\u0001`\u0001`\u0001`\u0001"+
		"`\u0003`\u0b05\b`\u0001`\u0001`\u0001`\u0003`\u0b0a\b`\u0001`\u0003`\u0b0d"+
		"\b`\u0001`\u0003`\u0b10\b`\u0003`\u0b12\b`\u0001a\u0001a\u0001a\u0003"+
		"a\u0b17\ba\u0001b\u0001b\u0001b\u0001b\u0001b\u0003b\u0b1e\bb\u0001c\u0001"+
		"c\u0001c\u0001c\u0001d\u0001d\u0005d\u0b26\bd\nd\fd\u0b29\td\u0001e\u0001"+
		"e\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u0b32\bf\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0b3f"+
		"\bg\u0001g\u0003g\u0b42\bg\u0001g\u0003g\u0b45\bg\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0003g\u0b4c\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0003g\u0b54\bg\u0001g\u0003g\u0b57\bg\u0001g\u0003g\u0b5a\bg\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0003g\u0b61\bg\u0001g\u0001g\u0003g\u0b65"+
		"\bg\u0001g\u0001g\u0001g\u0001g\u0003g\u0b6b\bg\u0001g\u0003g\u0b6e\b"+
		"g\u0001g\u0003g\u0b71\bg\u0001g\u0003g\u0b74\bg\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0b80\bg\u0001g\u0003"+
		"g\u0b83\bg\u0001g\u0003g\u0b86\bg\u0001g\u0001g\u0003g\u0b8a\bg\u0001"+
		"h\u0001h\u0001h\u0001i\u0001i\u0001i\u0001i\u0001j\u0001j\u0001j\u0005"+
		"j\u0b96\bj\nj\fj\u0b99\tj\u0001k\u0001k\u0001l\u0001l\u0001l\u0001l\u0001"+
		"l\u0001m\u0001m\u0001m\u0001n\u0001n\u0001n\u0005n\u0ba8\bn\nn\fn\u0bab"+
		"\tn\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u0bb5"+
		"\bo\u0001p\u0001p\u0001p\u0001p\u0001p\u0001q\u0001q\u0001q\u0001q\u0001"+
		"q\u0001q\u0001q\u0001q\u0003q\u0bc4\bq\u0001r\u0001r\u0001r\u0001r\u0001"+
		"s\u0001s\u0001s\u0001s\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0003"+
		"t\u0bd4\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0001v\u0001v\u0001w\u0001"+
		"w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001x\u0001x\u0001x\u0005x\u0be7"+
		"\bx\nx\fx\u0bea\tx\u0001y\u0001y\u0003y\u0bee\by\u0001y\u0003y\u0bf1\b"+
		"y\u0001y\u0001y\u0003y\u0bf5\by\u0001y\u0003y\u0bf8\by\u0001y\u0001y\u0001"+
		"y\u0001y\u0003y\u0bfe\by\u0001y\u0003y\u0c01\by\u0003y\u0c03\by\u0001"+
		"z\u0001z\u0001z\u0001{\u0001{\u0001{\u0001{\u0003{\u0c0c\b{\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0003|\u0c15\b|\u0001}\u0001}\u0001"+
		"}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0003\u0080\u0c28\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0c2c\b"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u0c37\b\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0082\u0001"+
		"\u0082\u0003\u0082\u0c40\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0003\u0082\u0c46\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0003\u0082\u0c4c\b\u0082\u0001\u0083\u0001\u0083\u0003\u0083\u0c50"+
		"\b\u0083\u0001\u0083\u0003\u0083\u0c53\b\u0083\u0001\u0083\u0003\u0083"+
		"\u0c56\b\u0083\u0001\u0083\u0003\u0083\u0c59\b\u0083\u0001\u0083\u0003"+
		"\u0083\u0c5c\b\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003"+
		"\u0084\u0c62\b\u0084\u0001\u0085\u0001\u0085\u0003\u0085\u0c66\b\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085"+
		"\u0c6d\b\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085"+
		"\u0c73\b\u0085\u0001\u0086\u0001\u0086\u0003\u0086\u0c77\b\u0086\u0001"+
		"\u0086\u0003\u0086\u0c7a\b\u0086\u0001\u0086\u0003\u0086\u0c7d\b\u0086"+
		"\u0001\u0086\u0003\u0086\u0c80\b\u0086\u0001\u0087\u0001\u0087\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0c88\b\u0088\u0001\u0088"+
		"\u0001\u0088\u0003\u0088\u0c8c\b\u0088\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0c90\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0c96\b\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0c9a\b\u0089\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0ca0\b\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0004\u008d\u0cac\b\u008d\u000b"+
		"\u008d\f\u008d\u0cad\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0cb7\b\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0003\u008e\u0cc8\b\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0003\u008e\u0ccd\b\u008e\u0001\u008e\u0003\u008e\u0cd0\b\u008e"+
		"\u0003\u008e\u0cd2\b\u008e\u0001\u008f\u0001\u008f\u0001\u0090\u0001\u0090"+
		"\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0cdc\b\u0090"+
		"\u0001\u0091\u0001\u0091\u0001\u0091\u0005\u0091\u0ce1\b\u0091\n\u0091"+
		"\f\u0091\u0ce4\t\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u0ce8\b\u0092"+
		"\u0001\u0092\u0003\u0092\u0ceb\b\u0092\u0001\u0092\u0003\u0092\u0cee\b"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003"+
		"\u0092\u0cf5\b\u0092\u0001\u0092\u0003\u0092\u0cf8\b\u0092\u0003\u0092"+
		"\u0cfa\b\u0092\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0003\u0094"+
		"\u0d00\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0096\u0001\u0096"+
		"\u0001\u0096\u0001\u0096\u0003\u0096\u0d09\b\u0096\u0001\u0097\u0001\u0097"+
		"\u0001\u0098\u0001\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0003\u0099\u0d13\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099"+
		"\u0d18\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0003\u009b\u0d21\b\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0003\u009c"+
		"\u0d2a\b\u009c\u0001\u009c\u0001\u009c\u0003\u009c\u0d2e\b\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009d\u0005\u009d\u0d33\b\u009d\n\u009d\f\u009d"+
		"\u0d36\t\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e"+
		"\u0001\u009e\u0001\u009e\u0003\u009e\u0d3f\b\u009e\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u00a0\u0005\u00a0"+
		"\u0d48\b\u00a0\n\u00a0\f\u00a0\u0d4b\t\u00a0\u0001\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2\u0db8\b\u00a2\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0dc0"+
		"\b\u00a3\u0001\u00a3\u0003\u00a3\u0dc3\b\u00a3\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0003\u00a4\u0dcd\b\u00a4\u0001\u00a5\u0004\u00a5\u0dd0\b\u00a5\u000b"+
		"\u00a5\f\u00a5\u0dd1\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7\u0ddc\b\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7\u0de7\b\u00a7\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0005\u00a9\u0df1\b\u00a9\n\u00a9\f\u00a9\u0df4\t\u00a9\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0005\u00ab\u0dfe\b\u00ab\n\u00ab\f\u00ab\u0e01\t\u00ab\u0001"+
		"\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u0e0a\b\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0003\u00b0\u0e17\b\u00b0\u0001\u00b0\u0003\u00b0\u0e1a"+
		"\b\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003"+
		"\u00b0\u0e21\b\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0e2a\b\u00b0\u0001\u00b0\u0003"+
		"\u00b0\u0e2d\b\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0003\u00b0\u0e34\b\u00b0\u0003\u00b0\u0e36\b\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2"+
		"\u0e3e\b\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0e48\b\u00b4\u0003\u00b4"+
		"\u0e4a\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0003\u00b5\u0e52\b\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5"+
		"\u0e56\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0e5b\b"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0e66\b\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0003\u00b5\u0e6a\b\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0003\u00b5\u0e6f\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0e79"+
		"\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0e7f"+
		"\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003"+
		"\u00b5\u0e8c\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003"+
		"\u00b5\u0e92\b\u00b5\u0003\u00b5\u0e94\b\u00b5\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6\u0e9b\b\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6"+
		"\u0ea3\b\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u0ea8\b"+
		"\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0003\u00b9\u0eb7\b\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9\u0ec4\b\u00b9\u0003\u00b9\u0ec6"+
		"\b\u00b9\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0eca\b\u00ba\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb"+
		"\u0ede\b\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0eef\b\u00bd"+
		"\u0001\u00bd\u0003\u00bd\u0ef2\b\u00bd\u0001\u00bd\u0003\u00bd\u0ef5\b"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u0ef8\b\u00bd\u0001\u00bd\u0003\u00bd\u0efb"+
		"\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0003\u00be\u0f03\b\u00be\u0001\u00be\u0003\u00be\u0f06\b\u00be"+
		"\u0001\u00be\u0003\u00be\u0f09\b\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c4"+
		"\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8"+
		"\u0f37\b\u00c8\u0001\u00c8\u0003\u00c8\u0f3a\b\u00c8\u0001\u00c8\u0003"+
		"\u00c8\u0f3d\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"+
		"\u00c8\u0f4f\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0003\u00c8\u0f56\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0f5f\b\u00c8\u0001"+
		"\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u0f65\b\u00c9\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0005\u00ca\u0f6a\b\u00ca\n\u00ca\f\u00ca"+
		"\u0f6d\t\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cb\u0003\u00cb\u0f76\b\u00cb\u0001\u00cc\u0001\u00cc"+
		"\u0001\u00cc\u0001\u00cd\u0004\u00cd\u0f7c\b\u00cd\u000b\u00cd\f\u00cd"+
		"\u0f7d\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u0f83\b\u00ce\u0001"+
		"\u00ce\u0001\u00ce\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d1\u0001\u00d1\u0001\u00d2\u0001\u00d2\u0003\u00d2\u0f8f\b\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d7\u0001\u00d7\u0003\u00d7\u0fa0\b\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0005\u00d7\u0fa4\b\u00d7\n\u00d7\f\u00d7\u0fa7\t\u00d7\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u0fad\b\u00d8\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00da\u0005\u00da\u0fb3\b\u00da\n\u00da"+
		"\f\u00da\u0fb6\t\u00da\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0003\u00db\u0fc3\b\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc"+
		"\u0fdf\b\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0005\u00dd\u0fe4\b"+
		"\u00dd\n\u00dd\f\u00dd\u0fe7\t\u00dd\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0005\u00df\u0ff2\b\u00df\n\u00df\f\u00df\u0ff5\t\u00df\u0001\u00e0\u0001"+
		"\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1003"+
		"\b\u00e1\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e3\u0001\u00e3\u0003"+
		"\u00e3\u1010\b\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u1019\b\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u1032\b\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u103d\b\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u1080\b\u00e3\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0005\u00e5\u1089\b\u00e5\n\u00e5\f\u00e5\u108c\t\u00e5\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0003\u00e6\u1091\b\u00e6\u0001\u00e7\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u1099\b\u00e7"+
		"\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0005\u00e9\u10a2\b\u00e9\n\u00e9\f\u00e9\u10a5\t\u00e9\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0005\u00ec\u10b0\b\u00ec\n\u00ec\f\u00ec"+
		"\u10b3\t\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0003\u00ed\u10bb\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u10c5\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed"+
		"\u10d1\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0003\u00ed\u10e0\b\u00ed\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0003\u00ef\u10eb\b\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u10f3\b\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0005\u00f0"+
		"\u10fb\b\u00f0\n\u00f0\f\u00f0\u10fe\t\u00f0\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0003\u00f1\u1104\b\u00f1\u0001\u00f1\u0003\u00f1\u1107"+
		"\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u110d"+
		"\b\u00f1\u0001\u00f1\u0003\u00f1\u1110\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1"+
		"\u111f\b\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0003\u00f4\u112c\b\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7"+
		"\u1149\b\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0005\u00f8\u114e\b"+
		"\u00f8\n\u00f8\f\u00f8\u1151\t\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u115f\b\u00f9\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa"+
		"\u0003\u00fa\u1168\b\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa"+
		"\u1173\b\u00fa\u0003\u00fa\u1175\b\u00fa\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u117e"+
		"\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u1189\b\u00fb\u0003"+
		"\u00fb\u118b\b\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0003\u00fc\u1192\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001"+
		"\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u11a1\b\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u11a7\b\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003"+
		"\u00fe\u11af\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003"+
		"\u00fe\u11b5\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0003\u00fe\u11bd\b\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003"+
		"\u00fe\u11c7\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003"+
		"\u00fe\u11cd\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0003\u00fe\u11d5\b\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0003\u00fe\u11db\b\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u11e3\b\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u11ea"+
		"\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0003\u00fe\u11f3\b\u00fe\u0003\u00fe\u11f5\b\u00fe"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff"+
		"\u120e\b\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0003\u0100\u1215\b\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0003\u0101"+
		"\u1220\b\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0003\u0101"+
		"\u1226\b\u0101\u0001\u0102\u0001\u0102\u0001\u0103\u0001\u0103\u0001\u0103"+
		"\u0005\u0103\u122d\b\u0103\n\u0103\f\u0103\u1230\t\u0103\u0001\u0104\u0001"+
		"\u0104\u0003\u0104\u1234\b\u0104\u0001\u0105\u0001\u0105\u0004\u0105\u1238"+
		"\b\u0105\u000b\u0105\f\u0105\u1239\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0005\u0106\u123f\b\u0106\n\u0106\f\u0106\u1242\t\u0106\u0001\u0107\u0001"+
		"\u0107\u0003\u0107\u1246\b\u0107\u0001\u0107\u0001\u0107\u0003\u0107\u124a"+
		"\b\u0107\u0001\u0107\u0003\u0107\u124d\b\u0107\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0003\u0108\u1253\b\u0108\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0003\u0109\u12e8\b\u0109\u0001\u010a\u0001\u010a\u0003\u010a"+
		"\u12ec\b\u010a\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u12f1\b"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u12fc\b\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u1307\b\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0003\u010b\u1312\b\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0003\u010b\u131d\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003"+
		"\u010b\u1328\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u1333"+
		"\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u133e\b\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u134a\b\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u1355\b\u010b\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u135d"+
		"\b\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010d\u0001\u010d\u0003"+
		"\u010d\u1364\b\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0001\u010e\u0003"+
		"\u010e\u136a\b\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u010f\u0001\u010f\u0003\u010f\u1372\b\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u010f\u0003\u010f\u1377\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003"+
		"\u010f\u137c\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u1381"+
		"\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u1387"+
		"\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003"+
		"\u010f\u138e\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003"+
		"\u010f\u1394\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003"+
		"\u010f\u139a\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u139f"+
		"\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u13a5"+
		"\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003"+
		"\u010f\u13ac\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u13b1"+
		"\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u13b7"+
		"\b\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0003"+
		"\u010f\u13be\b\u010f\u0001\u010f\u0003\u010f\u13c1\b\u010f\u0001\u0110"+
		"\u0001\u0110\u0001\u0111\u0001\u0111\u0001\u0112\u0001\u0112\u0001\u0112"+
		"\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0003\u0112\u13ce\b\u0112"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0001\u0113\u0003\u0113\u13d7\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0001\u0113\u0003\u0113\u13e3\b\u0113\u0003\u0113\u13e5\b\u0113\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0003\u0114\u13f6\b\u0114\u0001\u0115\u0001"+
		"\u0115\u0001\u0115\u0005\u0115\u13fb\b\u0115\n\u0115\f\u0115\u13fe\t\u0115"+
		"\u0001\u0116\u0001\u0116\u0003\u0116\u1402\b\u0116\u0001\u0116\u0001\u0116"+
		"\u0003\u0116\u1406\b\u0116\u0001\u0116\u0001\u0116\u0003\u0116\u140a\b"+
		"\u0116\u0001\u0116\u0001\u0116\u0003\u0116\u140e\b\u0116\u0003\u0116\u1410"+
		"\b\u0116\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0003\u0117\u144c"+
		"\b\u0117\u0001\u0118\u0001\u0118\u0001\u0118\u0005\u0118\u1451\b\u0118"+
		"\n\u0118\f\u0118\u1454\t\u0118\u0001\u0119\u0001\u0119\u0001\u0119\u0003"+
		"\u0119\u1459\b\u0119\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0003\u011b\u1464"+
		"\b\u011b\u0001\u011b\u0003\u011b\u1467\b\u011b\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0003\u011c\u146e\b\u011c\u0001\u011c"+
		"\u0003\u011c\u1471\b\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0003\u011c\u147b\b\u011c"+
		"\u0001\u011c\u0003\u011c\u147e\b\u011c\u0003\u011c\u1480\b\u011c\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u0120\u0005\u0120\u1491\b\u0120\n\u0120\f\u0120"+
		"\u1494\t\u0120\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121"+
		"\u0001\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u149f\b\u0121"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0001\u0122\u0003\u0122\u14a8\b\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122\u14b1\b\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122\u14bd\b\u0122"+
		"\u0003\u0122\u14bf\b\u0122\u0001\u0123\u0001\u0123\u0001\u0124\u0001\u0124"+
		"\u0003\u0124\u14c5\b\u0124\u0001\u0124\u0001\u0124\u0003\u0124\u14c9\b"+
		"\u0124\u0001\u0124\u0003\u0124\u14cc\b\u0124\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0003\u0124\u14d1\b\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0003\u0124\u14d7\b\u0124\u0001\u0124\u0003\u0124\u14da\b\u0124"+
		"\u0001\u0124\u0003\u0124\u14dd\b\u0124\u0001\u0124\u0003\u0124\u14e0\b"+
		"\u0124\u0001\u0124\u0001\u0124\u0003\u0124\u14e4\b\u0124\u0001\u0124\u0001"+
		"\u0124\u0003\u0124\u14e8\b\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0003\u0124\u14f1\b\u0124\u0001"+
		"\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0003\u0124\u14f7\b\u0124\u0001"+
		"\u0124\u0003\u0124\u14fa\b\u0124\u0001\u0124\u0003\u0124\u14fd\b\u0124"+
		"\u0001\u0124\u0003\u0124\u1500\b\u0124\u0003\u0124\u1502\b\u0124\u0001"+
		"\u0125\u0001\u0125\u0001\u0126\u0001\u0126\u0001\u0127\u0001\u0127\u0001"+
		"\u0128\u0001\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u012a\u0001"+
		"\u012a\u0001\u012a\u0005\u012a\u1512\b\u012a\n\u012a\f\u012a\u1515\t\u012a"+
		"\u0001\u012b\u0003\u012b\u1518\b\u012b\u0001\u012b\u0003\u012b\u151b\b"+
		"\u012b\u0001\u012b\u0003\u012b\u151e\b\u012b\u0001\u012b\u0003\u012b\u1521"+
		"\b\u012b\u0001\u012b\u0003\u012b\u1524\b\u012b\u0001\u012b\u0001\u012b"+
		"\u0001\u012b\u0003\u012b\u1529\b\u012b\u0001\u012b\u0003\u012b\u152c\b"+
		"\u012b\u0003\u012b\u152e\b\u012b\u0001\u012c\u0001\u012c\u0001\u012c\u0001"+
		"\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0001"+
		"\u012c\u0001\u012c\u0003\u012c\u153b\b\u012c\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0005"+
		"\u012e\u1545\b\u012e\n\u012e\f\u012e\u1548\t\u012e\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u0130\u0001\u0130\u0001\u0131\u0001\u0131\u0001\u0132"+
		"\u0001\u0132\u0001\u0132\u0001\u0132\u0003\u0132\u1555\b\u0132\u0001\u0133"+
		"\u0001\u0133\u0003\u0133\u1559\b\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0133\u0003\u0133\u1565\b\u0133\u0003\u0133\u1567\b\u0133\u0001"+
		"\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0135\u0001"+
		"\u0135\u0003\u0135\u1570\b\u0135\u0001\u0135\u0001\u0135\u0001\u0136\u0001"+
		"\u0136\u0001\u0136\u0005\u0136\u1577\b\u0136\n\u0136\f\u0136\u157a\t\u0136"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0005\u0137\u157f\b\u0137\n\u0137"+
		"\f\u0137\u1582\t\u0137\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138"+
		"\u0001\u0138\u0001\u0138\u0003\u0138\u158a\b\u0138\u0003\u0138\u158c\b"+
		"\u0138\u0001\u0139\u0001\u0139\u0003\u0139\u1590\b\u0139\u0001\u0139\u0001"+
		"\u0139\u0001\u013a\u0001\u013a\u0001\u013a\u0005\u013a\u1597\b\u013a\n"+
		"\u013a\f\u013a\u159a\t\u013a\u0001\u013b\u0001\u013b\u0003\u013b\u159e"+
		"\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u15a4"+
		"\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u15a9\b\u013b"+
		"\u0001\u013c\u0001\u013c\u0003\u013c\u15ad\b\u013c\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0003\u013c\u15b2\b\u013c\u0001\u013d\u0001\u013d\u0001\u013e"+
		"\u0001\u013e\u0001\u013f\u0001\u013f\u0003\u013f\u15ba\b\u013f\u0001\u013f"+
		"\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0003\u013f\u15c1\b\u013f"+
		"\u0001\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u15c6\b\u0140\u0001\u0141"+
		"\u0001\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0003\u0142\u15d5\b\u0142\u0001\u0142\u0001\u0142\u0001\u0143\u0001\u0143"+
		"\u0001\u0143\u0005\u0143\u15dc\b\u0143\n\u0143\f\u0143\u15df\t\u0143\u0001"+
		"\u0144\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0001\u0145\u0005"+
		"\u0145\u15e7\b\u0145\n\u0145\f\u0145\u15ea\t\u0145\u0001\u0146\u0004\u0146"+
		"\u15ed\b\u0146\u000b\u0146\f\u0146\u15ee\u0001\u0146\u0001\u0146\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0003\u0147\u1616"+
		"\b\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001"+
		"\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u1620\b\u0148\u0001\u0149\u0001"+
		"\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u1627\b\u0149\u0001"+
		"\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001"+
		"\u014a\u0005\u014a\u1630\b\u014a\n\u014a\f\u014a\u1633\t\u014a\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014d"+
		"\u0001\u014d\u0001\u014d\u0005\u014d\u163e\b\u014d\n\u014d\f\u014d\u1641"+
		"\t\u014d\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003"+
		"\u014e\u1648\b\u014e\u0001\u014f\u0004\u014f\u164b\b\u014f\u000b\u014f"+
		"\f\u014f\u164c\u0001\u0150\u0001\u0150\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0003\u0151\u1655\b\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151\u165d\b\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151\u1663\b\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151"+
		"\u166b\b\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151"+
		"\u1671\b\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0003\u0151\u1679\b\u0151\u0003\u0151\u167b\b\u0151\u0001"+
		"\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0003\u0152\u1681\b\u0152\u0001"+
		"\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0003"+
		"\u0152\u1689\b\u0152\u0003\u0152\u168b\b\u0152\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0003\u0153\u1691\b\u0153\u0001\u0153\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0003\u0153\u1699\b\u0153"+
		"\u0003\u0153\u169b\b\u0153\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0003\u0154\u16b3\b\u0154\u0001\u0155\u0001\u0155\u0001\u0155\u0005\u0155"+
		"\u16b8\b\u0155\n\u0155\f\u0155\u16bb\t\u0155\u0001\u0155\u0001\u0155\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0005\u0156\u16c2\b\u0156\n\u0156\f\u0156"+
		"\u16c5\t\u0156\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0158\u0001\u0158"+
		"\u0001\u0158\u0001\u0159\u0004\u0159\u16ce\b\u0159\u000b\u0159\f\u0159"+
		"\u16cf\u0001\u015a\u0001\u015a\u0001\u015a\u0003\u015a\u16d5\b\u015a\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u16e2"+
		"\b\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u16ee"+
		"\b\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u16fa"+
		"\b\u015b\u0003\u015b\u16fc\b\u015b\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015c\u0003\u015c\u1702\b\u015c\u0001\u015d\u0001\u015d\u0001\u015d"+
		"\u0003\u015d\u1707\b\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d"+
		"\u0001\u015d\u0001\u015d\u0003\u015d\u170f\b\u015d\u0001\u015e\u0001\u015e"+
		"\u0001\u015e\u0001\u015f\u0001\u015f\u0003\u015f\u1716\b\u015f\u0001\u015f"+
		"\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f"+
		"\u0001\u015f\u0001\u015f\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0003\u0160\u1743\b\u0160\u0001\u0161\u0001\u0161\u0001\u0161\u0003\u0161"+
		"\u1748\b\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001\u0161"+
		"\u0003\u0161\u174f\b\u0161\u0001\u0162\u0001\u0162\u0003\u0162\u1753\b"+
		"\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u1757\b\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u175d\b\u0162\u0001\u0162\u0001"+
		"\u0162\u0003\u0162\u1761\b\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0003"+
		"\u0162\u1766\b\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u176a\b\u0162"+
		"\u0001\u0162\u0003\u0162\u176d\b\u0162\u0003\u0162\u176f\b\u0162\u0001"+
		"\u0163\u0001\u0163\u0001\u0164\u0001\u0164\u0001\u0165\u0001\u0165\u0001"+
		"\u0165\u0001\u0165\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0003\u0166\u1785\b\u0166\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0003\u0167\u17cc\b\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u188f\b\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u189c"+
		"\b\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u18a7\b\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u18b4"+
		"\b\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u18c0"+
		"\b\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0003\u0167\u18ce\b\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u18ee\b\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u18fc"+
		"\b\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u196c\b\u0167\u0003\u0167\u196e"+
		"\b\u0167\u0001\u0168\u0001\u0168\u0001\u0169\u0001\u0169\u0001\u0169\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u1979\b\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u1984\b\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0003\u016a\u198f\b\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u199c\b\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u19a8\b\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0003\u016a\u19b3\b\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u19ba\b\u016a\u0001\u016b\u0001"+
		"\u016b\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0003\u016c\u1a97\b\u016c\u0001\u016d\u0001\u016d\u0001"+
		"\u016d\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016d\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0005\u016e\u1aa4\b\u016e\n\u016e\f\u016e"+
		"\u1aa7\t\u016e\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f"+
		"\u0001\u016f\u0001\u016f\u0001\u016f\u0003\u016f\u1ab1\b\u016f\u0001\u0170"+
		"\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0003\u0170\u1ab8\b\u0170"+
		"\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171"+
		"\u0001\u0171\u0001\u0171\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0003\u0172\u1aee\b\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0003\u0172\u1b7b\b\u0172\u0001\u0173\u0001\u0173\u0001\u0173"+
		"\u0001\u0173\u0003\u0173\u1b81\b\u0173\u0001\u0173\u0003\u0173\u1b84\b"+
		"\u0173\u0001\u0174\u0001\u0174\u0001\u0175\u0001\u0175\u0001\u0175\u0001"+
		"\u0175\u0001\u0175\u0001\u0175\u0003\u0175\u1b8e\b\u0175\u0001\u0176\u0001"+
		"\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0176\u0001\u0176\u0003\u0176\u1bab\b\u0176\u0001\u0177\u0001\u0177\u0001"+
		"\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0003"+
		"\u0177\u1bb5\b\u0177\u0001\u0178\u0001\u0178\u0001\u0178\u0005\u0178\u1bba"+
		"\b\u0178\n\u0178\f\u0178\u1bbd\t\u0178\u0001\u0179\u0001\u0179\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0003\u017a"+
		"\u1bd3\b\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0003\u017a\u1bdc\b\u017a\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017a\u0003\u017a\u1be8\b\u017a\u0001\u017b\u0001\u017b"+
		"\u0001\u017b\u0001\u017b\u0003\u017b\u1bee\b\u017b\u0001\u017b\u0001\u017b"+
		"\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0003\u017b\u1bf6\b\u017b"+
		"\u0003\u017b\u1bf8\b\u017b\u0001\u017c\u0001\u017c\u0003\u017c\u1bfc\b"+
		"\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001\u017c\u0001"+
		"\u017c\u0001\u017c\u0001\u017c\u0003\u017c\u1c06\b\u017c\u0001\u017c\u0001"+
		"\u017c\u0003\u017c\u1c0a\b\u017c\u0001\u017c\u0001\u017c\u0001\u017d\u0001"+
		"\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0003\u017d\u1c14"+
		"\b\u017d\u0001\u017e\u0003\u017e\u1c17\b\u017e\u0001\u017e\u0001\u017e"+
		"\u0003\u017e\u1c1b\b\u017e\u0005\u017e\u1c1d\b\u017e\n\u017e\f\u017e\u1c20"+
		"\t\u017e\u0001\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0003"+
		"\u017f\u1c27\b\u017f\u0001\u0180\u0001\u0180\u0001\u0181\u0001\u0181\u0001"+
		"\u0182\u0001\u0182\u0001\u0183\u0001\u0183\u0001\u0183\u0003\u0183\u1c32"+
		"\b\u0183\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0185\u0001\u0185\u0001"+
		"\u0185\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0003\u0186\u1c3e"+
		"\b\u0186\u0001\u0187\u0001\u0187\u0003\u0187\u1c42\b\u0187\u0001\u0187"+
		"\u0003\u0187\u1c45\b\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u1c49\b"+
		"\u0187\u0001\u0187\u0003\u0187\u1c4c\b\u0187\u0001\u0187\u0001\u0187\u0001"+
		"\u0187\u0003\u0187\u1c51\b\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u1c55"+
		"\b\u0187\u0001\u0187\u0003\u0187\u1c58\b\u0187\u0001\u0187\u0001\u0187"+
		"\u0003\u0187\u1c5c\b\u0187\u0001\u0187\u0003\u0187\u1c5f\b\u0187\u0001"+
		"\u0187\u0001\u0187\u0003\u0187\u1c63\b\u0187\u0001\u0187\u0003\u0187\u1c66"+
		"\b\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001"+
		"\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u1c71\b\u0187\u0001"+
		"\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u1c78"+
		"\b\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001"+
		"\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0003"+
		"\u0187\u1c85\b\u0187\u0001\u0188\u0001\u0188\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0003\u0189\u1c93\b\u0189\u0001\u018a\u0001\u018a\u0003"+
		"\u018a\u1c97\b\u018a\u0001\u018a\u0005\u018a\u1c9a\b\u018a\n\u018a\f\u018a"+
		"\u1c9d\t\u018a\u0001\u018b\u0001\u018b\u0001\u018c\u0001\u018c\u0003\u018c"+
		"\u1ca3\b\u018c\u0001\u018c\u0001\u018c\u0001\u018d\u0001\u018d\u0001\u018d"+
		"\u0003\u018d\u1caa\b\u018d\u0001\u018d\u0003\u018d\u1cad\b\u018d\u0001"+
		"\u018d\u0001\u018d\u0001\u018d\u0003\u018d\u1cb2\b\u018d\u0001\u018d\u0003"+
		"\u018d\u1cb5\b\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0001\u018d\u0003\u018d\u1cbe\b\u018d\u0003\u018d\u1cc0"+
		"\b\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0003\u018d\u1cc5\b\u018d"+
		"\u0001\u018e\u0001\u018e\u0003\u018e\u1cc9\b\u018e\u0001\u018e\u0001\u018e"+
		"\u0001\u018e\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u0190\u0001\u0190"+
		"\u0001\u0190\u0001\u0190\u0003\u0190\u1cd5\b\u0190\u0001\u0190\u0003\u0190"+
		"\u1cd8\b\u0190\u0001\u0191\u0001\u0191\u0001\u0192\u0004\u0192\u1cdd\b"+
		"\u0192\u000b\u0192\f\u0192\u1cde\u0001\u0193\u0001\u0193\u0003\u0193\u1ce3"+
		"\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u1ce8\b\u0193"+
		"\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194"+
		"\u0001\u0194\u0001\u0194\u0003\u0194\u1cf2\b\u0194\u0001\u0195\u0001\u0195"+
		"\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0003\u0196"+
		"\u1cfb\b\u0196\u0001\u0196\u0003\u0196\u1cfe\b\u0196\u0001\u0196\u0001"+
		"\u0196\u0001\u0196\u0003\u0196\u1d03\b\u0196\u0001\u0197\u0001\u0197\u0001"+
		"\u0197\u0001\u0197\u0001\u0197\u0001\u0198\u0001\u0198\u0001\u0198\u0001"+
		"\u0198\u0003\u0198\u1d0e\b\u0198\u0001\u0198\u0001\u0198\u0003\u0198\u1d12"+
		"\b\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0003\u0198\u1d18"+
		"\b\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0005\u0199\u1d1d\b\u0199"+
		"\n\u0199\f\u0199\u1d20\t\u0199\u0001\u019a\u0001\u019a\u0001\u019b\u0001"+
		"\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019c\u0001"+
		"\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019d\u0001\u019d\u0001"+
		"\u019d\u0001\u019d\u0003\u019d\u1d33\b\u019d\u0001\u019d\u0001\u019d\u0001"+
		"\u019d\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u1d48"+
		"\b\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u1d4c\b\u019e\u0001\u019e"+
		"\u0001\u019e\u0001\u019e\u0003\u019e\u1d51\b\u019e\u0001\u019f\u0001\u019f"+
		"\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0"+
		"\u0001\u01a0\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0003\u01a1\u1da4\b\u01a1\u0001\u01a2\u0001\u01a2\u0001\u01a3"+
		"\u0001\u01a3\u0003\u01a3\u1daa\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a4\u0001\u01a4\u0003\u01a4\u1db7\b\u01a4\u0001\u01a4\u0001\u01a4"+
		"\u0003\u01a4\u1dbb\b\u01a4\u0001\u01a4\u0001\u01a4\u0003\u01a4\u1dbf\b"+
		"\u01a4\u0001\u01a4\u0001\u01a4\u0003\u01a4\u1dc3\b\u01a4\u0001\u01a4\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a4\u0003\u01a4\u1dc9\b\u01a4\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a6\u0001\u01a6\u0003\u01a6\u1dd0\b\u01a6\u0001"+
		"\u01a6\u0003\u01a6\u1dd3\b\u01a6\u0001\u01a6\u0003\u01a6\u1dd6\b\u01a6"+
		"\u0001\u01a6\u0003\u01a6\u1dd9\b\u01a6\u0001\u01a6\u0003\u01a6\u1ddc\b"+
		"\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0003"+
		"\u01a6\u1de3\b\u01a6\u0003\u01a6\u1de5\b\u01a6\u0001\u01a7\u0001\u01a7"+
		"\u0003\u01a7\u1de9\b\u01a7\u0001\u01a7\u0003\u01a7\u1dec\b\u01a7\u0001"+
		"\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0003\u01a7\u1df3"+
		"\b\u01a7\u0003\u01a7\u1df5\b\u01a7\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0005\u01a8\u1dfa\b\u01a8\n\u01a8\f\u01a8\u1dfd\t\u01a8\u0001\u01a9\u0001"+
		"\u01a9\u0001\u01a9\u0005\u01a9\u1e02\b\u01a9\n\u01a9\f\u01a9\u1e05\t\u01a9"+
		"\u0001\u01aa\u0001\u01aa\u0001\u01ab\u0001\u01ab\u0003\u01ab\u1e0b\b\u01ab"+
		"\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0003\u01ac\u1e10\b\u01ac\u0001\u01ad"+
		"\u0001\u01ad\u0003\u01ad\u1e14\b\u01ad\u0001\u01ae\u0001\u01ae\u0003\u01ae"+
		"\u1e18\b\u01ae\u0001\u01af\u0001\u01af\u0003\u01af\u1e1c\b\u01af\u0001"+
		"\u01b0\u0001\u01b0\u0003\u01b0\u1e20\b\u01b0\u0001\u01b1\u0001\u01b1\u0001"+
		"\u01b2\u0001\u01b2\u0001\u01b3\u0001\u01b3\u0001\u01b4\u0001\u01b4\u0001"+
		"\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b6\u0001\u01b6\u0003"+
		"\u01b6\u1e30\b\u01b6\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0005\u01b7\u1e35"+
		"\b\u01b7\n\u01b7\f\u01b7\u1e38\t\u01b7\u0001\u01b8\u0001\u01b8\u0001\u01b9"+
		"\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0003\u01b9\u1e41\b\u01b9"+
		"\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9"+
		"\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0003\u01b9"+
		"\u1e4e\b\u01b9\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba"+
		"\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0003\u01ba\u1e59\b\u01ba"+
		"\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0005\u01bb\u1e5e\b\u01bb\n\u01bb"+
		"\f\u01bb\u1e61\t\u01bb\u0001\u01bc\u0001\u01bc\u0003\u01bc\u1e65\b\u01bc"+
		"\u0001\u01bd\u0001\u01bd\u0003\u01bd\u1e69\b\u01bd\u0001\u01be\u0001\u01be"+
		"\u0003\u01be\u1e6d\b\u01be\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0003\u01bf"+
		"\u1e72\b\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01c0\u0001\u01c0"+
		"\u0001\u01c0\u0001\u01c0\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1"+
		"\u0003\u01c1\u1e7f\b\u01c1\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0003\u01c2"+
		"\u1e84\b\u01c2\u0001\u01c2\u0001\u01c2\u0003\u01c2\u1e88\b\u01c2\u0001"+
		"\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0003"+
		"\u01c2\u1e90\b\u01c2\u0001\u01c2\u0003\u01c2\u1e93\b\u01c2\u0001\u01c2"+
		"\u0001\u01c2\u0003\u01c2\u1e97\b\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2"+
		"\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2\u0001\u01c2"+
		"\u0003\u01c2\u1ea2\b\u01c2\u0001\u01c2\u0003\u01c2\u1ea5\b\u01c2\u0003"+
		"\u01c2\u1ea7\b\u01c2\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001"+
		"\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001"+
		"\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0003\u01c4\u1eb7\b\u01c4\u0001"+
		"\u01c5\u0003\u01c5\u1eba\b\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0001"+
		"\u01c5\u0001\u01c5\u0003\u01c5\u1ec1\b\u01c5\u0001\u01c5\u0003\u01c5\u1ec4"+
		"\b\u01c5\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0003\u01c6\u1ec9\b\u01c6"+
		"\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0003\u01c7\u1ed8\b\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0003\u01c7\u1ede\b\u01c7\u0001\u01c8\u0001\u01c8\u0001\u01c9"+
		"\u0001\u01c9\u0001\u01c9\u0005\u01c9\u1ee5\b\u01c9\n\u01c9\f\u01c9\u1ee8"+
		"\t\u01c9\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01cb\u0001\u01cb\u0001"+
		"\u01cb\u0003\u01cb\u1ef0\b\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0003\u01cb\u1ef7\b\u01cb\u0001\u01cb\u0003\u01cb\u1efa"+
		"\b\u01cb\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u1f00"+
		"\b\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u1f05\b\u01cc"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01ce\u0001\u01ce\u0003\u01ce"+
		"\u1f0c\b\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1f10\b\u01ce\u0001"+
		"\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1f15\b\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1f18\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0003"+
		"\u01ce\u1f1e\b\u01ce\u0001\u01ce\u0001\u01ce\u0003\u01ce\u1f22\b\u01ce"+
		"\u0003\u01ce\u1f24\b\u01ce\u0001\u01ce\u0003\u01ce\u1f27\b\u01ce\u0001"+
		"\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0003\u01cf\u1f2e"+
		"\b\u01cf\u0001\u01cf\u0003\u01cf\u1f31\b\u01cf\u0001\u01cf\u0001\u01cf"+
		"\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0003\u01cf\u1f38\b\u01cf\u0001\u01cf"+
		"\u0001\u01cf\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0003\u01d0"+
		"\u1f40\b\u01d0\u0001\u01d0\u0003\u01d0\u1f43\b\u01d0\u0001\u01d0\u0001"+
		"\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0003"+
		"\u01d1\u1f4c\b\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d2\u0003\u01d2\u1f51"+
		"\b\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0003\u01d2\u1f57"+
		"\b\u01d2\u0001\u01d2\u0003\u01d2\u1f5a\b\u01d2\u0001\u01d2\u0003\u01d2"+
		"\u1f5d\b\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d4\u0001\u01d4"+
		"\u0003\u01d4\u1f64\b\u01d4\u0001\u01d4\u0001\u01d4\u0003\u01d4\u1f68\b"+
		"\u01d4\u0001\u01d4\u0003\u01d4\u1f6b\b\u01d4\u0001\u01d5\u0001\u01d5\u0001"+
		"\u01d5\u0001\u01d5\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001"+
		"\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6\u1f7a"+
		"\b\u01d6\u0001\u01d6\u0003\u01d6\u1f7d\b\u01d6\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0003\u01d8\u1f84\b\u01d8\u0001\u01d9"+
		"\u0003\u01d9\u1f87\b\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0001\u01d9\u0003\u01d9\u1f8e\b\u01d9\u0001\u01d9\u0003\u01d9\u1f91\b"+
		"\u01d9\u0001\u01d9\u0003\u01d9\u1f94\b\u01d9\u0001\u01da\u0001\u01da\u0001"+
		"\u01da\u0005\u01da\u1f99\b\u01da\n\u01da\f\u01da\u1f9c\t\u01da\u0001\u01db"+
		"\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db\u0001\u01db"+
		"\u0001\u01db\u0001\u01db\u0001\u01db\u0003\u01db\u1fa8\b\u01db\u0001\u01dc"+
		"\u0001\u01dc\u0001\u01dc\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0005\u01dd"+
		"\u1fb0\b\u01dd\n\u01dd\f\u01dd\u1fb3\t\u01dd\u0001\u01de\u0001\u01de\u0001"+
		"\u01de\u0001\u01de\u0001\u01de\u0003\u01de\u1fba\b\u01de\u0001\u01de\u0001"+
		"\u01de\u0001\u01de\u0001\u01df\u0001\u01df\u0001\u01e0\u0001\u01e0\u0001"+
		"\u01e0\u0001\u01e0\u0001\u01e0\u0005\u01e0\u1fc6\b\u01e0\n\u01e0\f\u01e0"+
		"\u1fc9\t\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0003\u01e1"+
		"\u1fcf\b\u01e1\u0001\u01e2\u0001\u01e2\u0003\u01e2\u1fd3\b\u01e2\u0001"+
		"\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0003\u01e3\u1fdd\b\u01e3\u0001\u01e4\u0001\u01e4\u0003"+
		"\u01e4\u1fe1\b\u01e4\u0001\u01e4\u0001\u01e4\u0003\u01e4\u1fe5\b\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0003\u01e4\u1fe9\b\u01e4\u0003\u01e4\u1feb\b"+
		"\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0003\u01e4\u1ff0\b\u01e4\u0001"+
		"\u01e4\u0001\u01e4\u0003\u01e4\u1ff4\b\u01e4\u0001\u01e4\u0001\u01e4\u0003"+
		"\u01e4\u1ff8\b\u01e4\u0003\u01e4\u1ffa\b\u01e4\u0003\u01e4\u1ffc\b\u01e4"+
		"\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0003\u01e5\u2001\b\u01e5\u0001\u01e5"+
		"\u0005\u01e5\u2004\b\u01e5\n\u01e5\f\u01e5\u2007\t\u01e5\u0001\u01e6\u0001"+
		"\u01e6\u0001\u01e6\u0003\u01e6\u200c\b\u01e6\u0001\u01e6\u0005\u01e6\u200f"+
		"\b\u01e6\n\u01e6\f\u01e6\u2012\t\u01e6\u0001\u01e7\u0001\u01e7\u0003\u01e7"+
		"\u2016\b\u01e7\u0001\u01e7\u0003\u01e7\u2019\b\u01e7\u0001\u01e7\u0003"+
		"\u01e7\u201c\b\u01e7\u0001\u01e7\u0003\u01e7\u201f\b\u01e7\u0001\u01e7"+
		"\u0003\u01e7\u2022\b\u01e7\u0001\u01e7\u0003\u01e7\u2025\b\u01e7\u0001"+
		"\u01e7\u0003\u01e7\u2028\b\u01e7\u0001\u01e7\u0003\u01e7\u202b\b\u01e7"+
		"\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0003\u01e7\u2030\b\u01e7\u0001\u01e7"+
		"\u0003\u01e7\u2033\b\u01e7\u0001\u01e7\u0003\u01e7\u2036\b\u01e7\u0001"+
		"\u01e7\u0003\u01e7\u2039\b\u01e7\u0001\u01e7\u0003\u01e7\u203c\b\u01e7"+
		"\u0001\u01e7\u0003\u01e7\u203f\b\u01e7\u0003\u01e7\u2041\b\u01e7\u0001"+
		"\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0003\u01e7\u2047\b\u01e7\u0001"+
		"\u01e8\u0001\u01e8\u0003\u01e8\u204b\b\u01e8\u0001\u01e8\u0001\u01e8\u0001"+
		"\u01e9\u0001\u01e9\u0001\u01e9\u0005\u01e9\u2052\b\u01e9\n\u01e9\f\u01e9"+
		"\u2055\t\u01e9\u0001\u01ea\u0001\u01ea\u0003\u01ea\u2059\b\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0003\u01ea\u205d\b\u01ea\u0001\u01ea\u0001\u01ea\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01eb\u0001\u01eb\u0001\u01eb\u0003\u01eb\u2066"+
		"\b\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001"+
		"\u01ee\u0001\u01ee\u0001\u01ef\u0003\u01ef\u2070\b\u01ef\u0001\u01ef\u0001"+
		"\u01ef\u0003\u01ef\u2074\b\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0003"+
		"\u01ef\u2079\b\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0003"+
		"\u01ef\u207f\b\u01ef\u0001\u01f0\u0001\u01f0\u0001\u01f1\u0001\u01f1\u0001"+
		"\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0003"+
		"\u01f2\u208b\b\u01f2\u0001\u01f3\u0001\u01f3\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f6\u0001\u01f6\u0001"+
		"\u01f6\u0005\u01f6\u2098\b\u01f6\n\u01f6\f\u01f6\u209b\t\u01f6\u0001\u01f7"+
		"\u0001\u01f7\u0001\u01f7\u0001\u01f7\u0003\u01f7\u20a1\b\u01f7\u0003\u01f7"+
		"\u20a3\b\u01f7\u0001\u01f7\u0003\u01f7\u20a6\b\u01f7\u0001\u01f8\u0001"+
		"\u01f8\u0003\u01f8\u20aa\b\u01f8\u0001\u01f8\u0001\u01f8\u0003\u01f8\u20ae"+
		"\b\u01f8\u0003\u01f8\u20b0\b\u01f8\u0001\u01f9\u0001\u01f9\u0001\u01fa"+
		"\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0003\u01fa\u20b8\b\u01fa\u0001\u01fa"+
		"\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa"+
		"\u0003\u01fa\u20c1\b\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa"+
		"\u0003\u01fa\u20c7\b\u01fa\u0003\u01fa\u20c9\b\u01fa\u0003\u01fa\u20cb"+
		"\b\u01fa\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003"+
		"\u01fb\u20d2\b\u01fb\u0001\u01fc\u0001\u01fc\u0003\u01fc\u20d6\b\u01fc"+
		"\u0001\u01fd\u0001\u01fd\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0001\u01fe"+
		"\u0001\u01fe\u0003\u01fe\u20df\b\u01fe\u0001\u01ff\u0001\u01ff\u0003\u01ff"+
		"\u20e3\b\u01ff\u0001\u0200\u0001\u0200\u0001\u0201\u0001\u0201\u0001\u0202"+
		"\u0001\u0202\u0001\u0202\u0001\u0202\u0001\u0203\u0001\u0203\u0001\u0203"+
		"\u0005\u0203\u20f0\b\u0203\n\u0203\f\u0203\u20f3\t\u0203\u0001\u0204\u0001"+
		"\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0003\u0204\u20fa\b\u0204\u0001"+
		"\u0205\u0001\u0205\u0001\u0205\u0001\u0206\u0001\u0206\u0001\u0206\u0001"+
		"\u0206\u0001\u0206\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001"+
		"\u0207\u0001\u0208\u0001\u0208\u0001\u0208\u0001\u0208\u0001\u0208\u0001"+
		"\u0208\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0003\u020a\u2116\b\u020a\u0001\u020b\u0001\u020b\u0001"+
		"\u020c\u0004\u020c\u211b\b\u020c\u000b\u020c\f\u020c\u211c\u0001\u020d"+
		"\u0001\u020d\u0003\u020d\u2121\b\u020d\u0001\u020d\u0003\u020d\u2124\b"+
		"\u020d\u0001\u020e\u0001\u020e\u0001\u020e\u0003\u020e\u2129\b\u020e\u0001"+
		"\u020e\u0001\u020e\u0003\u020e\u212d\b\u020e\u0001\u020e\u0003\u020e\u2130"+
		"\b\u020e\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u0210\u0001\u0210\u0001"+
		"\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0001"+
		"\u0210\u0005\u0210\u213e\b\u0210\n\u0210\f\u0210\u2141\t\u0210\u0001\u0211"+
		"\u0001\u0211\u0001\u0211\u0001\u0212\u0001\u0212\u0001\u0212\u0005\u0212"+
		"\u2149\b\u0212\n\u0212\f\u0212\u214c\t\u0212\u0001\u0213\u0001\u0213\u0003"+
		"\u0213\u2150\b\u0213\u0001\u0213\u0003\u0213\u2153\b\u0213\u0001\u0213"+
		"\u0001\u0213\u0003\u0213\u2157\b\u0213\u0001\u0213\u0001\u0213\u0003\u0213"+
		"\u215b\b\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u215f\b\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2164\b\u0213\u0001\u0213\u0001"+
		"\u0213\u0003\u0213\u2168\b\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u216c"+
		"\b\u0213\u0003\u0213\u216e\b\u0213\u0001\u0213\u0001\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2177\b\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u217c\b\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2182\b\u0213\u0001\u0213"+
		"\u0001\u0213\u0003\u0213\u2186\b\u0213\u0003\u0213\u2188\b\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u218f"+
		"\b\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2194\b\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0005\u0213\u219a\b\u0213"+
		"\n\u0213\f\u0213\u219d\t\u0213\u0001\u0214\u0003\u0214\u21a0\b\u0214\u0001"+
		"\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0001\u0214\u0003\u0214\u21a7"+
		"\b\u0214\u0001\u0215\u0001\u0215\u0001\u0215\u0003\u0215\u21ac\b\u0215"+
		"\u0001\u0215\u0003\u0215\u21af\b\u0215\u0001\u0215\u0001\u0215\u0001\u0215"+
		"\u0001\u0215\u0003\u0215\u21b5\b\u0215\u0001\u0216\u0001\u0216\u0003\u0216"+
		"\u21b9\b\u0216\u0001\u0217\u0001\u0217\u0001\u0217\u0001\u0217\u0001\u0217"+
		"\u0001\u0217\u0001\u0217\u0003\u0217\u21c2\b\u0217\u0001\u0218\u0001\u0218"+
		"\u0003\u0218\u21c6\b\u0218\u0001\u0218\u0001\u0218\u0001\u0218\u0001\u0218"+
		"\u0001\u0218\u0001\u0218\u0003\u0218\u21ce\b\u0218\u0003\u0218\u21d0\b"+
		"\u0218\u0001\u0219\u0001\u0219\u0001\u0219\u0005\u0219\u21d5\b\u0219\n"+
		"\u0219\f\u0219\u21d8\t\u0219\u0001\u021a\u0001\u021a\u0003\u021a\u21dc"+
		"\b\u021a\u0001\u021a\u0003\u021a\u21df\b\u021a\u0001\u021b\u0001\u021b"+
		"\u0001\u021b\u0001\u021b\u0001\u021b\u0001\u021b\u0003\u021b\u21e7\b\u021b"+
		"\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021d"+
		"\u0001\u021d\u0003\u021d\u21f0\b\u021d\u0001\u021d\u0001\u021d\u0001\u021d"+
		"\u0001\u021d\u0001\u021d\u0001\u021d\u0003\u021d\u21f8\b\u021d\u0003\u021d"+
		"\u21fa\b\u021d\u0001\u021e\u0001\u021e\u0003\u021e\u21fe\b\u021e\u0001"+
		"\u021f\u0001\u021f\u0001\u021f\u0005\u021f\u2203\b\u021f\n\u021f\f\u021f"+
		"\u2206\t\u021f\u0001\u0220\u0001\u0220\u0001\u0220\u0001\u0220\u0001\u0220"+
		"\u0001\u0221\u0001\u0221\u0001\u0221\u0001\u0222\u0001\u0222\u0001\u0222"+
		"\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0001\u0223\u0003\u0223"+
		"\u2218\b\u0223\u0001\u0224\u0001\u0224\u0001\u0225\u0001\u0225\u0001\u0225"+
		"\u0005\u0225\u221f\b\u0225\n\u0225\f\u0225\u2222\t\u0225\u0001\u0226\u0001"+
		"\u0226\u0001\u0226\u0003\u0226\u2227\b\u0226\u0001\u0227\u0001\u0227\u0001"+
		"\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001"+
		"\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001\u0227\u0001"+
		"\u0227\u0001\u0227\u0001\u0227\u0003\u0227\u223a\b\u0227\u0001\u0227\u0001"+
		"\u0227\u0001\u0228\u0001\u0228\u0001\u0228\u0005\u0228\u2241\b\u0228\n"+
		"\u0228\f\u0228\u2244\t\u0228\u0001\u0229\u0001\u0229\u0001\u0229\u0003"+
		"\u0229\u2249\b\u0229\u0001\u0229\u0001\u0229\u0003\u0229\u224d\b\u0229"+
		"\u0001\u022a\u0004\u022a\u2250\b\u022a\u000b\u022a\f\u022a\u2251\u0001"+
		"\u022b\u0001\u022b\u0001\u022b\u0001\u022b\u0001\u022b\u0001\u022b\u0001"+
		"\u022b\u0001\u022b\u0003\u022b\u225c\b\u022b\u0001\u022c\u0001\u022c\u0001"+
		"\u022c\u0005\u022c\u2261\b\u022c\n\u022c\f\u022c\u2264\t\u022c\u0001\u022d"+
		"\u0001\u022d\u0001\u022d\u0001\u022d\u0001\u022d\u0001\u022d\u0003\u022d"+
		"\u226c\b\u022d\u0001\u022e\u0003\u022e\u226f\b\u022e\u0001\u022e\u0001"+
		"\u022e\u0001\u022e\u0001\u022e\u0001\u022e\u0001\u022e\u0001\u022e\u0003"+
		"\u022e\u2278\b\u022e\u0003\u022e\u227a\b\u022e\u0001\u022f\u0001\u022f"+
		"\u0003\u022f\u227e\b\u022f\u0001\u022f\u0005\u022f\u2281\b\u022f\n\u022f"+
		"\f\u022f\u2284\t\u022f\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230"+
		"\u0001\u0230\u0001\u0230\u0001\u0230\u0003\u0230\u228d\b\u0230\u0001\u0230"+
		"\u0001\u0230\u0001\u0230\u0001\u0230\u0003\u0230\u2293\b\u0230\u0001\u0230"+
		"\u0003\u0230\u2296\b\u0230\u0001\u0231\u0001\u0231\u0001\u0231\u0001\u0231"+
		"\u0001\u0231\u0003\u0231\u229d\b\u0231\u0001\u0232\u0001\u0232\u0003\u0232"+
		"\u22a1\b\u0232\u0001\u0232\u0003\u0232\u22a4\b\u0232\u0001\u0233\u0001"+
		"\u0233\u0001\u0233\u0001\u0233\u0001\u0234\u0001\u0234\u0001\u0234\u0001"+
		"\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u22b1\b\u0234\u0001"+
		"\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u22b7\b\u0234\u0001"+
		"\u0234\u0001\u0234\u0003\u0234\u22bb\b\u0234\u0001\u0234\u0001\u0234\u0003"+
		"\u0234\u22bf\b\u0234\u0001\u0234\u0003\u0234\u22c2\b\u0234\u0001\u0235"+
		"\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0236\u0001\u0236\u0003\u0236"+
		"\u22ca\b\u0236\u0001\u0237\u0001\u0237\u0003\u0237\u22ce\b\u0237\u0001"+
		"\u0238\u0001\u0238\u0003\u0238\u22d2\b\u0238\u0001\u0238\u0001\u0238\u0001"+
		"\u0238\u0001\u0238\u0001\u0239\u0001\u0239\u0003\u0239\u22da\b\u0239\u0001"+
		"\u023a\u0001\u023a\u0001\u023a\u0001\u023a\u0001\u023a\u0003\u023a\u22e1"+
		"\b\u023a\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0001\u023b\u0003"+
		"\u023b\u22e8\b\u023b\u0001\u023c\u0001\u023c\u0003\u023c\u22ec\b\u023c"+
		"\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0003\u023c\u22f2\b\u023c"+
		"\u0003\u023c\u22f4\b\u023c\u0001\u023d\u0001\u023d\u0001\u023e\u0001\u023e"+
		"\u0001\u023e\u0001\u023e\u0001\u023e\u0003\u023e\u22fd\b\u023e\u0001\u023e"+
		"\u0003\u023e\u2300\b\u023e\u0001\u023f\u0001\u023f\u0001\u0240\u0001\u0240"+
		"\u0001\u0240\u0001\u0240\u0001\u0240\u0001\u0240\u0003\u0240\u230a\b\u0240"+
		"\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241"+
		"\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241\u0001\u0241"+
		"\u0001\u0241\u0001\u0241\u0003\u0241\u231a\b\u0241\u0001\u0241\u0001\u0241"+
		"\u0001\u0241\u0001\u0241\u0003\u0241\u2320\b\u0241\u0001\u0241\u0001\u0241"+
		"\u0001\u0241\u0003\u0241\u2325\b\u0241\u0001\u0242\u0001\u0242\u0001\u0242"+
		"\u0001\u0242\u0001\u0242\u0003\u0242\u232c\b\u0242\u0001\u0243\u0001\u0243"+
		"\u0001\u0244\u0001\u0244\u0001\u0244\u0001\u0245\u0001\u0245\u0001\u0246"+
		"\u0001\u0246\u0001\u0246\u0001\u0246\u0003\u0246\u2339\b\u0246\u0001\u0247"+
		"\u0001\u0247\u0001\u0247\u0005\u0247\u233e\b\u0247\n\u0247\f\u0247\u2341"+
		"\t\u0247\u0001\u0248\u0001\u0248\u0001\u0248\u0005\u0248\u2346\b\u0248"+
		"\n\u0248\f\u0248\u2349\t\u0248\u0001\u0249\u0001\u0249\u0001\u0249\u0005"+
		"\u0249\u234e\b\u0249\n\u0249\f\u0249\u2351\t\u0249\u0001\u024a\u0001\u024a"+
		"\u0003\u024a\u2355\b\u024a\u0001\u024a\u0001\u024a\u0003\u024a\u2359\b"+
		"\u024a\u0001\u024a\u0001\u024a\u0001\u024a\u0001\u024a\u0003\u024a\u235f"+
		"\b\u024a\u0001\u024b\u0001\u024b\u0003\u024b\u2363\b\u024b\u0001\u024b"+
		"\u0001\u024b\u0003\u024b\u2367\b\u024b\u0001\u024c\u0003\u024c\u236a\b"+
		"\u024c\u0001\u024c\u0001\u024c\u0001\u024d\u0001\u024d\u0003\u024d\u2370"+
		"\b\u024d\u0001\u024e\u0001\u024e\u0001\u024e\u0003\u024e\u2375\b\u024e"+
		"\u0001\u024e\u0001\u024e\u0001\u024e\u0001\u024e\u0001\u024e\u0001\u024e"+
		"\u0001\u024e\u0001\u024e\u0001\u024e\u0001\u024e\u0001\u024e\u0001\u024e"+
		"\u0001\u024e\u0001\u024e\u0003\u024e\u2385\b\u024e\u0001\u024e\u0003\u024e"+
		"\u2388\b\u024e\u0003\u024e\u238a\b\u024e\u0001\u024f\u0001\u024f\u0001"+
		"\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001"+
		"\u024f\u0001\u024f\u0003\u024f\u2396\b\u024f\u0003\u024f\u2398\b\u024f"+
		"\u0001\u0250\u0001\u0250\u0003\u0250\u239c\b\u0250\u0001\u0250\u0001\u0250"+
		"\u0001\u0250\u0001\u0250\u0003\u0250\u23a2\b\u0250\u0001\u0250\u0001\u0250"+
		"\u0003\u0250\u23a6\b\u0250\u0003\u0250\u23a8\b\u0250\u0001\u0251\u0001"+
		"\u0251\u0001\u0251\u0001\u0251\u0005\u0251\u23ae\b\u0251\n\u0251\f\u0251"+
		"\u23b1\t\u0251\u0001\u0252\u0003\u0252\u23b4\b\u0252\u0001\u0252\u0001"+
		"\u0252\u0001\u0253\u0001\u0253\u0001\u0253\u0005\u0253\u23bb\b\u0253\n"+
		"\u0253\f\u0253\u23be\t\u0253\u0001\u0254\u0001\u0254\u0001\u0254\u0005"+
		"\u0254\u23c3\b\u0254\n\u0254\f\u0254\u23c6\t\u0254\u0001\u0255\u0001\u0255"+
		"\u0001\u0255\u0003\u0255\u23cb\b\u0255\u0001\u0256\u0003\u0256\u23ce\b"+
		"\u0256\u0001\u0256\u0001\u0256\u0001\u0257\u0001\u0257\u0001\u0257\u0001"+
		"\u0257\u0001\u0257\u0003\u0257\u23d7\b\u0257\u0001\u0258\u0001\u0258\u0001"+
		"\u0258\u0003\u0258\u23dc\b\u0258\u0001\u0259\u0001\u0259\u0001\u0259\u0005"+
		"\u0259\u23e1\b\u0259\n\u0259\f\u0259\u23e4\t\u0259\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a"+
		"\u23ed\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0003\u025a\u2407\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0003\u025a\u2412\b\u025a\u0005\u025a\u2414\b\u025a\n\u025a\f\u025a\u2417"+
		"\t\u025a\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0003"+
		"\u025b\u241e\b\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001"+
		"\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001"+
		"\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001"+
		"\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0003\u025b\u2434\b\u025b\u0001"+
		"\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001\u025b\u0001"+
		"\u025b\u0003\u025b\u243d\b\u025b\u0001\u025c\u0001\u025c\u0001\u025d\u0001"+
		"\u025d\u0001\u025d\u0001\u025d\u0001\u025d\u0001\u025d\u0003\u025d\u2447"+
		"\b\u025d\u0001\u025d\u0003\u025d\u244a\b\u025d\u0001\u025d\u0001\u025d"+
		"\u0001\u025d\u0003\u025d\u244f\b\u025d\u0001\u025d\u0001\u025d\u0001\u025d"+
		"\u0003\u025d\u2454\b\u025d\u0001\u025d\u0001\u025d\u0003\u025d\u2458\b"+
		"\u025d\u0001\u025d\u0001\u025d\u0003\u025d\u245c\b\u025d\u0001\u025e\u0001"+
		"\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0003\u025e\u2463\b\u025e\u0001"+
		"\u025e\u0003\u025e\u2466\b\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0003"+
		"\u025e\u246b\b\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0003\u025e\u2470"+
		"\b\u025e\u0001\u025e\u0001\u025e\u0003\u025e\u2474\b\u025e\u0001\u025e"+
		"\u0001\u025e\u0001\u025f\u0001\u025f\u0003\u025f\u247a\b\u025f\u0001\u025f"+
		"\u0003\u025f\u247d\b\u025f\u0001\u025f\u0003\u025f\u2480\b\u025f\u0001"+
		"\u025f\u0003\u025f\u2483\b\u025f\u0001\u0260\u0001\u0260\u0003\u0260\u2487"+
		"\b\u0260\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0003\u0261\u2495\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0003\u0261\u249c\b\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u24a3\b\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u24aa\b\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u24bd"+
		"\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0003\u0261\u24c5\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u24cd\b\u0261\u0003\u0261\u24cf"+
		"\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u24d5"+
		"\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003"+
		"\u0261\u24dc\b\u0261\u0003\u0261\u24de\b\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u24eb\b\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0003\u0261\u2512\b\u0261\u0003\u0261\u2514\b\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u2528"+
		"\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u2532\b\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0003\u0261\u253d\b\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0003\u0261\u254e\b\u0261\u0001\u0261\u0003\u0261\u2551\b\u0261"+
		"\u0001\u0261\u0003\u0261\u2554\b\u0261\u0001\u0261\u0003\u0261\u2557\b"+
		"\u0261\u0003\u0261\u2559\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0003\u0261\u2560\b\u0261\u0001\u0261\u0003\u0261\u2563"+
		"\b\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u2567\b\u0261\u0001\u0261"+
		"\u0003\u0261\u256a\b\u0261\u0001\u0261\u0003\u0261\u256d\b\u0261\u0003"+
		"\u0261\u256f\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0003\u0261\u2576\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0003\u0261\u2583\b\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u2590\b\u0261\u0001\u0261\u0003"+
		"\u0261\u2593\b\u0261\u0001\u0261\u0001\u0261\u0003\u0261\u2597\b\u0261"+
		"\u0001\u0261\u0003\u0261\u259a\b\u0261\u0001\u0261\u0001\u0261\u0001\u0261"+
		"\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261"+
		"\u25a4\b\u0261\u0001\u0261\u0003\u0261\u25a7\b\u0261\u0001\u0261\u0001"+
		"\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001\u0261\u0001"+
		"\u0261\u0003\u0261\u25b1\b\u0261\u0001\u0261\u0003\u0261\u25b4\b\u0261"+
		"\u0001\u0261\u0003\u0261\u25b7\b\u0261\u0001\u0261\u0001\u0261\u0003\u0261"+
		"\u25bb\b\u0261\u0001\u0262\u0001\u0262\u0001\u0262\u0001\u0262\u0001\u0262"+
		"\u0003\u0262\u25c2\b\u0262\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263"+
		"\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263\u0001\u0263"+
		"\u0003\u0263\u25ce\b\u0263\u0001\u0264\u0001\u0264\u0001\u0264\u0001\u0264"+
		"\u0001\u0264\u0001\u0265\u0001\u0265\u0001\u0265\u0005\u0265\u25d8\b\u0265"+
		"\n\u0265\f\u0265\u25db\t\u0265\u0001\u0266\u0001\u0266\u0001\u0266\u0003"+
		"\u0266\u25e0\b\u0266\u0001\u0267\u0001\u0267\u0001\u0268\u0001\u0268\u0001"+
		"\u0268\u0001\u0268\u0003\u0268\u25e8\b\u0268\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001\u0269\u0001"+
		"\u0269\u0003\u0269\u25f9\b\u0269\u0001\u026a\u0001\u026a\u0001\u026a\u0001"+
		"\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001\u026b\u0001"+
		"\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001\u026c\u0001"+
		"\u026d\u0001\u026d\u0001\u026d\u0001\u026e\u0001\u026e\u0001\u026e\u0005"+
		"\u026e\u2610\b\u026e\n\u026e\f\u026e\u2613\t\u026e\u0001\u026f\u0001\u026f"+
		"\u0001\u026f\u0001\u026f\u0001\u0270\u0001\u0270\u0001\u0270\u0003\u0270"+
		"\u261c\b\u0270\u0001\u0271\u0001\u0271\u0003\u0271\u2620\b\u0271\u0001"+
		"\u0271\u0003\u0271\u2623\b\u0271\u0001\u0271\u0003\u0271\u2626\b\u0271"+
		"\u0001\u0271\u0003\u0271\u2629\b\u0271\u0001\u0271\u0001\u0271\u0001\u0272"+
		"\u0001\u0272\u0001\u0273\u0001\u0273\u0001\u0273\u0001\u0273\u0001\u0274"+
		"\u0001\u0274\u0001\u0274\u0003\u0274\u2636\b\u0274\u0001\u0274\u0001\u0274"+
		"\u0001\u0274\u0003\u0274\u263b\b\u0274\u0001\u0274\u0001\u0274\u0001\u0274"+
		"\u0003\u0274\u2640\b\u0274\u0003\u0274\u2642\b\u0274\u0001\u0275\u0001"+
		"\u0275\u0001\u0275\u0001\u0275\u0001\u0275\u0001\u0275\u0003\u0275\u264a"+
		"\b\u0275\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0001\u0276\u0001"+
		"\u0276\u0001\u0276\u0003\u0276\u2653\b\u0276\u0001\u0277\u0001\u0277\u0001"+
		"\u0277\u0001\u0277\u0001\u0277\u0001\u0277\u0001\u0277\u0003\u0277\u265c"+
		"\b\u0277\u0001\u0278\u0001\u0278\u0001\u0278\u0003\u0278\u2661\b\u0278"+
		"\u0001\u0278\u0001\u0278\u0001\u0278\u0001\u0278\u0001\u0278\u0001\u0278"+
		"\u0001\u0278\u0003\u0278\u266a\b\u0278\u0001\u0279\u0001\u0279\u0001\u0279"+
		"\u0003\u0279\u266f\b\u0279\u0001\u0279\u0001\u0279\u0001\u027a\u0001\u027a"+
		"\u0001\u027a\u0001\u027a\u0001\u027a\u0001\u027a\u0001\u027b\u0001\u027b"+
		"\u0001\u027c\u0001\u027c\u0003\u027c\u267d\b\u027c\u0001\u027d\u0001\u027d"+
		"\u0001\u027e\u0001\u027e\u0001\u027e\u0001\u027e\u0001\u027e\u0001\u027e"+
		"\u0003\u027e\u2687\b\u027e\u0001\u027f\u0001\u027f\u0001\u027f\u0001\u027f"+
		"\u0001\u027f\u0001\u027f\u0003\u027f\u268f\b\u027f\u0001\u0280\u0001\u0280"+
		"\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280"+
		"\u0001\u0280\u0001\u0280\u0001\u0280\u0001\u0280\u0003\u0280\u269d\b\u0280"+
		"\u0001\u0281\u0001\u0281\u0001\u0281\u0005\u0281\u26a2\b\u0281\n\u0281"+
		"\f\u0281\u26a5\t\u0281\u0001\u0282\u0001\u0282\u0001\u0282\u0005\u0282"+
		"\u26aa\b\u0282\n\u0282\f\u0282\u26ad\t\u0282\u0001\u0283\u0001\u0283\u0001"+
		"\u0283\u0001\u0283\u0001\u0283\u0003\u0283\u26b4\b\u0283\u0001\u0284\u0001"+
		"\u0284\u0001\u0284\u0005\u0284\u26b9\b\u0284\n\u0284\f\u0284\u26bc\t\u0284"+
		"\u0001\u0285\u0001\u0285\u0001\u0285\u0003\u0285\u26c1\b\u0285\u0001\u0285"+
		"\u0001\u0285\u0001\u0286\u0001\u0286\u0001\u0286\u0005\u0286\u26c8\b\u0286"+
		"\n\u0286\f\u0286\u26cb\t\u0286\u0001\u0287\u0001\u0287\u0001\u0287\u0001"+
		"\u0287\u0001\u0288\u0001\u0288\u0001\u0288\u0001\u0288\u0001\u0288\u0001"+
		"\u0288\u0001\u0288\u0001\u0288\u0003\u0288\u26d9\b\u0288\u0001\u0289\u0001"+
		"\u0289\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001\u028a\u0001"+
		"\u028a\u0001\u028a\u0003\u028a\u26e4\b\u028a\u0001\u028b\u0001\u028b\u0001"+
		"\u028b\u0001\u028b\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0001"+
		"\u028c\u0001\u028c\u0001\u028c\u0001\u028c\u0003\u028c\u2704\b\u028c\u0001"+
		"\u028d\u0001\u028d\u0001\u028d\u0001\u028d\u0001\u028d\u0001\u028d\u0001"+
		"\u028d\u0003\u028d\u270d\b\u028d\u0001\u028e\u0001\u028e\u0001\u028e\u0001"+
		"\u028e\u0001\u028e\u0003\u028e\u2714\b\u028e\u0001\u028f\u0001\u028f\u0003"+
		"\u028f\u2718\b\u028f\u0001\u028f\u0001\u028f\u0003\u028f\u271c\b\u028f"+
		"\u0001\u028f\u0001\u028f\u0001\u0290\u0004\u0290\u2721\b\u0290\u000b\u0290"+
		"\f\u0290\u2722\u0001\u0291\u0001\u0291\u0001\u0291\u0001\u0291\u0001\u0291"+
		"\u0001\u0292\u0001\u0292\u0001\u0292\u0001\u0293\u0001\u0293\u0001\u0294"+
		"\u0001\u0294\u0003\u0294\u2731\b\u0294\u0001\u0295\u0001\u0295\u0001\u0295"+
		"\u0003\u0295\u2736\b\u0295\u0001\u0295\u0001\u0295\u0001\u0295\u0003\u0295"+
		"\u273b\b\u0295\u0001\u0295\u0001\u0295\u0003\u0295\u273f\b\u0295\u0003"+
		"\u0295\u2741\b\u0295\u0001\u0295\u0003\u0295\u2744\b\u0295\u0001\u0296"+
		"\u0001\u0296\u0001\u0297\u0004\u0297\u2749\b\u0297\u000b\u0297\f\u0297"+
		"\u274a\u0001\u0298\u0005\u0298\u274e\b\u0298\n\u0298\f\u0298\u2751\t\u0298"+
		"\u0001\u0299\u0001\u0299\u0001\u0299\u0001\u029a\u0001\u029a\u0001\u029a"+
		"\u0001\u029a\u0001\u029a\u0001\u029a\u0005\u029a\u275c\b\u029a\n\u029a"+
		"\f\u029a\u275f\t\u029a\u0001\u029b\u0001\u029b\u0001\u029b\u0001\u029b"+
		"\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c"+
		"\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c"+
		"\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c"+
		"\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c\u0001\u029c"+
		"\u0001\u029c\u0003\u029c\u277e\b\u029c\u0001\u029d\u0001\u029d\u0001\u029d"+
		"\u0003\u029d\u2783\b\u029d\u0001\u029e\u0001\u029e\u0001\u029e\u0001\u029e"+
		"\u0001\u029e\u0001\u029e\u0001\u029e\u0001\u029e\u0001\u029e\u0001\u029e"+
		"\u0003\u029e\u278f\b\u029e\u0001\u029f\u0001\u029f\u0001\u029f\u0001\u029f"+
		"\u0001\u029f\u0001\u029f\u0001\u029f\u0001\u029f\u0001\u029f\u0001\u029f"+
		"\u0001\u029f\u0001\u029f\u0001\u029f\u0001\u029f\u0001\u029f\u0003\u029f"+
		"\u27a0\b\u029f\u0001\u02a0\u0001\u02a0\u0001\u02a0\u0001\u02a0\u0001\u02a1"+
		"\u0001\u02a1\u0003\u02a1\u27a8\b\u02a1\u0001\u02a2\u0001\u02a2\u0001\u02a2"+
		"\u0001\u02a2\u0001\u02a2\u0001\u02a2\u0003\u02a2\u27b0\b\u02a2\u0001\u02a3"+
		"\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3\u0001\u02a3"+
		"\u0001\u02a3\u0003\u02a3\u27c0\b\u02a3\u0001\u02a4\u0001\u02a4\u0001\u02a4"+
		"\u0003\u02a4\u27c5\b\u02a4\u0001\u02a5\u0001\u02a5\u0001\u02a5\u0001\u02a5"+
		"\u0001\u02a5\u0001\u02a5\u0001\u02a5\u0001\u02a5\u0001\u02a5\u0003\u02a5"+
		"\u27d0\b\u02a5\u0001\u02a6\u0001\u02a6\u0001\u02a6\u0001\u02a6\u0001\u02a6"+
		"\u0001\u02a6\u0001\u02a6\u0001\u02a6\u0001\u02a6\u0001\u02a6\u0003\u02a6"+
		"\u27dc\b\u02a6\u0001\u02a7\u0001\u02a7\u0001\u02a7\u0001\u02a7\u0001\u02a7"+
		"\u0001\u02a7\u0005\u02a7\u27e4\b\u02a7\n\u02a7\f\u02a7\u27e7\t\u02a7\u0001"+
		"\u02a8\u0001\u02a8\u0001\u02a8\u0001\u02a8\u0001\u02a8\u0001\u02a8\u0001"+
		"\u02a8\u0001\u02a8\u0003\u02a8\u27f1\b\u02a8\u0001\u02a9\u0001\u02a9\u0001"+
		"\u02a9\u0001\u02a9\u0001\u02a9\u0001\u02a9\u0003\u02a9\u27f9\b\u02a9\u0001"+
		"\u02aa\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0001\u02aa\u0003"+
		"\u02aa\u2801\b\u02aa\u0001\u02ab\u0001\u02ab\u0001\u02ab\u0001\u02ab\u0001"+
		"\u02ab\u0001\u02ab\u0005\u02ab\u2809\b\u02ab\n\u02ab\f\u02ab\u280c\t\u02ab"+
		"\u0001\u02ac\u0001\u02ac\u0001\u02ac\u0001\u02ac\u0003\u02ac\u2812\b\u02ac"+
		"\u0001\u02ac\u0003\u02ac\u2815\b\u02ac\u0001\u02ac\u0001\u02ac\u0001\u02ac"+
		"\u0001\u02ac\u0001\u02ac\u0001\u02ac\u0001\u02ac\u0003\u02ac\u281e\b\u02ac"+
		"\u0001\u02ac\u0003\u02ac\u2821\b\u02ac\u0001\u02ac\u0001\u02ac\u0001\u02ac"+
		"\u0003\u02ac\u2826\b\u02ac\u0001\u02ad\u0001\u02ad\u0001\u02ad\u0001\u02ad"+
		"\u0001\u02ae\u0001\u02ae\u0001\u02af\u0001\u02af\u0001\u02af\u0005\u02af"+
		"\u2831\b\u02af\n\u02af\f\u02af\u2834\t\u02af\u0001\u02b0\u0001\u02b0\u0001"+
		"\u02b0\u0001\u02b0\u0003\u02b0\u283a\b\u02b0\u0001\u02b0\u0003\u02b0\u283d"+
		"\b\u02b0\u0001\u02b1\u0001\u02b1\u0003\u02b1\u2841\b\u02b1\u0001\u02b2"+
		"\u0001\u02b2\u0001\u02b2\u0005\u02b2\u2846\b\u02b2\n\u02b2\f\u02b2\u2849"+
		"\t\u02b2\u0001\u02b3\u0001\u02b3\u0003\u02b3\u284d\b\u02b3\u0001\u02b4"+
		"\u0001\u02b4\u0001\u02b4\u0005\u02b4\u2852\b\u02b4\n\u02b4\f\u02b4\u2855"+
		"\t\u02b4\u0001\u02b5\u0001\u02b5\u0001\u02b6\u0001\u02b6\u0001\u02b7\u0001"+
		"\u02b7\u0001\u02b8\u0001\u02b8\u0001\u02b8\u0001\u02b8\u0003\u02b8\u2861"+
		"\b\u02b8\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001"+
		"\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0003\u02b9";
	private static final String _serializedATNSegment1 =
		"\u286d\b\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0003\u02b9\u2872\b"+
		"\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001"+
		"\u02b9\u0003\u02b9\u287a\b\u02b9\u0001\u02b9\u0001\u02b9\u0001\u02b9\u0001"+
		"\u02b9\u0001\u02b9\u0003\u02b9\u2881\b\u02b9\u0001\u02b9\u0001\u02b9\u0001"+
		"\u02b9\u0003\u02b9\u2886\b\u02b9\u0001\u02ba\u0001\u02ba\u0001\u02bb\u0001"+
		"\u02bb\u0001\u02bc\u0001\u02bc\u0001\u02bd\u0001\u02bd\u0001\u02be\u0001"+
		"\u02be\u0003\u02be\u2892\b\u02be\u0001\u02bf\u0001\u02bf\u0001\u02bf\u0001"+
		"\u02bf\u0005\u02bf\u2898\b\u02bf\n\u02bf\f\u02bf\u289b\t\u02bf\u0001\u02bf"+
		"\u0001\u02bf\u0003\u02bf\u289f\b\u02bf\u0001\u02c0\u0001\u02c0\u0001\u02c0"+
		"\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0001\u02c1\u0003\u02c1"+
		"\u28a9\b\u02c1\u0001\u02c2\u0001\u02c2\u0001\u02c3\u0001\u02c3\u0001\u02c3"+
		"\u0003\u02c3\u28b0\b\u02c3\u0001\u02c4\u0001\u02c4\u0001\u02c4\u0005\u02c4"+
		"\u28b5\b\u02c4\n\u02c4\f\u02c4\u28b8\t\u02c4\u0001\u02c5\u0001\u02c5\u0001"+
		"\u02c5\u0003\u02c5\u28bd\b\u02c5\u0001\u02c6\u0001\u02c6\u0001\u02c6\u0003"+
		"\u02c6\u28c2\b\u02c6\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0001\u02c7\u0003"+
		"\u02c7\u28c8\b\u02c7\u0001\u02c8\u0001\u02c8\u0001\u02c8\u0001\u02c8\u0001"+
		"\u02c8\u0001\u02c8\u0003\u02c8\u28d0\b\u02c8\u0001\u02c9\u0001\u02c9\u0003"+
		"\u02c9\u28d4\b\u02c9\u0001\u02ca\u0001\u02ca\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001\u02cb\u0001"+
		"\u02cb\u0003\u02cb\u2917\b\u02cb\u0001\u02cc\u0001\u02cc\u0001\u02cd\u0001"+
		"\u02cd\u0001\u02ce\u0001\u02ce\u0001\u02cf\u0001\u02cf\u0001\u02d0\u0001"+
		"\u02d0\u0003\u02d0\u2923\b\u02d0\u0001\u02d0\u0001\u02d0\u0001\u02d0\u0001"+
		"\u02d0\u0003\u02d0\u2929\b\u02d0\u0001\u02d0\u0000\u0004\u04b4\u0534\u054e"+
		"\u0556\u02d1\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016"+
		"\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt"+
		"vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274"+
		"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c"+
		"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4"+
		"\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc"+
		"\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4"+
		"\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec"+
		"\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304"+
		"\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c"+
		"\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334"+
		"\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c"+
		"\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364"+
		"\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c"+
		"\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394"+
		"\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac"+
		"\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4"+
		"\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc"+
		"\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4"+
		"\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c"+
		"\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424"+
		"\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c"+
		"\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454"+
		"\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c"+
		"\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484"+
		"\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c"+
		"\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4"+
		"\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc"+
		"\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4"+
		"\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc"+
		"\u04fe\u0500\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514"+
		"\u0516\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c"+
		"\u052e\u0530\u0532\u0534\u0536\u0538\u053a\u053c\u053e\u0540\u0542\u0544"+
		"\u0546\u0548\u054a\u054c\u054e\u0550\u0552\u0554\u0556\u0558\u055a\u055c"+
		"\u055e\u0560\u0562\u0564\u0566\u0568\u056a\u056c\u056e\u0570\u0572\u0574"+
		"\u0576\u0578\u057a\u057c\u057e\u0580\u0582\u0584\u0586\u0588\u058a\u058c"+
		"\u058e\u0590\u0592\u0594\u0596\u0598\u059a\u059c\u059e\u05a0\u0000B\u0002"+
		"\u0000\u00e9\u00e9\u018b\u018b\u0002\u0000hh\u015d\u015d\u0002\u0000\u0089"+
		"\u0089\u015d\u015d\u0003\u0000hh\u0089\u0089\u015d\u015d\u0002\u0000\u00ab"+
		"\u00ab\u00e5\u00e5\u0002\u0000\u011b\u011b\u016b\u016b\u0002\u0000\n\n"+
		"\u0084\u0084\u0002\u0000\u00c8\u00c8\u018a\u018a\u0002\u0000\u00da\u00da"+
		"\u0103\u0103\u0005\u0000DD\u013f\u013f\u0168\u0168\u017f\u017f\u0181\u0181"+
		"\u0002\u0000\u00bc\u00bc\u015a\u015a\u0002\u0000ff\u0084\u0084\u0002\u0000"+
		"\u017f\u017f\u0181\u0181\u0002\u0000\u00ee\u00ee\u0106\u0106\t\u0000D"+
		"D\u00c6\u00c6\u00cb\u00cb\u00d9\u00d9\u0101\u0101\u0109\u0109\u0175\u0175"+
		"\u0178\u0178\u01dc\u01dc\u0003\u0000\u0097\u0097\u013b\u013b\u016f\u016f"+
		"\u0002\u0000[[tt\u0003\u0000\u00d3\u00d3\u0122\u0122\u0125\u0125\u0005"+
		"\u0000DD~~\u00dc\u00dc\u010e\u010e\u0190\u0190\u0002\u0000\u0082\u0082"+
		"\u0108\u0108\u0001\u0000\u01e6\u01e7\u0002\u0000\u0082\u0082\u01bd\u01bd"+
		"\u0002\u0000\u0174\u0174\u01bd\u01bd\u0002\u0000\u00f9\u00f9\u0147\u0147"+
		"\u0003\u0000\u0160\u0160\u0184\u0184\u01e3\u01e3\u0002\u0000ffjj\u0005"+
		"\u0000\u00fa\u00fa\u0168\u0168\u017d\u017d\u0188\u0188\u01ed\u01ee\u0002"+
		"\u0000KK]]\u0002\u0000\n\n[[\u0003\u0000\u00f9\u00f9\u0147\u0147\u01e0"+
		"\u01e0\u0002\u0000\u00d5\u00d5\u017c\u017c\u0004\u0000~~\u00dc\u00dc\u010e"+
		"\u010e\u0190\u0190\u0002\u0000\u00af\u00af\u010f\u010f\u0002\u0000\u0183"+
		"\u0183\u019b\u019b\u0002\u0000\u00bd\u00bd\u011b\u011b\u0002\u0000\u0158"+
		"\u0158\u016c\u016c\u0001\u0000EF\u0002\u0000\u0089\u0089\u017c\u017c\u0002"+
		"\u0000\u00ef\u00ef\u016d\u016d\u0002\u0000aa\u0087\u0087\u0002\u0000\u00fb"+
		"\u00fb\u011b\u011b\u0002\u0000DD^^\u0002\u0000\u015f\u015f\u01bd\u01bd"+
		"\u0002\u0000\u00f5\u00f5\u012b\u012b\u0004\u0000\u0097\u0097\u0099\u0099"+
		"\u009d\u009d\u00a4\u00a4\u0002\u0000\u01a6\u01a7\u01b5\u01b5\u0001\u0000"+
		"\u01a6\u01a7\u0001\u0000\u01c1\u01c2\u0001\u0000\u0012\u0013\u0002\u0000"+
		"\u009b\u009b\u00a0\u00a0\u0005\u0000\n\n\u0010\u0011\u0015\u0015\u0017"+
		"\u0017\u0019\u0019\u0001\u0000\f\r\u0003\u0000\t\t\u000e\u000e\u001b\u001b"+
		"\u0003\u0000MMoo\u0085\u0085\u0002\u0000\u00cc\u00cc\u00e2\u00e2\u0002"+
		"\u0000\u014f\u014f\u01e8\u01e8\u0002\u0000\u00f6\u00f6\u0140\u0140\u0003"+
		"\u0000DDHH\u0080\u0080\u0006\u0000\t\n\f\u0011\u0015\u0015\u0017\u0017"+
		"\u0019\u0019\u001b\u001b\u0002\u0000\u0014\u0014\u0016\u0016\u0001\u0000"+
		"\u0209\u020c\u0001\u0000\u0244\u0247\r\u0000+B\u00a2\u00a2\u00a7\u014c"+
		"\u014e\u01a1\u01d7\u01ea\u01ed\u01fb\u01fd\u01fd\u01ff\u01ff\u0201\u0201"+
		"\u0204\u020e\u0211\u0211\u021e\u021e\u0229\u0229\u0003\u0000\u0090\u00a1"+
		"\u00a3\u00a6\u01fe\u01fe\u0003\u0000**D\u008f\u01ec\u01ec#\u0000\u001e"+
		"BDHKSU`bbeejknoqtwxz|~\u0083\u0085\u0086\u0088\u008c\u0090\u009a\u009c"+
		"\u009f\u00a1\u00a1\u00a4\u00d5\u00d7\u00ff\u0101\u0123\u0125\u0126\u0128"+
		"\u014c\u014e\u0164\u0166\u0194\u0196\u0199\u019b\u019e\u01a0\u01a5\u01a8"+
		"\u01ba\u01bc\u01c7\u01cf\u0202\u0204\u0204\u0207\u020f\u0211\u0211\u021e"+
		"\u021e\u0229\u0229\u2de4\u0000\u05a2\u0001\u0000\u0000\u0000\u0002\u05a5"+
		"\u0001\u0000\u0000\u0000\u0004\u05a8\u0001\u0000\u0000\u0000\u0006\u062f"+
		"\u0001\u0000\u0000\u0000\b\u0631\u0001\u0000\u0000\u0000\n\u0634\u0001"+
		"\u0000\u0000\u0000\f\u063c\u0001\u0000\u0000\u0000\u000e\u0641\u0001\u0000"+
		"\u0000\u0000\u0010\u0647\u0001\u0000\u0000\u0000\u0012\u065c\u0001\u0000"+
		"\u0000\u0000\u0014\u0668\u0001\u0000\u0000\u0000\u0016\u066a\u0001\u0000"+
		"\u0000\u0000\u0018\u0672\u0001\u0000\u0000\u0000\u001a\u067a\u0001\u0000"+
		"\u0000\u0000\u001c\u067e\u0001\u0000\u0000\u0000\u001e\u0689\u0001\u0000"+
		"\u0000\u0000 \u0691\u0001\u0000\u0000\u0000\"\u0699\u0001\u0000\u0000"+
		"\u0000$\u06a0\u0001\u0000\u0000\u0000&\u06a2\u0001\u0000\u0000\u0000("+
		"\u06b3\u0001\u0000\u0000\u0000*\u06b8\u0001\u0000\u0000\u0000,\u06c1\u0001"+
		"\u0000\u0000\u0000.\u06c3\u0001\u0000\u0000\u00000\u06d1\u0001\u0000\u0000"+
		"\u00002\u06d3\u0001\u0000\u0000\u00004\u06f4\u0001\u0000\u0000\u00006"+
		"\u06f6\u0001\u0000\u0000\u00008\u06fe\u0001\u0000\u0000\u0000:\u0708\u0001"+
		"\u0000\u0000\u0000<\u070f\u0001\u0000\u0000\u0000>\u0715\u0001\u0000\u0000"+
		"\u0000@\u0727\u0001\u0000\u0000\u0000B\u072b\u0001\u0000\u0000\u0000D"+
		"\u072f\u0001\u0000\u0000\u0000F\u0731\u0001\u0000\u0000\u0000H\u073c\u0001"+
		"\u0000\u0000\u0000J\u0740\u0001\u0000\u0000\u0000L\u0745\u0001\u0000\u0000"+
		"\u0000N\u074a\u0001\u0000\u0000\u0000P\u074c\u0001\u0000\u0000\u0000R"+
		"\u0758\u0001\u0000\u0000\u0000T\u075f\u0001\u0000\u0000\u0000V\u0761\u0001"+
		"\u0000\u0000\u0000X\u0763\u0001\u0000\u0000\u0000Z\u0765\u0001\u0000\u0000"+
		"\u0000\\\u07d8\u0001\u0000\u0000\u0000^\u07da\u0001\u0000\u0000\u0000"+
		"`\u07ea\u0001\u0000\u0000\u0000b\u07ec\u0001\u0000\u0000\u0000d\u091a"+
		"\u0001\u0000\u0000\u0000f\u0921\u0001\u0000\u0000\u0000h\u0923\u0001\u0000"+
		"\u0000\u0000j\u0925\u0001\u0000\u0000\u0000l\u0928\u0001\u0000\u0000\u0000"+
		"n\u0931\u0001\u0000\u0000\u0000p\u0933\u0001\u0000\u0000\u0000r\u0937"+
		"\u0001\u0000\u0000\u0000t\u093a\u0001\u0000\u0000\u0000v\u0942\u0001\u0000"+
		"\u0000\u0000x\u094e\u0001\u0000\u0000\u0000z\u095f\u0001\u0000\u0000\u0000"+
		"|\u097b\u0001\u0000\u0000\u0000~\u097d\u0001\u0000\u0000\u0000\u0080\u0980"+
		"\u0001\u0000\u0000\u0000\u0082\u0988\u0001\u0000\u0000\u0000\u0084\u098d"+
		"\u0001\u0000\u0000\u0000\u0086\u09b3\u0001\u0000\u0000\u0000\u0088\u09b5"+
		"\u0001\u0000\u0000\u0000\u008a\u09df\u0001\u0000\u0000\u0000\u008c\u09e1"+
		"\u0001\u0000\u0000\u0000\u008e\u09e3\u0001\u0000\u0000\u0000\u0090\u09e8"+
		"\u0001\u0000\u0000\u0000\u0092\u09ef\u0001\u0000\u0000\u0000\u0094\u09f4"+
		"\u0001\u0000\u0000\u0000\u0096\u0a1e\u0001\u0000\u0000\u0000\u0098\u0a20"+
		"\u0001\u0000\u0000\u0000\u009a\u0a23\u0001\u0000\u0000\u0000\u009c\u0a28"+
		"\u0001\u0000\u0000\u0000\u009e\u0a2a\u0001\u0000\u0000\u0000\u00a0\u0a32"+
		"\u0001\u0000\u0000\u0000\u00a2\u0a3d\u0001\u0000\u0000\u0000\u00a4\u0a3f"+
		"\u0001\u0000\u0000\u0000\u00a6\u0a47\u0001\u0000\u0000\u0000\u00a8\u0a49"+
		"\u0001\u0000\u0000\u0000\u00aa\u0a9e\u0001\u0000\u0000\u0000\u00ac\u0aa0"+
		"\u0001\u0000\u0000\u0000\u00ae\u0aa2\u0001\u0000\u0000\u0000\u00b0\u0aa6"+
		"\u0001\u0000\u0000\u0000\u00b2\u0aae\u0001\u0000\u0000\u0000\u00b4\u0ab9"+
		"\u0001\u0000\u0000\u0000\u00b6\u0abd\u0001\u0000\u0000\u0000\u00b8\u0abf"+
		"\u0001\u0000\u0000\u0000\u00ba\u0ac6\u0001\u0000\u0000\u0000\u00bc\u0ad0"+
		"\u0001\u0000\u0000\u0000\u00be\u0adb\u0001\u0000\u0000\u0000\u00c0\u0b11"+
		"\u0001\u0000\u0000\u0000\u00c2\u0b16\u0001\u0000\u0000\u0000\u00c4\u0b1d"+
		"\u0001\u0000\u0000\u0000\u00c6\u0b1f\u0001\u0000\u0000\u0000\u00c8\u0b27"+
		"\u0001\u0000\u0000\u0000\u00ca\u0b2a\u0001\u0000\u0000\u0000\u00cc\u0b31"+
		"\u0001\u0000\u0000\u0000\u00ce\u0b89\u0001\u0000\u0000\u0000\u00d0\u0b8b"+
		"\u0001\u0000\u0000\u0000\u00d2\u0b8e\u0001\u0000\u0000\u0000\u00d4\u0b92"+
		"\u0001\u0000\u0000\u0000\u00d6\u0b9a\u0001\u0000\u0000\u0000\u00d8\u0b9c"+
		"\u0001\u0000\u0000\u0000\u00da\u0ba1\u0001\u0000\u0000\u0000\u00dc\u0ba4"+
		"\u0001\u0000\u0000\u0000\u00de\u0bac\u0001\u0000\u0000\u0000\u00e0\u0bb6"+
		"\u0001\u0000\u0000\u0000\u00e2\u0bc3\u0001\u0000\u0000\u0000\u00e4\u0bc5"+
		"\u0001\u0000\u0000\u0000\u00e6\u0bc9\u0001\u0000\u0000\u0000\u00e8\u0bd3"+
		"\u0001\u0000\u0000\u0000\u00ea\u0bd5\u0001\u0000\u0000\u0000\u00ec\u0bda"+
		"\u0001\u0000\u0000\u0000\u00ee\u0bdc\u0001\u0000\u0000\u0000\u00f0\u0be3"+
		"\u0001\u0000\u0000\u0000\u00f2\u0c02\u0001\u0000\u0000\u0000\u00f4\u0c04"+
		"\u0001\u0000\u0000\u0000\u00f6\u0c0b\u0001\u0000\u0000\u0000\u00f8\u0c0d"+
		"\u0001\u0000\u0000\u0000\u00fa\u0c16\u0001\u0000\u0000\u0000\u00fc\u0c19"+
		"\u0001\u0000\u0000\u0000\u00fe\u0c1e\u0001\u0000\u0000\u0000\u0100\u0c22"+
		"\u0001\u0000\u0000\u0000\u0102\u0c32\u0001\u0000\u0000\u0000\u0104\u0c3d"+
		"\u0001\u0000\u0000\u0000\u0106\u0c4d\u0001\u0000\u0000\u0000\u0108\u0c5d"+
		"\u0001\u0000\u0000\u0000\u010a\u0c63\u0001\u0000\u0000\u0000\u010c\u0c74"+
		"\u0001\u0000\u0000\u0000\u010e\u0c81\u0001\u0000\u0000\u0000\u0110\u0c83"+
		"\u0001\u0000\u0000\u0000\u0112\u0c8d\u0001\u0000\u0000\u0000\u0114\u0c9b"+
		"\u0001\u0000\u0000\u0000\u0116\u0ca4\u0001\u0000\u0000\u0000\u0118\u0ca6"+
		"\u0001\u0000\u0000\u0000\u011a\u0cab\u0001\u0000\u0000\u0000\u011c\u0cd1"+
		"\u0001\u0000\u0000\u0000\u011e\u0cd3\u0001\u0000\u0000\u0000\u0120\u0cdb"+
		"\u0001\u0000\u0000\u0000\u0122\u0cdd\u0001\u0000\u0000\u0000\u0124\u0ce5"+
		"\u0001\u0000\u0000\u0000\u0126\u0cfb\u0001\u0000\u0000\u0000\u0128\u0cfd"+
		"\u0001\u0000\u0000\u0000\u012a\u0d01\u0001\u0000\u0000\u0000\u012c\u0d08"+
		"\u0001\u0000\u0000\u0000\u012e\u0d0a\u0001\u0000\u0000\u0000\u0130\u0d0c"+
		"\u0001\u0000\u0000\u0000\u0132\u0d0e\u0001\u0000\u0000\u0000\u0134\u0d19"+
		"\u0001\u0000\u0000\u0000\u0136\u0d1c\u0001\u0000\u0000\u0000\u0138\u0d24"+
		"\u0001\u0000\u0000\u0000\u013a\u0d34\u0001\u0000\u0000\u0000\u013c\u0d3e"+
		"\u0001\u0000\u0000\u0000\u013e\u0d40\u0001\u0000\u0000\u0000\u0140\u0d49"+
		"\u0001\u0000\u0000\u0000\u0142\u0d4c\u0001\u0000\u0000\u0000\u0144\u0db7"+
		"\u0001\u0000\u0000\u0000\u0146\u0db9\u0001\u0000\u0000\u0000\u0148\u0dcc"+
		"\u0001\u0000\u0000\u0000\u014a\u0dcf\u0001\u0000\u0000\u0000\u014c\u0dd3"+
		"\u0001\u0000\u0000\u0000\u014e\u0de6\u0001\u0000\u0000\u0000\u0150\u0de8"+
		"\u0001\u0000\u0000\u0000\u0152\u0ded\u0001\u0000\u0000\u0000\u0154\u0df5"+
		"\u0001\u0000\u0000\u0000\u0156\u0dfa\u0001\u0000\u0000\u0000\u0158\u0e09"+
		"\u0001\u0000\u0000\u0000\u015a\u0e0b\u0001\u0000\u0000\u0000\u015c\u0e0e"+
		"\u0001\u0000\u0000\u0000\u015e\u0e10\u0001\u0000\u0000\u0000\u0160\u0e35"+
		"\u0001\u0000\u0000\u0000\u0162\u0e37\u0001\u0000\u0000\u0000\u0164\u0e3a"+
		"\u0001\u0000\u0000\u0000\u0166\u0e3f\u0001\u0000\u0000\u0000\u0168\u0e41"+
		"\u0001\u0000\u0000\u0000\u016a\u0e93\u0001\u0000\u0000\u0000\u016c\u0e95"+
		"\u0001\u0000\u0000\u0000\u016e\u0ea7\u0001\u0000\u0000\u0000\u0170\u0ea9"+
		"\u0001\u0000\u0000\u0000\u0172\u0ec5\u0001\u0000\u0000\u0000\u0174\u0ec9"+
		"\u0001\u0000\u0000\u0000\u0176\u0edd\u0001\u0000\u0000\u0000\u0178\u0edf"+
		"\u0001\u0000\u0000\u0000\u017a\u0ee8\u0001\u0000\u0000\u0000\u017c\u0efc"+
		"\u0001\u0000\u0000\u0000\u017e\u0f0a\u0001\u0000\u0000\u0000\u0180\u0f0f"+
		"\u0001\u0000\u0000\u0000\u0182\u0f15\u0001\u0000\u0000\u0000\u0184\u0f18"+
		"\u0001\u0000\u0000\u0000\u0186\u0f1b\u0001\u0000\u0000\u0000\u0188\u0f1e"+
		"\u0001\u0000\u0000\u0000\u018a\u0f21\u0001\u0000\u0000\u0000\u018c\u0f23"+
		"\u0001\u0000\u0000\u0000\u018e\u0f2c\u0001\u0000\u0000\u0000\u0190\u0f5e"+
		"\u0001\u0000\u0000\u0000\u0192\u0f64\u0001\u0000\u0000\u0000\u0194\u0f66"+
		"\u0001\u0000\u0000\u0000\u0196\u0f75\u0001\u0000\u0000\u0000\u0198\u0f77"+
		"\u0001\u0000\u0000\u0000\u019a\u0f7b\u0001\u0000\u0000\u0000\u019c\u0f7f"+
		"\u0001\u0000\u0000\u0000\u019e\u0f86\u0001\u0000\u0000\u0000\u01a0\u0f88"+
		"\u0001\u0000\u0000\u0000\u01a2\u0f8a\u0001\u0000\u0000\u0000\u01a4\u0f8c"+
		"\u0001\u0000\u0000\u0000\u01a6\u0f92\u0001\u0000\u0000\u0000\u01a8\u0f94"+
		"\u0001\u0000\u0000\u0000\u01aa\u0f96\u0001\u0000\u0000\u0000\u01ac\u0f9b"+
		"\u0001\u0000\u0000\u0000\u01ae\u0f9f\u0001\u0000\u0000\u0000\u01b0\u0fac"+
		"\u0001\u0000\u0000\u0000\u01b2\u0fae\u0001\u0000\u0000\u0000\u01b4\u0fb4"+
		"\u0001\u0000\u0000\u0000\u01b6\u0fc2\u0001\u0000\u0000\u0000\u01b8\u0fde"+
		"\u0001\u0000\u0000\u0000\u01ba\u0fe0\u0001\u0000\u0000\u0000\u01bc\u0fe8"+
		"\u0001\u0000\u0000\u0000\u01be\u0fee\u0001\u0000\u0000\u0000\u01c0\u0ff6"+
		"\u0001\u0000\u0000\u0000\u01c2\u1002\u0001\u0000\u0000\u0000\u01c4\u1004"+
		"\u0001\u0000\u0000\u0000\u01c6\u107f\u0001\u0000\u0000\u0000\u01c8\u1081"+
		"\u0001\u0000\u0000\u0000\u01ca\u1085\u0001\u0000\u0000\u0000\u01cc\u108d"+
		"\u0001\u0000\u0000\u0000\u01ce\u1098\u0001\u0000\u0000\u0000\u01d0\u109a"+
		"\u0001\u0000\u0000\u0000\u01d2\u109e\u0001\u0000\u0000\u0000\u01d4\u10a6"+
		"\u0001\u0000\u0000\u0000\u01d6\u10aa\u0001\u0000\u0000\u0000\u01d8\u10ac"+
		"\u0001\u0000\u0000\u0000\u01da\u10df\u0001\u0000\u0000\u0000\u01dc\u10e1"+
		"\u0001\u0000\u0000\u0000\u01de\u10e5\u0001\u0000\u0000\u0000\u01e0\u10f7"+
		"\u0001\u0000\u0000\u0000\u01e2\u111e\u0001\u0000\u0000\u0000\u01e4\u1120"+
		"\u0001\u0000\u0000\u0000\u01e6\u1122\u0001\u0000\u0000\u0000\u01e8\u112b"+
		"\u0001\u0000\u0000\u0000\u01ea\u112d\u0001\u0000\u0000\u0000\u01ec\u112f"+
		"\u0001\u0000\u0000\u0000\u01ee\u1148\u0001\u0000\u0000\u0000\u01f0\u114a"+
		"\u0001\u0000\u0000\u0000\u01f2\u115e\u0001\u0000\u0000\u0000\u01f4\u1174"+
		"\u0001\u0000\u0000\u0000\u01f6\u118a\u0001\u0000\u0000\u0000\u01f8\u118c"+
		"\u0001\u0000\u0000\u0000\u01fa\u1193\u0001\u0000\u0000\u0000\u01fc\u11f4"+
		"\u0001\u0000\u0000\u0000\u01fe\u120d\u0001\u0000\u0000\u0000\u0200\u1214"+
		"\u0001\u0000\u0000\u0000\u0202\u1225\u0001\u0000\u0000\u0000\u0204\u1227"+
		"\u0001\u0000\u0000\u0000\u0206\u1229\u0001\u0000\u0000\u0000\u0208\u1231"+
		"\u0001\u0000\u0000\u0000\u020a\u1237\u0001\u0000\u0000\u0000\u020c\u123b"+
		"\u0001\u0000\u0000\u0000\u020e\u1243\u0001\u0000\u0000\u0000\u0210\u1252"+
		"\u0001\u0000\u0000\u0000\u0212\u12e7\u0001\u0000\u0000\u0000\u0214\u12eb"+
		"\u0001\u0000\u0000\u0000\u0216\u135c\u0001\u0000\u0000\u0000\u0218\u135e"+
		"\u0001\u0000\u0000\u0000\u021a\u1363\u0001\u0000\u0000\u0000\u021c\u1369"+
		"\u0001\u0000\u0000\u0000\u021e\u13c0\u0001\u0000\u0000\u0000\u0220\u13c2"+
		"\u0001\u0000\u0000\u0000\u0222\u13c4\u0001\u0000\u0000\u0000\u0224\u13c6"+
		"\u0001\u0000\u0000\u0000\u0226\u13e4\u0001\u0000\u0000\u0000\u0228\u13f5"+
		"\u0001\u0000\u0000\u0000\u022a\u13f7\u0001\u0000\u0000\u0000\u022c\u140f"+
		"\u0001\u0000\u0000\u0000\u022e\u144b\u0001\u0000\u0000\u0000\u0230\u144d"+
		"\u0001\u0000\u0000\u0000\u0232\u1458\u0001\u0000\u0000\u0000\u0234\u145a"+
		"\u0001\u0000\u0000\u0000\u0236\u145e\u0001\u0000\u0000\u0000\u0238\u147f"+
		"\u0001\u0000\u0000\u0000\u023a\u1481\u0001\u0000\u0000\u0000\u023c\u1485"+
		"\u0001\u0000\u0000\u0000\u023e\u1489\u0001\u0000\u0000\u0000\u0240\u1492"+
		"\u0001\u0000\u0000\u0000\u0242\u149e\u0001\u0000\u0000\u0000\u0244\u14be"+
		"\u0001\u0000\u0000\u0000\u0246\u14c0\u0001\u0000\u0000\u0000\u0248\u1501"+
		"\u0001\u0000\u0000\u0000\u024a\u1503\u0001\u0000\u0000\u0000\u024c\u1505"+
		"\u0001\u0000\u0000\u0000\u024e\u1507\u0001\u0000\u0000\u0000\u0250\u1509"+
		"\u0001\u0000\u0000\u0000\u0252\u150b\u0001\u0000\u0000\u0000\u0254\u150e"+
		"\u0001\u0000\u0000\u0000\u0256\u152d\u0001\u0000\u0000\u0000\u0258\u153a"+
		"\u0001\u0000\u0000\u0000\u025a\u153c\u0001\u0000\u0000\u0000\u025c\u1541"+
		"\u0001\u0000\u0000\u0000\u025e\u1549\u0001\u0000\u0000\u0000\u0260\u154c"+
		"\u0001\u0000\u0000\u0000\u0262\u154e\u0001\u0000\u0000\u0000\u0264\u1554"+
		"\u0001\u0000\u0000\u0000\u0266\u1556\u0001\u0000\u0000\u0000\u0268\u156a"+
		"\u0001\u0000\u0000\u0000\u026a\u156d\u0001\u0000\u0000\u0000\u026c\u1573"+
		"\u0001\u0000\u0000\u0000\u026e\u157b\u0001\u0000\u0000\u0000\u0270\u158b"+
		"\u0001\u0000\u0000\u0000\u0272\u158d\u0001\u0000\u0000\u0000\u0274\u1593"+
		"\u0001\u0000\u0000\u0000\u0276\u15a8\u0001\u0000\u0000\u0000\u0278\u15b1"+
		"\u0001\u0000\u0000\u0000\u027a\u15b3\u0001\u0000\u0000\u0000\u027c\u15b5"+
		"\u0001\u0000\u0000\u0000\u027e\u15c0\u0001\u0000\u0000\u0000\u0280\u15c2"+
		"\u0001\u0000\u0000\u0000\u0282\u15c7\u0001\u0000\u0000\u0000\u0284\u15c9"+
		"\u0001\u0000\u0000\u0000\u0286\u15d8\u0001\u0000\u0000\u0000\u0288\u15e0"+
		"\u0001\u0000\u0000\u0000\u028a\u15e3\u0001\u0000\u0000\u0000\u028c\u15ec"+
		"\u0001\u0000\u0000\u0000\u028e\u1615\u0001\u0000\u0000\u0000\u0290\u161f"+
		"\u0001\u0000\u0000\u0000\u0292\u1626\u0001\u0000\u0000\u0000\u0294\u1628"+
		"\u0001\u0000\u0000\u0000\u0296\u1634\u0001\u0000\u0000\u0000\u0298\u1637"+
		"\u0001\u0000\u0000\u0000\u029a\u163a\u0001\u0000\u0000\u0000\u029c\u1642"+
		"\u0001\u0000\u0000\u0000\u029e\u164a\u0001\u0000\u0000\u0000\u02a0\u164e"+
		"\u0001\u0000\u0000\u0000\u02a2\u167a\u0001\u0000\u0000\u0000\u02a4\u168a"+
		"\u0001\u0000\u0000\u0000\u02a6\u169a\u0001\u0000\u0000\u0000\u02a8\u16b2"+
		"\u0001\u0000\u0000\u0000\u02aa\u16b9\u0001\u0000\u0000\u0000\u02ac\u16be"+
		"\u0001\u0000\u0000\u0000\u02ae\u16c6\u0001\u0000\u0000\u0000\u02b0\u16c9"+
		"\u0001\u0000\u0000\u0000\u02b2\u16cd\u0001\u0000\u0000\u0000\u02b4\u16d4"+
		"\u0001\u0000\u0000\u0000\u02b6\u16fb\u0001\u0000\u0000\u0000\u02b8\u1701"+
		"\u0001\u0000\u0000\u0000\u02ba\u1703\u0001\u0000\u0000\u0000\u02bc\u1710"+
		"\u0001\u0000\u0000\u0000\u02be\u1713\u0001\u0000\u0000\u0000\u02c0\u1742"+
		"\u0001\u0000\u0000\u0000\u02c2\u1744\u0001\u0000\u0000\u0000\u02c4\u176e"+
		"\u0001\u0000\u0000\u0000\u02c6\u1770\u0001\u0000\u0000\u0000\u02c8\u1772"+
		"\u0001\u0000\u0000\u0000\u02ca\u1774\u0001\u0000\u0000\u0000\u02cc\u1784"+
		"\u0001\u0000\u0000\u0000\u02ce\u196d\u0001\u0000\u0000\u0000\u02d0\u196f"+
		"\u0001\u0000\u0000\u0000\u02d2\u1971\u0001\u0000\u0000\u0000\u02d4\u19b9"+
		"\u0001\u0000\u0000\u0000\u02d6\u19bb\u0001\u0000\u0000\u0000\u02d8\u1a96"+
		"\u0001\u0000\u0000\u0000\u02da\u1a98\u0001\u0000\u0000\u0000\u02dc\u1aa0"+
		"\u0001\u0000\u0000\u0000\u02de\u1ab0\u0001\u0000\u0000\u0000\u02e0\u1ab7"+
		"\u0001\u0000\u0000\u0000\u02e2\u1ab9\u0001\u0000\u0000\u0000\u02e4\u1b7a"+
		"\u0001\u0000\u0000\u0000\u02e6\u1b7c\u0001\u0000\u0000\u0000\u02e8\u1b85"+
		"\u0001\u0000\u0000\u0000\u02ea\u1b8d\u0001\u0000\u0000\u0000\u02ec\u1baa"+
		"\u0001\u0000\u0000\u0000\u02ee\u1bac\u0001\u0000\u0000\u0000\u02f0\u1bb6"+
		"\u0001\u0000\u0000\u0000\u02f2\u1bbe\u0001\u0000\u0000\u0000\u02f4\u1be7"+
		"\u0001\u0000\u0000\u0000\u02f6\u1bf7\u0001\u0000\u0000\u0000\u02f8\u1bf9"+
		"\u0001\u0000\u0000\u0000\u02fa\u1c13\u0001\u0000\u0000\u0000\u02fc\u1c16"+
		"\u0001\u0000\u0000\u0000\u02fe\u1c26\u0001\u0000\u0000\u0000\u0300\u1c28"+
		"\u0001\u0000\u0000\u0000\u0302\u1c2a\u0001\u0000\u0000\u0000\u0304\u1c2c"+
		"\u0001\u0000\u0000\u0000\u0306\u1c2e\u0001\u0000\u0000\u0000\u0308\u1c33"+
		"\u0001\u0000\u0000\u0000\u030a\u1c36\u0001\u0000\u0000\u0000\u030c\u1c3d"+
		"\u0001\u0000\u0000\u0000\u030e\u1c84\u0001\u0000\u0000\u0000\u0310\u1c86"+
		"\u0001\u0000\u0000\u0000\u0312\u1c92\u0001\u0000\u0000\u0000\u0314\u1c94"+
		"\u0001\u0000\u0000\u0000\u0316\u1c9e\u0001\u0000\u0000\u0000\u0318\u1ca0"+
		"\u0001\u0000\u0000\u0000\u031a\u1ca6\u0001\u0000\u0000\u0000\u031c\u1cc6"+
		"\u0001\u0000\u0000\u0000\u031e\u1ccd\u0001\u0000\u0000\u0000\u0320\u1cd0"+
		"\u0001\u0000\u0000\u0000\u0322\u1cd9\u0001\u0000\u0000\u0000\u0324\u1cdc"+
		"\u0001\u0000\u0000\u0000\u0326\u1ce0\u0001\u0000\u0000\u0000\u0328\u1cf1"+
		"\u0001\u0000\u0000\u0000\u032a\u1cf3\u0001\u0000\u0000\u0000\u032c\u1cf5"+
		"\u0001\u0000\u0000\u0000\u032e\u1d04\u0001\u0000\u0000\u0000\u0330\u1d09"+
		"\u0001\u0000\u0000\u0000\u0332\u1d19\u0001\u0000\u0000\u0000\u0334\u1d21"+
		"\u0001\u0000\u0000\u0000\u0336\u1d23\u0001\u0000\u0000\u0000\u0338\u1d29"+
		"\u0001\u0000\u0000\u0000\u033a\u1d2e\u0001\u0000\u0000\u0000\u033c\u1d37"+
		"\u0001\u0000\u0000\u0000\u033e\u1d52\u0001\u0000\u0000\u0000\u0340\u1d54"+
		"\u0001\u0000\u0000\u0000\u0342\u1da3\u0001\u0000\u0000\u0000\u0344\u1da5"+
		"\u0001\u0000\u0000\u0000\u0346\u1da7\u0001\u0000\u0000\u0000\u0348\u1dc8"+
		"\u0001\u0000\u0000\u0000\u034a\u1dca\u0001\u0000\u0000\u0000\u034c\u1de4"+
		"\u0001\u0000\u0000\u0000\u034e\u1df4\u0001\u0000\u0000\u0000\u0350\u1df6"+
		"\u0001\u0000\u0000\u0000\u0352\u1dfe\u0001\u0000\u0000\u0000\u0354\u1e06"+
		"\u0001\u0000\u0000\u0000\u0356\u1e08\u0001\u0000\u0000\u0000\u0358\u1e0f"+
		"\u0001\u0000\u0000\u0000\u035a\u1e13\u0001\u0000\u0000\u0000\u035c\u1e15"+
		"\u0001\u0000\u0000\u0000\u035e\u1e1b\u0001\u0000\u0000\u0000\u0360\u1e1f"+
		"\u0001\u0000\u0000\u0000\u0362\u1e21\u0001\u0000\u0000\u0000\u0364\u1e23"+
		"\u0001\u0000\u0000\u0000\u0366\u1e25\u0001\u0000\u0000\u0000\u0368\u1e27"+
		"\u0001\u0000\u0000\u0000\u036a\u1e29\u0001\u0000\u0000\u0000\u036c\u1e2d"+
		"\u0001\u0000\u0000\u0000\u036e\u1e31\u0001\u0000\u0000\u0000\u0370\u1e39"+
		"\u0001\u0000\u0000\u0000\u0372\u1e4d\u0001\u0000\u0000\u0000\u0374\u1e58"+
		"\u0001\u0000\u0000\u0000\u0376\u1e5a\u0001\u0000\u0000\u0000\u0378\u1e62"+
		"\u0001\u0000\u0000\u0000\u037a\u1e68\u0001\u0000\u0000\u0000\u037c\u1e6c"+
		"\u0001\u0000\u0000\u0000\u037e\u1e6e\u0001\u0000\u0000\u0000\u0380\u1e76"+
		"\u0001\u0000\u0000\u0000\u0382\u1e7e\u0001\u0000\u0000\u0000\u0384\u1ea6"+
		"\u0001\u0000\u0000\u0000\u0386\u1ea8\u0001\u0000\u0000\u0000\u0388\u1eb6"+
		"\u0001\u0000\u0000\u0000\u038a\u1eb9\u0001\u0000\u0000\u0000\u038c\u1ec5"+
		"\u0001\u0000\u0000\u0000\u038e\u1edd\u0001\u0000\u0000\u0000\u0390\u1edf"+
		"\u0001\u0000\u0000\u0000\u0392\u1ee1\u0001\u0000\u0000\u0000\u0394\u1ee9"+
		"\u0001\u0000\u0000\u0000\u0396\u1eec\u0001\u0000\u0000\u0000\u0398\u1f04"+
		"\u0001\u0000\u0000\u0000\u039a\u1f06\u0001\u0000\u0000\u0000\u039c\u1f09"+
		"\u0001\u0000\u0000\u0000\u039e\u1f28\u0001\u0000\u0000\u0000\u03a0\u1f3b"+
		"\u0001\u0000\u0000\u0000\u03a2\u1f48\u0001\u0000\u0000\u0000\u03a4\u1f50"+
		"\u0001\u0000\u0000\u0000\u03a6\u1f5e\u0001\u0000\u0000\u0000\u03a8\u1f61"+
		"\u0001\u0000\u0000\u0000\u03aa\u1f6c\u0001\u0000\u0000\u0000\u03ac\u1f7c"+
		"\u0001\u0000\u0000\u0000\u03ae\u1f7e\u0001\u0000\u0000\u0000\u03b0\u1f83"+
		"\u0001\u0000\u0000\u0000\u03b2\u1f86\u0001\u0000\u0000\u0000\u03b4\u1f95"+
		"\u0001\u0000\u0000\u0000\u03b6\u1fa7\u0001\u0000\u0000\u0000\u03b8\u1fa9"+
		"\u0001\u0000\u0000\u0000\u03ba\u1fac\u0001\u0000\u0000\u0000\u03bc\u1fb4"+
		"\u0001\u0000\u0000\u0000\u03be\u1fbe\u0001\u0000\u0000\u0000\u03c0\u1fc7"+
		"\u0001\u0000\u0000\u0000\u03c2\u1fce\u0001\u0000\u0000\u0000\u03c4\u1fd2"+
		"\u0001\u0000\u0000\u0000\u03c6\u1fdc\u0001\u0000\u0000\u0000\u03c8\u1ffb"+
		"\u0001\u0000\u0000\u0000\u03ca\u1ffd\u0001\u0000\u0000\u0000\u03cc\u2008"+
		"\u0001\u0000\u0000\u0000\u03ce\u2046\u0001\u0000\u0000\u0000\u03d0\u2048"+
		"\u0001\u0000\u0000\u0000\u03d2\u204e\u0001\u0000\u0000\u0000\u03d4\u2056"+
		"\u0001\u0000\u0000\u0000\u03d6\u2065\u0001\u0000\u0000\u0000\u03d8\u2067"+
		"\u0001\u0000\u0000\u0000\u03da\u2069\u0001\u0000\u0000\u0000\u03dc\u206c"+
		"\u0001\u0000\u0000\u0000\u03de\u207e\u0001\u0000\u0000\u0000\u03e0\u2080"+
		"\u0001\u0000\u0000\u0000\u03e2\u2082\u0001\u0000\u0000\u0000\u03e4\u2084"+
		"\u0001\u0000\u0000\u0000\u03e6\u208c\u0001\u0000\u0000\u0000\u03e8\u208e"+
		"\u0001\u0000\u0000\u0000\u03ea\u2090\u0001\u0000\u0000\u0000\u03ec\u2094"+
		"\u0001\u0000\u0000\u0000\u03ee\u209c\u0001\u0000\u0000\u0000\u03f0\u20af"+
		"\u0001\u0000\u0000\u0000\u03f2\u20b1\u0001\u0000\u0000\u0000\u03f4\u20ca"+
		"\u0001\u0000\u0000\u0000\u03f6\u20cc\u0001\u0000\u0000\u0000\u03f8\u20d5"+
		"\u0001\u0000\u0000\u0000\u03fa\u20d7\u0001\u0000\u0000\u0000\u03fc\u20de"+
		"\u0001\u0000\u0000\u0000\u03fe\u20e2\u0001\u0000\u0000\u0000\u0400\u20e4"+
		"\u0001\u0000\u0000\u0000\u0402\u20e6\u0001\u0000\u0000\u0000\u0404\u20e8"+
		"\u0001\u0000\u0000\u0000\u0406\u20ec\u0001\u0000\u0000\u0000\u0408\u20f9"+
		"\u0001\u0000\u0000\u0000\u040a\u20fb\u0001\u0000\u0000\u0000\u040c\u20fe"+
		"\u0001\u0000\u0000\u0000\u040e\u2103\u0001\u0000\u0000\u0000\u0410\u2108"+
		"\u0001\u0000\u0000\u0000\u0412\u210e\u0001\u0000\u0000\u0000\u0414\u2115"+
		"\u0001\u0000\u0000\u0000\u0416\u2117\u0001\u0000\u0000\u0000\u0418\u211a"+
		"\u0001\u0000\u0000\u0000\u041a\u211e\u0001\u0000\u0000\u0000\u041c\u2125"+
		"\u0001\u0000\u0000\u0000\u041e\u2131\u0001\u0000\u0000\u0000\u0420\u2134"+
		"\u0001\u0000\u0000\u0000\u0422\u2142\u0001\u0000\u0000\u0000\u0424\u2145"+
		"\u0001\u0000\u0000\u0000\u0426\u2187\u0001\u0000\u0000\u0000\u0428\u219f"+
		"\u0001\u0000\u0000\u0000\u042a\u21b4\u0001\u0000\u0000\u0000\u042c\u21b6"+
		"\u0001\u0000\u0000\u0000\u042e\u21c1\u0001\u0000\u0000\u0000\u0430\u21cf"+
		"\u0001\u0000\u0000\u0000\u0432\u21d1\u0001\u0000\u0000\u0000\u0434\u21d9"+
		"\u0001\u0000\u0000\u0000\u0436\u21e0\u0001\u0000\u0000\u0000\u0438\u21e8"+
		"\u0001\u0000\u0000\u0000\u043a\u21f9\u0001\u0000\u0000\u0000\u043c\u21fb"+
		"\u0001\u0000\u0000\u0000\u043e\u21ff\u0001\u0000\u0000\u0000\u0440\u2207"+
		"\u0001\u0000\u0000\u0000\u0442\u220c\u0001\u0000\u0000\u0000\u0444\u220f"+
		"\u0001\u0000\u0000\u0000\u0446\u2212\u0001\u0000\u0000\u0000\u0448\u2219"+
		"\u0001\u0000\u0000\u0000\u044a\u221b\u0001\u0000\u0000\u0000\u044c\u2223"+
		"\u0001\u0000\u0000\u0000\u044e\u2228\u0001\u0000\u0000\u0000\u0450\u223d"+
		"\u0001\u0000\u0000\u0000\u0452\u2245\u0001\u0000\u0000\u0000\u0454\u224f"+
		"\u0001\u0000\u0000\u0000\u0456\u225b\u0001\u0000\u0000\u0000\u0458\u225d"+
		"\u0001\u0000\u0000\u0000\u045a\u226b\u0001\u0000\u0000\u0000\u045c\u226e"+
		"\u0001\u0000\u0000\u0000\u045e\u2282\u0001\u0000\u0000\u0000\u0460\u2295"+
		"\u0001\u0000\u0000\u0000\u0462\u229c\u0001\u0000\u0000\u0000\u0464\u229e"+
		"\u0001\u0000\u0000\u0000\u0466\u22a5\u0001\u0000\u0000\u0000\u0468\u22c1"+
		"\u0001\u0000\u0000\u0000\u046a\u22c3\u0001\u0000\u0000\u0000\u046c\u22c9"+
		"\u0001\u0000\u0000\u0000\u046e\u22cd\u0001\u0000\u0000\u0000\u0470\u22cf"+
		"\u0001\u0000\u0000\u0000\u0472\u22d7\u0001\u0000\u0000\u0000\u0474\u22db"+
		"\u0001\u0000\u0000\u0000\u0476\u22e2\u0001\u0000\u0000\u0000\u0478\u22f3"+
		"\u0001\u0000\u0000\u0000\u047a\u22f5\u0001\u0000\u0000\u0000\u047c\u22f7"+
		"\u0001\u0000\u0000\u0000\u047e\u2301\u0001\u0000\u0000\u0000\u0480\u2309"+
		"\u0001\u0000\u0000\u0000\u0482\u2324\u0001\u0000\u0000\u0000\u0484\u2326"+
		"\u0001\u0000\u0000\u0000\u0486\u232d\u0001\u0000\u0000\u0000\u0488\u232f"+
		"\u0001\u0000\u0000\u0000\u048a\u2332\u0001\u0000\u0000\u0000\u048c\u2334"+
		"\u0001\u0000\u0000\u0000\u048e\u233a\u0001\u0000\u0000\u0000\u0490\u2342"+
		"\u0001\u0000\u0000\u0000\u0492\u234a\u0001\u0000\u0000\u0000\u0494\u2352"+
		"\u0001\u0000\u0000\u0000\u0496\u2360\u0001\u0000\u0000\u0000\u0498\u2369"+
		"\u0001\u0000\u0000\u0000\u049a\u236d\u0001\u0000\u0000\u0000\u049c\u2371"+
		"\u0001\u0000\u0000\u0000\u049e\u238b\u0001\u0000\u0000\u0000\u04a0\u2399"+
		"\u0001\u0000\u0000\u0000\u04a2\u23a9\u0001\u0000\u0000\u0000\u04a4\u23b3"+
		"\u0001\u0000\u0000\u0000\u04a6\u23b7\u0001\u0000\u0000\u0000\u04a8\u23bf"+
		"\u0001\u0000\u0000\u0000\u04aa\u23c7\u0001\u0000\u0000\u0000\u04ac\u23cd"+
		"\u0001\u0000\u0000\u0000\u04ae\u23d1\u0001\u0000\u0000\u0000\u04b0\u23d8"+
		"\u0001\u0000\u0000\u0000\u04b2\u23dd\u0001\u0000\u0000\u0000\u04b4\u23ec"+
		"\u0001\u0000\u0000\u0000\u04b6\u243c\u0001\u0000\u0000\u0000\u04b8\u243e"+
		"\u0001\u0000\u0000\u0000\u04ba\u2440\u0001\u0000\u0000\u0000\u04bc\u245d"+
		"\u0001\u0000\u0000\u0000\u04be\u2482\u0001\u0000\u0000\u0000\u04c0\u2486"+
		"\u0001\u0000\u0000\u0000\u04c2\u25ba\u0001\u0000\u0000\u0000\u04c4\u25c1"+
		"\u0001\u0000\u0000\u0000\u04c6\u25cd\u0001\u0000\u0000\u0000\u04c8\u25cf"+
		"\u0001\u0000\u0000\u0000\u04ca\u25d4\u0001\u0000\u0000\u0000\u04cc\u25dc"+
		"\u0001\u0000\u0000\u0000\u04ce\u25e1\u0001\u0000\u0000\u0000\u04d0\u25e7"+
		"\u0001\u0000\u0000\u0000\u04d2\u25f8\u0001\u0000\u0000\u0000\u04d4\u25fa"+
		"\u0001\u0000\u0000\u0000\u04d6\u25fd\u0001\u0000\u0000\u0000\u04d8\u2603"+
		"\u0001\u0000\u0000\u0000\u04da\u2609\u0001\u0000\u0000\u0000\u04dc\u260c"+
		"\u0001\u0000\u0000\u0000\u04de\u2614\u0001\u0000\u0000\u0000\u04e0\u2618"+
		"\u0001\u0000\u0000\u0000\u04e2\u261d\u0001\u0000\u0000\u0000\u04e4\u262c"+
		"\u0001\u0000\u0000\u0000\u04e6\u262e\u0001\u0000\u0000\u0000\u04e8\u2641"+
		"\u0001\u0000\u0000\u0000\u04ea\u2649\u0001\u0000\u0000\u0000\u04ec\u2652"+
		"\u0001\u0000\u0000\u0000\u04ee\u2654\u0001\u0000\u0000\u0000\u04f0\u2669"+
		"\u0001\u0000\u0000\u0000\u04f2\u266b\u0001\u0000\u0000\u0000\u04f4\u2672"+
		"\u0001\u0000\u0000\u0000\u04f6\u2678\u0001\u0000\u0000\u0000\u04f8\u267c"+
		"\u0001\u0000\u0000\u0000\u04fa\u267e\u0001\u0000\u0000\u0000\u04fc\u2686"+
		"\u0001\u0000\u0000\u0000\u04fe\u268e\u0001\u0000\u0000\u0000\u0500\u269c"+
		"\u0001\u0000\u0000\u0000\u0502\u269e\u0001\u0000\u0000\u0000\u0504\u26a6"+
		"\u0001\u0000\u0000\u0000\u0506\u26b3\u0001\u0000\u0000\u0000\u0508\u26b5"+
		"\u0001\u0000\u0000\u0000\u050a\u26bd\u0001\u0000\u0000\u0000\u050c\u26c4"+
		"\u0001\u0000\u0000\u0000\u050e\u26cc\u0001\u0000\u0000\u0000\u0510\u26d8"+
		"\u0001\u0000\u0000\u0000\u0512\u26da\u0001\u0000\u0000\u0000\u0514\u26dc"+
		"\u0001\u0000\u0000\u0000\u0516\u26e5\u0001\u0000\u0000\u0000\u0518\u2703"+
		"\u0001\u0000\u0000\u0000\u051a\u270c\u0001\u0000\u0000\u0000\u051c\u2713"+
		"\u0001\u0000\u0000\u0000\u051e\u2715\u0001\u0000\u0000\u0000\u0520\u2720"+
		"\u0001\u0000\u0000\u0000\u0522\u2724\u0001\u0000\u0000\u0000\u0524\u2729"+
		"\u0001\u0000\u0000\u0000\u0526\u272c\u0001\u0000\u0000\u0000\u0528\u272e"+
		"\u0001\u0000\u0000\u0000\u052a\u2743\u0001\u0000\u0000\u0000\u052c\u2745"+
		"\u0001\u0000\u0000\u0000\u052e\u2748\u0001\u0000\u0000\u0000\u0530\u274f"+
		"\u0001\u0000\u0000\u0000\u0532\u2752\u0001\u0000\u0000\u0000\u0534\u2755"+
		"\u0001\u0000\u0000\u0000\u0536\u2760\u0001\u0000\u0000\u0000\u0538\u277d"+
		"\u0001\u0000\u0000\u0000\u053a\u2782\u0001\u0000\u0000\u0000\u053c\u278e"+
		"\u0001\u0000\u0000\u0000\u053e\u279f\u0001\u0000\u0000\u0000\u0540\u27a1"+
		"\u0001\u0000\u0000\u0000\u0542\u27a5\u0001\u0000\u0000\u0000\u0544\u27af"+
		"\u0001\u0000\u0000\u0000\u0546\u27bf\u0001\u0000\u0000\u0000\u0548\u27c1"+
		"\u0001\u0000\u0000\u0000\u054a\u27cf\u0001\u0000\u0000\u0000\u054c\u27db"+
		"\u0001\u0000\u0000\u0000\u054e\u27dd\u0001\u0000\u0000\u0000\u0550\u27f0"+
		"\u0001\u0000\u0000\u0000\u0552\u27f8\u0001\u0000\u0000\u0000\u0554\u2800"+
		"\u0001\u0000\u0000\u0000\u0556\u2802\u0001\u0000\u0000\u0000\u0558\u2825"+
		"\u0001\u0000\u0000\u0000\u055a\u2827\u0001\u0000\u0000\u0000\u055c\u282b"+
		"\u0001\u0000\u0000\u0000\u055e\u282d\u0001\u0000\u0000\u0000\u0560\u283c"+
		"\u0001\u0000\u0000\u0000\u0562\u2840\u0001\u0000\u0000\u0000\u0564\u2842"+
		"\u0001\u0000\u0000\u0000\u0566\u284a\u0001\u0000\u0000\u0000\u0568\u284e"+
		"\u0001\u0000\u0000\u0000\u056a\u2856\u0001\u0000\u0000\u0000\u056c\u2858"+
		"\u0001\u0000\u0000\u0000\u056e\u285a\u0001\u0000\u0000\u0000\u0570\u2860"+
		"\u0001\u0000\u0000\u0000\u0572\u2885\u0001\u0000\u0000\u0000\u0574\u2887"+
		"\u0001\u0000\u0000\u0000\u0576\u2889\u0001\u0000\u0000\u0000\u0578\u288b"+
		"\u0001\u0000\u0000\u0000\u057a\u288d\u0001\u0000\u0000\u0000\u057c\u288f"+
		"\u0001\u0000\u0000\u0000\u057e\u289e\u0001\u0000\u0000\u0000\u0580\u28a0"+
		"\u0001\u0000\u0000\u0000\u0582\u28a8\u0001\u0000\u0000\u0000\u0584\u28aa"+
		"\u0001\u0000\u0000\u0000\u0586\u28af\u0001\u0000\u0000\u0000\u0588\u28b1"+
		"\u0001\u0000\u0000\u0000\u058a\u28bc\u0001\u0000\u0000\u0000\u058c\u28c1"+
		"\u0001\u0000\u0000\u0000\u058e\u28c7\u0001\u0000\u0000\u0000\u0590\u28cf"+
		"\u0001\u0000\u0000\u0000\u0592\u28d3\u0001\u0000\u0000\u0000\u0594\u28d5"+
		"\u0001\u0000\u0000\u0000\u0596\u2916\u0001\u0000\u0000\u0000\u0598\u2918"+
		"\u0001\u0000\u0000\u0000\u059a\u291a\u0001\u0000\u0000\u0000\u059c\u291c"+
		"\u0001\u0000\u0000\u0000\u059e\u291e\u0001\u0000\u0000\u0000\u05a0\u2928"+
		"\u0001\u0000\u0000\u0000\u05a2\u05a3\u0003\u0002\u0001\u0000\u05a3\u05a4"+
		"\u0005\u0000\u0000\u0001\u05a4\u0001\u0001\u0000\u0000\u0000\u05a5\u05a6"+
		"\u0003\u0004\u0002\u0000\u05a6\u0003\u0001\u0000\u0000\u0000\u05a7\u05a9"+
		"\u0003\u0006\u0003\u0000\u05a8\u05a7\u0001\u0000\u0000\u0000\u05a8\u05a9"+
		"\u0001\u0000\u0000\u0000\u05a9\u05b0\u0001\u0000\u0000\u0000\u05aa\u05ac"+
		"\u0005\u0007\u0000\u0000\u05ab\u05ad\u0003\u0006\u0003\u0000\u05ac\u05ab"+
		"\u0001\u0000\u0000\u0000\u05ac\u05ad\u0001\u0000\u0000\u0000\u05ad\u05af"+
		"\u0001\u0000\u0000\u0000\u05ae\u05aa\u0001\u0000\u0000\u0000\u05af\u05b2"+
		"\u0001\u0000\u0000\u0000\u05b0\u05ae\u0001\u0000\u0000\u0000\u05b0\u05b1"+
		"\u0001\u0000\u0000\u0000\u05b1\u0005\u0001\u0000\u0000\u0000\u05b2\u05b0"+
		"\u0001\u0000\u0000\u0000\u05b3\u0630\u0003\u01c0\u00e0\u0000\u05b4\u0630"+
		"\u0003\u0336\u019b\u0000\u05b5\u0630\u0003\u032c\u0196\u0000\u05b6\u0630"+
		"\u0003\u032e\u0197\u0000\u05b7\u0630\u0003\u023e\u011f\u0000\u05b8\u0630"+
		"\u0003\u033c\u019e\u0000\u05b9\u0630\u0003\u01da\u00ed\u0000\u05ba\u0630"+
		"\u0003\u013e\u009f\u0000\u05bb\u0630\u0003\u0144\u00a2\u0000\u05bc\u0630"+
		"\u0003\u014e\u00a7\u0000\u05bd\u0630\u0003\u0168\u00b4\u0000\u05be\u0630"+
		"\u0003\u029c\u014e\u0000\u05bf\u0630\u0003\"\u0011\u0000\u05c0\u0630\u0003"+
		"\u02d4\u016a\u0000\u05c1\u0630\u0003\u02d8\u016c\u0000\u05c2\u0630\u0003"+
		"\u02e4\u0172\u0000\u05c3\u0630\u0003\u02da\u016d\u0000\u05c4\u0630\u0003"+
		"\u02e2\u0171\u0000\u05c5\u0630\u0003\u017c\u00be\u0000\u05c6\u0630\u0003"+
		"\u0114\u008a\u0000\u05c7\u0630\u0003\u0338\u019c\u0000\u05c8\u0630\u0003"+
		"\\.\u0000\u05c9\u0630\u0003\u02cc\u0166\u0000\u05ca\u0630\u0003\u0082"+
		"A\u0000\u05cb\u0630\u0003\u02ec\u0176\u0000\u05cc\u0630\u0003\u001c\u000e"+
		"\u0000\u05cd\u0630\u0003\u0018\f\u0000\u05ce\u0630\u0003\u02f4\u017a\u0000"+
		"\u05cf\u0630\u0003\u0102\u0081\u0000\u05d0\u0630\u0003\u0342\u01a1\u0000"+
		"\u05d1\u0630\u0003\u0340\u01a0\u0000\u05d2\u0630\u0003\u0178\u00bc\u0000"+
		"\u05d3\u0630\u0003\u034e\u01a7\u0000\u05d4\u0630\u0003\b\u0004\u0000\u05d5"+
		"\u0630\u0003X,\u0000\u05d6\u0630\u0003\u0088D\u0000\u05d7\u0630\u0003"+
		"\u0348\u01a4\u0000\u05d8\u0630\u0003\u0212\u0109\u0000\u05d9\u0630\u0003"+
		"R)\u0000\u05da\u0630\u0003\u008aE\u0000\u05db\u0630\u0003\u018c\u00c6"+
		"\u0000\u05dc\u0630\u0003\u0104\u0082\u0000\u05dd\u0630\u0003\u01c4\u00e2"+
		"\u0000\u05de\u0630\u0003\u02b6\u015b\u0000\u05df\u0630\u0003\u0346\u01a3"+
		"\u0000\u05e0\u0630\u0003\u033a\u019d\u0000\u05e1\u0630\u0003\u0138\u009c"+
		"\u0000\u05e2\u0630\u0003\u0146\u00a3\u0000\u05e3\u0630\u0003\u0160\u00b0"+
		"\u0000\u05e4\u0630\u0003\u016a\u00b5\u0000\u05e5\u0630\u0003\u0266\u0133"+
		"\u0000\u05e6\u0630\u0003 \u0010\u0000\u05e7\u0630\u0003\u010a\u0085\u0000"+
		"\u05e8\u0630\u0003\u01de\u00ef\u0000\u05e9\u0630\u0003\u01ec\u00f6\u0000"+
		"\u05ea\u0630\u0003\u02e6\u0173\u0000\u05eb\u0630\u0003\u01ee\u00f7\u0000"+
		"\u05ec\u0630\u0003\u017a\u00bd\u0000\u05ed\u0630\u0003\u0124\u0092\u0000"+
		"\u05ee\u0630\u0003&\u0013\u0000\u05ef\u0630\u0003\u0112\u0089\u0000\u05f0"+
		"\u0630\u0003\u00a8T\u0000\u05f1\u0630\u0003\u02ee\u0177\u0000\u05f2\u0630"+
		"\u0003\u0100\u0080\u0000\u05f3\u0630\u0003\u0132\u0099\u0000\u05f4\u0630"+
		"\u0003\u02be\u015f\u0000\u05f5\u0630\u0003\u0190\u00c8\u0000\u05f6\u0630"+
		"\u0003\u01b8\u00dc\u0000\u05f7\u0630\u0003\n\u0005\u0000\u05f8\u0630\u0003"+
		"\u0016\u000b\u0000\u05f9\u0630\u0003\u0172\u00b9\u0000\u05fa\u0630\u0003"+
		"\u0320\u0190\u0000\u05fb\u0630\u0003\u0388\u01c4\u0000\u05fc\u0630\u0003"+
		"\u03bc\u01de\u0000\u05fd\u0630\u0003\u01c6\u00e3\u0000\u05fe\u0630\u0003"+
		"\u03a4\u01d2\u0000\u05ff\u0630\u0003Z-\u0000\u0600\u0630\u0003\u02b0\u0158"+
		"\u0000\u0601\u0630\u0003\u02ba\u015d\u0000\u0602\u0630\u0003\u01f4\u00fa"+
		"\u0000\u0603\u0630\u0003\u01f6\u00fb\u0000\u0604\u0630\u0003\u01f8\u00fc"+
		"\u0000\u0605\u0630\u0003\u01fc\u00fe\u0000\u0606\u0630\u0003\u02f6\u017b"+
		"\u0000\u0607\u0630\u0003\u0136\u009b\u0000\u0608\u0630\u0003\u02c2\u0161"+
		"\u0000\u0609\u0630\u0003\u001e\u000f\u0000\u060a\u0630\u0003\u0176\u00bb"+
		"\u0000\u060b\u0630\u0003\u0330\u0198\u0000\u060c\u0630\u0003\u0384\u01c2"+
		"\u0000\u060d\u0630\u0003\u0372\u01b9\u0000\u060e\u0630\u0003\u021c\u010e"+
		"\u0000\u060f\u0630\u0003\u0224\u0112\u0000\u0610\u0630\u0003\u0236\u011b"+
		"\u0000\u0611\u0630\u0003\u016c\u00b6\u0000\u0612\u0630\u0003\u0248\u0124"+
		"\u0000\u0613\u0630\u0003\u038a\u01c5\u0000\u0614\u0630\u0003\u039c\u01ce"+
		"\u0000\u0615\u0630\u0003\u030a\u0185\u0000\u0616\u0630\u0003\u0110\u0088"+
		"\u0000\u0617\u0630\u0003\u031e\u018f\u0000\u0618\u0630\u0003\u03a8\u01d4"+
		"\u0000\u0619\u0630\u0003\u0306\u0183\u0000\u061a\u0630\u0003\u037e\u01bf"+
		"\u0000\u061b\u0630\u0003\u01fa\u00fd\u0000\u061c\u0630\u0003\u02c4\u0162"+
		"\u0000\u061d\u0630\u0003\u02a4\u0152\u0000\u061e\u0630\u0003\u02a2\u0151"+
		"\u0000\u061f\u0630\u0003\u02a6\u0153\u0000\u0620\u0630\u0003\u02ce\u0167"+
		"\u0000\u0621\u0630\u0003\u0226\u0113\u0000\u0622\u0630\u0003\u0238\u011c"+
		"\u0000\u0623\u0630\u0003\u02f8\u017c\u0000\u0624\u0630\u0003\u0216\u010b"+
		"\u0000\u0625\u0630\u0003\u03c4\u01e2\u0000\u0626\u0630\u0003\u030e\u0187"+
		"\u0000\u0627\u0630\u0003\u020e\u0107\u0000\u0628\u0630\u0003\u030c\u0186"+
		"\u0000\u0629\u0630\u0003\u03b2\u01d9\u0000\u062a\u0630\u0003\u034c\u01a6"+
		"\u0000\u062b\u0630\u0003F#\u0000\u062c\u0630\u0003.\u0017\u0000\u062d"+
		"\u0630\u0003P(\u0000\u062e\u0630\u0003\u031a\u018d\u0000\u062f\u05b3\u0001"+
		"\u0000\u0000\u0000\u062f\u05b4\u0001\u0000\u0000\u0000\u062f\u05b5\u0001"+
		"\u0000\u0000\u0000\u062f\u05b6\u0001\u0000\u0000\u0000\u062f\u05b7\u0001"+
		"\u0000\u0000\u0000\u062f\u05b8\u0001\u0000\u0000\u0000\u062f\u05b9\u0001"+
		"\u0000\u0000\u0000\u062f\u05ba\u0001\u0000\u0000\u0000\u062f\u05bb\u0001"+
		"\u0000\u0000\u0000\u062f\u05bc\u0001\u0000\u0000\u0000\u062f\u05bd\u0001"+
		"\u0000\u0000\u0000\u062f\u05be\u0001\u0000\u0000\u0000\u062f\u05bf\u0001"+
		"\u0000\u0000\u0000\u062f\u05c0\u0001\u0000\u0000\u0000\u062f\u05c1\u0001"+
		"\u0000\u0000\u0000\u062f\u05c2\u0001\u0000\u0000\u0000\u062f\u05c3\u0001"+
		"\u0000\u0000\u0000\u062f\u05c4\u0001\u0000\u0000\u0000\u062f\u05c5\u0001"+
		"\u0000\u0000\u0000\u062f\u05c6\u0001\u0000\u0000\u0000\u062f\u05c7\u0001"+
		"\u0000\u0000\u0000\u062f\u05c8\u0001\u0000\u0000\u0000\u062f\u05c9\u0001"+
		"\u0000\u0000\u0000\u062f\u05ca\u0001\u0000\u0000\u0000\u062f\u05cb\u0001"+
		"\u0000\u0000\u0000\u062f\u05cc\u0001\u0000\u0000\u0000\u062f\u05cd\u0001"+
		"\u0000\u0000\u0000\u062f\u05ce\u0001\u0000\u0000\u0000\u062f\u05cf\u0001"+
		"\u0000\u0000\u0000\u062f\u05d0\u0001\u0000\u0000\u0000\u062f\u05d1\u0001"+
		"\u0000\u0000\u0000\u062f\u05d2\u0001\u0000\u0000\u0000\u062f\u05d3\u0001"+
		"\u0000\u0000\u0000\u062f\u05d4\u0001\u0000\u0000\u0000\u062f\u05d5\u0001"+
		"\u0000\u0000\u0000\u062f\u05d6\u0001\u0000\u0000\u0000\u062f\u05d7\u0001"+
		"\u0000\u0000\u0000\u062f\u05d8\u0001\u0000\u0000\u0000\u062f\u05d9\u0001"+
		"\u0000\u0000\u0000\u062f\u05da\u0001\u0000\u0000\u0000\u062f\u05db\u0001"+
		"\u0000\u0000\u0000\u062f\u05dc\u0001\u0000\u0000\u0000\u062f\u05dd\u0001"+
		"\u0000\u0000\u0000\u062f\u05de\u0001\u0000\u0000\u0000\u062f\u05df\u0001"+
		"\u0000\u0000\u0000\u062f\u05e0\u0001\u0000\u0000\u0000\u062f\u05e1\u0001"+
		"\u0000\u0000\u0000\u062f\u05e2\u0001\u0000\u0000\u0000\u062f\u05e3\u0001"+
		"\u0000\u0000\u0000\u062f\u05e4\u0001\u0000\u0000\u0000\u062f\u05e5\u0001"+
		"\u0000\u0000\u0000\u062f\u05e6\u0001\u0000\u0000\u0000\u062f\u05e7\u0001"+
		"\u0000\u0000\u0000\u062f\u05e8\u0001\u0000\u0000\u0000\u062f\u05e9\u0001"+
		"\u0000\u0000\u0000\u062f\u05ea\u0001\u0000\u0000\u0000\u062f\u05eb\u0001"+
		"\u0000\u0000\u0000\u062f\u05ec\u0001\u0000\u0000\u0000\u062f\u05ed\u0001"+
		"\u0000\u0000\u0000\u062f\u05ee\u0001\u0000\u0000\u0000\u062f\u05ef\u0001"+
		"\u0000\u0000\u0000\u062f\u05f0\u0001\u0000\u0000\u0000\u062f\u05f1\u0001"+
		"\u0000\u0000\u0000\u062f\u05f2\u0001\u0000\u0000\u0000\u062f\u05f3\u0001"+
		"\u0000\u0000\u0000\u062f\u05f4\u0001\u0000\u0000\u0000\u062f\u05f5\u0001"+
		"\u0000\u0000\u0000\u062f\u05f6\u0001\u0000\u0000\u0000\u062f\u05f7\u0001"+
		"\u0000\u0000\u0000\u062f\u05f8\u0001\u0000\u0000\u0000\u062f\u05f9\u0001"+
		"\u0000\u0000\u0000\u062f\u05fa\u0001\u0000\u0000\u0000\u062f\u05fb\u0001"+
		"\u0000\u0000\u0000\u062f\u05fc\u0001\u0000\u0000\u0000\u062f\u05fd\u0001"+
		"\u0000\u0000\u0000\u062f\u05fe\u0001\u0000\u0000\u0000\u062f\u05ff\u0001"+
		"\u0000\u0000\u0000\u062f\u0600\u0001\u0000\u0000\u0000\u062f\u0601\u0001"+
		"\u0000\u0000\u0000\u062f\u0602\u0001\u0000\u0000\u0000\u062f\u0603\u0001"+
		"\u0000\u0000\u0000\u062f\u0604\u0001\u0000\u0000\u0000\u062f\u0605\u0001"+
		"\u0000\u0000\u0000\u062f\u0606\u0001\u0000\u0000\u0000\u062f\u0607\u0001"+
		"\u0000\u0000\u0000\u062f\u0608\u0001\u0000\u0000\u0000\u062f\u0609\u0001"+
		"\u0000\u0000\u0000\u062f\u060a\u0001\u0000\u0000\u0000\u062f\u060b\u0001"+
		"\u0000\u0000\u0000\u062f\u060c\u0001\u0000\u0000\u0000\u062f\u060d\u0001"+
		"\u0000\u0000\u0000\u062f\u060e\u0001\u0000\u0000\u0000\u062f\u060f\u0001"+
		"\u0000\u0000\u0000\u062f\u0610\u0001\u0000\u0000\u0000\u062f\u0611\u0001"+
		"\u0000\u0000\u0000\u062f\u0612\u0001\u0000\u0000\u0000\u062f\u0613\u0001"+
		"\u0000\u0000\u0000\u062f\u0614\u0001\u0000\u0000\u0000\u062f\u0615\u0001"+
		"\u0000\u0000\u0000\u062f\u0616\u0001\u0000\u0000\u0000\u062f\u0617\u0001"+
		"\u0000\u0000\u0000\u062f\u0618\u0001\u0000\u0000\u0000\u062f\u0619\u0001"+
		"\u0000\u0000\u0000\u062f\u061a\u0001\u0000\u0000\u0000\u062f\u061b\u0001"+
		"\u0000\u0000\u0000\u062f\u061c\u0001\u0000\u0000\u0000\u062f\u061d\u0001"+
		"\u0000\u0000\u0000\u062f\u061e\u0001\u0000\u0000\u0000\u062f\u061f\u0001"+
		"\u0000\u0000\u0000\u062f\u0620\u0001\u0000\u0000\u0000\u062f\u0621\u0001"+
		"\u0000\u0000\u0000\u062f\u0622\u0001\u0000\u0000\u0000\u062f\u0623\u0001"+
		"\u0000\u0000\u0000\u062f\u0624\u0001\u0000\u0000\u0000\u062f\u0625\u0001"+
		"\u0000\u0000\u0000\u062f\u0626\u0001\u0000\u0000\u0000\u062f\u0627\u0001"+
		"\u0000\u0000\u0000\u062f\u0628\u0001\u0000\u0000\u0000\u062f\u0629\u0001"+
		"\u0000\u0000\u0000\u062f\u062a\u0001\u0000\u0000\u0000\u062f\u062b\u0001"+
		"\u0000\u0000\u0000\u062f\u062c\u0001\u0000\u0000\u0000\u062f\u062d\u0001"+
		"\u0000\u0000\u0000\u062f\u062e\u0001\u0000\u0000\u0000\u0630\u0007\u0001"+
		"\u0000\u0000\u0000\u0631\u0632\u0005\u01d7\u0000\u0000\u0632\u0633\u0003"+
		"\u04ba\u025d\u0000\u0633\t\u0001\u0000\u0000\u0000\u0634\u0635\u0005T"+
		"\u0000\u0000\u0635\u0636\u0005\u015d\u0000\u0000\u0636\u0638\u0003\u0584"+
		"\u02c2\u0000\u0637\u0639\u0003\f\u0006\u0000\u0638\u0637\u0001\u0000\u0000"+
		"\u0000\u0638\u0639\u0001\u0000\u0000\u0000\u0639\u063a\u0001\u0000\u0000"+
		"\u0000\u063a\u063b\u0003\u000e\u0007\u0000\u063b\u000b\u0001\u0000\u0000"+
		"\u0000\u063c\u063d\u0005\u008f\u0000\u0000\u063d\r\u0001\u0000\u0000\u0000"+
		"\u063e\u0640\u0003\u0014\n\u0000\u063f\u063e\u0001\u0000\u0000\u0000\u0640"+
		"\u0643\u0001\u0000\u0000\u0000\u0641\u063f\u0001\u0000\u0000\u0000\u0641"+
		"\u0642\u0001\u0000\u0000\u0000\u0642\u000f\u0001\u0000\u0000\u0000\u0643"+
		"\u0641\u0001\u0000\u0000\u0000\u0644\u0646\u0003\u0012\t\u0000\u0645\u0644"+
		"\u0001\u0000\u0000\u0000\u0646\u0649\u0001\u0000\u0000\u0000\u0647\u0645"+
		"\u0001\u0000\u0000\u0000\u0647\u0648\u0001\u0000\u0000\u0000\u0648\u0011"+
		"\u0001\u0000\u0000\u0000\u0649\u0647\u0001\u0000\u0000\u0000\u064a\u064d"+
		"\u0005\u013e\u0000\u0000\u064b\u064e\u0003\u057c\u02be\u0000\u064c\u064e"+
		"\u0005t\u0000\u0000\u064d\u064b\u0001\u0000\u0000\u0000\u064d\u064c\u0001"+
		"\u0000\u0000\u0000\u064e\u065d\u0001\u0000\u0000\u0000\u064f\u0650\u0007"+
		"\u0000\u0000\u0000\u0650\u0651\u0005\u013e\u0000\u0000\u0651\u065d\u0003"+
		"\u057c\u02be\u0000\u0652\u065d\u0005\u010a\u0000\u0000\u0653\u0654\u0005"+
		"\u00ca\u0000\u0000\u0654\u0655\u0005p\u0000\u0000\u0655\u065d\u0003\u0582"+
		"\u02c1\u0000\u0656\u0657\u0005\u0192\u0000\u0000\u0657\u0658\u0005\u018f"+
		"\u0000\u0000\u0658\u065d\u0003\u057c\u02be\u0000\u0659\u065a\u0005\u0089"+
		"\u0000\u0000\u065a\u065d\u0003\u0588\u02c4\u0000\u065b\u065d\u0003\u05a0"+
		"\u02d0\u0000\u065c\u064a\u0001\u0000\u0000\u0000\u065c\u064f\u0001\u0000"+
		"\u0000\u0000\u065c\u0652\u0001\u0000\u0000\u0000\u065c\u0653\u0001\u0000"+
		"\u0000\u0000\u065c\u0656\u0001\u0000\u0000\u0000\u065c\u0659\u0001\u0000"+
		"\u0000\u0000\u065c\u065b\u0001\u0000\u0000\u0000\u065d\u0013\u0001\u0000"+
		"\u0000\u0000\u065e\u0669\u0003\u0012\t\u0000\u065f\u0660\u0005\u017b\u0000"+
		"\u0000\u0660\u0669\u0003\u057a\u02bd\u0000\u0661\u0662\u0005\u00ac\u0000"+
		"\u0000\u0662\u0669\u0003\u0588\u02c4\u0000\u0663\u0664\u0005\u015d\u0000"+
		"\u0000\u0664\u0669\u0003\u0588\u02c4\u0000\u0665\u0666\u0005j\u0000\u0000"+
		"\u0666\u0667\u0007\u0001\u0000\u0000\u0667\u0669\u0003\u0588\u02c4\u0000"+
		"\u0668\u065e\u0001\u0000\u0000\u0000\u0668\u065f\u0001\u0000\u0000\u0000"+
		"\u0668\u0661\u0001\u0000\u0000\u0000\u0668\u0663\u0001\u0000\u0000\u0000"+
		"\u0668\u0665\u0001\u0000\u0000\u0000\u0669\u0015\u0001\u0000\u0000\u0000"+
		"\u066a\u066b\u0005T\u0000\u0000\u066b\u066c\u0005\u0089\u0000\u0000\u066c"+
		"\u066e\u0003\u0584\u02c2\u0000\u066d\u066f\u0003\f\u0006\u0000\u066e\u066d"+
		"\u0001\u0000\u0000\u0000\u066e\u066f\u0001\u0000\u0000\u0000\u066f\u0670"+
		"\u0001\u0000\u0000\u0000\u0670\u0671\u0003\u000e\u0007\u0000\u0671\u0017"+
		"\u0001\u0000\u0000\u0000\u0672\u0673\u0005\u00b0\u0000\u0000\u0673\u0674"+
		"\u0007\u0002\u0000\u0000\u0674\u0676\u0003\u0586\u02c3\u0000\u0675\u0677"+
		"\u0003\f\u0006\u0000\u0676\u0675\u0001\u0000\u0000\u0000\u0676\u0677\u0001"+
		"\u0000\u0000\u0000\u0677\u0678\u0001\u0000\u0000\u0000\u0678\u0679\u0003"+
		"\u0010\b\u0000\u0679\u0019\u0001\u0000\u0000\u0000\u067a\u067b\u0005j"+
		"\u0000\u0000\u067b\u067c\u0005\u00d5\u0000\u0000\u067c\u067d\u0003\u056a"+
		"\u02b5\u0000\u067d\u001b\u0001\u0000\u0000\u0000\u067e\u067f\u0005\u00b0"+
		"\u0000\u0000\u067f\u0681\u0007\u0002\u0000\u0000\u0680\u0682\u0005D\u0000"+
		"\u0000\u0681\u0680\u0001\u0000\u0000\u0000\u0681\u0682\u0001\u0000\u0000"+
		"\u0000\u0682\u0683\u0001\u0000\u0000\u0000\u0683\u0685\u0003\u0586\u02c3"+
		"\u0000\u0684\u0686\u0003\u001a\r\u0000\u0685\u0684\u0001\u0000\u0000\u0000"+
		"\u0685\u0686\u0001\u0000\u0000\u0000\u0686\u0687\u0001\u0000\u0000\u0000"+
		"\u0687\u0688\u0003L&\u0000\u0688\u001d\u0001\u0000\u0000\u0000\u0689\u068a"+
		"\u0005\u00e5\u0000\u0000\u068a\u068d\u0007\u0003\u0000\u0000\u068b\u068c"+
		"\u0005\u0102\u0000\u0000\u068c\u068e\u0005\u01ab\u0000\u0000\u068d\u068b"+
		"\u0001\u0000\u0000\u0000\u068d\u068e\u0001\u0000\u0000\u0000\u068e\u068f"+
		"\u0001\u0000\u0000\u0000\u068f\u0690\u0003\u0588\u02c4\u0000\u0690\u001f"+
		"\u0001\u0000\u0000\u0000\u0691\u0692\u0005T\u0000\u0000\u0692\u0693\u0005"+
		"h\u0000\u0000\u0693\u0695\u0003\u0584\u02c2\u0000\u0694\u0696\u0003\f"+
		"\u0006\u0000\u0695\u0694\u0001\u0000\u0000\u0000\u0695\u0696\u0001\u0000"+
		"\u0000\u0000\u0696\u0697\u0001\u0000\u0000\u0000\u0697\u0698\u0003\u000e"+
		"\u0007\u0000\u0698!\u0001\u0000\u0000\u0000\u0699\u069a\u0005\u00b0\u0000"+
		"\u0000\u069a\u069b\u0005h\u0000\u0000\u069b\u069c\u0003\u0586\u02c3\u0000"+
		"\u069c\u069d\u0003$\u0012\u0000\u069d\u069e\u0005\u0089\u0000\u0000\u069e"+
		"\u069f\u0003\u0588\u02c4\u0000\u069f#\u0001\u0000\u0000\u0000\u06a0\u06a1"+
		"\u0007\u0004\u0000\u0000\u06a1%\u0001\u0000\u0000\u0000\u06a2\u06a3\u0005"+
		"T\u0000\u0000\u06a3\u06a7\u0005\u0162\u0000\u0000\u06a4\u06a5\u0005\u0102"+
		"\u0000\u0000\u06a5\u06a6\u0005s\u0000\u0000\u06a6\u06a8\u0005\u01ab\u0000"+
		"\u0000\u06a7\u06a4\u0001\u0000\u0000\u0000\u06a7\u06a8\u0001\u0000\u0000"+
		"\u0000\u06a8\u06af\u0001\u0000\u0000\u0000\u06a9\u06ab\u0003(\u0014\u0000"+
		"\u06aa\u06a9\u0001\u0000\u0000\u0000\u06aa\u06ab\u0001\u0000\u0000\u0000"+
		"\u06ab\u06ac\u0001\u0000\u0000\u0000\u06ac\u06ad\u0005\u0090\u0000\u0000"+
		"\u06ad\u06b0\u0003\u0586\u02c3\u0000\u06ae\u06b0\u0003\u058a\u02c5\u0000"+
		"\u06af\u06aa\u0001\u0000\u0000\u0000\u06af\u06ae\u0001\u0000\u0000\u0000"+
		"\u06b0\u06b1\u0001\u0000\u0000\u0000\u06b1\u06b2\u0003*\u0015\u0000\u06b2"+
		"\'\u0001\u0000\u0000\u0000\u06b3\u06b4\u0003\u058a\u02c5\u0000\u06b4)"+
		"\u0001\u0000\u0000\u0000\u06b5\u06b7\u0003,\u0016\u0000\u06b6\u06b5\u0001"+
		"\u0000\u0000\u0000\u06b7\u06ba\u0001\u0000\u0000\u0000\u06b8\u06b6\u0001"+
		"\u0000\u0000\u0000\u06b8\u06b9\u0001\u0000\u0000\u0000\u06b9+\u0001\u0000"+
		"\u0000\u0000\u06ba\u06b8\u0001\u0000\u0000\u0000\u06bb\u06c2\u0003\u00a8"+
		"T\u0000\u06bc\u06c2\u0003\u0248\u0124\u0000\u06bd\u06c2\u0003\u0112\u0089"+
		"\u0000\u06be\u06c2\u0003\u0190\u00c8\u0000\u06bf\u06c2\u0003\u0224\u0112"+
		"\u0000\u06c0\u06c2\u0003\u031a\u018d\u0000\u06c1\u06bb\u0001\u0000\u0000"+
		"\u0000\u06c1\u06bc\u0001\u0000\u0000\u0000\u06c1\u06bd\u0001\u0000\u0000"+
		"\u0000\u06c1\u06be\u0001\u0000\u0000\u0000\u06c1\u06bf\u0001\u0000\u0000"+
		"\u0000\u06c1\u06c0\u0001\u0000\u0000\u0000\u06c2-\u0001\u0000\u0000\u0000"+
		"\u06c3\u06c5\u0005\u016c\u0000\u0000\u06c4\u06c6\u0007\u0005\u0000\u0000"+
		"\u06c5\u06c4\u0001\u0000\u0000\u0000\u06c5\u06c6\u0001\u0000\u0000\u0000"+
		"\u06c6\u06c7\u0001\u0000\u0000\u0000\u06c7\u06c8\u00030\u0018\u0000\u06c8"+
		"/\u0001\u0000\u0000\u0000\u06c9\u06ca\u0005\u0183\u0000\u0000\u06ca\u06d2"+
		"\u0003\u0314\u018a\u0000\u06cb\u06cc\u0005\u016b\u0000\u0000\u06cc\u06cd"+
		"\u0005\u00c0\u0000\u0000\u06cd\u06ce\u0005J\u0000\u0000\u06ce\u06cf\u0005"+
		"\u0183\u0000\u0000\u06cf\u06d2\u0003\u0314\u018a\u0000\u06d0\u06d2\u0003"+
		"4\u001a\u0000\u06d1\u06c9\u0001\u0000\u0000\u0000\u06d1\u06cb\u0001\u0000"+
		"\u0000\u0000\u06d1\u06d0\u0001\u0000\u0000\u0000\u06d21\u0001\u0000\u0000"+
		"\u0000\u06d3\u06d4\u00036\u001b\u0000\u06d4\u06d7\u0007\u0006\u0000\u0000"+
		"\u06d5\u06d8\u00038\u001c\u0000\u06d6\u06d8\u0005[\u0000\u0000\u06d7\u06d5"+
		"\u0001\u0000\u0000\u0000\u06d7\u06d6\u0001\u0000\u0000\u0000\u06d83\u0001"+
		"\u0000\u0000\u0000\u06d9\u06f5\u00032\u0019\u0000\u06da\u06db\u00036\u001b"+
		"\u0000\u06db\u06dc\u0005f\u0000\u0000\u06dc\u06dd\u0005\u01d8\u0000\u0000"+
		"\u06dd\u06f5\u0001\u0000\u0000\u0000\u06de\u06df\u0005\u01c1\u0000\u0000"+
		"\u06df\u06e0\u0005\u01a1\u0000\u0000\u06e0\u06f5\u0003@ \u0000\u06e1\u06e2"+
		"\u0005\u00be\u0000\u0000\u06e2\u06f5\u0003\u057c\u02be\u0000\u06e3\u06e4"+
		"\u0005\u0162\u0000\u0000\u06e4\u06f5\u0003\u057c\u02be\u0000\u06e5\u06e7"+
		"\u0005\u012a\u0000\u0000\u06e6\u06e8\u0003B!\u0000\u06e7\u06e6\u0001\u0000"+
		"\u0000\u0000\u06e7\u06e8\u0001\u0000\u0000\u0000\u06e8\u06f5\u0001\u0000"+
		"\u0000\u0000\u06e9\u06ea\u0005\u015d\u0000\u0000\u06ea\u06f5\u0003D\""+
		"\u0000\u06eb\u06ec\u0005\u016b\u0000\u0000\u06ec\u06ed\u0005\u0090\u0000"+
		"\u0000\u06ed\u06f5\u0003D\"\u0000\u06ee\u06ef\u0005\u019e\u0000\u0000"+
		"\u06ef\u06f0\u0005\u0136\u0000\u0000\u06f0\u06f5\u0003\u04ce\u0267\u0000"+
		"\u06f1\u06f2\u0005\u0183\u0000\u0000\u06f2\u06f3\u0005\u0170\u0000\u0000"+
		"\u06f3\u06f5\u0003\u057c\u02be\u0000\u06f4\u06d9\u0001\u0000\u0000\u0000"+
		"\u06f4\u06da\u0001\u0000\u0000\u0000\u06f4\u06de\u0001\u0000\u0000\u0000"+
		"\u06f4\u06e1\u0001\u0000\u0000\u0000\u06f4\u06e3\u0001\u0000\u0000\u0000"+
		"\u06f4\u06e5\u0001\u0000\u0000\u0000\u06f4\u06e9\u0001\u0000\u0000\u0000"+
		"\u06f4\u06eb\u0001\u0000\u0000\u0000\u06f4\u06ee\u0001\u0000\u0000\u0000"+
		"\u06f4\u06f1\u0001\u0000\u0000\u0000\u06f55\u0001\u0000\u0000\u0000\u06f6"+
		"\u06fb\u0003\u058a\u02c5\u0000\u06f7\u06f8\u0005\u000b\u0000\u0000\u06f8"+
		"\u06fa\u0003\u058a\u02c5\u0000\u06f9\u06f7\u0001\u0000\u0000\u0000\u06fa"+
		"\u06fd\u0001\u0000\u0000\u0000\u06fb\u06f9\u0001\u0000\u0000\u0000\u06fb"+
		"\u06fc\u0001\u0000\u0000\u0000\u06fc7\u0001\u0000\u0000\u0000\u06fd\u06fb"+
		"\u0001\u0000\u0000\u0000\u06fe\u0703\u0003:\u001d\u0000\u06ff\u0700\u0005"+
		"\u0006\u0000\u0000\u0700\u0702\u0003:\u001d\u0000\u0701\u06ff\u0001\u0000"+
		"\u0000\u0000\u0702\u0705\u0001\u0000\u0000\u0000\u0703\u0701\u0001\u0000"+
		"\u0000\u0000\u0703\u0704\u0001\u0000\u0000\u0000\u07049\u0001\u0000\u0000"+
		"\u0000\u0705\u0703\u0001\u0000\u0000\u0000\u0706\u0709\u0003>\u001f\u0000"+
		"\u0707\u0709\u0003\u0120\u0090\u0000\u0708\u0706\u0001\u0000\u0000\u0000"+
		"\u0708\u0707\u0001\u0000\u0000\u0000\u0709;\u0001\u0000\u0000\u0000\u070a"+
		"\u070b\u0005\u014b\u0000\u0000\u070b\u0710\u0007\u0007\u0000\u0000\u070c"+
		"\u070d\u0005\u0155\u0000\u0000\u070d\u0710\u0005\u014b\u0000\u0000\u070e"+
		"\u0710\u0005\u0169\u0000\u0000\u070f\u070a\u0001\u0000\u0000\u0000\u070f"+
		"\u070c\u0001\u0000\u0000\u0000\u070f\u070e\u0001\u0000\u0000\u0000\u0710"+
		"=\u0001\u0000\u0000\u0000\u0711\u0716\u0005\u0086\u0000\u0000\u0712\u0716"+
		"\u0005b\u0000\u0000\u0713\u0716\u0005v\u0000\u0000\u0714\u0716\u0003D"+
		"\"\u0000\u0715\u0711\u0001\u0000\u0000\u0000\u0715\u0712\u0001\u0000\u0000"+
		"\u0000\u0715\u0713\u0001\u0000\u0000\u0000\u0715\u0714\u0001\u0000\u0000"+
		"\u0000\u0716?\u0001\u0000\u0000\u0000\u0717\u0728\u0003\u057c\u02be\u0000"+
		"\u0718\u0728\u0003\u05a0\u02d0\u0000\u0719\u071a\u0003\u047e\u023f\u0000"+
		"\u071a\u071c\u0003\u057c\u02be\u0000\u071b\u071d\u0003\u0482\u0241\u0000"+
		"\u071c\u071b\u0001\u0000\u0000\u0000\u071c\u071d\u0001\u0000\u0000\u0000"+
		"\u071d\u0728\u0001\u0000\u0000\u0000\u071e\u071f\u0003\u047e\u023f\u0000"+
		"\u071f\u0720\u0005\u0002\u0000\u0000\u0720\u0721\u0003\u057a\u02bd\u0000"+
		"\u0721\u0722\u0005\u0003\u0000\u0000\u0722\u0723\u0003\u057c\u02be\u0000"+
		"\u0723\u0728\u0001\u0000\u0000\u0000\u0724\u0728\u0003\u0120\u0090\u0000"+
		"\u0725\u0728\u0005[\u0000\u0000\u0726\u0728\u0005\u011b\u0000\u0000\u0727"+
		"\u0717\u0001\u0000\u0000\u0000\u0727\u0718\u0001\u0000\u0000\u0000\u0727"+
		"\u0719\u0001\u0000\u0000\u0000\u0727\u071e\u0001\u0000\u0000\u0000\u0727"+
		"\u0724\u0001\u0000\u0000\u0000\u0727\u0725\u0001\u0000\u0000\u0000\u0727"+
		"\u0726\u0001\u0000\u0000\u0000\u0728A\u0001\u0000\u0000\u0000\u0729\u072c"+
		"\u0003\u057c\u02be\u0000\u072a\u072c\u0005[\u0000\u0000\u072b\u0729\u0001"+
		"\u0000\u0000\u0000\u072b\u072a\u0001\u0000\u0000\u0000\u072cC\u0001\u0000"+
		"\u0000\u0000\u072d\u0730\u0003\u058e\u02c7\u0000\u072e\u0730\u0003\u057c"+
		"\u02be\u0000\u072f\u072d\u0001\u0000\u0000\u0000\u072f\u072e\u0001\u0000"+
		"\u0000\u0000\u0730E\u0001\u0000\u0000\u0000\u0731\u0732\u0005\u0158\u0000"+
		"\u0000\u0732\u0733\u0003H$\u0000\u0733G\u0001\u0000\u0000\u0000\u0734"+
		"\u073d\u0003J%\u0000\u0735\u0736\u0005\u01c1\u0000\u0000\u0736\u073d\u0005"+
		"\u01a1\u0000\u0000\u0737\u0738\u0005\u0183\u0000\u0000\u0738\u0739\u0005"+
		"\u0111\u0000\u0000\u0739\u073d\u0005\u0118\u0000\u0000\u073a\u073b\u0005"+
		"\u016b\u0000\u0000\u073b\u073d\u0005\u0090\u0000\u0000\u073c\u0734\u0001"+
		"\u0000\u0000\u0000\u073c\u0735\u0001\u0000\u0000\u0000\u073c\u0737\u0001"+
		"\u0000\u0000\u0000\u073c\u073a\u0001\u0000\u0000\u0000\u073dI\u0001\u0000"+
		"\u0000\u0000\u073e\u0741\u00036\u001b\u0000\u073f\u0741\u0005D\u0000\u0000"+
		"\u0740\u073e\u0001\u0000\u0000\u0000\u0740\u073f\u0001\u0000\u0000\u0000"+
		"\u0741K\u0001\u0000\u0000\u0000\u0742\u0743\u0005\u016c\u0000\u0000\u0743"+
		"\u0746\u00030\u0018\u0000\u0744\u0746\u0003F#\u0000\u0745\u0742\u0001"+
		"\u0000\u0000\u0000\u0745\u0744\u0001\u0000\u0000\u0000\u0746M\u0001\u0000"+
		"\u0000\u0000\u0747\u0748\u0005\u016c\u0000\u0000\u0748\u074b\u00034\u001a"+
		"\u0000\u0749\u074b\u0003F#\u0000\u074a\u0747\u0001\u0000\u0000\u0000\u074a"+
		"\u0749\u0001\u0000\u0000\u0000\u074bO\u0001\u0000\u0000\u0000\u074c\u0756"+
		"\u0005\u016e\u0000\u0000\u074d\u0757\u00036\u001b\u0000\u074e\u074f\u0005"+
		"\u01c1\u0000\u0000\u074f\u0757\u0005\u01a1\u0000\u0000\u0750\u0751\u0005"+
		"\u0183\u0000\u0000\u0751\u0752\u0005\u0111\u0000\u0000\u0752\u0757\u0005"+
		"\u0118\u0000\u0000\u0753\u0754\u0005\u016b\u0000\u0000\u0754\u0757\u0005"+
		"\u0090\u0000\u0000\u0755\u0757\u0005D\u0000\u0000\u0756\u074d\u0001\u0000"+
		"\u0000\u0000\u0756\u074e\u0001\u0000\u0000\u0000\u0756\u0750\u0001\u0000"+
		"\u0000\u0000\u0756\u0753\u0001\u0000\u0000\u0000\u0756\u0755\u0001\u0000"+
		"\u0000\u0000\u0757Q\u0001\u0000\u0000\u0000\u0758\u0759\u0005\u016c\u0000"+
		"\u0000\u0759\u075a\u0005\u00cb\u0000\u0000\u075a\u075b\u0003T*\u0000\u075b"+
		"\u075c\u0003V+\u0000\u075cS\u0001\u0000\u0000\u0000\u075d\u0760\u0005"+
		"D\u0000\u0000\u075e\u0760\u0003\u0564\u02b2\u0000\u075f\u075d\u0001\u0000"+
		"\u0000\u0000\u075f\u075e\u0001\u0000\u0000\u0000\u0760U\u0001\u0000\u0000"+
		"\u0000\u0761\u0762\u0007\b\u0000\u0000\u0762W\u0001\u0000\u0000\u0000"+
		"\u0763\u0764\u0005\u00c1\u0000\u0000\u0764Y\u0001\u0000\u0000\u0000\u0765"+
		"\u0766\u0005\u00e1\u0000\u0000\u0766\u0767\u0007\t\u0000\u0000\u0767["+
		"\u0001\u0000\u0000\u0000\u0768\u0769\u0005\u00b0\u0000\u0000\u0769\u076c"+
		"\u0005\u0082\u0000\u0000\u076a\u076b\u0005\u0102\u0000\u0000\u076b\u076d"+
		"\u0005\u01ab\u0000\u0000\u076c\u076a\u0001\u0000\u0000\u0000\u076c\u076d"+
		"\u0001\u0000\u0000\u0000\u076d\u076e\u0001\u0000\u0000\u0000\u076e\u0771"+
		"\u0003\u0430\u0218\u0000\u076f\u0772\u0003^/\u0000\u0770\u0772\u0003`"+
		"0\u0000\u0771\u076f\u0001\u0000\u0000\u0000\u0771\u0770\u0001\u0000\u0000"+
		"\u0000\u0772\u07d9\u0001\u0000\u0000\u0000\u0773\u0774\u0005\u00b0\u0000"+
		"\u0000\u0774\u0775\u0005\u0082\u0000\u0000\u0775\u0776\u0005D\u0000\u0000"+
		"\u0776\u0777\u0005j\u0000\u0000\u0777\u0778\u0005\u017e\u0000\u0000\u0778"+
		"\u077c\u0003\u056a\u02b5\u0000\u0779\u077a\u0005\u0138\u0000\u0000\u077a"+
		"\u077b\u0005\u00b9\u0000\u0000\u077b\u077d\u0003\u0588\u02c4\u0000\u077c"+
		"\u0779\u0001\u0000\u0000\u0000\u077c\u077d\u0001\u0000\u0000\u0000\u077d"+
		"\u077e\u0001\u0000\u0000\u0000\u077e\u077f\u0005\u016c\u0000\u0000\u077f"+
		"\u0780\u0005\u017e\u0000\u0000\u0780\u0782\u0003\u056a\u02b5\u0000\u0781"+
		"\u0783\u0003\u03ae\u01d7\u0000\u0782\u0781\u0001\u0000\u0000\u0000\u0782"+
		"\u0783\u0001\u0000\u0000\u0000\u0783\u07d9\u0001\u0000\u0000\u0000\u0784"+
		"\u0785\u0005\u00b0\u0000\u0000\u0785\u0788\u0005\u0108\u0000\u0000\u0786"+
		"\u0787\u0005\u0102\u0000\u0000\u0787\u0789\u0005\u01ab\u0000\u0000\u0788"+
		"\u0786\u0001\u0000\u0000\u0000\u0788\u0789\u0001\u0000\u0000\u0000\u0789"+
		"\u078a\u0001\u0000\u0000\u0000\u078a\u078d\u0003\u0566\u02b3\u0000\u078b"+
		"\u078e\u0003^/\u0000\u078c\u078e\u0003b1\u0000\u078d\u078b\u0001\u0000"+
		"\u0000\u0000\u078d\u078c\u0001\u0000\u0000\u0000\u078e\u07d9\u0001\u0000"+
		"\u0000\u0000\u078f\u0790\u0005\u00b0\u0000\u0000\u0790\u0791\u0005\u0108"+
		"\u0000\u0000\u0791\u0792\u0005D\u0000\u0000\u0792\u0793\u0005j\u0000\u0000"+
		"\u0793\u0794\u0005\u017e\u0000\u0000\u0794\u0798\u0003\u056a\u02b5\u0000"+
		"\u0795\u0796\u0005\u0138\u0000\u0000\u0796\u0797\u0005\u00b9\u0000\u0000"+
		"\u0797\u0799\u0003\u0588\u02c4\u0000\u0798\u0795\u0001\u0000\u0000\u0000"+
		"\u0798\u0799\u0001\u0000\u0000\u0000\u0799\u079a\u0001\u0000\u0000\u0000"+
		"\u079a\u079b\u0005\u016c\u0000\u0000\u079b\u079c\u0005\u017e\u0000\u0000"+
		"\u079c\u079e\u0003\u056a\u02b5\u0000\u079d\u079f\u0003\u03ae\u01d7\u0000"+
		"\u079e\u079d\u0001\u0000\u0000\u0000\u079e\u079f\u0001\u0000\u0000\u0000"+
		"\u079f\u07d9\u0001\u0000\u0000\u0000\u07a0\u07a1\u0005\u00b0\u0000\u0000"+
		"\u07a1\u07a4\u0005\u0167\u0000\u0000\u07a2\u07a3\u0005\u0102\u0000\u0000"+
		"\u07a3\u07a5\u0005\u01ab\u0000\u0000\u07a4\u07a2\u0001\u0000\u0000\u0000"+
		"\u07a4\u07a5\u0001\u0000\u0000\u0000\u07a5\u07a6\u0001\u0000\u0000\u0000"+
		"\u07a6\u07a7\u0003\u0566\u02b3\u0000\u07a7\u07a8\u0003^/\u0000\u07a8\u07d9"+
		"\u0001\u0000\u0000\u0000\u07a9\u07aa\u0005\u00b0\u0000\u0000\u07aa\u07ad"+
		"\u0005\u0197\u0000\u0000\u07ab\u07ac\u0005\u0102\u0000\u0000\u07ac\u07ae"+
		"\u0005\u01ab\u0000\u0000\u07ad\u07ab\u0001\u0000\u0000\u0000\u07ad\u07ae"+
		"\u0001\u0000\u0000\u0000\u07ae\u07af\u0001\u0000\u0000\u0000\u07af\u07b0"+
		"\u0003\u0566\u02b3\u0000\u07b0\u07b1\u0003^/\u0000\u07b1\u07d9\u0001\u0000"+
		"\u0000\u0000\u07b2\u07b3\u0005\u00b0\u0000\u0000\u07b3\u07b4\u0005\u0121"+
		"\u0000\u0000\u07b4\u07b7\u0005\u0197\u0000\u0000\u07b5\u07b6\u0005\u0102"+
		"\u0000\u0000\u07b6\u07b8\u0005\u01ab\u0000\u0000\u07b7\u07b5\u0001\u0000"+
		"\u0000\u0000\u07b7\u07b8\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001\u0000"+
		"\u0000\u0000\u07b9\u07ba\u0003\u0566\u02b3\u0000\u07ba\u07bb\u0003^/\u0000"+
		"\u07bb\u07d9\u0001\u0000\u0000\u0000\u07bc\u07bd\u0005\u00b0\u0000\u0000"+
		"\u07bd\u07be\u0005\u0121\u0000\u0000\u07be\u07bf\u0005\u0197\u0000\u0000"+
		"\u07bf\u07c0\u0005D\u0000\u0000\u07c0\u07c1\u0005j\u0000\u0000\u07c1\u07c2"+
		"\u0005\u017e\u0000\u0000\u07c2\u07c6\u0003\u056a\u02b5\u0000\u07c3\u07c4"+
		"\u0005\u0138\u0000\u0000\u07c4\u07c5\u0005\u00b9\u0000\u0000\u07c5\u07c7"+
		"\u0003\u0588\u02c4\u0000\u07c6\u07c3\u0001\u0000\u0000\u0000\u07c6\u07c7"+
		"\u0001\u0000\u0000\u0000\u07c7\u07c8\u0001\u0000\u0000\u0000\u07c8\u07c9"+
		"\u0005\u016c\u0000\u0000\u07c9\u07ca\u0005\u017e\u0000\u0000\u07ca\u07cc"+
		"\u0003\u056a\u02b5\u0000\u07cb\u07cd\u0003\u03ae\u01d7\u0000\u07cc\u07cb"+
		"\u0001\u0000\u0000\u0000\u07cc\u07cd\u0001\u0000\u0000\u0000\u07cd\u07d9"+
		"\u0001\u0000\u0000\u0000\u07ce\u07cf\u0005\u00b0\u0000\u0000\u07cf\u07d0"+
		"\u0005e\u0000\u0000\u07d0\u07d3\u0005\u0082\u0000\u0000\u07d1\u07d2\u0005"+
		"\u0102\u0000\u0000\u07d2\u07d4\u0005\u01ab\u0000\u0000\u07d3\u07d1\u0001"+
		"\u0000\u0000\u0000\u07d3\u07d4\u0001\u0000\u0000\u0000\u07d4\u07d5\u0001"+
		"\u0000\u0000\u0000\u07d5\u07d6\u0003\u0430\u0218\u0000\u07d6\u07d7\u0003"+
		"^/\u0000\u07d7\u07d9\u0001\u0000\u0000\u0000\u07d8\u0768\u0001\u0000\u0000"+
		"\u0000\u07d8\u0773\u0001\u0000\u0000\u0000\u07d8\u0784\u0001\u0000\u0000"+
		"\u0000\u07d8\u078f\u0001\u0000\u0000\u0000\u07d8\u07a0\u0001\u0000\u0000"+
		"\u0000\u07d8\u07a9\u0001\u0000\u0000\u0000\u07d8\u07b2\u0001\u0000\u0000"+
		"\u0000\u07d8\u07bc\u0001\u0000\u0000\u0000\u07d8\u07ce\u0001\u0000\u0000"+
		"\u0000\u07d9]\u0001\u0000\u0000\u0000\u07da\u07df\u0003d2\u0000\u07db"+
		"\u07dc\u0005\u0006\u0000\u0000\u07dc\u07de\u0003d2\u0000\u07dd\u07db\u0001"+
		"\u0000\u0000\u0000\u07de\u07e1\u0001\u0000\u0000\u0000\u07df\u07dd\u0001"+
		"\u0000\u0000\u0000\u07df\u07e0\u0001\u0000\u0000\u0000\u07e0_\u0001\u0000"+
		"\u0000\u0000\u07e1\u07df\u0001\u0000\u0000\u0000\u07e2\u07e3\u0005\u01d9"+
		"\u0000\u0000\u07e3\u07e4\u0005\u013c\u0000\u0000\u07e4\u07e5\u0003\u0566"+
		"\u02b3\u0000\u07e5\u07e6\u0003|>\u0000\u07e6\u07eb\u0001\u0000\u0000\u0000"+
		"\u07e7\u07e8\u0005\u01da\u0000\u0000\u07e8\u07e9\u0005\u013c\u0000\u0000"+
		"\u07e9\u07eb\u0003\u0566\u02b3\u0000\u07ea\u07e2\u0001\u0000\u0000\u0000"+
		"\u07ea\u07e7\u0001\u0000\u0000\u0000\u07eba\u0001\u0000\u0000\u0000\u07ec"+
		"\u07ed\u0005\u01d9\u0000\u0000\u07ed\u07ee\u0005\u013c\u0000\u0000\u07ee"+
		"\u07ef\u0003\u0566\u02b3\u0000\u07efc\u0001\u0000\u0000\u0000\u07f0\u07f1"+
		"\u0005\u00ab\u0000\u0000\u07f1\u091b\u0003\u00b8\\\u0000\u07f2\u07f3\u0005"+
		"\u00ab\u0000\u0000\u07f3\u07f4\u0005\u0102\u0000\u0000\u07f4\u07f5\u0005"+
		"s\u0000\u0000\u07f5\u07f6\u0005\u01ab\u0000\u0000\u07f6\u091b\u0003\u00b8"+
		"\\\u0000\u07f7\u07f8\u0005\u00ab\u0000\u0000\u07f8\u07f9\u0005R\u0000"+
		"\u0000\u07f9\u091b\u0003\u00b8\\\u0000\u07fa\u07fb\u0005\u00ab\u0000\u0000"+
		"\u07fb\u07fc\u0005R\u0000\u0000\u07fc\u07fd\u0005\u0102\u0000\u0000\u07fd"+
		"\u07fe\u0005s\u0000\u0000\u07fe\u07ff\u0005\u01ab\u0000\u0000\u07ff\u091b"+
		"\u0003\u00b8\\\u0000\u0800\u0802\u0005\u00b0\u0000\u0000\u0801\u0803\u0003"+
		"\u02d0\u0168\u0000\u0802\u0801\u0001\u0000\u0000\u0000\u0802\u0803\u0001"+
		"\u0000\u0000\u0000\u0803\u0804\u0001\u0000\u0000\u0000\u0804\u0805\u0003"+
		"\u058a\u02c5\u0000\u0805\u0806\u0003f3\u0000\u0806\u091b\u0001\u0000\u0000"+
		"\u0000\u0807\u0809\u0005\u00b0\u0000\u0000\u0808\u080a\u0003\u02d0\u0168"+
		"\u0000\u0809\u0808\u0001\u0000\u0000\u0000\u0809\u080a\u0001\u0000\u0000"+
		"\u0000\u080a\u080b\u0001\u0000\u0000\u0000\u080b\u080c\u0003\u058a\u02c5"+
		"\u0000\u080c\u080d\u0005\u00e5\u0000\u0000\u080d\u080e\u0005s\u0000\u0000"+
		"\u080e\u080f\u0005t\u0000\u0000\u080f\u091b\u0001\u0000\u0000\u0000\u0810"+
		"\u0812\u0005\u00b0\u0000\u0000\u0811\u0813\u0003\u02d0\u0168\u0000\u0812"+
		"\u0811\u0001\u0000\u0000\u0000\u0812\u0813\u0001\u0000\u0000\u0000\u0813"+
		"\u0814\u0001\u0000\u0000\u0000\u0814\u0815\u0003\u058a\u02c5\u0000\u0815"+
		"\u0816\u0005\u016c\u0000\u0000\u0816\u0817\u0005s\u0000\u0000\u0817\u0818"+
		"\u0005t\u0000\u0000\u0818\u091b\u0001\u0000\u0000\u0000\u0819\u081b\u0005"+
		"\u00b0\u0000\u0000\u081a\u081c\u0003\u02d0\u0168\u0000\u081b\u081a\u0001"+
		"\u0000\u0000\u0000\u081b\u081c\u0001\u0000\u0000\u0000\u081c\u081d\u0001"+
		"\u0000\u0000\u0000\u081d\u081e\u0003\u058a\u02c5\u0000\u081e\u081f\u0005"+
		"\u00e5\u0000\u0000\u081f\u0820\u0005\u01db\u0000\u0000\u0820\u091b\u0001"+
		"\u0000\u0000\u0000\u0821\u0823\u0005\u00b0\u0000\u0000\u0822\u0824\u0003"+
		"\u02d0\u0168\u0000\u0823\u0822\u0001\u0000\u0000\u0000\u0823\u0824\u0001"+
		"\u0000\u0000\u0000\u0824\u0825\u0001\u0000\u0000\u0000\u0825\u0826\u0003"+
		"\u058a\u02c5\u0000\u0826\u0827\u0005\u00e5\u0000\u0000\u0827\u0828\u0005"+
		"\u01db\u0000\u0000\u0828\u0829\u0005\u0102\u0000\u0000\u0829\u082a\u0005"+
		"\u01ab\u0000\u0000\u082a\u091b\u0001\u0000\u0000\u0000\u082b\u082d\u0005"+
		"\u00b0\u0000\u0000\u082c\u082e\u0003\u02d0\u0168\u0000\u082d\u082c\u0001"+
		"\u0000\u0000\u0000\u082d\u082e\u0001\u0000\u0000\u0000\u082e\u082f\u0001"+
		"\u0000\u0000\u0000\u082f\u0830\u0003\u058a\u02c5\u0000\u0830\u0831\u0005"+
		"\u016c\u0000\u0000\u0831\u0832\u0005\u0175\u0000\u0000\u0832\u0833\u0003"+
		"\u0582\u02c1\u0000\u0833\u091b\u0001\u0000\u0000\u0000\u0834\u0836\u0005"+
		"\u00b0\u0000\u0000\u0835\u0837\u0003\u02d0\u0168\u0000\u0836\u0835\u0001"+
		"\u0000\u0000\u0000\u0836\u0837\u0001\u0000\u0000\u0000\u0837\u0838\u0001"+
		"\u0000\u0000\u0000\u0838\u0839\u0003\u057a\u02bd\u0000\u0839\u083a\u0005"+
		"\u016c\u0000\u0000\u083a\u083b\u0005\u0175\u0000\u0000\u083b\u083c\u0003"+
		"\u0582\u02c1\u0000\u083c\u091b\u0001\u0000\u0000\u0000\u083d\u083f\u0005"+
		"\u00b0\u0000\u0000\u083e\u0840\u0003\u02d0\u0168\u0000\u083f\u083e\u0001"+
		"\u0000\u0000\u0000\u083f\u0840\u0001\u0000\u0000\u0000\u0840\u0841\u0001"+
		"\u0000\u0000\u0000\u0841\u0842\u0003\u058a\u02c5\u0000\u0842\u0843\u0005"+
		"\u016c\u0000\u0000\u0843\u0844\u0003p8\u0000\u0844\u091b\u0001\u0000\u0000"+
		"\u0000\u0845\u0847\u0005\u00b0\u0000\u0000\u0846\u0848\u0003\u02d0\u0168"+
		"\u0000\u0847\u0846\u0001\u0000\u0000\u0000\u0847\u0848\u0001\u0000\u0000"+
		"\u0000\u0848\u0849\u0001\u0000\u0000\u0000\u0849\u084a\u0003\u058a\u02c5"+
		"\u0000\u084a\u084b\u0005\u0158\u0000\u0000\u084b\u084c\u0003p8\u0000\u084c"+
		"\u091b\u0001\u0000\u0000\u0000\u084d\u084f\u0005\u00b0\u0000\u0000\u084e"+
		"\u0850\u0003\u02d0\u0168\u0000\u084f\u084e\u0001\u0000\u0000\u0000\u084f"+
		"\u0850\u0001\u0000\u0000\u0000\u0850\u0851\u0001\u0000\u0000\u0000\u0851"+
		"\u0852\u0003\u058a\u02c5\u0000\u0852\u0853\u0005\u016c\u0000\u0000\u0853"+
		"\u0854\u0005\u0178\u0000\u0000\u0854\u0855\u0003\u058a\u02c5\u0000\u0855"+
		"\u091b\u0001\u0000\u0000\u0000\u0856\u0858\u0005\u00b0\u0000\u0000\u0857"+
		"\u0859\u0003\u02d0\u0168\u0000\u0858\u0857\u0001\u0000\u0000\u0000\u0858"+
		"\u0859\u0001\u0000\u0000\u0000\u0859\u085a\u0001\u0000\u0000\u0000\u085a"+
		"\u085b\u0003\u058a\u02c5\u0000\u085b\u085c\u0005\u00ab\u0000\u0000\u085c"+
		"\u085d\u0005\u01dc\u0000\u0000\u085d\u085e\u0003\u00c2a\u0000\u085e\u085f"+
		"\u0005J\u0000\u0000\u085f\u0861\u0005\u0101\u0000\u0000\u0860\u0862\u0003"+
		"\u0118\u008c\u0000\u0861\u0860\u0001\u0000\u0000\u0000\u0861\u0862\u0001"+
		"\u0000\u0000\u0000\u0862\u091b\u0001\u0000\u0000\u0000\u0863\u0865\u0005"+
		"\u00b0\u0000\u0000\u0864\u0866\u0003\u02d0\u0168\u0000\u0865\u0864\u0001"+
		"\u0000\u0000\u0000\u0865\u0866\u0001\u0000\u0000\u0000\u0866\u0867\u0001"+
		"\u0000\u0000\u0000\u0867\u0868\u0003\u058a\u02c5\u0000\u0868\u0869\u0003"+
		"x<\u0000\u0869\u091b\u0001\u0000\u0000\u0000\u086a\u086c\u0005\u00b0\u0000"+
		"\u0000\u086b\u086d\u0003\u02d0\u0168\u0000\u086c\u086b\u0001\u0000\u0000"+
		"\u0000\u086c\u086d\u0001\u0000\u0000\u0000\u086d\u086e\u0001\u0000\u0000"+
		"\u0000\u086e\u086f\u0003\u058a\u02c5\u0000\u086f\u0870\u0005\u00e5\u0000"+
		"\u0000\u0870\u0871\u0005\u0101\u0000\u0000\u0871\u091b\u0001\u0000\u0000"+
		"\u0000\u0872\u0874\u0005\u00b0\u0000\u0000\u0873\u0875\u0003\u02d0\u0168"+
		"\u0000\u0874\u0873\u0001\u0000\u0000\u0000\u0874\u0875\u0001\u0000\u0000"+
		"\u0000\u0875\u0876\u0001\u0000\u0000\u0000\u0876\u0877\u0003\u058a\u02c5"+
		"\u0000\u0877\u0878\u0005\u00e5\u0000\u0000\u0878\u0879\u0005\u0101\u0000"+
		"\u0000\u0879\u087a\u0005\u0102\u0000\u0000\u087a\u087b\u0005\u01ab\u0000"+
		"\u0000\u087b\u091b\u0001\u0000\u0000\u0000\u087c\u087e\u0005\u00e5\u0000"+
		"\u0000\u087d\u087f\u0003\u02d0\u0168\u0000\u087e\u087d\u0001\u0000\u0000"+
		"\u0000\u087e\u087f\u0001\u0000\u0000\u0000\u087f\u0880\u0001\u0000\u0000"+
		"\u0000\u0880\u0881\u0005\u0102\u0000\u0000\u0881\u0882\u0005\u01ab\u0000"+
		"\u0000\u0882\u0884\u0003\u058a\u02c5\u0000\u0883\u0885\u0003h4\u0000\u0884"+
		"\u0883\u0001\u0000\u0000\u0000\u0884\u0885\u0001\u0000\u0000\u0000\u0885"+
		"\u091b\u0001\u0000\u0000\u0000\u0886\u0888\u0005\u00e5\u0000\u0000\u0887"+
		"\u0889\u0003\u02d0\u0168\u0000\u0888\u0887\u0001\u0000\u0000\u0000\u0888"+
		"\u0889\u0001\u0000\u0000\u0000\u0889\u088a\u0001\u0000\u0000\u0000\u088a"+
		"\u088c\u0003\u058a\u02c5\u0000\u088b\u088d\u0003h4\u0000\u088c\u088b\u0001"+
		"\u0000\u0000\u0000\u088c\u088d\u0001\u0000\u0000\u0000\u088d\u091b\u0001"+
		"\u0000\u0000\u0000\u088e\u0890\u0005\u00b0\u0000\u0000\u088f\u0891\u0003"+
		"\u02d0\u0168\u0000\u0890\u088f\u0001\u0000\u0000\u0000\u0890\u0891\u0001"+
		"\u0000\u0000\u0000\u0891\u0892\u0001\u0000\u0000\u0000\u0892\u0894\u0003"+
		"\u058a\u02c5\u0000\u0893\u0895\u0003\u02d2\u0169\u0000\u0894\u0893\u0001"+
		"\u0000\u0000\u0000\u0894\u0895\u0001\u0000\u0000\u0000\u0895\u0896\u0001"+
		"\u0000\u0000\u0000\u0896\u0897\u0005\u0187\u0000\u0000\u0897\u0899\u0003"+
		"\u045c\u022e\u0000\u0898\u089a\u0003j5\u0000\u0899\u0898\u0001\u0000\u0000"+
		"\u0000\u0899\u089a\u0001\u0000\u0000\u0000\u089a\u089c\u0001\u0000\u0000"+
		"\u0000\u089b\u089d\u0003l6\u0000\u089c\u089b\u0001\u0000\u0000\u0000\u089c"+
		"\u089d\u0001\u0000\u0000\u0000\u089d\u091b\u0001\u0000\u0000\u0000\u089e"+
		"\u08a0\u0005\u00b0\u0000\u0000\u089f\u08a1\u0003\u02d0\u0168\u0000\u08a0"+
		"\u089f\u0001\u0000\u0000\u0000\u08a0\u08a1\u0001\u0000\u0000\u0000\u08a1"+
		"\u08a2\u0001\u0000\u0000\u0000\u08a2\u08a3\u0003\u058a\u02c5\u0000\u08a3"+
		"\u08a4\u0003\u0154\u00aa\u0000\u08a4\u091b\u0001\u0000\u0000\u0000\u08a5"+
		"\u08a6\u0005\u00ab\u0000\u0000\u08a6\u091b\u0003\u00ccf\u0000\u08a7\u08a8"+
		"\u0005\u00b0\u0000\u0000\u08a8\u08a9\u0005S\u0000\u0000\u08a9\u08aa\u0003"+
		"\u056a\u02b5\u0000\u08aa\u08ab\u0003\u01b4\u00da\u0000\u08ab\u091b\u0001"+
		"\u0000\u0000\u0000\u08ac\u08ad\u0005\u0193\u0000\u0000\u08ad\u08ae\u0005"+
		"S\u0000\u0000\u08ae\u091b\u0003\u056a\u02b5\u0000\u08af\u08b0\u0005\u00e5"+
		"\u0000\u0000\u08b0\u08b1\u0005S\u0000\u0000\u08b1\u08b2\u0005\u0102\u0000"+
		"\u0000\u08b2\u08b3\u0005\u01ab\u0000\u0000\u08b3\u08b5\u0003\u056a\u02b5"+
		"\u0000\u08b4\u08b6\u0003h4\u0000\u08b5\u08b4\u0001\u0000\u0000\u0000\u08b5"+
		"\u08b6\u0001\u0000\u0000\u0000\u08b6\u091b\u0001\u0000\u0000\u0000\u08b7"+
		"\u08b8\u0005\u00e5\u0000\u0000\u08b8\u08b9\u0005S\u0000\u0000\u08b9\u08bb"+
		"\u0003\u056a\u02b5\u0000\u08ba\u08bc\u0003h4\u0000\u08bb\u08ba\u0001\u0000"+
		"\u0000\u0000\u08bb\u08bc\u0001\u0000\u0000\u0000\u08bc\u091b\u0001\u0000"+
		"\u0000\u0000\u08bd\u08be\u0005\u016c\u0000\u0000\u08be\u08bf\u0005\u019a"+
		"\u0000\u0000\u08bf\u091b\u0005\u0134\u0000\u0000\u08c0\u08c1\u0005\u00c4"+
		"\u0000\u0000\u08c1\u08c2\u0005v\u0000\u0000\u08c2\u091b\u0003\u056a\u02b5"+
		"\u0000\u08c3\u08c4\u0005\u016c\u0000\u0000\u08c4\u08c5\u0005\u019a\u0000"+
		"\u0000\u08c5\u091b\u0005\u00c4\u0000\u0000\u08c6\u08c7\u0005\u016c\u0000"+
		"\u0000\u08c7\u091b\u0005\u01dd\u0000\u0000\u08c8\u08c9\u0005\u016c\u0000"+
		"\u0000\u08c9\u091b\u0005\u018e\u0000\u0000\u08ca\u08cb\u0005\u00e7\u0000"+
		"\u0000\u08cb\u08cc\u0005\u0184\u0000\u0000\u08cc\u091b\u0003\u056a\u02b5"+
		"\u0000\u08cd\u08ce\u0005\u00e7\u0000\u0000\u08ce\u08cf\u0005\u00b1\u0000"+
		"\u0000\u08cf\u08d0\u0005\u0184\u0000\u0000\u08d0\u091b\u0003\u056a\u02b5"+
		"\u0000\u08d1\u08d2\u0005\u00e7\u0000\u0000\u08d2\u08d3\u0005\u0157\u0000"+
		"\u0000\u08d3\u08d4\u0005\u0184\u0000\u0000\u08d4\u091b\u0003\u056a\u02b5"+
		"\u0000\u08d5\u08d6\u0005\u00e7\u0000\u0000\u08d6\u08d7\u0005\u0184\u0000"+
		"\u0000\u08d7\u091b\u0005D\u0000\u0000\u08d8\u08d9\u0005\u00e7\u0000\u0000"+
		"\u08d9\u08da\u0005\u0184\u0000\u0000\u08da\u091b\u0005\u0089\u0000\u0000"+
		"\u08db\u08dc\u0005\u00e0\u0000\u0000\u08dc\u08dd\u0005\u0184\u0000\u0000"+
		"\u08dd\u091b\u0003\u056a\u02b5\u0000\u08de\u08df\u0005\u00e0\u0000\u0000"+
		"\u08df\u08e0\u0005\u0184\u0000\u0000\u08e0\u091b\u0005D\u0000\u0000\u08e1"+
		"\u08e2\u0005\u00e0\u0000\u0000\u08e2\u08e3\u0005\u0184\u0000\u0000\u08e3"+
		"\u091b\u0005\u0089\u0000\u0000\u08e4\u08e5\u0005\u00e7\u0000\u0000\u08e5"+
		"\u08e6\u0005\u0160\u0000\u0000\u08e6\u091b\u0003\u056a\u02b5\u0000\u08e7"+
		"\u08e8\u0005\u00e7\u0000\u0000\u08e8\u08e9\u0005\u00b1\u0000\u0000\u08e9"+
		"\u08ea\u0005\u0160\u0000\u0000\u08ea\u091b\u0003\u056a\u02b5\u0000\u08eb"+
		"\u08ec\u0005\u00e7\u0000\u0000\u08ec\u08ed\u0005\u0157\u0000\u0000\u08ed"+
		"\u08ee\u0005\u0160\u0000\u0000\u08ee\u091b\u0003\u056a\u02b5\u0000\u08ef"+
		"\u08f0\u0005\u00e0\u0000\u0000\u08f0\u08f1\u0005\u0160\u0000\u0000\u08f1"+
		"\u091b\u0003\u056a\u02b5\u0000\u08f2\u08f3\u0005\u010a\u0000\u0000\u08f3"+
		"\u091b\u0003\u0566\u02b3\u0000\u08f4\u08f5\u0005\u012c\u0000\u0000\u08f5"+
		"\u08f6\u0005\u010a\u0000\u0000\u08f6\u091b\u0003\u0566\u02b3\u0000\u08f7"+
		"\u08f8\u0005\u0132\u0000\u0000\u08f8\u091b\u0003\u0208\u0104\u0000\u08f9"+
		"\u08fa\u0005s\u0000\u0000\u08fa\u091b\u0005\u0132\u0000\u0000\u08fb\u08fc"+
		"\u0005\u0139\u0000\u0000\u08fc\u08fd\u0005\u0084\u0000\u0000\u08fd\u091b"+
		"\u0003\u0586\u02c3\u0000\u08fe\u08ff\u0005\u016c\u0000\u0000\u08ff\u0900"+
		"\u0005\u017e\u0000\u0000\u0900\u091b\u0003\u056a\u02b5\u0000\u0901\u0902"+
		"\u0005\u016c\u0000\u0000\u0902\u091b\u0003p8\u0000\u0903\u0904\u0005\u0158"+
		"\u0000\u0000\u0904\u091b\u0003p8\u0000\u0905\u0906\u0005\u0157\u0000\u0000"+
		"\u0906\u0907\u0005\u0101\u0000\u0000\u0907\u091b\u0003n7\u0000\u0908\u0909"+
		"\u0005\u00e7\u0000\u0000\u0909\u090a\u0005\u01bd\u0000\u0000\u090a\u090b"+
		"\u0005\u0118\u0000\u0000\u090b\u091b\u0005\u0166\u0000\u0000\u090c\u090d"+
		"\u0005\u00e0\u0000\u0000\u090d\u090e\u0005\u01bd\u0000\u0000\u090e\u090f"+
		"\u0005\u0118\u0000\u0000\u090f\u091b\u0005\u0166\u0000\u0000\u0910\u0911"+
		"\u0005\u00f7\u0000\u0000\u0911\u0912\u0005\u01bd\u0000\u0000\u0912\u0913"+
		"\u0005\u0118\u0000\u0000\u0913\u091b\u0005\u0166\u0000\u0000\u0914\u0915"+
		"\u0005\u012c\u0000\u0000\u0915\u0916\u0005\u00f7\u0000\u0000\u0916\u0917"+
		"\u0005\u01bd\u0000\u0000\u0917\u0918\u0005\u0118\u0000\u0000\u0918\u091b"+
		"\u0005\u0166\u0000\u0000\u0919\u091b\u0003\u0154\u00aa\u0000\u091a\u07f0"+
		"\u0001\u0000\u0000\u0000\u091a\u07f2\u0001\u0000\u0000\u0000\u091a\u07f7"+
		"\u0001\u0000\u0000\u0000\u091a\u07fa\u0001\u0000\u0000\u0000\u091a\u0800"+
		"\u0001\u0000\u0000\u0000\u091a\u0807\u0001\u0000\u0000\u0000\u091a\u0810"+
		"\u0001\u0000\u0000\u0000\u091a\u0819\u0001\u0000\u0000\u0000\u091a\u0821"+
		"\u0001\u0000\u0000\u0000\u091a\u082b\u0001\u0000\u0000\u0000\u091a\u0834"+
		"\u0001\u0000\u0000\u0000\u091a\u083d\u0001\u0000\u0000\u0000\u091a\u0845"+
		"\u0001\u0000\u0000\u0000\u091a\u084d\u0001\u0000\u0000\u0000\u091a\u0856"+
		"\u0001\u0000\u0000\u0000\u091a\u0863\u0001\u0000\u0000\u0000\u091a\u086a"+
		"\u0001\u0000\u0000\u0000\u091a\u0872\u0001\u0000\u0000\u0000\u091a\u087c"+
		"\u0001\u0000\u0000\u0000\u091a\u0886\u0001\u0000\u0000\u0000\u091a\u088e"+
		"\u0001\u0000\u0000\u0000\u091a\u089e\u0001\u0000\u0000\u0000\u091a\u08a5"+
		"\u0001\u0000\u0000\u0000\u091a\u08a7\u0001\u0000\u0000\u0000\u091a\u08ac"+
		"\u0001\u0000\u0000\u0000\u091a\u08af\u0001\u0000\u0000\u0000\u091a\u08b7"+
		"\u0001\u0000\u0000\u0000\u091a\u08bd\u0001\u0000\u0000\u0000\u091a\u08c0"+
		"\u0001\u0000\u0000\u0000\u091a\u08c3\u0001\u0000\u0000\u0000\u091a\u08c6"+
		"\u0001\u0000\u0000\u0000\u091a\u08c8\u0001\u0000\u0000\u0000\u091a\u08ca"+
		"\u0001\u0000\u0000\u0000\u091a\u08cd\u0001\u0000\u0000\u0000\u091a\u08d1"+
		"\u0001\u0000\u0000\u0000\u091a\u08d5\u0001\u0000\u0000\u0000\u091a\u08d8"+
		"\u0001\u0000\u0000\u0000\u091a\u08db\u0001\u0000\u0000\u0000\u091a\u08de"+
		"\u0001\u0000\u0000\u0000\u091a\u08e1\u0001\u0000\u0000\u0000\u091a\u08e4"+
		"\u0001\u0000\u0000\u0000\u091a\u08e7\u0001\u0000\u0000\u0000\u091a\u08eb"+
		"\u0001\u0000\u0000\u0000\u091a\u08ef\u0001\u0000\u0000\u0000\u091a\u08f2"+
		"\u0001\u0000\u0000\u0000\u091a\u08f4\u0001\u0000\u0000\u0000\u091a\u08f7"+
		"\u0001\u0000\u0000\u0000\u091a\u08f9\u0001\u0000\u0000\u0000\u091a\u08fb"+
		"\u0001\u0000\u0000\u0000\u091a\u08fe\u0001\u0000\u0000\u0000\u091a\u0901"+
		"\u0001\u0000\u0000\u0000\u091a\u0903\u0001\u0000\u0000\u0000\u091a\u0905"+
		"\u0001\u0000\u0000\u0000\u091a\u0908\u0001\u0000\u0000\u0000\u091a\u090c"+
		"\u0001\u0000\u0000\u0000\u091a\u0910\u0001\u0000\u0000\u0000\u091a\u0914"+
		"\u0001\u0000\u0000\u0000\u091a\u0919\u0001\u0000\u0000\u0000\u091be\u0001"+
		"\u0000\u0000\u0000\u091c\u091d\u0005\u016c\u0000\u0000\u091d\u091e\u0005"+
		"[\u0000\u0000\u091e\u0922\u0003\u048a\u0245\u0000\u091f\u0920\u0005\u00e5"+
		"\u0000\u0000\u0920\u0922\u0005[\u0000\u0000\u0921\u091c\u0001\u0000\u0000"+
		"\u0000\u0921\u091f\u0001\u0000\u0000\u0000\u0922g\u0001\u0000\u0000\u0000"+
		"\u0923\u0924\u0007\n\u0000\u0000\u0924i\u0001\u0000\u0000\u0000\u0925"+
		"\u0926\u0005Q\u0000\u0000\u0926\u0927\u0003\u0208\u0104\u0000\u0927k\u0001"+
		"\u0000\u0000\u0000\u0928\u0929\u0005\u008a\u0000\u0000\u0929\u092a\u0003"+
		"\u048a\u0245\u0000\u092am\u0001\u0000\u0000\u0000\u092b\u0932\u0005\u012d"+
		"\u0000\u0000\u092c\u0932\u0005\u0097\u0000\u0000\u092d\u0932\u0005[\u0000"+
		"\u0000\u092e\u092f\u0005\u008a\u0000\u0000\u092f\u0930\u0005\u0108\u0000"+
		"\u0000\u0930\u0932\u0003\u056a\u02b5\u0000\u0931\u092b\u0001\u0000\u0000"+
		"\u0000\u0931\u092c\u0001\u0000\u0000\u0000\u0931\u092d\u0001\u0000\u0000"+
		"\u0000\u0931\u092e\u0001\u0000\u0000\u0000\u0932o\u0001\u0000\u0000\u0000"+
		"\u0933\u0934\u0005\u0002\u0000\u0000\u0934\u0935\u0003t:\u0000\u0935\u0936"+
		"\u0005\u0003\u0000\u0000\u0936q\u0001\u0000\u0000\u0000\u0937\u0938\u0005"+
		"\u008f\u0000\u0000\u0938\u0939\u0003p8\u0000\u0939s\u0001\u0000\u0000"+
		"\u0000\u093a\u093f\u0003v;\u0000\u093b\u093c\u0005\u0006\u0000\u0000\u093c"+
		"\u093e\u0003v;\u0000\u093d\u093b\u0001\u0000\u0000\u0000\u093e\u0941\u0001"+
		"\u0000\u0000\u0000\u093f\u093d\u0001\u0000\u0000\u0000\u093f\u0940\u0001"+
		"\u0000\u0000\u0000\u0940u\u0001\u0000\u0000\u0000\u0941\u093f\u0001\u0000"+
		"\u0000\u0000\u0942\u094b\u0003\u0590\u02c8\u0000\u0943\u0944\u0005\n\u0000"+
		"\u0000\u0944\u094c\u0003\u01ce\u00e7\u0000\u0945\u0946\u0005\u000b\u0000"+
		"\u0000\u0946\u0949\u0003\u0590\u02c8\u0000\u0947\u0948\u0005\n\u0000\u0000"+
		"\u0948\u094a\u0003\u01ce\u00e7\u0000\u0949\u0947\u0001\u0000\u0000\u0000"+
		"\u0949\u094a\u0001\u0000\u0000\u0000\u094a\u094c\u0001\u0000\u0000\u0000"+
		"\u094b\u0943\u0001\u0000\u0000\u0000\u094b\u0945\u0001\u0000\u0000\u0000"+
		"\u094b\u094c\u0001\u0000\u0000\u0000\u094cw\u0001\u0000\u0000\u0000\u094d"+
		"\u094f\u0003z=\u0000\u094e\u094d\u0001\u0000\u0000\u0000\u094f\u0950\u0001"+
		"\u0000\u0000\u0000\u0950\u094e\u0001\u0000\u0000\u0000\u0950\u0951\u0001"+
		"\u0000\u0000\u0000\u0951y\u0001\u0000\u0000\u0000\u0952\u0957\u0005\u0159"+
		"\u0000\u0000\u0953\u0955\u0003\f\u0006\u0000\u0954\u0953\u0001\u0000\u0000"+
		"\u0000\u0954\u0955\u0001\u0000\u0000\u0000\u0955\u0956\u0001\u0000\u0000"+
		"\u0000\u0956\u0958\u0003\u0120\u0090\u0000\u0957\u0954\u0001\u0000\u0000"+
		"\u0000\u0957\u0958\u0001\u0000\u0000\u0000\u0958\u0960\u0001\u0000\u0000"+
		"\u0000\u0959\u095d\u0005\u016c\u0000\u0000\u095a\u095e\u0003\u011c\u008e"+
		"\u0000\u095b\u095c\u0005\u01dc\u0000\u0000\u095c\u095e\u0003\u00c2a\u0000"+
		"\u095d\u095a\u0001\u0000\u0000\u0000\u095d\u095b\u0001\u0000\u0000\u0000"+
		"\u095e\u0960\u0001\u0000\u0000\u0000\u095f\u0952\u0001\u0000\u0000\u0000"+
		"\u095f\u0959\u0001\u0000\u0000\u0000\u0960{\u0001\u0000\u0000\u0000\u0961"+
		"\u0962\u0005d\u0000\u0000\u0962\u0963\u0005\u01c5\u0000\u0000\u0963\u0964"+
		"\u0005\u008f\u0000\u0000\u0964\u0965\u0005\u0002\u0000\u0000\u0965\u0966"+
		"\u0003\u0080@\u0000\u0966\u0967\u0005\u0003\u0000\u0000\u0967\u097c\u0001"+
		"\u0000\u0000\u0000\u0968\u0969\u0005d\u0000\u0000\u0969\u096a\u0005\u01c5"+
		"\u0000\u0000\u096a\u096b\u0005j\u0000\u0000\u096b\u096c\u0005\u0002\u0000"+
		"\u0000\u096c\u096d\u0003\u0502\u0281\u0000\u096d\u096e\u0005\u0003\u0000"+
		"\u0000\u096e\u097c\u0001\u0000\u0000\u0000\u096f\u0970\u0005d\u0000\u0000"+
		"\u0970\u0971\u0005\u01c5\u0000\u0000\u0971\u0972\u0005f\u0000\u0000\u0972"+
		"\u0973\u0005\u0002\u0000\u0000\u0973\u0974\u0003\u0502\u0281\u0000\u0974"+
		"\u0975\u0005\u0003\u0000\u0000\u0975\u0976\u0005\u0084\u0000\u0000\u0976"+
		"\u0977\u0005\u0002\u0000\u0000\u0977\u0978\u0003\u0502\u0281\u0000\u0978"+
		"\u0979\u0005\u0003\u0000\u0000\u0979\u097c\u0001\u0000\u0000\u0000\u097a"+
		"\u097c\u0005[\u0000\u0000\u097b\u0961\u0001\u0000\u0000\u0000\u097b\u0968"+
		"\u0001\u0000\u0000\u0000\u097b\u096f\u0001\u0000\u0000\u0000\u097b\u097a"+
		"\u0001\u0000\u0000\u0000\u097c}\u0001\u0000\u0000\u0000\u097d\u097e\u0003"+
		"\u058e\u02c7\u0000\u097e\u097f\u0003\u057a\u02bd\u0000\u097f\u007f\u0001"+
		"\u0000\u0000\u0000\u0980\u0985\u0003~?\u0000\u0981\u0982\u0005\u0006\u0000"+
		"\u0000\u0982\u0984\u0003~?\u0000\u0983\u0981\u0001\u0000\u0000\u0000\u0984"+
		"\u0987\u0001\u0000\u0000\u0000\u0985\u0983\u0001\u0000\u0000\u0000\u0985"+
		"\u0986\u0001\u0000\u0000\u0000\u0986\u0081\u0001\u0000\u0000\u0000\u0987"+
		"\u0985\u0001\u0000\u0000\u0000\u0988\u0989\u0005\u00b0\u0000\u0000\u0989"+
		"\u098a\u0005\u0187\u0000\u0000\u098a\u098b\u0003\u0208\u0104\u0000\u098b"+
		"\u098c\u0003\u0084B\u0000\u098c\u0083\u0001\u0000\u0000\u0000\u098d\u0992"+
		"\u0003\u0086C\u0000\u098e\u098f\u0005\u0006\u0000\u0000\u098f\u0991\u0003"+
		"\u0086C\u0000\u0990\u098e\u0001\u0000\u0000\u0000\u0991\u0994\u0001\u0000"+
		"\u0000\u0000\u0992\u0990\u0001\u0000\u0000\u0000\u0992\u0993\u0001\u0000"+
		"\u0000\u0000\u0993\u0085\u0001\u0000\u0000\u0000\u0994\u0992\u0001\u0000"+
		"\u0000\u0000\u0995\u0996\u0005\u00ab\u0000\u0000\u0996\u0997\u0005\u00b5"+
		"\u0000\u0000\u0997\u0999\u0003\u044c\u0226\u0000\u0998\u099a\u0003h4\u0000"+
		"\u0999\u0998\u0001\u0000\u0000\u0000\u0999\u099a\u0001\u0000\u0000\u0000"+
		"\u099a\u09b4\u0001\u0000\u0000\u0000\u099b\u099c\u0005\u00e5\u0000\u0000"+
		"\u099c\u099f\u0005\u00b5\u0000\u0000\u099d\u099e\u0005\u0102\u0000\u0000"+
		"\u099e\u09a0\u0005\u01ab\u0000\u0000\u099f\u099d\u0001\u0000\u0000\u0000"+
		"\u099f\u09a0\u0001\u0000\u0000\u0000\u09a0\u09a1\u0001\u0000\u0000\u0000"+
		"\u09a1\u09a3\u0003\u058a\u02c5\u0000\u09a2\u09a4\u0003h4\u0000\u09a3\u09a2"+
		"\u0001\u0000\u0000\u0000\u09a3\u09a4\u0001\u0000\u0000\u0000\u09a4\u09b4"+
		"\u0001\u0000\u0000\u0000\u09a5\u09a6\u0005\u00b0\u0000\u0000\u09a6\u09a7"+
		"\u0005\u00b5\u0000\u0000\u09a7\u09a9\u0003\u058a\u02c5\u0000\u09a8\u09aa"+
		"\u0003\u02d2\u0169\u0000\u09a9\u09a8\u0001\u0000\u0000\u0000\u09a9\u09aa"+
		"\u0001\u0000\u0000\u0000\u09aa\u09ab\u0001\u0000\u0000\u0000\u09ab\u09ac"+
		"\u0005\u0187\u0000\u0000\u09ac\u09ae\u0003\u045c\u022e\u0000\u09ad\u09af"+
		"\u0003j5\u0000\u09ae\u09ad\u0001\u0000\u0000\u0000\u09ae\u09af\u0001\u0000"+
		"\u0000\u0000\u09af\u09b1\u0001\u0000\u0000\u0000\u09b0\u09b2\u0003h4\u0000"+
		"\u09b1\u09b0\u0001\u0000\u0000\u0000\u09b1\u09b2\u0001\u0000\u0000\u0000"+
		"\u09b2\u09b4\u0001\u0000\u0000\u0000\u09b3\u0995\u0001\u0000\u0000\u0000"+
		"\u09b3\u099b\u0001\u0000\u0000\u0000\u09b3\u09a5\u0001\u0000\u0000\u0000"+
		"\u09b4\u0087\u0001\u0000\u0000\u0000\u09b5\u09b8\u0005\u00c3\u0000\u0000"+
		"\u09b6\u09b9\u0003\u03be\u01df\u0000\u09b7\u09b9\u0005D\u0000\u0000\u09b8"+
		"\u09b6\u0001\u0000\u0000\u0000\u09b8\u09b7\u0001\u0000\u0000\u0000\u09b9"+
		"\u0089\u0001\u0000\u0000\u0000\u09ba\u09bc\u0005\u00cf\u0000\u0000\u09bb"+
		"\u09bd\u0003\u0098L\u0000\u09bc\u09bb\u0001\u0000\u0000\u0000\u09bc\u09bd"+
		"\u0001\u0000\u0000\u0000\u09bd\u09be\u0001\u0000\u0000\u0000\u09be\u09c0"+
		"\u0003\u0566\u02b3\u0000\u09bf\u09c1\u0003\u00d2i\u0000\u09c0\u09bf\u0001"+
		"\u0000\u0000\u0000\u09c0\u09c1\u0001\u0000\u0000\u0000\u09c1\u09c2\u0001"+
		"\u0000\u0000\u0000\u09c2\u09c4\u0003\u008cF\u0000\u09c3\u09c5\u0003\u008e"+
		"G\u0000\u09c4\u09c3\u0001\u0000\u0000\u0000\u09c4\u09c5\u0001\u0000\u0000"+
		"\u0000\u09c5\u09c6\u0001\u0000\u0000\u0000\u09c6\u09c8\u0003\u0090H\u0000"+
		"\u09c7\u09c9\u0003\u009aM\u0000\u09c8\u09c7\u0001\u0000\u0000\u0000\u09c8"+
		"\u09c9\u0001\u0000\u0000\u0000\u09c9\u09cb\u0001\u0000\u0000\u0000\u09ca"+
		"\u09cc\u0003\f\u0006\u0000\u09cb\u09ca\u0001\u0000\u0000\u0000\u09cb\u09cc"+
		"\u0001\u0000\u0000\u0000\u09cc\u09cd\u0001\u0000\u0000\u0000\u09cd\u09cf"+
		"\u0003\u0092I\u0000\u09ce\u09d0\u0003\u0444\u0222\u0000\u09cf\u09ce\u0001"+
		"\u0000\u0000\u0000\u09cf\u09d0\u0001\u0000\u0000\u0000\u09d0\u09e0\u0001"+
		"\u0000\u0000\u0000\u09d1\u09d2\u0005\u00cf\u0000\u0000\u09d2\u09d3\u0005"+
		"\u0002\u0000\u0000\u09d3\u09d4\u0003\u0382\u01c1\u0000\u09d4\u09d5\u0005"+
		"\u0003\u0000\u0000\u09d5\u09d7\u0005\u0084\u0000\u0000\u09d6\u09d8\u0003"+
		"\u008eG\u0000\u09d7\u09d6\u0001\u0000\u0000\u0000\u09d7\u09d8\u0001\u0000"+
		"\u0000\u0000\u09d8\u09d9\u0001\u0000\u0000\u0000\u09d9\u09db\u0003\u0090"+
		"H\u0000\u09da\u09dc\u0003\f\u0006\u0000\u09db\u09da\u0001\u0000\u0000"+
		"\u0000\u09db\u09dc\u0001\u0000\u0000\u0000\u09dc\u09dd\u0001\u0000\u0000"+
		"\u0000\u09dd\u09de\u0003\u0092I\u0000\u09de\u09e0\u0001\u0000\u0000\u0000"+
		"\u09df\u09ba\u0001\u0000\u0000\u0000\u09df\u09d1\u0001\u0000\u0000\u0000"+
		"\u09e0\u008b\u0001\u0000\u0000\u0000\u09e1\u09e2\u0007\u000b\u0000\u0000"+
		"\u09e2\u008d\u0001\u0000\u0000\u0000\u09e3\u09e4\u0005\u0148\u0000\u0000"+
		"\u09e4\u008f\u0001\u0000\u0000\u0000\u09e5\u09e9\u0003\u057c\u02be\u0000"+
		"\u09e6\u09e9\u0005\u0176\u0000\u0000\u09e7\u09e9\u0005\u0177\u0000\u0000"+
		"\u09e8\u09e5\u0001\u0000\u0000\u0000\u09e8\u09e6\u0001\u0000\u0000\u0000"+
		"\u09e8\u09e7\u0001\u0000\u0000\u0000\u09e9\u0091\u0001\u0000\u0000\u0000"+
		"\u09ea\u09f0\u0003\u0094J\u0000\u09eb\u09ec\u0005\u0002\u0000\u0000\u09ec"+
		"\u09ed\u0003\u009eO\u0000\u09ed\u09ee\u0005\u0003\u0000\u0000\u09ee\u09f0"+
		"\u0001\u0000\u0000\u0000\u09ef\u09ea\u0001\u0000\u0000\u0000\u09ef\u09eb"+
		"\u0001\u0000\u0000\u0000\u09f0\u0093\u0001\u0000\u0000\u0000\u09f1\u09f3"+
		"\u0003\u0096K\u0000\u09f2\u09f1\u0001\u0000\u0000\u0000\u09f3\u09f6\u0001"+
		"\u0000\u0000\u0000\u09f4\u09f2\u0001\u0000\u0000\u0000\u09f4\u09f5\u0001"+
		"\u0000\u0000\u0000\u09f5\u0095\u0001\u0000\u0000\u0000\u09f6\u09f4\u0001"+
		"\u0000\u0000\u0000\u09f7\u0a1f\u0005\u0091\u0000\u0000\u09f8\u0a1f\u0005"+
		"\u0096\u0000\u0000\u09f9\u09fb\u0005\u00dd\u0000\u0000\u09fa\u09fc\u0003"+
		"\u033e\u019f\u0000\u09fb\u09fa\u0001\u0000\u0000\u0000\u09fb\u09fc\u0001"+
		"\u0000\u0000\u0000\u09fc\u09fd\u0001\u0000\u0000\u0000\u09fd\u0a1f\u0003"+
		"\u057c\u02be\u0000\u09fe\u0a00\u0005t\u0000\u0000\u09ff\u0a01\u0003\u033e"+
		"\u019f\u0000\u0a00\u09ff\u0001\u0000\u0000\u0000\u0a00\u0a01\u0001\u0000"+
		"\u0000\u0000\u0a01\u0a02\u0001\u0000\u0000\u0000\u0a02\u0a1f\u0003\u057c"+
		"\u02be\u0000\u0a03\u0a1f\u0005\u00d1\u0000\u0000\u0a04\u0a1f\u0005\u00fe"+
		"\u0000\u0000\u0a05\u0a07\u0005\u0149\u0000\u0000\u0a06\u0a08\u0003\u033e"+
		"\u019f\u0000\u0a07\u0a06\u0001\u0000\u0000\u0000\u0a07\u0a08\u0001\u0000"+
		"\u0000\u0000\u0a08\u0a09\u0001\u0000\u0000\u0000\u0a09\u0a1f\u0003\u057c"+
		"\u02be\u0000\u0a0a\u0a0c\u0005\u00eb\u0000\u0000\u0a0b\u0a0d\u0003\u033e"+
		"\u019f\u0000\u0a0c\u0a0b\u0001\u0000\u0000\u0000\u0a0c\u0a0d\u0001\u0000"+
		"\u0000\u0000\u0a0d\u0a0e\u0001\u0000\u0000\u0000\u0a0e\u0a1f\u0003\u057c"+
		"\u02be\u0000\u0a0f\u0a10\u0005\u00f7\u0000\u0000\u0a10\u0a11\u0005\u0149"+
		"\u0000\u0000\u0a11\u0a1f\u0003\u00d4j\u0000\u0a12\u0a13\u0005\u00f7\u0000"+
		"\u0000\u0a13\u0a14\u0005\u0149\u0000\u0000\u0a14\u0a1f\u0005\t\u0000\u0000"+
		"\u0a15\u0a16\u0005\u00f7\u0000\u0000\u0a16\u0a17\u0005s\u0000\u0000\u0a17"+
		"\u0a18\u0005t\u0000\u0000\u0a18\u0a1f\u0003\u00d4j\u0000\u0a19\u0a1a\u0005"+
		"\u00f7\u0000\u0000\u0a1a\u0a1b\u0005t\u0000\u0000\u0a1b\u0a1f\u0003\u00d4"+
		"j\u0000\u0a1c\u0a1d\u0005\u00e8\u0000\u0000\u0a1d\u0a1f\u0003\u057c\u02be"+
		"\u0000\u0a1e\u09f7\u0001\u0000\u0000\u0000\u0a1e\u09f8\u0001\u0000\u0000"+
		"\u0000\u0a1e\u09f9\u0001\u0000\u0000\u0000\u0a1e\u09fe\u0001\u0000\u0000"+
		"\u0000\u0a1e\u0a03\u0001\u0000\u0000\u0000\u0a1e\u0a04\u0001\u0000\u0000"+
		"\u0000\u0a1e\u0a05\u0001\u0000\u0000\u0000\u0a1e\u0a0a\u0001\u0000\u0000"+
		"\u0000\u0a1e\u0a0f\u0001\u0000\u0000\u0000\u0a1e\u0a12\u0001\u0000\u0000"+
		"\u0000\u0a1e\u0a15\u0001\u0000\u0000\u0000\u0a1e\u0a19\u0001\u0000\u0000"+
		"\u0000\u0a1e\u0a1c\u0001\u0000\u0000\u0000\u0a1f\u0097\u0001\u0000\u0000"+
		"\u0000\u0a20\u0a21\u0005\u0091\u0000\u0000\u0a21\u0099\u0001\u0000\u0000"+
		"\u0000\u0a22\u0a24\u0003\u009cN\u0000\u0a23\u0a22\u0001\u0000\u0000\u0000"+
		"\u0a23\u0a24\u0001\u0000\u0000\u0000\u0a24\u0a25\u0001\u0000\u0000\u0000"+
		"\u0a25\u0a26\u0005\u00de\u0000\u0000\u0a26\u0a27\u0003\u057c\u02be\u0000"+
		"\u0a27\u009b\u0001\u0000\u0000\u0000\u0a28\u0a29\u0005\u008a\u0000\u0000"+
		"\u0a29\u009d\u0001\u0000\u0000\u0000\u0a2a\u0a2f\u0003\u00a0P\u0000\u0a2b"+
		"\u0a2c\u0005\u0006\u0000\u0000\u0a2c\u0a2e\u0003\u00a0P\u0000\u0a2d\u0a2b"+
		"\u0001\u0000\u0000\u0000\u0a2e\u0a31\u0001\u0000\u0000\u0000\u0a2f\u0a2d"+
		"\u0001\u0000\u0000\u0000\u0a2f\u0a30\u0001\u0000\u0000\u0000\u0a30\u009f"+
		"\u0001\u0000\u0000\u0000\u0a31\u0a2f\u0001\u0000\u0000\u0000\u0a32\u0a34"+
		"\u0003\u0590\u02c8\u0000\u0a33\u0a35\u0003\u00a2Q\u0000\u0a34\u0a33\u0001"+
		"\u0000\u0000\u0000\u0a34\u0a35\u0001\u0000\u0000\u0000\u0a35\u00a1\u0001"+
		"\u0000\u0000\u0000\u0a36\u0a3e\u0003>\u001f\u0000\u0a37\u0a3e\u0003\u0120"+
		"\u0090\u0000\u0a38\u0a3e\u0005\t\u0000\u0000\u0a39\u0a3a\u0005\u0002\u0000"+
		"\u0000\u0a3a\u0a3b\u0003\u00a4R\u0000\u0a3b\u0a3c\u0005\u0003\u0000\u0000"+
		"\u0a3c\u0a3e\u0001\u0000\u0000\u0000\u0a3d\u0a36\u0001\u0000\u0000\u0000"+
		"\u0a3d\u0a37\u0001\u0000\u0000\u0000\u0a3d\u0a38\u0001\u0000\u0000\u0000"+
		"\u0a3d\u0a39\u0001\u0000\u0000\u0000\u0a3e\u00a3\u0001\u0000\u0000\u0000"+
		"\u0a3f\u0a44\u0003\u00a6S\u0000\u0a40\u0a41\u0005\u0006\u0000\u0000\u0a41"+
		"\u0a43\u0003\u00a6S\u0000\u0a42\u0a40\u0001\u0000\u0000\u0000\u0a43\u0a46"+
		"\u0001\u0000\u0000\u0000\u0a44\u0a42\u0001\u0000\u0000\u0000\u0a44\u0a45"+
		"\u0001\u0000\u0000\u0000\u0a45\u00a5\u0001\u0000\u0000\u0000\u0a46\u0a44"+
		"\u0001\u0000\u0000\u0000\u0a47\u0a48\u0003>\u001f\u0000\u0a48\u00a7\u0001"+
		"\u0000\u0000\u0000\u0a49\u0a4b\u0005T\u0000\u0000\u0a4a\u0a4c\u0003\u00aa"+
		"U\u0000\u0a4b\u0a4a\u0001\u0000\u0000\u0000\u0a4b\u0a4c\u0001\u0000\u0000"+
		"\u0000\u0a4c\u0a4d\u0001\u0000\u0000\u0000\u0a4d\u0a51\u0005\u0082\u0000"+
		"\u0000\u0a4e\u0a4f\u0005\u0102\u0000\u0000\u0a4f\u0a50\u0005s\u0000\u0000"+
		"\u0a50\u0a52\u0005\u01ab\u0000\u0000\u0a51\u0a4e\u0001\u0000\u0000\u0000"+
		"\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a53\u0001\u0000\u0000\u0000"+
		"\u0a53\u0a95\u0003\u0566\u02b3\u0000\u0a54\u0a56\u0005\u0002\u0000\u0000"+
		"\u0a55\u0a57\u0003\u00acV\u0000\u0a56\u0a55\u0001\u0000\u0000\u0000\u0a56"+
		"\u0a57\u0001\u0000\u0000\u0000\u0a57\u0a58\u0001\u0000\u0000\u0000\u0a58"+
		"\u0a5a\u0005\u0003\u0000\u0000\u0a59\u0a5b\u0003\u00eau\u0000\u0a5a\u0a59"+
		"\u0001\u0000\u0000\u0000\u0a5a\u0a5b\u0001\u0000\u0000\u0000\u0a5b\u0a5d"+
		"\u0001\u0000\u0000\u0000\u0a5c\u0a5e\u0003\u00ecv\u0000\u0a5d\u0a5c\u0001"+
		"\u0000\u0000\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e\u0a60\u0001"+
		"\u0000\u0000\u0000\u0a5f\u0a61\u0003\u00f4z\u0000\u0a60\u0a5f\u0001\u0000"+
		"\u0000\u0000\u0a60\u0a61\u0001\u0000\u0000\u0000\u0a61\u0a63\u0001\u0000"+
		"\u0000\u0000\u0a62\u0a64\u0003\u00f6{\u0000\u0a63\u0a62\u0001\u0000\u0000"+
		"\u0000\u0a63\u0a64\u0001\u0000\u0000\u0000\u0a64\u0a66\u0001\u0000\u0000"+
		"\u0000\u0a65\u0a67\u0003\u00f8|\u0000\u0a66\u0a65\u0001\u0000\u0000\u0000"+
		"\u0a66\u0a67\u0001\u0000\u0000\u0000\u0a67\u0a69\u0001\u0000\u0000\u0000"+
		"\u0a68\u0a6a\u0003\u00fa}\u0000\u0a69\u0a68\u0001\u0000\u0000\u0000\u0a69"+
		"\u0a6a\u0001\u0000\u0000\u0000\u0a6a\u0a96\u0001\u0000\u0000\u0000\u0a6b"+
		"\u0a6c\u0005\u0132\u0000\u0000\u0a6c\u0a6e\u0003\u0208\u0104\u0000\u0a6d"+
		"\u0a6f\u0003\u00aeW\u0000\u0a6e\u0a6d\u0001\u0000\u0000\u0000\u0a6e\u0a6f"+
		"\u0001\u0000\u0000\u0000\u0a6f\u0a71\u0001\u0000\u0000\u0000\u0a70\u0a72"+
		"\u0003\u00ecv\u0000\u0a71\u0a70\u0001\u0000\u0000\u0000\u0a71\u0a72\u0001"+
		"\u0000\u0000\u0000\u0a72\u0a74\u0001\u0000\u0000\u0000\u0a73\u0a75\u0003"+
		"\u00f4z\u0000\u0a74\u0a73\u0001\u0000\u0000\u0000\u0a74\u0a75\u0001\u0000"+
		"\u0000\u0000\u0a75\u0a77\u0001\u0000\u0000\u0000\u0a76\u0a78\u0003\u00f6"+
		"{\u0000\u0a77\u0a76\u0001\u0000\u0000\u0000\u0a77\u0a78\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a7a\u0001\u0000\u0000\u0000\u0a79\u0a7b\u0003\u00f8|\u0000"+
		"\u0a7a\u0a79\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0001\u0000\u0000\u0000"+
		"\u0a7b\u0a7d\u0001\u0000\u0000\u0000\u0a7c\u0a7e\u0003\u00fa}\u0000\u0a7d"+
		"\u0a7c\u0001\u0000\u0000\u0000\u0a7d\u0a7e\u0001\u0000\u0000\u0000\u0a7e"+
		"\u0a96\u0001\u0000\u0000\u0000\u0a7f\u0a80\u0005\u013c\u0000\u0000\u0a80"+
		"\u0a81\u0005\u0132\u0000\u0000\u0a81\u0a83\u0003\u0566\u02b3\u0000\u0a82"+
		"\u0a84\u0003\u00aeW\u0000\u0a83\u0a82\u0001\u0000\u0000\u0000\u0a83\u0a84"+
		"\u0001\u0000\u0000\u0000\u0a84\u0a85\u0001\u0000\u0000\u0000\u0a85\u0a87"+
		"\u0003|>\u0000\u0a86\u0a88\u0003\u00ecv\u0000\u0a87\u0a86\u0001\u0000"+
		"\u0000\u0000\u0a87\u0a88\u0001\u0000\u0000\u0000\u0a88\u0a8a\u0001\u0000"+
		"\u0000\u0000\u0a89\u0a8b\u0003\u00f4z\u0000\u0a8a\u0a89\u0001\u0000\u0000"+
		"\u0000\u0a8a\u0a8b\u0001\u0000\u0000\u0000\u0a8b\u0a8d\u0001\u0000\u0000"+
		"\u0000\u0a8c\u0a8e\u0003\u00f6{\u0000\u0a8d\u0a8c\u0001\u0000\u0000\u0000"+
		"\u0a8d\u0a8e\u0001\u0000\u0000\u0000\u0a8e\u0a90\u0001\u0000\u0000\u0000"+
		"\u0a8f\u0a91\u0003\u00f8|\u0000\u0a90\u0a8f\u0001\u0000\u0000\u0000\u0a90"+
		"\u0a91\u0001\u0000\u0000\u0000\u0a91\u0a93\u0001\u0000\u0000\u0000\u0a92"+
		"\u0a94\u0003\u00fa}\u0000\u0a93\u0a92\u0001\u0000\u0000\u0000\u0a93\u0a94"+
		"\u0001\u0000\u0000\u0000\u0a94\u0a96\u0001\u0000\u0000\u0000\u0a95\u0a54"+
		"\u0001\u0000\u0000\u0000\u0a95\u0a6b\u0001\u0000\u0000\u0000\u0a95\u0a7f"+
		"\u0001\u0000\u0000\u0000\u0a96\u00a9\u0001\u0000\u0000\u0000\u0a97\u0a9f"+
		"\u0005\u0181\u0000\u0000\u0a98\u0a9f\u0005\u017f\u0000\u0000\u0a99\u0a9a"+
		"\u0005\u011b\u0000\u0000\u0a9a\u0a9f\u0007\f\u0000\u0000\u0a9b\u0a9c\u0005"+
		"\u00fb\u0000\u0000\u0a9c\u0a9f\u0007\f\u0000\u0000\u0a9d\u0a9f\u0005\u018e"+
		"\u0000\u0000\u0a9e\u0a97\u0001\u0000\u0000\u0000\u0a9e\u0a98\u0001\u0000"+
		"\u0000\u0000\u0a9e\u0a99\u0001\u0000\u0000\u0000\u0a9e\u0a9b\u0001\u0000"+
		"\u0000\u0000\u0a9e\u0a9d\u0001\u0000\u0000\u0000\u0a9f\u00ab\u0001\u0000"+
		"\u0000\u0000\u0aa0\u0aa1\u0003\u00b0X\u0000\u0aa1\u00ad\u0001\u0000\u0000"+
		"\u0000\u0aa2\u0aa3\u0005\u0002\u0000\u0000\u0aa3\u0aa4\u0003\u00b2Y\u0000"+
		"\u0aa4\u0aa5\u0005\u0003\u0000\u0000\u0aa5\u00af\u0001\u0000\u0000\u0000"+
		"\u0aa6\u0aab\u0003\u00b4Z\u0000\u0aa7\u0aa8\u0005\u0006\u0000\u0000\u0aa8"+
		"\u0aaa\u0003\u00b4Z\u0000\u0aa9\u0aa7\u0001\u0000\u0000\u0000\u0aaa\u0aad"+
		"\u0001\u0000\u0000\u0000\u0aab\u0aa9\u0001\u0000\u0000\u0000\u0aab\u0aac"+
		"\u0001\u0000\u0000\u0000\u0aac\u00b1\u0001\u0000\u0000\u0000\u0aad\u0aab"+
		"\u0001\u0000\u0000\u0000\u0aae\u0ab3\u0003\u00b6[\u0000\u0aaf\u0ab0\u0005"+
		"\u0006\u0000\u0000\u0ab0\u0ab2\u0003\u00b6[\u0000\u0ab1\u0aaf\u0001\u0000"+
		"\u0000\u0000\u0ab2\u0ab5\u0001\u0000\u0000\u0000\u0ab3\u0ab1\u0001\u0000"+
		"\u0000\u0000\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u00b3\u0001\u0000"+
		"\u0000\u0000\u0ab5\u0ab3\u0001\u0000\u0000\u0000\u0ab6\u0aba\u0003\u00cc"+
		"f\u0000\u0ab7\u0aba\u0003\u00c6c\u0000\u0ab8\u0aba\u0003\u00b8\\\u0000"+
		"\u0ab9\u0ab6\u0001\u0000\u0000\u0000\u0ab9\u0ab7\u0001\u0000\u0000\u0000"+
		"\u0ab9\u0ab8\u0001\u0000\u0000\u0000\u0aba\u00b5\u0001\u0000\u0000\u0000"+
		"\u0abb\u0abe\u0003\u00ba]\u0000\u0abc\u0abe\u0003\u00ccf\u0000\u0abd\u0abb"+
		"\u0001\u0000\u0000\u0000\u0abd\u0abc\u0001\u0000\u0000\u0000\u0abe\u00b7"+
		"\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0003\u058a\u02c5\u0000\u0ac0\u0ac2"+
		"\u0003\u045c\u022e\u0000\u0ac1\u0ac3\u0003\u0150\u00a8\u0000\u0ac2\u0ac1"+
		"\u0001\u0000\u0000\u0000\u0ac2\u0ac3\u0001\u0000\u0000\u0000\u0ac3\u0ac4"+
		"\u0001\u0000\u0000\u0000\u0ac4\u0ac5\u0003\u00bc^\u0000\u0ac5\u00b9\u0001"+
		"\u0000\u0000\u0000\u0ac6\u0ac9\u0003\u058a\u02c5\u0000\u0ac7\u0ac8\u0005"+
		"\u008f\u0000\u0000\u0ac8\u0aca\u0005\u0137\u0000\u0000\u0ac9\u0ac7\u0001"+
		"\u0000\u0000\u0000\u0ac9\u0aca\u0001\u0000\u0000\u0000\u0aca\u0acb\u0001"+
		"\u0000\u0000\u0000\u0acb\u0acc\u0003\u00bc^\u0000\u0acc\u00bb\u0001\u0000"+
		"\u0000\u0000\u0acd\u0acf\u0003\u00be_\u0000\u0ace\u0acd\u0001\u0000\u0000"+
		"\u0000\u0acf\u0ad2\u0001\u0000\u0000\u0000\u0ad0\u0ace\u0001\u0000\u0000"+
		"\u0000\u0ad0\u0ad1\u0001\u0000\u0000\u0000\u0ad1\u00bd\u0001\u0000\u0000"+
		"\u0000\u0ad2\u0ad0\u0001\u0000\u0000\u0000\u0ad3\u0ad4\u0005S\u0000\u0000"+
		"\u0ad4\u0ad5\u0003\u056a\u02b5\u0000\u0ad5\u0ad6\u0003\u00c0`\u0000\u0ad6"+
		"\u0adc\u0001\u0000\u0000\u0000\u0ad7\u0adc\u0003\u00c0`\u0000\u0ad8\u0adc"+
		"\u0003\u00c4b\u0000\u0ad9\u0ada\u0005Q\u0000\u0000\u0ada\u0adc\u0003\u0208"+
		"\u0104\u0000\u0adb\u0ad3\u0001\u0000\u0000\u0000\u0adb\u0ad7\u0001\u0000"+
		"\u0000\u0000\u0adb\u0ad8\u0001\u0000\u0000\u0000\u0adb\u0ad9\u0001\u0000"+
		"\u0000\u0000\u0adc\u00bf\u0001\u0000\u0000\u0000\u0add\u0ade\u0005s\u0000"+
		"\u0000\u0ade\u0b12\u0005t\u0000\u0000\u0adf\u0b12\u0005t\u0000\u0000\u0ae0"+
		"\u0ae2\u0005\u0088\u0000\u0000\u0ae1\u0ae3\u0003\u0296\u014b\u0000\u0ae2"+
		"\u0ae1\u0001\u0000\u0000\u0000\u0ae2\u0ae3\u0001\u0000\u0000\u0000\u0ae3"+
		"\u0ae5\u0001\u0000\u0000\u0000\u0ae4\u0ae6\u0003\u00fc~\u0000\u0ae5\u0ae4"+
		"\u0001\u0000\u0000\u0000\u0ae5\u0ae6\u0001\u0000\u0000\u0000\u0ae6\u0b12"+
		"\u0001\u0000\u0000\u0000\u0ae7\u0ae8\u0005{\u0000\u0000\u0ae8\u0aea\u0005"+
		"\u0112\u0000\u0000\u0ae9\u0aeb\u0003\u0296\u014b\u0000\u0aea\u0ae9\u0001"+
		"\u0000\u0000\u0000\u0aea\u0aeb\u0001\u0000\u0000\u0000\u0aeb\u0aed\u0001"+
		"\u0000\u0000\u0000\u0aec\u0aee\u0003\u00fc~\u0000\u0aed\u0aec\u0001\u0000"+
		"\u0000\u0000\u0aed\u0aee\u0001\u0000\u0000\u0000\u0aee\u0b12\u0001\u0000"+
		"\u0000\u0000\u0aef\u0af0\u0005P\u0000\u0000\u0af0\u0af1\u0005\u0002\u0000"+
		"\u0000\u0af1\u0af2\u0003\u048a\u0245\u0000\u0af2\u0af4\u0005\u0003\u0000"+
		"\u0000\u0af3\u0af5\u0003\u00d0h\u0000\u0af4\u0af3\u0001\u0000\u0000\u0000"+
		"\u0af4\u0af5\u0001\u0000\u0000\u0000\u0af5\u0b12\u0001\u0000\u0000\u0000"+
		"\u0af6\u0af7\u0005[\u0000\u0000\u0af7\u0b12\u0003\u04b4\u025a\u0000\u0af8"+
		"\u0af9\u0005\u01dc\u0000\u0000\u0af9\u0afa\u0003\u00c2a\u0000\u0afa\u0b04"+
		"\u0005J\u0000\u0000\u0afb\u0afd\u0005\u0101\u0000\u0000\u0afc\u0afe\u0003"+
		"\u0118\u008c\u0000\u0afd\u0afc\u0001\u0000\u0000\u0000\u0afd\u0afe\u0001"+
		"\u0000\u0000\u0000\u0afe\u0b05\u0001\u0000\u0000\u0000\u0aff\u0b00\u0005"+
		"\u0002\u0000\u0000\u0b00\u0b01\u0003\u048a\u0245\u0000\u0b01\u0b02\u0005"+
		"\u0003\u0000\u0000\u0b02\u0b03\u0005\u01de\u0000\u0000\u0b03\u0b05\u0001"+
		"\u0000\u0000\u0000\u0b04\u0afb\u0001\u0000\u0000\u0000\u0b04\u0aff\u0001"+
		"\u0000\u0000\u0000\u0b05\u0b12\u0001\u0000\u0000\u0000\u0b06\u0b07\u0005"+
		"|\u0000\u0000\u0b07\u0b09\u0003\u0566\u02b3\u0000\u0b08\u0b0a\u0003\u00d2"+
		"i\u0000\u0b09\u0b08\u0001\u0000\u0000\u0000\u0b09\u0b0a\u0001\u0000\u0000"+
		"\u0000\u0b0a\u0b0c\u0001\u0000\u0000\u0000\u0b0b\u0b0d\u0003\u00dam\u0000"+
		"\u0b0c\u0b0b\u0001\u0000\u0000\u0000\u0b0c\u0b0d\u0001\u0000\u0000\u0000"+
		"\u0b0d\u0b0f\u0001\u0000\u0000\u0000\u0b0e\u0b10\u0003\u00e2q\u0000\u0b0f"+
		"\u0b0e\u0001\u0000\u0000\u0000\u0b0f\u0b10\u0001\u0000\u0000\u0000\u0b10"+
		"\u0b12\u0001\u0000\u0000\u0000\u0b11\u0add\u0001\u0000\u0000\u0000\u0b11"+
		"\u0adf\u0001\u0000\u0000\u0000\u0b11\u0ae0\u0001\u0000\u0000\u0000\u0b11"+
		"\u0ae7\u0001\u0000\u0000\u0000\u0b11\u0aef\u0001\u0000\u0000\u0000\u0b11"+
		"\u0af6\u0001\u0000\u0000\u0000\u0b11\u0af8\u0001\u0000\u0000\u0000\u0b11"+
		"\u0b06\u0001\u0000\u0000\u0000\u0b12\u00c1\u0001\u0000\u0000\u0000\u0b13"+
		"\u0b17\u0005\u00b1\u0000\u0000\u0b14\u0b15\u0005\u00b9\u0000\u0000\u0b15"+
		"\u0b17\u0005[\u0000\u0000\u0b16\u0b13\u0001\u0000\u0000\u0000\u0b16\u0b14"+
		"\u0001\u0000\u0000\u0000\u0b17\u00c3\u0001\u0000\u0000\u0000\u0b18\u0b1e"+
		"\u0005\\\u0000\u0000\u0b19\u0b1a\u0005s\u0000\u0000\u0b1a\u0b1e\u0005"+
		"\\\u0000\u0000\u0b1b\u0b1c\u0005k\u0000\u0000\u0b1c\u0b1e\u0007\b\u0000"+
		"\u0000\u0b1d\u0b18\u0001\u0000\u0000\u0000\u0b1d\u0b19\u0001\u0000\u0000"+
		"\u0000\u0b1d\u0b1b\u0001\u0000\u0000\u0000\u0b1e\u00c5\u0001\u0000\u0000"+
		"\u0000\u0b1f\u0b20\u0005\u009e\u0000\u0000\u0b20\u0b21\u0003\u0566\u02b3"+
		"\u0000\u0b21\u0b22\u0003\u00c8d\u0000\u0b22\u00c7\u0001\u0000\u0000\u0000"+
		"\u0b23\u0b24\u0007\r\u0000\u0000\u0b24\u0b26\u0003\u00cae\u0000\u0b25"+
		"\u0b23\u0001\u0000\u0000\u0000\u0b26\u0b29\u0001\u0000\u0000\u0000\u0b27"+
		"\u0b25\u0001\u0000\u0000\u0000\u0b27\u0b28\u0001\u0000\u0000\u0000\u0b28"+
		"\u00c9\u0001\u0000\u0000\u0000\u0b29\u0b27\u0001\u0000\u0000\u0000\u0b2a"+
		"\u0b2b\u0007\u000e\u0000\u0000\u0b2b\u00cb\u0001\u0000\u0000\u0000\u0b2c"+
		"\u0b2d\u0005S\u0000\u0000\u0b2d\u0b2e\u0003\u056a\u02b5\u0000\u0b2e\u0b2f"+
		"\u0003\u00ceg\u0000\u0b2f\u0b32\u0001\u0000\u0000\u0000\u0b30\u0b32\u0003"+
		"\u00ceg\u0000\u0b31\u0b2c\u0001\u0000\u0000\u0000\u0b31\u0b30\u0001\u0000"+
		"\u0000\u0000\u0b32\u00cd\u0001\u0000\u0000\u0000\u0b33\u0b34\u0005P\u0000"+
		"\u0000\u0b34\u0b35\u0005\u0002\u0000\u0000\u0b35\u0b36\u0003\u048a\u0245"+
		"\u0000\u0b36\u0b37\u0005\u0003\u0000\u0000\u0b37\u0b38\u0003\u01b4\u00da"+
		"\u0000\u0b38\u0b8a\u0001\u0000\u0000\u0000\u0b39\u0b4b\u0005\u0088\u0000"+
		"\u0000\u0b3a\u0b3b\u0005\u0002\u0000\u0000\u0b3b\u0b3c\u0003\u00d4j\u0000"+
		"\u0b3c\u0b3e\u0005\u0003\u0000\u0000\u0b3d\u0b3f\u0003\u00d8l\u0000\u0b3e"+
		"\u0b3d\u0001\u0000\u0000\u0000\u0b3e\u0b3f\u0001\u0000\u0000\u0000\u0b3f"+
		"\u0b41\u0001\u0000\u0000\u0000\u0b40\u0b42\u0003\u0296\u014b\u0000\u0b41"+
		"\u0b40\u0001\u0000\u0000\u0000\u0b41\u0b42\u0001\u0000\u0000\u0000\u0b42"+
		"\u0b44\u0001\u0000\u0000\u0000\u0b43\u0b45\u0003\u00fc~\u0000\u0b44\u0b43"+
		"\u0001\u0000\u0000\u0000\u0b44\u0b45\u0001\u0000\u0000\u0000\u0b45\u0b46"+
		"\u0001\u0000\u0000\u0000\u0b46\u0b47\u0003\u01b4\u00da\u0000\u0b47\u0b4c"+
		"\u0001\u0000\u0000\u0000\u0b48\u0b49\u0003\u00fe\u007f\u0000\u0b49\u0b4a"+
		"\u0003\u01b4\u00da\u0000\u0b4a\u0b4c\u0001\u0000\u0000\u0000\u0b4b\u0b3a"+
		"\u0001\u0000\u0000\u0000\u0b4b\u0b48\u0001\u0000\u0000\u0000\u0b4c\u0b8a"+
		"\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0005{\u0000\u0000\u0b4e\u0b60\u0005"+
		"\u0112\u0000\u0000\u0b4f\u0b50\u0005\u0002\u0000\u0000\u0b50\u0b51\u0003"+
		"\u00d4j\u0000\u0b51\u0b53\u0005\u0003\u0000\u0000\u0b52\u0b54\u0003\u00d8"+
		"l\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000\u0000"+
		"\u0000\u0b54\u0b56\u0001\u0000\u0000\u0000\u0b55\u0b57\u0003\u0296\u014b"+
		"\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001\u0000\u0000"+
		"\u0000\u0b57\u0b59\u0001\u0000\u0000\u0000\u0b58\u0b5a\u0003\u00fc~\u0000"+
		"\u0b59\u0b58\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000\u0000\u0000"+
		"\u0b5a\u0b5b\u0001\u0000\u0000\u0000\u0b5b\u0b5c\u0003\u01b4\u00da\u0000"+
		"\u0b5c\u0b61\u0001\u0000\u0000\u0000\u0b5d\u0b5e\u0003\u00fe\u007f\u0000"+
		"\u0b5e\u0b5f\u0003\u01b4\u00da\u0000\u0b5f\u0b61\u0001\u0000\u0000\u0000"+
		"\u0b60\u0b4f\u0001\u0000\u0000\u0000\u0b60\u0b5d\u0001\u0000\u0000\u0000"+
		"\u0b61\u0b8a\u0001\u0000\u0000\u0000\u0b62\u0b64\u0005\u00ed\u0000\u0000"+
		"\u0b63\u0b65\u0003\u0252\u0129\u0000\u0b64\u0b63\u0001\u0000\u0000\u0000"+
		"\u0b64\u0b65\u0001\u0000\u0000\u0000\u0b65\u0b66\u0001\u0000\u0000\u0000"+
		"\u0b66\u0b67\u0005\u0002\u0000\u0000\u0b67\u0b68\u0003\u00dcn\u0000\u0b68"+
		"\u0b6a\u0005\u0003\u0000\u0000\u0b69\u0b6b\u0003\u00d8l\u0000\u0b6a\u0b69"+
		"\u0001\u0000\u0000\u0000\u0b6a\u0b6b\u0001\u0000\u0000\u0000\u0b6b\u0b6d"+
		"\u0001\u0000\u0000\u0000\u0b6c\u0b6e\u0003\u0296\u014b\u0000\u0b6d\u0b6c"+
		"\u0001\u0000\u0000\u0000\u0b6d\u0b6e\u0001\u0000\u0000\u0000\u0b6e\u0b70"+
		"\u0001\u0000\u0000\u0000\u0b6f\u0b71\u0003\u00fc~\u0000\u0b70\u0b6f\u0001"+
		"\u0000\u0000\u0000\u0b70\u0b71\u0001\u0000\u0000\u0000\u0b71\u0b73\u0001"+
		"\u0000\u0000\u0000\u0b72\u0b74\u0003\u00e0p\u0000\u0b73\u0b72\u0001\u0000"+
		"\u0000\u0000\u0b73\u0b74\u0001\u0000\u0000\u0000\u0b74\u0b75\u0001\u0000"+
		"\u0000\u0000\u0b75\u0b76\u0003\u01b4\u00da\u0000\u0b76\u0b8a\u0001\u0000"+
		"\u0000\u0000\u0b77\u0b78\u0005e\u0000\u0000\u0b78\u0b79\u0005\u0112\u0000"+
		"\u0000\u0b79\u0b7a\u0005\u0002\u0000\u0000\u0b7a\u0b7b\u0003\u00d4j\u0000"+
		"\u0b7b\u0b7c\u0005\u0003\u0000\u0000\u0b7c\u0b7d\u0005|\u0000\u0000\u0b7d"+
		"\u0b7f\u0003\u0566\u02b3\u0000\u0b7e\u0b80\u0003\u00d2i\u0000\u0b7f\u0b7e"+
		"\u0001\u0000\u0000\u0000\u0b7f\u0b80\u0001\u0000\u0000\u0000\u0b80\u0b82"+
		"\u0001\u0000\u0000\u0000\u0b81\u0b83\u0003\u00dam\u0000\u0b82\u0b81\u0001"+
		"\u0000\u0000\u0000\u0b82\u0b83\u0001\u0000\u0000\u0000\u0b83\u0b85\u0001"+
		"\u0000\u0000\u0000\u0b84\u0b86\u0003\u00e2q\u0000\u0b85\u0b84\u0001\u0000"+
		"\u0000\u0000\u0b85\u0b86\u0001\u0000\u0000\u0000\u0b86\u0b87\u0001\u0000"+
		"\u0000\u0000\u0b87\u0b88\u0003\u01b4\u00da\u0000\u0b88\u0b8a\u0001\u0000"+
		"\u0000\u0000\u0b89\u0b33\u0001\u0000\u0000\u0000\u0b89\u0b39\u0001\u0000"+
		"\u0000\u0000\u0b89\u0b4d\u0001\u0000\u0000\u0000\u0b89\u0b62\u0001\u0000"+
		"\u0000\u0000\u0b89\u0b77\u0001\u0000\u0000\u0000\u0b8a\u00cf\u0001\u0000"+
		"\u0000\u0000\u0b8b\u0b8c\u0005\u012c\u0000\u0000\u0b8c\u0b8d\u0005\u010a"+
		"\u0000\u0000\u0b8d\u00d1\u0001\u0000\u0000\u0000\u0b8e\u0b8f\u0005\u0002"+
		"\u0000\u0000\u0b8f\u0b90\u0003\u00d4j\u0000\u0b90\u0b91\u0005\u0003\u0000"+
		"\u0000\u0b91\u00d3\u0001\u0000\u0000\u0000\u0b92\u0b97\u0003\u00d6k\u0000"+
		"\u0b93\u0b94\u0005\u0006\u0000\u0000\u0b94\u0b96\u0003\u00d6k\u0000\u0b95"+
		"\u0b93\u0001\u0000\u0000\u0000\u0b96\u0b99\u0001\u0000\u0000\u0000\u0b97"+
		"\u0b95\u0001\u0000\u0000\u0000\u0b97\u0b98\u0001\u0000\u0000\u0000\u0b98"+
		"\u00d5\u0001\u0000\u0000\u0000\u0b99\u0b97\u0001\u0000\u0000\u0000\u0b9a"+
		"\u0b9b\u0003\u058a\u02c5\u0000\u0b9b\u00d7\u0001\u0000\u0000\u0000\u0b9c"+
		"\u0b9d\u0005\u01df\u0000\u0000\u0b9d\u0b9e\u0005\u0002\u0000\u0000\u0b9e"+
		"\u0b9f\u0003\u00d4j\u0000\u0b9f\u0ba0\u0005\u0003\u0000\u0000\u0ba0\u00d9"+
		"\u0001\u0000\u0000\u0000\u0ba1\u0ba2\u0005\u011f\u0000\u0000\u0ba2\u0ba3"+
		"\u0007\u000f\u0000\u0000\u0ba3\u00db\u0001\u0000\u0000\u0000\u0ba4\u0ba9"+
		"\u0003\u00deo\u0000\u0ba5\u0ba6\u0005\u0006\u0000\u0000\u0ba6\u0ba8\u0003"+
		"\u00deo\u0000\u0ba7\u0ba5\u0001\u0000\u0000\u0000\u0ba8\u0bab\u0001\u0000"+
		"\u0000\u0000\u0ba9\u0ba7\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0001\u0000"+
		"\u0000\u0000\u0baa\u00dd\u0001\u0000\u0000\u0000\u0bab\u0ba9\u0001\u0000"+
		"\u0000\u0000\u0bac\u0bad\u0003\u0258\u012c\u0000\u0bad\u0bb4\u0005\u008f"+
		"\u0000\u0000\u0bae\u0bb5\u0003\u02aa\u0155\u0000\u0baf\u0bb0\u0005\u0135"+
		"\u0000\u0000\u0bb0\u0bb1\u0005\u0002\u0000\u0000\u0bb1\u0bb2\u0003\u02aa"+
		"\u0155\u0000\u0bb2\u0bb3\u0005\u0003\u0000\u0000\u0bb3\u0bb5\u0001\u0000"+
		"\u0000\u0000\u0bb4\u0bae\u0001\u0000\u0000\u0000\u0bb4\u0baf\u0001\u0000"+
		"\u0000\u0000\u0bb5\u00df\u0001\u0000\u0000\u0000\u0bb6\u0bb7\u0005\u008d"+
		"\u0000\u0000\u0bb7\u0bb8\u0005\u0002\u0000\u0000\u0bb8\u0bb9\u0003\u048a"+
		"\u0245\u0000\u0bb9\u0bba\u0005\u0003\u0000\u0000\u0bba\u00e1\u0001\u0000"+
		"\u0000\u0000\u0bbb\u0bc4\u0003\u00e4r\u0000\u0bbc\u0bc4\u0003\u00e6s\u0000"+
		"\u0bbd\u0bbe\u0003\u00e4r\u0000\u0bbe\u0bbf\u0003\u00e6s\u0000\u0bbf\u0bc4"+
		"\u0001\u0000\u0000\u0000\u0bc0\u0bc1\u0003\u00e6s\u0000\u0bc1\u0bc2\u0003"+
		"\u00e4r\u0000\u0bc2\u0bc4\u0001\u0000\u0000\u0000\u0bc3\u0bbb\u0001\u0000"+
		"\u0000\u0000\u0bc3\u0bbc\u0001\u0000\u0000\u0000\u0bc3\u0bbd\u0001\u0000"+
		"\u0000\u0000\u0bc3\u0bc0\u0001\u0000\u0000\u0000\u0bc4\u00e3\u0001\u0000"+
		"\u0000\u0000\u0bc5\u0bc6\u0005v\u0000\u0000\u0bc6\u0bc7\u0005\u0190\u0000"+
		"\u0000\u0bc7\u0bc8\u0003\u00e8t\u0000\u0bc8\u00e5\u0001\u0000\u0000\u0000"+
		"\u0bc9\u0bca\u0005v\u0000\u0000\u0bca\u0bcb\u0005\u00dc\u0000\u0000\u0bcb"+
		"\u0bcc\u0003\u00e8t\u0000\u0bcc\u00e7\u0001\u0000\u0000\u0000\u0bcd\u0bce"+
		"\u0005\u012c\u0000\u0000\u0bce\u0bd4\u0005\u00aa\u0000\u0000\u0bcf\u0bd4"+
		"\u0005\u015a\u0000\u0000\u0bd0\u0bd4\u0005\u00bc\u0000\u0000\u0bd1\u0bd2"+
		"\u0005\u016c\u0000\u0000\u0bd2\u0bd4\u0007\u0010\u0000\u0000\u0bd3\u0bcd"+
		"\u0001\u0000\u0000\u0000\u0bd3\u0bcf\u0001\u0000\u0000\u0000\u0bd3\u0bd0"+
		"\u0001\u0000\u0000\u0000\u0bd3\u0bd1\u0001\u0000\u0000\u0000\u0bd4\u00e9"+
		"\u0001\u0000\u0000\u0000\u0bd5\u0bd6\u0005\u010b\u0000\u0000\u0bd6\u0bd7"+
		"\u0005\u0002\u0000\u0000\u0bd7\u0bd8\u0003\u0564\u02b2\u0000\u0bd8\u0bd9"+
		"\u0005\u0003\u0000\u0000\u0bd9\u00eb\u0001\u0000\u0000\u0000\u0bda\u0bdb"+
		"\u0003\u00eew\u0000\u0bdb\u00ed\u0001\u0000\u0000\u0000\u0bdc\u0bdd\u0005"+
		"\u013c\u0000\u0000\u0bdd\u0bde\u0005\u00b9\u0000\u0000\u0bde\u0bdf\u0003"+
		"\u058a\u02c5\u0000\u0bdf\u0be0\u0005\u0002\u0000\u0000\u0be0\u0be1\u0003"+
		"\u00f0x\u0000\u0be1\u0be2\u0005\u0003\u0000\u0000\u0be2\u00ef\u0001\u0000"+
		"\u0000\u0000\u0be3\u0be8\u0003\u00f2y\u0000\u0be4\u0be5\u0005\u0006\u0000"+
		"\u0000\u0be5\u0be7\u0003\u00f2y\u0000\u0be6\u0be4\u0001\u0000\u0000\u0000"+
		"\u0be7\u0bea\u0001\u0000\u0000\u0000\u0be8\u0be6\u0001\u0000\u0000\u0000"+
		"\u0be8\u0be9\u0001\u0000\u0000\u0000\u0be9\u00f1\u0001\u0000\u0000\u0000"+
		"\u0bea\u0be8\u0001\u0000\u0000\u0000\u0beb\u0bed\u0003\u058a\u02c5\u0000"+
		"\u0bec\u0bee\u0003\u025e\u012f\u0000\u0bed\u0bec\u0001\u0000\u0000\u0000"+
		"\u0bed\u0bee\u0001\u0000\u0000\u0000\u0bee\u0bf0\u0001\u0000\u0000\u0000"+
		"\u0bef\u0bf1\u0003\u0260\u0130\u0000\u0bf0\u0bef\u0001\u0000\u0000\u0000"+
		"\u0bf0\u0bf1\u0001\u0000\u0000\u0000\u0bf1\u0c03\u0001\u0000\u0000\u0000"+
		"\u0bf2\u0bf4\u0003\u04c0\u0260\u0000\u0bf3\u0bf5\u0003\u025e\u012f\u0000"+
		"\u0bf4\u0bf3\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0001\u0000\u0000\u0000"+
		"\u0bf5\u0bf7\u0001\u0000\u0000\u0000\u0bf6\u0bf8\u0003\u0260\u0130\u0000"+
		"\u0bf7\u0bf6\u0001\u0000\u0000\u0000\u0bf7\u0bf8\u0001\u0000\u0000\u0000"+
		"\u0bf8\u0c03\u0001\u0000\u0000\u0000\u0bf9\u0bfa\u0005\u0002\u0000\u0000"+
		"\u0bfa\u0bfb\u0003\u048a\u0245\u0000\u0bfb\u0bfd\u0005\u0003\u0000\u0000"+
		"\u0bfc\u0bfe\u0003\u025e\u012f\u0000\u0bfd\u0bfc\u0001\u0000\u0000\u0000"+
		"\u0bfd\u0bfe\u0001\u0000\u0000\u0000\u0bfe\u0c00\u0001\u0000\u0000\u0000"+
		"\u0bff\u0c01\u0003\u0260\u0130\u0000\u0c00\u0bff\u0001\u0000\u0000\u0000"+
		"\u0c00\u0c01\u0001\u0000\u0000\u0000\u0c01\u0c03\u0001\u0000\u0000\u0000"+
		"\u0c02\u0beb\u0001\u0000\u0000\u0000\u0c02\u0bf2\u0001\u0000\u0000\u0000"+
		"\u0c02\u0bf9\u0001\u0000\u0000\u0000\u0c03\u00f3\u0001\u0000\u0000\u0000"+
		"\u0c04\u0c05\u0005\u008a\u0000\u0000\u0c05\u0c06\u0003\u056a\u02b5\u0000"+
		"\u0c06\u00f5\u0001\u0000\u0000\u0000\u0c07\u0c08\u0005\u008f\u0000\u0000"+
		"\u0c08\u0c0c\u0003p8\u0000\u0c09\u0c0a\u0005\u019a\u0000\u0000\u0c0a\u0c0c"+
		"\u0005\u0134\u0000\u0000\u0c0b\u0c07\u0001\u0000\u0000\u0000\u0c0b\u0c09"+
		"\u0001\u0000\u0000\u0000\u0c0c\u00f7\u0001\u0000\u0000\u0000\u0c0d\u0c0e"+
		"\u0005v\u0000\u0000\u0c0e\u0c14\u0005\u00c7\u0000\u0000\u0c0f\u0c15\u0005"+
		"\u00e5\u0000\u0000\u0c10\u0c11\u0005\u00dc\u0000\u0000\u0c11\u0c15\u0005"+
		"\u015f\u0000\u0000\u0c12\u0c13\u0005\u0143\u0000\u0000\u0c13\u0c15\u0005"+
		"\u015f\u0000\u0000\u0c14\u0c0f\u0001\u0000\u0000\u0000\u0c14\u0c10\u0001"+
		"\u0000\u0000\u0000\u0c14\u0c12\u0001\u0000\u0000\u0000\u0c15\u00f9\u0001"+
		"\u0000\u0000\u0000\u0c16\u0c17\u0005\u017e\u0000\u0000\u0c17\u0c18\u0003"+
		"\u056a\u02b5\u0000\u0c18\u00fb\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0005"+
		"\u008a\u0000\u0000\u0c1a\u0c1b\u0005\u0108\u0000\u0000\u0c1b\u0c1c\u0005"+
		"\u017e\u0000\u0000\u0c1c\u0c1d\u0003\u056a\u02b5\u0000\u0c1d\u00fd\u0001"+
		"\u0000\u0000\u0000\u0c1e\u0c1f\u0005\u008a\u0000\u0000\u0c1f\u0c20\u0005"+
		"\u0108\u0000\u0000\u0c20\u0c21\u0003\u056a\u02b5\u0000\u0c21\u00ff\u0001"+
		"\u0000\u0000\u0000\u0c22\u0c23\u0005T\u0000\u0000\u0c23\u0c27\u0005\u0175"+
		"\u0000\u0000\u0c24\u0c25\u0005\u0102\u0000\u0000\u0c25\u0c26\u0005s\u0000"+
		"\u0000\u0c26\u0c28\u0005\u01ab\u0000\u0000\u0c27\u0c24\u0001\u0000\u0000"+
		"\u0000\u0c27\u0c28\u0001\u0000\u0000\u0000\u0c28\u0c29\u0001\u0000\u0000"+
		"\u0000\u0c29\u0c2b\u0003\u0208\u0104\u0000\u0c2a\u0c2c\u0003\u036a\u01b5"+
		"\u0000\u0c2b\u0c2a\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0001\u0000\u0000"+
		"\u0000\u0c2c\u0c2d\u0001\u0000\u0000\u0000\u0c2d\u0c2e\u0005v\u0000\u0000"+
		"\u0c2e\u0c2f\u0003\u0502\u0281\u0000\u0c2f\u0c30\u0005f\u0000\u0000\u0c30"+
		"\u0c31\u0003\u0424\u0212\u0000\u0c31\u0101\u0001\u0000\u0000\u0000\u0c32"+
		"\u0c33\u0005\u00b0\u0000\u0000\u0c33\u0c36\u0005\u0175\u0000\u0000\u0c34"+
		"\u0c35\u0005\u0102\u0000\u0000\u0c35\u0c37\u0005\u01ab\u0000\u0000\u0c36"+
		"\u0c34\u0001\u0000\u0000\u0000\u0c36\u0c37\u0001\u0000\u0000\u0000\u0c37"+
		"\u0c38\u0001\u0000\u0000\u0000\u0c38\u0c39\u0003\u0208\u0104\u0000\u0c39"+
		"\u0c3a\u0005\u016c\u0000\u0000\u0c3a\u0c3b\u0005\u0175\u0000\u0000\u0c3b"+
		"\u0c3c\u0003\u0582\u02c1\u0000\u0c3c\u0103\u0001\u0000\u0000\u0000\u0c3d"+
		"\u0c3f\u0005T\u0000\u0000\u0c3e\u0c40\u0003\u00aaU\u0000\u0c3f\u0c3e\u0001"+
		"\u0000\u0000\u0000\u0c3f\u0c40\u0001\u0000\u0000\u0000\u0c40\u0c41\u0001"+
		"\u0000\u0000\u0000\u0c41\u0c45\u0005\u0082\u0000\u0000\u0c42\u0c43\u0005"+
		"\u0102\u0000\u0000\u0c43\u0c44\u0005s\u0000\u0000\u0c44\u0c46\u0005\u01ab"+
		"\u0000\u0000\u0c45\u0c42\u0001\u0000\u0000\u0000\u0c45\u0c46\u0001\u0000"+
		"\u0000\u0000\u0c46\u0c47\u0001\u0000\u0000\u0000\u0c47\u0c48\u0003\u0106"+
		"\u0083\u0000\u0c48\u0c49\u0005J\u0000\u0000\u0c49\u0c4b\u0003\u03c4\u01e2"+
		"\u0000\u0c4a\u0c4c\u0003\u0108\u0084\u0000\u0c4b\u0c4a\u0001\u0000\u0000"+
		"\u0000\u0c4b\u0c4c\u0001\u0000\u0000\u0000\u0c4c\u0105\u0001\u0000\u0000"+
		"\u0000\u0c4d\u0c4f\u0003\u0566\u02b3\u0000\u0c4e\u0c50\u0003\u00d2i\u0000"+
		"\u0c4f\u0c4e\u0001\u0000\u0000\u0000\u0c4f\u0c50\u0001\u0000\u0000\u0000"+
		"\u0c50\u0c52\u0001\u0000\u0000\u0000\u0c51\u0c53\u0003\u00f4z\u0000\u0c52"+
		"\u0c51\u0001\u0000\u0000\u0000\u0c52\u0c53\u0001\u0000\u0000\u0000\u0c53"+
		"\u0c55\u0001\u0000\u0000\u0000\u0c54\u0c56\u0003\u00f6{\u0000\u0c55\u0c54"+
		"\u0001\u0000\u0000\u0000\u0c55\u0c56\u0001\u0000\u0000\u0000\u0c56\u0c58"+
		"\u0001\u0000\u0000\u0000\u0c57\u0c59\u0003\u00f8|\u0000\u0c58\u0c57\u0001"+
		"\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000\u0000\u0000\u0c59\u0c5b\u0001"+
		"\u0000\u0000\u0000\u0c5a\u0c5c\u0003\u00fa}\u0000\u0c5b\u0c5a\u0001\u0000"+
		"\u0000\u0000\u0c5b\u0c5c\u0001\u0000\u0000\u0000\u0c5c\u0107\u0001\u0000"+
		"\u0000\u0000\u0c5d\u0c61\u0005\u008f\u0000\u0000\u0c5e\u0c62\u0005\u00d4"+
		"\u0000\u0000\u0c5f\u0c60\u0005\u012c\u0000\u0000\u0c60\u0c62\u0005\u00d4"+
		"\u0000\u0000\u0c61\u0c5e\u0001\u0000\u0000\u0000\u0c61\u0c5f\u0001\u0000"+
		"\u0000\u0000\u0c62\u0109\u0001\u0000\u0000\u0000\u0c63\u0c65\u0005T\u0000"+
		"\u0000\u0c64\u0c66\u0003\u010e\u0087\u0000\u0c65\u0c64\u0001\u0000\u0000"+
		"\u0000\u0c65\u0c66\u0001\u0000\u0000\u0000\u0c66\u0c67\u0001\u0000\u0000"+
		"\u0000\u0c67\u0c68\u0005\u0121\u0000\u0000\u0c68\u0c6c\u0005\u0197\u0000"+
		"\u0000\u0c69\u0c6a\u0005\u0102\u0000\u0000\u0c6a\u0c6b\u0005s\u0000\u0000"+
		"\u0c6b\u0c6d\u0005\u01ab\u0000\u0000\u0c6c\u0c69\u0001\u0000\u0000\u0000"+
		"\u0c6c\u0c6d\u0001\u0000\u0000\u0000\u0c6d\u0c6e\u0001\u0000\u0000\u0000"+
		"\u0c6e\u0c6f\u0003\u010c\u0086\u0000\u0c6f\u0c70\u0005J\u0000\u0000\u0c70"+
		"\u0c72\u0003\u03c4\u01e2\u0000\u0c71\u0c73\u0003\u0108\u0084\u0000\u0c72"+
		"\u0c71\u0001\u0000\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000\u0c73"+
		"\u010b\u0001\u0000\u0000\u0000\u0c74\u0c76\u0003\u0566\u02b3\u0000\u0c75"+
		"\u0c77\u0003\u00d2i\u0000\u0c76\u0c75\u0001\u0000\u0000\u0000\u0c76\u0c77"+
		"\u0001\u0000\u0000\u0000\u0c77\u0c79\u0001\u0000\u0000\u0000\u0c78\u0c7a"+
		"\u0003\u00f4z\u0000\u0c79\u0c78\u0001\u0000\u0000\u0000\u0c79\u0c7a\u0001"+
		"\u0000\u0000\u0000\u0c7a\u0c7c\u0001\u0000\u0000\u0000\u0c7b\u0c7d\u0003"+
		"r9\u0000\u0c7c\u0c7b\u0001\u0000\u0000\u0000\u0c7c\u0c7d\u0001\u0000\u0000"+
		"\u0000\u0c7d\u0c7f\u0001\u0000\u0000\u0000\u0c7e\u0c80\u0003\u00fa}\u0000"+
		"\u0c7f\u0c7e\u0001\u0000\u0000\u0000\u0c7f\u0c80\u0001\u0000\u0000\u0000"+
		"\u0c80\u010d\u0001\u0000\u0000\u0000\u0c81\u0c82\u0005\u018e\u0000\u0000"+
		"\u0c82\u010f\u0001\u0000\u0000\u0000\u0c83\u0c84\u0005\u0150\u0000\u0000"+
		"\u0c84\u0c85\u0005\u0121\u0000\u0000\u0c85\u0c87\u0005\u0197\u0000\u0000"+
		"\u0c86\u0c88\u0003\u024e\u0127\u0000\u0c87\u0c86\u0001\u0000\u0000\u0000"+
		"\u0c87\u0c88\u0001\u0000\u0000\u0000\u0c88\u0c89\u0001\u0000\u0000\u0000"+
		"\u0c89\u0c8b\u0003\u0566\u02b3\u0000\u0c8a\u0c8c\u0003\u0108\u0084\u0000"+
		"\u0c8b\u0c8a\u0001\u0000\u0000\u0000\u0c8b\u0c8c\u0001\u0000\u0000\u0000"+
		"\u0c8c\u0111\u0001\u0000\u0000\u0000\u0c8d\u0c8f\u0005T\u0000\u0000\u0c8e"+
		"\u0c90\u0003\u00aaU\u0000\u0c8f\u0c8e\u0001\u0000\u0000\u0000\u0c8f\u0c90"+
		"\u0001\u0000\u0000\u0000\u0c90\u0c91\u0001\u0000\u0000\u0000\u0c91\u0c95"+
		"\u0005\u0167\u0000\u0000\u0c92\u0c93\u0005\u0102\u0000\u0000\u0c93\u0c94"+
		"\u0005s\u0000\u0000\u0c94\u0c96\u0005\u01ab\u0000\u0000\u0c95\u0c92\u0001"+
		"\u0000\u0000\u0000\u0c95\u0c96\u0001\u0000\u0000\u0000\u0c96\u0c97\u0001"+
		"\u0000\u0000\u0000\u0c97\u0c99\u0003\u0566\u02b3\u0000\u0c98\u0c9a\u0003"+
		"\u0116\u008b\u0000\u0c99\u0c98\u0001\u0000\u0000\u0000\u0c99\u0c9a\u0001"+
		"\u0000\u0000\u0000\u0c9a\u0113\u0001\u0000\u0000\u0000\u0c9b\u0c9c\u0005"+
		"\u00b0\u0000\u0000\u0c9c\u0c9f\u0005\u0167\u0000\u0000\u0c9d\u0c9e\u0005"+
		"\u0102\u0000\u0000\u0c9e\u0ca0\u0005\u01ab\u0000\u0000\u0c9f\u0c9d\u0001"+
		"\u0000\u0000\u0000\u0c9f\u0ca0\u0001\u0000\u0000\u0000\u0ca0\u0ca1\u0001"+
		"\u0000\u0000\u0000\u0ca1\u0ca2\u0003\u0566\u02b3\u0000\u0ca2\u0ca3\u0003"+
		"\u011a\u008d\u0000\u0ca3\u0115\u0001\u0000\u0000\u0000\u0ca4\u0ca5\u0003"+
		"\u011a\u008d\u0000\u0ca5\u0117\u0001\u0000\u0000\u0000\u0ca6\u0ca7\u0005"+
		"\u0002\u0000\u0000\u0ca7\u0ca8\u0003\u011a\u008d\u0000\u0ca8\u0ca9\u0005"+
		"\u0003\u0000\u0000\u0ca9\u0119\u0001\u0000\u0000\u0000\u0caa\u0cac\u0003"+
		"\u011c\u008e\u0000\u0cab\u0caa\u0001\u0000\u0000\u0000\u0cac\u0cad\u0001"+
		"\u0000\u0000\u0000\u0cad\u0cab\u0001\u0000\u0000\u0000\u0cad\u0cae\u0001"+
		"\u0000\u0000\u0000\u0cae\u011b\u0001\u0000\u0000\u0000\u0caf\u0cb0\u0005"+
		"J\u0000\u0000\u0cb0\u0cd2\u0003\u0460\u0230\u0000\u0cb1\u0cb2\u0005\u00ba"+
		"\u0000\u0000\u0cb2\u0cd2\u0003\u0120\u0090\u0000\u0cb3\u0cd2\u0005\u00d3"+
		"\u0000\u0000\u0cb4\u0cb6\u0005\u0107\u0000\u0000\u0cb5\u0cb7\u0003\u011e"+
		"\u008f\u0000\u0cb6\u0cb5\u0001\u0000\u0000\u0000\u0cb6\u0cb7\u0001\u0000"+
		"\u0000\u0000\u0cb7\u0cb8\u0001\u0000\u0000\u0000\u0cb8\u0cd2\u0003\u0120"+
		"\u0090\u0000\u0cb9\u0cba\u0005\u0122\u0000\u0000\u0cba\u0cd2\u0003\u0120"+
		"\u0090\u0000\u0cbb\u0cbc\u0005\u0125\u0000\u0000\u0cbc\u0cd2\u0003\u0120"+
		"\u0090\u0000\u0cbd\u0cbe\u0005\u012c\u0000\u0000\u0cbe\u0cd2\u0007\u0011"+
		"\u0000\u0000\u0cbf\u0cc0\u0005\u0138\u0000\u0000\u0cc0\u0cc1\u0005\u00b9"+
		"\u0000\u0000\u0cc1\u0cd2\u0003\u0208\u0104\u0000\u0cc2\u0cc3\u0005\u0167"+
		"\u0000\u0000\u0cc3\u0cc4\u0005\u0129\u0000\u0000\u0cc4\u0cd2\u0003\u0208"+
		"\u0104\u0000\u0cc5\u0cc7\u0005\u0173\u0000\u0000\u0cc6\u0cc8\u0003\f\u0006"+
		"\u0000\u0cc7\u0cc6\u0001\u0000\u0000\u0000\u0cc7\u0cc8\u0001\u0000\u0000"+
		"\u0000\u0cc8\u0cc9\u0001\u0000\u0000\u0000\u0cc9\u0cd2\u0003\u0120\u0090"+
		"\u0000\u0cca\u0ccc\u0005\u0159\u0000\u0000\u0ccb\u0ccd\u0003\f\u0006\u0000"+
		"\u0ccc\u0ccb\u0001\u0000\u0000\u0000\u0ccc\u0ccd\u0001\u0000\u0000\u0000"+
		"\u0ccd\u0ccf\u0001\u0000\u0000\u0000\u0cce\u0cd0\u0003\u0120\u0090\u0000"+
		"\u0ccf\u0cce\u0001\u0000\u0000\u0000\u0ccf\u0cd0\u0001\u0000\u0000\u0000"+
		"\u0cd0\u0cd2\u0001\u0000\u0000\u0000\u0cd1\u0caf\u0001\u0000\u0000\u0000"+
		"\u0cd1\u0cb1\u0001\u0000\u0000\u0000\u0cd1\u0cb3\u0001\u0000\u0000\u0000"+
		"\u0cd1\u0cb4\u0001\u0000\u0000\u0000\u0cd1\u0cb9\u0001\u0000\u0000\u0000"+
		"\u0cd1\u0cbb\u0001\u0000\u0000\u0000\u0cd1\u0cbd\u0001\u0000\u0000\u0000"+
		"\u0cd1\u0cbf\u0001\u0000\u0000\u0000\u0cd1\u0cc2\u0001\u0000\u0000\u0000"+
		"\u0cd1\u0cc5\u0001\u0000\u0000\u0000\u0cd1\u0cca\u0001\u0000\u0000\u0000"+
		"\u0cd2\u011d\u0001\u0000\u0000\u0000\u0cd3\u0cd4\u0005\u00b9\u0000\u0000"+
		"\u0cd4\u011f\u0001\u0000\u0000\u0000\u0cd5\u0cdc\u0003\u0578\u02bc\u0000"+
		"\u0cd6\u0cd7\u0005\f\u0000\u0000\u0cd7\u0cdc\u0003\u0578\u02bc\u0000\u0cd8"+
		"\u0cd9\u0005\r\u0000\u0000\u0cd9\u0cdc\u0003\u0578\u02bc\u0000\u0cda\u0cdc"+
		"\u0003\u0582\u02c1\u0000\u0cdb\u0cd5\u0001\u0000\u0000\u0000\u0cdb\u0cd6"+
		"\u0001\u0000\u0000\u0000\u0cdb\u0cd8\u0001\u0000\u0000\u0000\u0cdb\u0cda"+
		"\u0001\u0000\u0000\u0000\u0cdc\u0121\u0001\u0000\u0000\u0000\u0cdd\u0ce2"+
		"\u0003\u0120\u0090\u0000\u0cde\u0cdf\u0005\u0006\u0000\u0000\u0cdf\u0ce1"+
		"\u0003\u0120\u0090\u0000\u0ce0\u0cde\u0001\u0000\u0000\u0000\u0ce1\u0ce4"+
		"\u0001\u0000\u0000\u0000\u0ce2\u0ce0\u0001\u0000\u0000\u0000\u0ce2\u0ce3"+
		"\u0001\u0000\u0000\u0000\u0ce3\u0123\u0001\u0000\u0000\u0000\u0ce4\u0ce2"+
		"\u0001\u0000\u0000\u0000\u0ce5\u0ce7\u0005T\u0000\u0000\u0ce6\u0ce8\u0003"+
		"\u0268\u0134\u0000\u0ce7\u0ce6\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0001"+
		"\u0000\u0000\u0000\u0ce8\u0cea\u0001\u0000\u0000\u0000\u0ce9\u0ceb\u0003"+
		"\u0126\u0093\u0000\u0cea\u0ce9\u0001\u0000\u0000\u0000\u0cea\u0ceb\u0001"+
		"\u0000\u0000\u0000\u0ceb\u0ced\u0001\u0000\u0000\u0000\u0cec\u0cee\u0003"+
		"\u0130\u0098\u0000\u0ced\u0cec\u0001\u0000\u0000\u0000\u0ced\u0cee\u0001"+
		"\u0000\u0000\u0000\u0cee\u0cef\u0001\u0000\u0000\u0000\u0cef\u0cf0\u0005"+
		"\u0114\u0000\u0000\u0cf0\u0cf9\u0003\u056a\u02b5\u0000\u0cf1\u0cf2\u0005"+
		"\u00fd\u0000\u0000\u0cf2\u0cf4\u0003\u0128\u0094\u0000\u0cf3\u0cf5\u0003"+
		"\u012a\u0095\u0000\u0cf4\u0cf3\u0001\u0000\u0000\u0000\u0cf4\u0cf5\u0001"+
		"\u0000\u0000\u0000\u0cf5\u0cf7\u0001\u0000\u0000\u0000\u0cf6\u0cf8\u0003"+
		"\u012e\u0097\u0000\u0cf7\u0cf6\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0001"+
		"\u0000\u0000\u0000\u0cf8\u0cfa\u0001\u0000\u0000\u0000\u0cf9\u0cf1\u0001"+
		"\u0000\u0000\u0000\u0cf9\u0cfa\u0001\u0000\u0000\u0000\u0cfa\u0125\u0001"+
		"\u0000\u0000\u0000\u0cfb\u0cfc\u0005\u0186\u0000\u0000\u0cfc\u0127\u0001"+
		"\u0000\u0000\u0000\u0cfd\u0cff\u0003\u056a\u02b5\u0000\u0cfe\u0d00\u0003"+
		"\u020a\u0105\u0000\u0cff\u0cfe\u0001\u0000\u0000\u0000\u0cff\u0d00\u0001"+
		"\u0000\u0000\u0000\u0d00\u0129\u0001\u0000\u0000\u0000\u0d01\u0d02\u0005"+
		"\u010c\u0000\u0000\u0d02\u0d03\u0003\u0128\u0094\u0000\u0d03\u012b\u0001"+
		"\u0000\u0000\u0000\u0d04\u0d05\u0005\u0194\u0000\u0000\u0d05\u0d09\u0003"+
		"\u0128\u0094\u0000\u0d06\u0d07\u0005\u012c\u0000\u0000\u0d07\u0d09\u0005"+
		"\u0194\u0000\u0000\u0d08\u0d04\u0001\u0000\u0000\u0000\u0d08\u0d06\u0001"+
		"\u0000\u0000\u0000\u0d09\u012d\u0001\u0000\u0000\u0000\u0d0a\u0d0b\u0003"+
		"\u012c\u0096\u0000\u0d0b\u012f\u0001\u0000\u0000\u0000\u0d0c\u0d0d\u0005"+
		"\u0146\u0000\u0000\u0d0d\u0131\u0001\u0000\u0000\u0000\u0d0e\u0d0f\u0005"+
		"T\u0000\u0000\u0d0f\u0d10\u0005\u017e\u0000\u0000\u0d10\u0d12\u0003\u056a"+
		"\u02b5\u0000\u0d11\u0d13\u0003\u0134\u009a\u0000\u0d12\u0d11\u0001\u0000"+
		"\u0000\u0000\u0d12\u0d13\u0001\u0000\u0000\u0000\u0d13\u0d14\u0001\u0000"+
		"\u0000\u0000\u0d14\u0d15\u0005\u011c\u0000\u0000\u0d15\u0d17\u0003\u057c"+
		"\u02be\u0000\u0d16\u0d18\u0003r9\u0000\u0d17\u0d16\u0001\u0000\u0000\u0000"+
		"\u0d17\u0d18\u0001\u0000\u0000\u0000\u0d18\u0133\u0001\u0000\u0000\u0000"+
		"\u0d19\u0d1a\u0005\u0139\u0000\u0000\u0d1a\u0d1b\u0003\u0586\u02c3\u0000"+
		"\u0d1b\u0135\u0001\u0000\u0000\u0000\u0d1c\u0d1d\u0005\u00e5\u0000\u0000"+
		"\u0d1d\u0d20\u0005\u017e\u0000\u0000\u0d1e\u0d1f\u0005\u0102\u0000\u0000"+
		"\u0d1f\u0d21\u0005\u01ab\u0000\u0000\u0d20\u0d1e\u0001\u0000\u0000\u0000"+
		"\u0d20\u0d21\u0001\u0000\u0000\u0000\u0d21\u0d22\u0001\u0000\u0000\u0000"+
		"\u0d22\u0d23\u0003\u056a\u02b5\u0000\u0d23\u0137\u0001\u0000\u0000\u0000"+
		"\u0d24\u0d25\u0005T\u0000\u0000\u0d25\u0d29\u0005\u00f2\u0000\u0000\u0d26"+
		"\u0d27\u0005\u0102\u0000\u0000\u0d27\u0d28\u0005s\u0000\u0000\u0d28\u0d2a"+
		"\u0005\u01ab\u0000\u0000\u0d29\u0d26\u0001\u0000\u0000\u0000\u0d29\u0d2a"+
		"\u0001\u0000\u0000\u0000\u0d2a\u0d2b\u0001\u0000\u0000\u0000\u0d2b\u0d2d"+
		"\u0003\u056a\u02b5\u0000\u0d2c\u0d2e\u0003\f\u0006\u0000\u0d2d\u0d2c\u0001"+
		"\u0000\u0000\u0000\u0d2d\u0d2e\u0001\u0000\u0000\u0000\u0d2e\u0d2f\u0001"+
		"\u0000\u0000\u0000\u0d2f\u0d30\u0003\u013a\u009d\u0000\u0d30\u0139\u0001"+
		"\u0000\u0000\u0000\u0d31\u0d33\u0003\u013c\u009e\u0000\u0d32\u0d31\u0001"+
		"\u0000\u0000\u0000\u0d33\u0d36\u0001\u0000\u0000\u0000\u0d34\u0d32\u0001"+
		"\u0000\u0000\u0000\u0d34\u0d35\u0001\u0000\u0000\u0000\u0d35\u013b\u0001"+
		"\u0000\u0000\u0000\u0d36\u0d34\u0001\u0000\u0000\u0000\u0d37\u0d38\u0005"+
		"\u0162\u0000\u0000\u0d38\u0d3f\u0003\u056a\u02b5\u0000\u0d39\u0d3a\u0005"+
		"\u0196\u0000\u0000\u0d3a\u0d3f\u0003D\"\u0000\u0d3b\u0d3c\u0005f\u0000"+
		"\u0000\u0d3c\u0d3f\u0003D\"\u0000\u0d3d\u0d3f\u0005\u00bc\u0000\u0000"+
		"\u0d3e\u0d37\u0001\u0000\u0000\u0000\u0d3e\u0d39\u0001\u0000\u0000\u0000"+
		"\u0d3e\u0d3b\u0001\u0000\u0000\u0000\u0d3e\u0d3d\u0001\u0000\u0000\u0000"+
		"\u0d3f\u013d\u0001\u0000\u0000\u0000\u0d40\u0d41\u0005\u00b0\u0000\u0000"+
		"\u0d41\u0d42\u0005\u00f2\u0000\u0000\u0d42\u0d43\u0003\u056a\u02b5\u0000"+
		"\u0d43\u0d44\u0005\u0190\u0000\u0000\u0d44\u0d45\u0003\u0140\u00a0\u0000"+
		"\u0d45\u013f\u0001\u0000\u0000\u0000\u0d46\u0d48\u0003\u0142\u00a1\u0000"+
		"\u0d47\u0d46\u0001\u0000\u0000\u0000\u0d48\u0d4b\u0001\u0000\u0000\u0000"+
		"\u0d49\u0d47\u0001\u0000\u0000\u0000\u0d49\u0d4a\u0001\u0000\u0000\u0000"+
		"\u0d4a\u0141\u0001\u0000\u0000\u0000\u0d4b\u0d49\u0001\u0000\u0000\u0000"+
		"\u0d4c\u0d4d\u0005\u0084\u0000\u0000\u0d4d\u0d4e\u0003D\"\u0000\u0d4e"+
		"\u0143\u0001\u0000\u0000\u0000\u0d4f\u0d50\u0005\u00b0\u0000\u0000\u0d50"+
		"\u0d51\u0005\u00f2\u0000\u0000\u0d51\u0d52\u0003\u056a\u02b5\u0000\u0d52"+
		"\u0d53\u0003$\u0012\u0000\u0d53\u0d54\u0003\u0200\u0100\u0000\u0d54\u0d55"+
		"\u0003\u056a\u02b5\u0000\u0d55\u0db8\u0001\u0000\u0000\u0000\u0d56\u0d57"+
		"\u0005\u00b0\u0000\u0000\u0d57\u0d58\u0005\u00f2\u0000\u0000\u0d58\u0d59"+
		"\u0003\u056a\u02b5\u0000\u0d59\u0d5a\u0003$\u0012\u0000\u0d5a\u0d5b\u0003"+
		"\u01fe\u00ff\u0000\u0d5b\u0d5c\u0003\u0208\u0104\u0000\u0d5c\u0db8\u0001"+
		"\u0000\u0000\u0000\u0d5d\u0d5e\u0005\u00b0\u0000\u0000\u0d5e\u0d5f\u0005"+
		"\u00f2\u0000\u0000\u0d5f\u0d60\u0003\u056a\u02b5\u0000\u0d60\u0d61\u0003"+
		"$\u0012\u0000\u0d61\u0d62\u0005\u00ae\u0000\u0000\u0d62\u0d63\u0003\u0288"+
		"\u0144\u0000\u0d63\u0db8\u0001\u0000\u0000\u0000\u0d64\u0d65\u0005\u00b0"+
		"\u0000\u0000\u0d65\u0d66\u0005\u00f2\u0000\u0000\u0d66\u0d67\u0003\u056a"+
		"\u02b5\u0000\u0d67\u0d68\u0003$\u0012\u0000\u0d68\u0d69\u0005O\u0000\u0000"+
		"\u0d69\u0d6a\u0005\u0002\u0000\u0000\u0d6a\u0d6b\u0003\u045c\u022e\u0000"+
		"\u0d6b\u0d6c\u0005J\u0000\u0000\u0d6c\u0d6d\u0003\u045c\u022e\u0000\u0d6d"+
		"\u0d6e\u0005\u0003\u0000\u0000\u0d6e\u0db8\u0001\u0000\u0000\u0000\u0d6f"+
		"\u0d70\u0005\u00b0\u0000\u0000\u0d70\u0d71\u0005\u00f2\u0000\u0000\u0d71"+
		"\u0d72\u0003\u056a\u02b5\u0000\u0d72\u0d73\u0003$\u0012\u0000\u0d73\u0d74"+
		"\u0005\u00e3\u0000\u0000\u0d74\u0d75\u0003\u045c\u022e\u0000\u0d75\u0db8"+
		"\u0001\u0000\u0000\u0000\u0d76\u0d77\u0005\u00b0\u0000\u0000\u0d77\u0d78"+
		"\u0005\u00f2\u0000\u0000\u0d78\u0d79\u0003\u056a\u02b5\u0000\u0d79\u0d7a"+
		"\u0003$\u0012\u0000\u0d7a\u0d7b\u0005\u00f9\u0000\u0000\u0d7b\u0d7c\u0003"+
		"\u0270\u0138\u0000\u0d7c\u0db8\u0001\u0000\u0000\u0000\u0d7d\u0d7e\u0005"+
		"\u00b0\u0000\u0000\u0d7e\u0d7f\u0005\u00f2\u0000\u0000\u0d7f\u0d80\u0003"+
		"\u056a\u02b5\u0000\u0d80\u0d81\u0003$\u0012\u0000\u0d81\u0d82\u0005\u0135"+
		"\u0000\u0000\u0d82\u0d83\u0003\u02ae\u0157\u0000\u0d83\u0db8\u0001\u0000"+
		"\u0000\u0000\u0d84\u0d85\u0005\u00b0\u0000\u0000\u0d85\u0d86\u0005\u00f2"+
		"\u0000\u0000\u0d86\u0d87\u0003\u056a\u02b5\u0000\u0d87\u0d88\u0003$\u0012"+
		"\u0000\u0d88\u0d89\u0005\u0135\u0000\u0000\u0d89\u0d8a\u0005\u00c2\u0000"+
		"\u0000\u0d8a\u0d8b\u0003\u0208\u0104\u0000\u0d8b\u0d8c\u0005\u008a\u0000"+
		"\u0000\u0d8c\u0d8d\u0003\u056a\u02b5\u0000\u0d8d\u0db8\u0001\u0000\u0000"+
		"\u0000\u0d8e\u0d8f\u0005\u00b0\u0000\u0000\u0d8f\u0d90\u0005\u00f2\u0000"+
		"\u0000\u0d90\u0d91\u0003\u056a\u02b5\u0000\u0d91\u0d92\u0003$\u0012\u0000"+
		"\u0d92\u0d93\u0005\u0135\u0000\u0000\u0d93\u0d94\u0005\u00f4\u0000\u0000"+
		"\u0d94\u0d95\u0003\u0208\u0104\u0000\u0d95\u0d96\u0005\u008a\u0000\u0000"+
		"\u0d96\u0d97\u0003\u056a\u02b5\u0000\u0d97\u0db8\u0001\u0000\u0000\u0000"+
		"\u0d98\u0d99\u0005\u00b0\u0000\u0000\u0d99\u0d9a\u0005\u00f2\u0000\u0000"+
		"\u0d9a\u0d9b\u0003\u056a\u02b5\u0000\u0d9b\u0d9c\u0003$\u0012\u0000\u0d9c"+
		"\u0d9d\u0005\u0147\u0000\u0000\u0d9d\u0d9e\u0003\u0270\u0138\u0000\u0d9e"+
		"\u0db8\u0001\u0000\u0000\u0000\u0d9f\u0da0\u0005\u00b0\u0000\u0000\u0da0"+
		"\u0da1\u0005\u00f2\u0000\u0000\u0da1\u0da2\u0003\u056a\u02b5\u0000\u0da2"+
		"\u0da3\u0003$\u0012\u0000\u0da3\u0da4\u0005\u01e0\u0000\u0000\u0da4\u0da5"+
		"\u0003\u0270\u0138\u0000\u0da5\u0db8\u0001\u0000\u0000\u0000\u0da6\u0da7"+
		"\u0005\u00b0\u0000\u0000\u0da7\u0da8\u0005\u00f2\u0000\u0000\u0da8\u0da9"+
		"\u0003\u056a\u02b5\u0000\u0da9\u0daa\u0003$\u0012\u0000\u0daa\u0dab\u0005"+
		"\u01e1\u0000\u0000\u0dab\u0dac\u0005d\u0000\u0000\u0dac\u0dad\u0003\u045c"+
		"\u022e\u0000\u0dad\u0dae\u0005\u0114\u0000\u0000\u0dae\u0daf\u0003\u056a"+
		"\u02b5\u0000\u0daf\u0db8\u0001\u0000\u0000\u0000\u0db0\u0db1\u0005\u00b0"+
		"\u0000\u0000\u0db1\u0db2\u0005\u00f2\u0000\u0000\u0db2\u0db3\u0003\u056a"+
		"\u02b5\u0000\u0db3\u0db4\u0003$\u0012\u0000\u0db4\u0db5\u0005\u0187\u0000"+
		"\u0000\u0db5\u0db6\u0003\u045c\u022e\u0000\u0db6\u0db8\u0001\u0000\u0000"+
		"\u0000\u0db7\u0d4f\u0001\u0000\u0000\u0000\u0db7\u0d56\u0001\u0000\u0000"+
		"\u0000\u0db7\u0d5d\u0001\u0000\u0000\u0000\u0db7\u0d64\u0001\u0000\u0000"+
		"\u0000\u0db7\u0d6f\u0001\u0000\u0000\u0000\u0db7\u0d76\u0001\u0000\u0000"+
		"\u0000\u0db7\u0d7d\u0001\u0000\u0000\u0000\u0db7\u0d84\u0001\u0000\u0000"+
		"\u0000\u0db7\u0d8e\u0001\u0000\u0000\u0000\u0db7\u0d98\u0001\u0000\u0000"+
		"\u0000\u0db7\u0d9f\u0001\u0000\u0000\u0000\u0db7\u0da6\u0001\u0000\u0000"+
		"\u0000\u0db7\u0db0\u0001\u0000\u0000\u0000\u0db8\u0145\u0001\u0000\u0000"+
		"\u0000\u0db9\u0dba\u0005T\u0000\u0000\u0dba\u0dbb\u0005e\u0000\u0000\u0dbb"+
		"\u0dbc\u0005\u00d4\u0000\u0000\u0dbc\u0dbd\u0005\u019c\u0000\u0000\u0dbd"+
		"\u0dbf\u0003\u056a\u02b5\u0000\u0dbe\u0dc0\u0003\u014c\u00a6\u0000\u0dbf"+
		"\u0dbe\u0001\u0000\u0000\u0000\u0dbf\u0dc0\u0001\u0000\u0000\u0000\u0dc0"+
		"\u0dc2\u0001\u0000\u0000\u0000\u0dc1\u0dc3\u0003\u0150\u00a8\u0000\u0dc2"+
		"\u0dc1\u0001\u0000\u0000\u0000\u0dc2\u0dc3\u0001\u0000\u0000\u0000\u0dc3"+
		"\u0147\u0001\u0000\u0000\u0000\u0dc4\u0dc5\u0005\u00fd\u0000\u0000\u0dc5"+
		"\u0dcd\u0003\u0128\u0094\u0000\u0dc6\u0dc7\u0005\u012c\u0000\u0000\u0dc7"+
		"\u0dcd\u0005\u00fd\u0000\u0000\u0dc8\u0dc9\u0005\u0194\u0000\u0000\u0dc9"+
		"\u0dcd\u0003\u0128\u0094\u0000\u0dca\u0dcb\u0005\u012c\u0000\u0000\u0dcb"+
		"\u0dcd\u0005\u0194\u0000\u0000\u0dcc\u0dc4\u0001\u0000\u0000\u0000\u0dcc"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dcc\u0dc8\u0001\u0000\u0000\u0000\u0dcc"+
		"\u0dca\u0001\u0000\u0000\u0000\u0dcd\u0149\u0001\u0000\u0000\u0000\u0dce"+
		"\u0dd0\u0003\u0148\u00a4\u0000\u0dcf\u0dce\u0001\u0000\u0000";
	private static final String _serializedATNSegment2 =
		"\u0000\u0dd0\u0dd1\u0001\u0000\u0000\u0000\u0dd1\u0dcf\u0001\u0000\u0000"+
		"\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000\u0dd2\u014b\u0001\u0000\u0000"+
		"\u0000\u0dd3\u0dd4\u0003\u014a\u00a5\u0000\u0dd4\u014d\u0001\u0000\u0000"+
		"\u0000\u0dd5\u0dd6\u0005\u00b0\u0000\u0000\u0dd6\u0dd7\u0005e\u0000\u0000"+
		"\u0dd7\u0dd8\u0005\u00d4\u0000\u0000\u0dd8\u0dd9\u0005\u019c\u0000\u0000"+
		"\u0dd9\u0ddb\u0003\u056a\u02b5\u0000\u0dda\u0ddc\u0003\u014c\u00a6\u0000"+
		"\u0ddb\u0dda\u0001\u0000\u0000\u0000\u0ddb\u0ddc\u0001\u0000\u0000\u0000"+
		"\u0ddc\u0ddd\u0001\u0000\u0000\u0000\u0ddd\u0dde\u0003\u0154\u00aa\u0000"+
		"\u0dde\u0de7\u0001\u0000\u0000\u0000\u0ddf\u0de0\u0005\u00b0\u0000\u0000"+
		"\u0de0\u0de1\u0005e\u0000\u0000\u0de1\u0de2\u0005\u00d4\u0000\u0000\u0de2"+
		"\u0de3\u0005\u019c\u0000\u0000\u0de3\u0de4\u0003\u056a\u02b5\u0000\u0de4"+
		"\u0de5\u0003\u014a\u00a5\u0000\u0de5\u0de7\u0001\u0000\u0000\u0000\u0de6"+
		"\u0dd5\u0001\u0000\u0000\u0000\u0de6\u0ddf\u0001\u0000\u0000\u0000\u0de7"+
		"\u014f\u0001\u0000\u0000\u0000\u0de8\u0de9\u0005\u0137\u0000\u0000\u0de9"+
		"\u0dea\u0005\u0002\u0000\u0000\u0dea\u0deb\u0003\u0152\u00a9\u0000\u0deb"+
		"\u0dec\u0005\u0003\u0000\u0000\u0dec\u0151\u0001\u0000\u0000\u0000\u0ded"+
		"\u0df2\u0003\u015a\u00ad\u0000\u0dee\u0def\u0005\u0006\u0000\u0000\u0def"+
		"\u0df1\u0003\u015a\u00ad\u0000\u0df0\u0dee\u0001\u0000\u0000\u0000\u0df1"+
		"\u0df4\u0001\u0000\u0000\u0000\u0df2\u0df0\u0001\u0000\u0000\u0000\u0df2"+
		"\u0df3\u0001\u0000\u0000\u0000\u0df3\u0153\u0001\u0000\u0000\u0000\u0df4"+
		"\u0df2\u0001\u0000\u0000\u0000\u0df5\u0df6\u0005\u0137\u0000\u0000\u0df6"+
		"\u0df7\u0005\u0002\u0000\u0000\u0df7\u0df8\u0003\u0156\u00ab\u0000\u0df8"+
		"\u0df9\u0005\u0003\u0000\u0000\u0df9\u0155\u0001\u0000\u0000\u0000\u0dfa"+
		"\u0dff\u0003\u0158\u00ac\u0000\u0dfb\u0dfc\u0005\u0006\u0000\u0000\u0dfc"+
		"\u0dfe\u0003\u0158\u00ac\u0000\u0dfd\u0dfb\u0001\u0000\u0000\u0000\u0dfe"+
		"\u0e01\u0001\u0000\u0000\u0000\u0dff\u0dfd\u0001\u0000\u0000\u0000\u0dff"+
		"\u0e00\u0001\u0000\u0000\u0000\u0e00\u0157\u0001\u0000\u0000\u0000\u0e01"+
		"\u0dff\u0001\u0000\u0000\u0000\u0e02\u0e0a\u0003\u015a\u00ad\u0000\u0e03"+
		"\u0e04\u0005\u016c\u0000\u0000\u0e04\u0e0a\u0003\u015a\u00ad\u0000\u0e05"+
		"\u0e06\u0005\u00ab\u0000\u0000\u0e06\u0e0a\u0003\u015a\u00ad\u0000\u0e07"+
		"\u0e08\u0005\u00e5\u0000\u0000\u0e08\u0e0a\u0003\u015c\u00ae\u0000\u0e09"+
		"\u0e02\u0001\u0000\u0000\u0000\u0e09\u0e03\u0001\u0000\u0000\u0000\u0e09"+
		"\u0e05\u0001\u0000\u0000\u0000\u0e09\u0e07\u0001\u0000\u0000\u0000\u0e0a"+
		"\u0159\u0001\u0000\u0000\u0000\u0e0b\u0e0c\u0003\u015c\u00ae\u0000\u0e0c"+
		"\u0e0d\u0003\u015e\u00af\u0000\u0e0d\u015b\u0001\u0000\u0000\u0000\u0e0e"+
		"\u0e0f\u0003\u0590\u02c8\u0000\u0e0f\u015d\u0001\u0000\u0000\u0000\u0e10"+
		"\u0e11\u0003\u057c\u02be\u0000\u0e11\u015f\u0001\u0000\u0000\u0000\u0e12"+
		"\u0e13\u0005T\u0000\u0000\u0e13\u0e14\u0005\u016a\u0000\u0000\u0e14\u0e16"+
		"\u0003\u056a\u02b5\u0000\u0e15\u0e17\u0003\u0162\u00b1\u0000\u0e16\u0e15"+
		"\u0001\u0000\u0000\u0000\u0e16\u0e17\u0001\u0000\u0000\u0000\u0e17\u0e19"+
		"\u0001\u0000\u0000\u0000\u0e18\u0e1a\u0003\u0166\u00b3\u0000\u0e19\u0e18"+
		"\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000\u0000\u0e1a\u0e1b"+
		"\u0001\u0000\u0000\u0000\u0e1b\u0e1c\u0005e\u0000\u0000\u0e1c\u0e1d\u0005"+
		"\u00d4\u0000\u0000\u0e1d\u0e1e\u0005\u019c\u0000\u0000\u0e1e\u0e20\u0003"+
		"\u056a\u02b5\u0000\u0e1f\u0e21\u0003\u0150\u00a8\u0000\u0e20\u0e1f\u0001"+
		"\u0000\u0000\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000\u0e21\u0e36\u0001"+
		"\u0000\u0000\u0000\u0e22\u0e23\u0005T\u0000\u0000\u0e23\u0e24\u0005\u016a"+
		"\u0000\u0000\u0e24\u0e25\u0005\u0102\u0000\u0000\u0e25\u0e26\u0005s\u0000"+
		"\u0000\u0e26\u0e27\u0005\u01ab\u0000\u0000\u0e27\u0e29\u0003\u056a\u02b5"+
		"\u0000\u0e28\u0e2a\u0003\u0162\u00b1\u0000\u0e29\u0e28\u0001\u0000\u0000"+
		"\u0000\u0e29\u0e2a\u0001\u0000\u0000\u0000\u0e2a\u0e2c\u0001\u0000\u0000"+
		"\u0000\u0e2b\u0e2d\u0003\u0166\u00b3\u0000\u0e2c\u0e2b\u0001\u0000\u0000"+
		"\u0000\u0e2c\u0e2d\u0001\u0000\u0000\u0000\u0e2d\u0e2e\u0001\u0000\u0000"+
		"\u0000\u0e2e\u0e2f\u0005e\u0000\u0000\u0e2f\u0e30\u0005\u00d4\u0000\u0000"+
		"\u0e30\u0e31\u0005\u019c\u0000\u0000\u0e31\u0e33\u0003\u056a\u02b5\u0000"+
		"\u0e32\u0e34\u0003\u0150\u00a8\u0000\u0e33\u0e32\u0001\u0000\u0000\u0000"+
		"\u0e33\u0e34\u0001\u0000\u0000\u0000\u0e34\u0e36\u0001\u0000\u0000\u0000"+
		"\u0e35\u0e12\u0001\u0000\u0000\u0000\u0e35\u0e22\u0001\u0000\u0000\u0000"+
		"\u0e36\u0161\u0001\u0000\u0000\u0000\u0e37\u0e38\u0005\u0187\u0000\u0000"+
		"\u0e38\u0e39\u0003\u057c\u02be\u0000\u0e39\u0163\u0001\u0000\u0000\u0000"+
		"\u0e3a\u0e3d\u0005\u0196\u0000\u0000\u0e3b\u0e3e\u0003\u057c\u02be\u0000"+
		"\u0e3c\u0e3e\u0005t\u0000\u0000\u0e3d\u0e3b\u0001\u0000\u0000\u0000\u0e3d"+
		"\u0e3c\u0001\u0000\u0000\u0000\u0e3e\u0165\u0001\u0000\u0000\u0000\u0e3f"+
		"\u0e40\u0003\u0164\u00b2\u0000\u0e40\u0167\u0001\u0000\u0000\u0000\u0e41"+
		"\u0e42\u0005\u00b0\u0000\u0000\u0e42\u0e43\u0005\u016a\u0000\u0000\u0e43"+
		"\u0e49\u0003\u056a\u02b5\u0000\u0e44\u0e4a\u0003\u0154\u00aa\u0000\u0e45"+
		"\u0e47\u0003\u0164\u00b2\u0000\u0e46\u0e48\u0003\u0154\u00aa\u0000\u0e47"+
		"\u0e46\u0001\u0000\u0000\u0000\u0e47\u0e48\u0001\u0000\u0000\u0000\u0e48"+
		"\u0e4a\u0001\u0000\u0000\u0000\u0e49\u0e44\u0001\u0000\u0000\u0000\u0e49"+
		"\u0e45\u0001\u0000\u0000\u0000\u0e4a\u0169\u0001\u0000\u0000\u0000\u0e4b"+
		"\u0e4c\u0005T\u0000\u0000\u0e4c\u0e4d\u0005e\u0000\u0000\u0e4d\u0e4e\u0005"+
		"\u0082\u0000\u0000\u0e4e\u0e4f\u0003\u0566\u02b3\u0000\u0e4f\u0e51\u0005"+
		"\u0002\u0000\u0000\u0e50\u0e52\u0003\u00acV\u0000\u0e51\u0e50\u0001\u0000"+
		"\u0000\u0000\u0e51\u0e52\u0001\u0000\u0000\u0000\u0e52\u0e53\u0001\u0000"+
		"\u0000\u0000\u0e53\u0e55\u0005\u0003\u0000\u0000\u0e54\u0e56\u0003\u00ea"+
		"u\u0000\u0e55\u0e54\u0001\u0000\u0000\u0000\u0e55\u0e56\u0001\u0000\u0000"+
		"\u0000\u0e56\u0e57\u0001\u0000\u0000\u0000\u0e57\u0e58\u0005\u016a\u0000"+
		"\u0000\u0e58\u0e5a\u0003\u056a\u02b5\u0000\u0e59\u0e5b\u0003\u0150\u00a8"+
		"\u0000\u0e5a\u0e59\u0001\u0000\u0000\u0000\u0e5a\u0e5b\u0001\u0000\u0000"+
		"\u0000\u0e5b\u0e94\u0001\u0000\u0000\u0000\u0e5c\u0e5d\u0005T\u0000\u0000"+
		"\u0e5d\u0e5e\u0005e\u0000\u0000\u0e5e\u0e5f\u0005\u0082\u0000\u0000\u0e5f"+
		"\u0e60\u0005\u0102\u0000\u0000\u0e60\u0e61\u0005s\u0000\u0000\u0e61\u0e62"+
		"\u0005\u01ab\u0000\u0000\u0e62\u0e63\u0003\u0566\u02b3\u0000\u0e63\u0e65"+
		"\u0005\u0002\u0000\u0000\u0e64\u0e66\u0003\u00acV\u0000\u0e65\u0e64\u0001"+
		"\u0000\u0000\u0000\u0e65\u0e66\u0001\u0000\u0000\u0000\u0e66\u0e67\u0001"+
		"\u0000\u0000\u0000\u0e67\u0e69\u0005\u0003\u0000\u0000\u0e68\u0e6a\u0003"+
		"\u00eau\u0000\u0e69\u0e68\u0001\u0000\u0000\u0000\u0e69\u0e6a\u0001\u0000"+
		"\u0000\u0000\u0e6a\u0e6b\u0001\u0000\u0000\u0000\u0e6b\u0e6c\u0005\u016a"+
		"\u0000\u0000\u0e6c\u0e6e\u0003\u056a\u02b5\u0000\u0e6d\u0e6f\u0003\u0150"+
		"\u00a8\u0000\u0e6e\u0e6d\u0001\u0000\u0000\u0000\u0e6e\u0e6f\u0001\u0000"+
		"\u0000\u0000\u0e6f\u0e94\u0001\u0000\u0000\u0000\u0e70\u0e71\u0005T\u0000"+
		"\u0000\u0e71\u0e72\u0005e\u0000\u0000\u0e72\u0e73\u0005\u0082\u0000\u0000"+
		"\u0e73\u0e74\u0003\u0566\u02b3\u0000\u0e74\u0e75\u0005\u013c\u0000\u0000"+
		"\u0e75\u0e76\u0005\u0132\u0000\u0000\u0e76\u0e78\u0003\u0566\u02b3\u0000"+
		"\u0e77\u0e79\u0003\u00aeW\u0000\u0e78\u0e77\u0001\u0000\u0000\u0000\u0e78"+
		"\u0e79\u0001\u0000\u0000\u0000\u0e79\u0e7a\u0001\u0000\u0000\u0000\u0e7a"+
		"\u0e7b\u0003|>\u0000\u0e7b\u0e7c\u0005\u016a\u0000\u0000\u0e7c\u0e7e\u0003"+
		"\u056a\u02b5\u0000\u0e7d\u0e7f\u0003\u0150\u00a8\u0000\u0e7e\u0e7d\u0001"+
		"\u0000\u0000\u0000\u0e7e\u0e7f\u0001\u0000\u0000\u0000\u0e7f\u0e94\u0001"+
		"\u0000\u0000\u0000\u0e80\u0e81\u0005T\u0000\u0000\u0e81\u0e82\u0005e\u0000"+
		"\u0000\u0e82\u0e83\u0005\u0082\u0000\u0000\u0e83\u0e84\u0005\u0102\u0000"+
		"\u0000\u0e84\u0e85\u0005s\u0000\u0000\u0e85\u0e86\u0005\u01ab\u0000\u0000"+
		"\u0e86\u0e87\u0003\u0566\u02b3\u0000\u0e87\u0e88\u0005\u013c\u0000\u0000"+
		"\u0e88\u0e89\u0005\u0132\u0000\u0000\u0e89\u0e8b\u0003\u0566\u02b3\u0000"+
		"\u0e8a\u0e8c\u0003\u00aeW\u0000\u0e8b\u0e8a\u0001\u0000\u0000\u0000\u0e8b"+
		"\u0e8c\u0001\u0000\u0000\u0000\u0e8c\u0e8d\u0001\u0000\u0000\u0000\u0e8d"+
		"\u0e8e\u0003|>\u0000\u0e8e\u0e8f\u0005\u016a\u0000\u0000\u0e8f\u0e91\u0003"+
		"\u056a\u02b5\u0000\u0e90\u0e92\u0003\u0150\u00a8\u0000\u0e91\u0e90\u0001"+
		"\u0000\u0000\u0000\u0e91\u0e92\u0001\u0000\u0000\u0000\u0e92\u0e94\u0001"+
		"\u0000\u0000\u0000\u0e93\u0e4b\u0001\u0000\u0000\u0000\u0e93\u0e5c\u0001"+
		"\u0000\u0000\u0000\u0e93\u0e70\u0001\u0000\u0000\u0000\u0e93\u0e80\u0001"+
		"\u0000\u0000\u0000\u0e94\u016b\u0001\u0000\u0000\u0000\u0e95\u0e96\u0005"+
		"\u01e2\u0000\u0000\u0e96\u0e97\u0005e\u0000\u0000\u0e97\u0e98\u0005\u0162"+
		"\u0000\u0000\u0e98\u0e9a\u0003\u056a\u02b5\u0000\u0e99\u0e9b\u0003\u0170"+
		"\u00b8\u0000\u0e9a\u0e99\u0001\u0000\u0000\u0000\u0e9a\u0e9b\u0001\u0000"+
		"\u0000\u0000\u0e9b\u0e9c\u0001\u0000\u0000\u0000\u0e9c\u0e9d\u0005f\u0000"+
		"\u0000\u0e9d\u0e9e\u0005\u016a\u0000\u0000\u0e9e\u0e9f\u0003\u056a\u02b5"+
		"\u0000\u0e9f\u0ea0\u0005m\u0000\u0000\u0ea0\u0ea2\u0003\u056a\u02b5\u0000"+
		"\u0ea1\u0ea3\u0003\u0150\u00a8\u0000\u0ea2\u0ea1\u0001\u0000\u0000\u0000"+
		"\u0ea2\u0ea3\u0001\u0000\u0000\u0000\u0ea3\u016d\u0001\u0000\u0000\u0000"+
		"\u0ea4\u0ea5\u0005p\u0000\u0000\u0ea5\u0ea8\u0005\u0084\u0000\u0000\u0ea6"+
		"\u0ea8\u0005a\u0000\u0000\u0ea7\u0ea4\u0001\u0000\u0000\u0000\u0ea7\u0ea6"+
		"\u0001\u0000\u0000\u0000\u0ea8\u016f\u0001\u0000\u0000\u0000\u0ea9\u0eaa"+
		"\u0003\u016e\u00b7\u0000\u0eaa\u0eab\u0005\u0002\u0000\u0000\u0eab\u0eac"+
		"\u0003\u0432\u0219\u0000\u0eac\u0ead\u0005\u0003\u0000\u0000\u0ead\u0171"+
		"\u0001\u0000\u0000\u0000\u0eae\u0eaf\u0005T\u0000\u0000\u0eaf\u0eb0\u0005"+
		"\u0089\u0000\u0000\u0eb0\u0eb1\u0005\u011e\u0000\u0000\u0eb1\u0eb2\u0005"+
		"d\u0000\u0000\u0eb2\u0eb3\u0003\u0174\u00ba\u0000\u0eb3\u0eb4\u0005\u016a"+
		"\u0000\u0000\u0eb4\u0eb6\u0003\u056a\u02b5\u0000\u0eb5\u0eb7\u0003\u0150"+
		"\u00a8\u0000\u0eb6\u0eb5\u0001\u0000\u0000\u0000\u0eb6\u0eb7\u0001\u0000"+
		"\u0000\u0000\u0eb7\u0ec6\u0001\u0000\u0000\u0000\u0eb8\u0eb9\u0005T\u0000"+
		"\u0000\u0eb9\u0eba\u0005\u0089\u0000\u0000\u0eba\u0ebb\u0005\u011e\u0000"+
		"\u0000\u0ebb\u0ebc\u0005\u0102\u0000\u0000\u0ebc\u0ebd\u0005s\u0000\u0000"+
		"\u0ebd\u0ebe\u0005\u01ab\u0000\u0000\u0ebe\u0ebf\u0005d\u0000\u0000\u0ebf"+
		"\u0ec0\u0003\u0174\u00ba\u0000\u0ec0\u0ec1\u0005\u016a\u0000\u0000\u0ec1"+
		"\u0ec3\u0003\u056a\u02b5\u0000\u0ec2\u0ec4\u0003\u0150\u00a8\u0000\u0ec3"+
		"\u0ec2\u0001\u0000\u0000\u0000\u0ec3\u0ec4\u0001\u0000\u0000\u0000\u0ec4"+
		"\u0ec6\u0001\u0000\u0000\u0000\u0ec5\u0eae\u0001\u0000\u0000\u0000\u0ec5"+
		"\u0eb8\u0001\u0000\u0000\u0000\u0ec6\u0173\u0001\u0000\u0000\u0000\u0ec7"+
		"\u0eca\u0003\u0586\u02c3\u0000\u0ec8\u0eca\u0005\u0089\u0000\u0000\u0ec9"+
		"\u0ec7\u0001\u0000\u0000\u0000\u0ec9\u0ec8\u0001\u0000\u0000\u0000\u0eca"+
		"\u0175\u0001\u0000\u0000\u0000\u0ecb\u0ecc\u0005\u00e5\u0000\u0000\u0ecc"+
		"\u0ecd\u0005\u0089\u0000\u0000\u0ecd\u0ece\u0005\u011e\u0000\u0000\u0ece"+
		"\u0ecf\u0005d\u0000\u0000\u0ecf\u0ed0\u0003\u0174\u00ba\u0000\u0ed0\u0ed1"+
		"\u0005\u016a\u0000\u0000\u0ed1\u0ed2\u0003\u056a\u02b5\u0000\u0ed2\u0ede"+
		"\u0001\u0000\u0000\u0000\u0ed3\u0ed4\u0005\u00e5\u0000\u0000\u0ed4\u0ed5"+
		"\u0005\u0089\u0000\u0000\u0ed5\u0ed6\u0005\u011e\u0000\u0000\u0ed6\u0ed7"+
		"\u0005\u0102\u0000\u0000\u0ed7\u0ed8\u0005\u01ab\u0000\u0000\u0ed8\u0ed9"+
		"\u0005d\u0000\u0000\u0ed9\u0eda\u0003\u0174\u00ba\u0000\u0eda\u0edb\u0005"+
		"\u016a\u0000\u0000\u0edb\u0edc\u0003\u056a\u02b5\u0000\u0edc\u0ede\u0001"+
		"\u0000\u0000\u0000\u0edd\u0ecb\u0001\u0000\u0000\u0000\u0edd\u0ed3\u0001"+
		"\u0000\u0000\u0000\u0ede\u0177\u0001\u0000\u0000\u0000\u0edf\u0ee0\u0005"+
		"\u00b0\u0000\u0000\u0ee0\u0ee1\u0005\u0089\u0000\u0000\u0ee1\u0ee2\u0005"+
		"\u011e\u0000\u0000\u0ee2\u0ee3\u0005d\u0000\u0000\u0ee3\u0ee4\u0003\u0174"+
		"\u00ba\u0000\u0ee4\u0ee5\u0005\u016a\u0000\u0000\u0ee5\u0ee6\u0003\u056a"+
		"\u02b5\u0000\u0ee6\u0ee7\u0003\u0154\u00aa\u0000\u0ee7\u0179\u0001\u0000"+
		"\u0000\u0000\u0ee8\u0ee9\u0005T\u0000\u0000\u0ee9\u0eea\u0005\u01e3\u0000"+
		"\u0000\u0eea\u0eeb\u0003\u056a\u02b5\u0000\u0eeb\u0eec\u0005v\u0000\u0000"+
		"\u0eec\u0eee\u0003\u0566\u02b3\u0000\u0eed\u0eef\u0003\u0186\u00c3\u0000"+
		"\u0eee\u0eed\u0001\u0000\u0000\u0000\u0eee\u0eef\u0001\u0000\u0000\u0000"+
		"\u0eef\u0ef1\u0001\u0000\u0000\u0000\u0ef0\u0ef2\u0003\u0188\u00c4\u0000"+
		"\u0ef1\u0ef0\u0001\u0000\u0000\u0000\u0ef1\u0ef2\u0001\u0000\u0000\u0000"+
		"\u0ef2\u0ef4\u0001\u0000\u0000\u0000\u0ef3\u0ef5\u0003\u0182\u00c1\u0000"+
		"\u0ef4\u0ef3\u0001\u0000\u0000\u0000\u0ef4\u0ef5\u0001\u0000\u0000\u0000"+
		"\u0ef5\u0ef7\u0001\u0000\u0000\u0000\u0ef6\u0ef8\u0003\u017e\u00bf\u0000"+
		"\u0ef7\u0ef6\u0001\u0000\u0000\u0000\u0ef7\u0ef8\u0001\u0000\u0000\u0000"+
		"\u0ef8\u0efa\u0001\u0000\u0000\u0000\u0ef9\u0efb\u0003\u0180\u00c0\u0000"+
		"\u0efa\u0ef9\u0001\u0000\u0000\u0000\u0efa\u0efb\u0001\u0000\u0000\u0000"+
		"\u0efb\u017b\u0001\u0000\u0000\u0000\u0efc\u0efd\u0005\u00b0\u0000\u0000"+
		"\u0efd\u0efe\u0005\u01e3\u0000\u0000\u0efe\u0eff\u0003\u056a\u02b5\u0000"+
		"\u0eff\u0f00\u0005v\u0000\u0000\u0f00\u0f02\u0003\u0566\u02b3\u0000\u0f01"+
		"\u0f03\u0003\u0184\u00c2\u0000\u0f02\u0f01\u0001\u0000\u0000\u0000\u0f02"+
		"\u0f03\u0001\u0000\u0000\u0000\u0f03\u0f05\u0001\u0000\u0000\u0000\u0f04"+
		"\u0f06\u0003\u017e\u00bf\u0000\u0f05\u0f04\u0001\u0000\u0000\u0000\u0f05"+
		"\u0f06\u0001\u0000\u0000\u0000\u0f06\u0f08\u0001\u0000\u0000\u0000\u0f07"+
		"\u0f09\u0003\u0180\u00c0\u0000\u0f08\u0f07\u0001\u0000\u0000\u0000\u0f08"+
		"\u0f09\u0001\u0000\u0000\u0000\u0f09\u017d\u0001\u0000\u0000\u0000\u0f0a"+
		"\u0f0b\u0005\u008a\u0000\u0000\u0f0b\u0f0c\u0005\u0002\u0000\u0000\u0f0c"+
		"\u0f0d\u0003\u048a\u0245\u0000\u0f0d\u0f0e\u0005\u0003\u0000\u0000\u0f0e"+
		"\u017f\u0001\u0000\u0000\u0000\u0f0f\u0f10\u0005\u008f\u0000\u0000\u0f10"+
		"\u0f11\u0005P\u0000\u0000\u0f11\u0f12\u0005\u0002\u0000\u0000\u0f12\u0f13"+
		"\u0003\u048a\u0245\u0000\u0f13\u0f14\u0005\u0003\u0000\u0000\u0f14\u0181"+
		"\u0001\u0000\u0000\u0000\u0f15\u0f16\u0005\u0084\u0000\u0000\u0f16\u0f17"+
		"\u0003\u0588\u02c4\u0000\u0f17\u0183\u0001\u0000\u0000\u0000\u0f18\u0f19"+
		"\u0005\u0084\u0000\u0000\u0f19\u0f1a\u0003\u0588\u02c4\u0000\u0f1a\u0185"+
		"\u0001\u0000\u0000\u0000\u0f1b\u0f1c\u0005J\u0000\u0000\u0f1c\u0f1d\u0003"+
		"\u05a0\u02d0\u0000\u0f1d\u0187\u0001\u0000\u0000\u0000\u0f1e\u0f1f\u0005"+
		"d\u0000\u0000\u0f1f\u0f20\u0003\u018a\u00c5\u0000\u0f20\u0189\u0001\u0000"+
		"\u0000\u0000\u0f21\u0f22\u0007\u0012\u0000\u0000\u0f22\u018b\u0001\u0000"+
		"\u0000\u0000\u0f23\u0f24\u0005T\u0000\u0000\u0f24\u0f25\u0005\u00a9\u0000"+
		"\u0000\u0f25\u0f26\u0005\u01e4\u0000\u0000\u0f26\u0f27\u0003\u056a\u02b5"+
		"\u0000\u0f27\u0f28\u0005\u0187\u0000\u0000\u0f28\u0f29\u0003\u018e\u00c7"+
		"\u0000\u0f29\u0f2a\u0005\u00fd\u0000\u0000\u0f2a\u0f2b\u0003\u0128\u0094"+
		"\u0000\u0f2b\u018d\u0001\u0000\u0000\u0000\u0f2c\u0f2d\u0007\u0013\u0000"+
		"\u0000\u0f2d\u018f\u0001\u0000\u0000\u0000\u0f2e\u0f2f\u0005T\u0000\u0000"+
		"\u0f2f\u0f30\u0005\u0184\u0000\u0000\u0f30\u0f31\u0003\u056a\u02b5\u0000"+
		"\u0f31\u0f32\u0003\u0192\u00c9\u0000\u0f32\u0f33\u0003\u0194\u00ca\u0000"+
		"\u0f33\u0f34\u0005v\u0000\u0000\u0f34\u0f36\u0003\u0566\u02b3\u0000\u0f35"+
		"\u0f37\u0003\u0198\u00cc\u0000\u0f36\u0f35\u0001\u0000\u0000\u0000\u0f36"+
		"\u0f37\u0001\u0000\u0000\u0000\u0f37\u0f39\u0001\u0000\u0000\u0000\u0f38"+
		"\u0f3a\u0003\u01a4\u00d2\u0000\u0f39\u0f38\u0001\u0000\u0000\u0000\u0f39"+
		"\u0f3a\u0001\u0000\u0000\u0000\u0f3a\u0f3c\u0001\u0000\u0000\u0000\u0f3b"+
		"\u0f3d\u0003\u01aa\u00d5\u0000\u0f3c\u0f3b\u0001\u0000\u0000\u0000\u0f3c"+
		"\u0f3d\u0001\u0000\u0000\u0000\u0f3d\u0f3e\u0001\u0000\u0000\u0000\u0f3e"+
		"\u0f3f\u0005\u00f0\u0000\u0000\u0f3f\u0f40\u0003\u01ac\u00d6\u0000\u0f40"+
		"\u0f41\u0003\u0570\u02b8\u0000\u0f41\u0f42\u0005\u0002\u0000\u0000\u0f42"+
		"\u0f43\u0003\u01ae\u00d7\u0000\u0f43\u0f44\u0005\u0003\u0000\u0000\u0f44"+
		"\u0f5f\u0001\u0000\u0000\u0000\u0f45\u0f46\u0005T\u0000\u0000\u0f46\u0f47"+
		"\u0005S\u0000\u0000\u0f47\u0f48\u0005\u0184\u0000\u0000\u0f48\u0f49\u0003"+
		"\u056a\u02b5\u0000\u0f49\u0f4a\u0005\u00ad\u0000\u0000\u0f4a\u0f4b\u0003"+
		"\u0194\u00ca\u0000\u0f4b\u0f4c\u0005v\u0000\u0000\u0f4c\u0f4e\u0003\u0566"+
		"\u02b3\u0000\u0f4d\u0f4f\u0003\u01b2\u00d9\u0000\u0f4e\u0f4d\u0001\u0000"+
		"\u0000\u0000\u0f4e\u0f4f\u0001\u0000\u0000\u0000\u0f4f\u0f50\u0001\u0000"+
		"\u0000\u0000\u0f50\u0f51\u0003\u01b4\u00da\u0000\u0f51\u0f52\u0005d\u0000"+
		"\u0000\u0f52\u0f53\u0005\u00e6\u0000\u0000\u0f53\u0f55\u0005\u01bd\u0000"+
		"\u0000\u0f54\u0f56\u0003\u01aa\u00d5\u0000\u0f55\u0f54\u0001\u0000\u0000"+
		"\u0000\u0f55\u0f56\u0001\u0000\u0000\u0000\u0f56\u0f57\u0001\u0000\u0000"+
		"\u0000\u0f57\u0f58\u0005\u00f0\u0000\u0000\u0f58\u0f59\u0003\u01ac\u00d6"+
		"\u0000\u0f59\u0f5a\u0003\u0570\u02b8\u0000\u0f5a\u0f5b\u0005\u0002\u0000"+
		"\u0000\u0f5b\u0f5c\u0003\u01ae\u00d7\u0000\u0f5c\u0f5d\u0005\u0003\u0000"+
		"\u0000\u0f5d\u0f5f\u0001\u0000\u0000\u0000\u0f5e\u0f2e\u0001\u0000\u0000"+
		"\u0000\u0f5e\u0f45\u0001\u0000\u0000\u0000\u0f5f\u0191\u0001\u0000\u0000"+
		"\u0000\u0f60\u0f65\u0005\u00b7\u0000\u0000\u0f61\u0f65\u0005\u00ad\u0000"+
		"\u0000\u0f62\u0f63\u0005\u010f\u0000\u0000\u0f63\u0f65\u0005\u0132\u0000"+
		"\u0000\u0f64\u0f60\u0001\u0000\u0000\u0000\u0f64\u0f61\u0001\u0000\u0000"+
		"\u0000\u0f64\u0f62\u0001\u0000\u0000\u0000\u0f65\u0193\u0001\u0000\u0000"+
		"\u0000\u0f66\u0f6b\u0003\u0196\u00cb\u0000\u0f67\u0f68\u0005x\u0000\u0000"+
		"\u0f68\u0f6a\u0003\u0196\u00cb\u0000\u0f69\u0f67\u0001\u0000\u0000\u0000"+
		"\u0f6a\u0f6d\u0001\u0000\u0000\u0000\u0f6b\u0f69\u0001\u0000\u0000\u0000"+
		"\u0f6b\u0f6c\u0001\u0000\u0000\u0000\u0f6c\u0195\u0001\u0000\u0000\u0000"+
		"\u0f6d\u0f6b\u0001\u0000\u0000\u0000\u0f6e\u0f76\u0005\u010e\u0000\u0000"+
		"\u0f6f\u0f76\u0005\u00dc\u0000\u0000\u0f70\u0f76\u0005\u0190\u0000\u0000"+
		"\u0f71\u0f72\u0005\u0190\u0000\u0000\u0f72\u0f73\u0005\u0132\u0000\u0000"+
		"\u0f73\u0f76\u0003\u00d4j\u0000\u0f74\u0f76\u0005\u0185\u0000\u0000\u0f75"+
		"\u0f6e\u0001\u0000\u0000\u0000\u0f75\u0f6f\u0001\u0000\u0000\u0000\u0f75"+
		"\u0f70\u0001\u0000\u0000\u0000\u0f75\u0f71\u0001\u0000\u0000\u0000\u0f75"+
		"\u0f74\u0001\u0000\u0000\u0000\u0f76\u0197\u0001\u0000\u0000\u0000\u0f77"+
		"\u0f78\u0005\u01e5\u0000\u0000\u0f78\u0f79\u0003\u019a\u00cd\u0000\u0f79"+
		"\u0199\u0001\u0000\u0000\u0000\u0f7a\u0f7c\u0003\u019c\u00ce\u0000\u0f7b"+
		"\u0f7a\u0001\u0000\u0000\u0000\u0f7c\u0f7d\u0001\u0000\u0000\u0000\u0f7d"+
		"\u0f7b\u0001\u0000\u0000\u0000\u0f7d\u0f7e\u0001\u0000\u0000\u0000\u0f7e"+
		"\u019b\u0001\u0000\u0000\u0000\u0f7f\u0f80\u0003\u019e\u00cf\u0000\u0f80"+
		"\u0f82\u0003\u01a0\u00d0\u0000\u0f81\u0f83\u0003\u033e\u019f\u0000\u0f82"+
		"\u0f81\u0001\u0000\u0000\u0000\u0f82\u0f83\u0001\u0000\u0000\u0000\u0f83"+
		"\u0f84\u0001\u0000\u0000\u0000\u0f84\u0f85\u0003\u01a2\u00d1\u0000\u0f85"+
		"\u019d\u0001\u0000\u0000\u0000\u0f86\u0f87\u0007\u0014\u0000\u0000\u0f87"+
		"\u019f\u0001\u0000\u0000\u0000\u0f88\u0f89\u0007\u0015\u0000\u0000\u0f89"+
		"\u01a1\u0001\u0000\u0000\u0000\u0f8a\u0f8b\u0003\u058a\u02c5\u0000\u0f8b"+
		"\u01a3\u0001\u0000\u0000\u0000\u0f8c\u0f8e\u0005d\u0000\u0000\u0f8d\u0f8f"+
		"\u0003\u01a6\u00d3\u0000\u0f8e\u0f8d\u0001\u0000\u0000\u0000\u0f8e\u0f8f"+
		"\u0001\u0000\u0000\u0000\u0f8f\u0f90\u0001\u0000\u0000\u0000\u0f90\u0f91"+
		"\u0003\u01a8\u00d4\u0000\u0f91\u01a5\u0001\u0000\u0000\u0000\u0f92\u0f93"+
		"\u0005\u00e6\u0000\u0000\u0f93\u01a7\u0001\u0000\u0000\u0000\u0f94\u0f95"+
		"\u0007\u0016\u0000\u0000\u0f95\u01a9\u0001\u0000\u0000\u0000\u0f96\u0f97"+
		"\u0005\u008c\u0000\u0000\u0f97\u0f98\u0005\u0002\u0000\u0000\u0f98\u0f99"+
		"\u0003\u048a\u0245\u0000\u0f99\u0f9a\u0005\u0003\u0000\u0000\u0f9a\u01ab"+
		"\u0001\u0000\u0000\u0000\u0f9b\u0f9c\u0007\u0017\u0000\u0000\u0f9c\u01ad"+
		"\u0001\u0000\u0000\u0000\u0f9d\u0fa0\u0003\u01b0\u00d8\u0000\u0f9e\u0fa0"+
		"\u0001\u0000\u0000\u0000\u0f9f\u0f9d\u0001\u0000\u0000\u0000\u0f9f\u0f9e"+
		"\u0001\u0000\u0000\u0000\u0fa0\u0fa5\u0001\u0000\u0000\u0000\u0fa1\u0fa2"+
		"\u0005\u0006\u0000\u0000\u0fa2\u0fa4\u0003\u01b0\u00d8\u0000\u0fa3\u0fa1"+
		"\u0001\u0000\u0000\u0000\u0fa4\u0fa7\u0001\u0000\u0000\u0000\u0fa5\u0fa3"+
		"\u0001\u0000\u0000\u0000\u0fa5\u0fa6\u0001\u0000\u0000\u0000\u0fa6\u01af"+
		"\u0001\u0000\u0000\u0000\u0fa7\u0fa5\u0001\u0000\u0000\u0000\u0fa8\u0fad"+
		"\u0003\u057a\u02bd\u0000\u0fa9\u0fad\u0003\u0578\u02bc\u0000\u0faa\u0fad"+
		"\u0003\u057c\u02be\u0000\u0fab\u0fad\u0003\u0590\u02c8\u0000\u0fac\u0fa8"+
		"\u0001\u0000\u0000\u0000\u0fac\u0fa9\u0001\u0000\u0000\u0000\u0fac\u0faa"+
		"\u0001\u0000\u0000\u0000\u0fac\u0fab\u0001\u0000\u0000\u0000\u0fad\u01b1"+
		"\u0001\u0000\u0000\u0000\u0fae\u0faf\u0005f\u0000\u0000\u0faf\u0fb0\u0003"+
		"\u0566\u02b3\u0000\u0fb0\u01b3\u0001\u0000\u0000\u0000\u0fb1\u0fb3\u0003"+
		"\u01b6\u00db\u0000\u0fb2\u0fb1\u0001\u0000\u0000\u0000\u0fb3\u0fb6\u0001"+
		"\u0000\u0000\u0000\u0fb4\u0fb2\u0001\u0000\u0000\u0000\u0fb4\u0fb5\u0001"+
		"\u0000\u0000\u0000\u0fb5\u01b5\u0001\u0000\u0000\u0000\u0fb6\u0fb4\u0001"+
		"\u0000\u0000\u0000\u0fb7\u0fb8\u0005s\u0000\u0000\u0fb8\u0fc3\u0005\\"+
		"\u0000\u0000\u0fb9\u0fc3\u0005\\\u0000\u0000\u0fba\u0fbb\u0005k\u0000"+
		"\u0000\u0fbb\u0fc3\u0005\u0103\u0000\u0000\u0fbc\u0fbd\u0005k\u0000\u0000"+
		"\u0fbd\u0fc3\u0005\u00da\u0000\u0000\u0fbe\u0fbf\u0005s\u0000\u0000\u0fbf"+
		"\u0fc3\u0005\u0192\u0000\u0000\u0fc0\u0fc1\u0005\u012c\u0000\u0000\u0fc1"+
		"\u0fc3\u0005\u010a\u0000\u0000\u0fc2\u0fb7\u0001\u0000\u0000\u0000\u0fc2"+
		"\u0fb9\u0001\u0000\u0000\u0000\u0fc2\u0fba\u0001\u0000\u0000\u0000\u0fc2"+
		"\u0fbc\u0001\u0000\u0000\u0000\u0fc2\u0fbe\u0001\u0000\u0000\u0000\u0fc2"+
		"\u0fc0\u0001\u0000\u0000\u0000\u0fc3\u01b7\u0001\u0000\u0000\u0000\u0fc4"+
		"\u0fc5\u0005T\u0000\u0000\u0fc5\u0fc6\u0005\u00ec\u0000\u0000\u0fc6\u0fc7"+
		"\u0005\u0184\u0000\u0000\u0fc7\u0fc8\u0003\u056a\u02b5\u0000\u0fc8\u0fc9"+
		"\u0005v\u0000\u0000\u0fc9\u0fca\u0003\u0590\u02c8\u0000\u0fca\u0fcb\u0005"+
		"\u00f0\u0000\u0000\u0fcb\u0fcc\u0003\u01ac\u00d6\u0000\u0fcc\u0fcd\u0003"+
		"\u0570\u02b8\u0000\u0fcd\u0fce\u0005\u0002\u0000\u0000\u0fce\u0fcf\u0005"+
		"\u0003\u0000\u0000\u0fcf\u0fdf\u0001\u0000\u0000\u0000\u0fd0\u0fd1\u0005"+
		"T\u0000\u0000\u0fd1\u0fd2\u0005\u00ec\u0000\u0000\u0fd2\u0fd3\u0005\u0184"+
		"\u0000\u0000\u0fd3\u0fd4\u0003\u056a\u02b5\u0000\u0fd4\u0fd5\u0005v\u0000"+
		"\u0000\u0fd5\u0fd6\u0003\u0590\u02c8\u0000\u0fd6\u0fd7\u0005\u008c\u0000"+
		"\u0000\u0fd7\u0fd8\u0003\u01ba\u00dd\u0000\u0fd8\u0fd9\u0005\u00f0\u0000"+
		"\u0000\u0fd9\u0fda\u0003\u01ac\u00d6\u0000\u0fda\u0fdb\u0003\u0570\u02b8"+
		"\u0000\u0fdb\u0fdc\u0005\u0002\u0000\u0000\u0fdc\u0fdd\u0005\u0003\u0000"+
		"\u0000\u0fdd\u0fdf\u0001\u0000\u0000\u0000\u0fde\u0fc4\u0001\u0000\u0000"+
		"\u0000\u0fde\u0fd0\u0001\u0000\u0000\u0000\u0fdf\u01b9\u0001\u0000\u0000"+
		"\u0000\u0fe0\u0fe5\u0003\u01bc\u00de\u0000\u0fe1\u0fe2\u0005G\u0000\u0000"+
		"\u0fe2\u0fe4\u0003\u01bc\u00de\u0000\u0fe3\u0fe1\u0001\u0000\u0000\u0000"+
		"\u0fe4\u0fe7\u0001\u0000\u0000\u0000\u0fe5\u0fe3\u0001\u0000\u0000\u0000"+
		"\u0fe5\u0fe6\u0001\u0000\u0000\u0000\u0fe6\u01bb\u0001\u0000\u0000\u0000"+
		"\u0fe7\u0fe5\u0001\u0000\u0000\u0000\u0fe8\u0fe9\u0003\u058a\u02c5\u0000"+
		"\u0fe9\u0fea\u0005j\u0000\u0000\u0fea\u0feb\u0005\u0002\u0000\u0000\u0feb"+
		"\u0fec\u0003\u01be\u00df\u0000\u0fec\u0fed\u0005\u0003\u0000\u0000\u0fed"+
		"\u01bd\u0001\u0000\u0000\u0000\u0fee\u0ff3\u0003\u057c\u02be\u0000\u0fef"+
		"\u0ff0\u0005\u0006\u0000\u0000\u0ff0\u0ff2\u0003\u057c\u02be\u0000\u0ff1"+
		"\u0fef\u0001\u0000\u0000\u0000\u0ff2\u0ff5\u0001\u0000\u0000\u0000\u0ff3"+
		"\u0ff1\u0001\u0000\u0000\u0000\u0ff3\u0ff4\u0001\u0000\u0000\u0000\u0ff4"+
		"\u01bf\u0001\u0000\u0000\u0000\u0ff5\u0ff3\u0001\u0000\u0000\u0000\u0ff6"+
		"\u0ff7\u0005\u00b0\u0000\u0000\u0ff7\u0ff8\u0005\u00ec\u0000\u0000\u0ff8"+
		"\u0ff9\u0005\u0184\u0000\u0000\u0ff9\u0ffa\u0003\u056a\u02b5\u0000\u0ffa"+
		"\u0ffb\u0003\u01c2\u00e1\u0000\u0ffb\u01c1\u0001\u0000\u0000\u0000\u0ffc"+
		"\u1003\u0005\u00e7\u0000\u0000\u0ffd\u0ffe\u0005\u00e7\u0000\u0000\u0ffe"+
		"\u1003\u0005\u0157\u0000\u0000\u0fff\u1000\u0005\u00e7\u0000\u0000\u1000"+
		"\u1003\u0005\u00b1\u0000\u0000\u1001\u1003\u0005\u00e0\u0000\u0000\u1002"+
		"\u0ffc\u0001\u0000\u0000\u0000\u1002\u0ffd\u0001\u0000\u0000\u0000\u1002"+
		"\u0fff\u0001\u0000\u0000\u0000\u1002\u1001\u0001\u0000\u0000\u0000\u1003"+
		"\u01c3\u0001\u0000\u0000\u0000\u1004\u1005\u0005T\u0000\u0000\u1005\u1006"+
		"\u0005\u00b2\u0000\u0000\u1006\u1007\u0003\u0208\u0104\u0000\u1007\u1008"+
		"\u0005P\u0000\u0000\u1008\u1009\u0005\u0002\u0000\u0000\u1009\u100a\u0003"+
		"\u048a\u0245\u0000\u100a\u100b\u0005\u0003\u0000\u0000\u100b\u100c\u0003"+
		"\u01b4\u00da\u0000\u100c\u01c5\u0001\u0000\u0000\u0000\u100d\u100f\u0005"+
		"T\u0000\u0000\u100e\u1010\u0003\u0268\u0134\u0000\u100f\u100e\u0001\u0000"+
		"\u0000\u0000\u100f\u1010\u0001\u0000\u0000\u0000\u1010\u1011\u0001\u0000"+
		"\u0000\u0000\u1011\u1012\u0005\u00ae\u0000\u0000\u1012\u1013\u0003\u0570"+
		"\u02b8\u0000\u1013\u1014\u0003\u0284\u0142\u0000\u1014\u1015\u0003\u01c8"+
		"\u00e4\u0000\u1015\u1080\u0001\u0000\u0000\u0000\u1016\u1018\u0005T\u0000"+
		"\u0000\u1017\u1019\u0003\u0268\u0134\u0000\u1018\u1017\u0001\u0000\u0000"+
		"\u0000\u1018\u1019\u0001\u0000\u0000\u0000\u1019\u101a\u0001\u0000\u0000"+
		"\u0000\u101a\u101b\u0005\u00ae\u0000\u0000\u101b\u101c\u0003\u0570\u02b8"+
		"\u0000\u101c\u101d\u0003\u01d0\u00e8\u0000\u101d\u1080\u0001\u0000\u0000"+
		"\u0000\u101e\u101f\u0005T\u0000\u0000\u101f\u1020\u0005\u0135\u0000\u0000"+
		"\u1020\u1021\u0003\u02aa\u0155\u0000\u1021\u1022\u0003\u01c8\u00e4\u0000"+
		"\u1022\u1080\u0001\u0000\u0000\u0000\u1023\u1024\u0005T\u0000\u0000\u1024"+
		"\u1025\u0005\u0187\u0000\u0000\u1025\u1026\u0003\u0208\u0104\u0000\u1026"+
		"\u1027\u0003\u01c8\u00e4\u0000\u1027\u1080\u0001\u0000\u0000\u0000\u1028"+
		"\u1029\u0005T\u0000\u0000\u1029\u102a\u0005\u0187\u0000\u0000\u102a\u1080"+
		"\u0003\u0208\u0104\u0000\u102b\u102c\u0005T\u0000\u0000\u102c\u102d\u0005"+
		"\u0187\u0000\u0000\u102d\u102e\u0003\u0208\u0104\u0000\u102e\u102f\u0005"+
		"J\u0000\u0000\u102f\u1031\u0005\u0002\u0000\u0000\u1030\u1032\u0003\u0448"+
		"\u0224\u0000\u1031\u1030\u0001\u0000\u0000\u0000\u1031\u1032\u0001\u0000"+
		"\u0000\u0000\u1032\u1033\u0001\u0000\u0000\u0000\u1033\u1034\u0005\u0003"+
		"\u0000\u0000\u1034\u1080\u0001\u0000\u0000\u0000\u1035\u1036\u0005T\u0000"+
		"\u0000\u1036\u1037\u0005\u0187\u0000\u0000\u1037\u1038\u0003\u0208\u0104"+
		"\u0000\u1038\u1039\u0005J\u0000\u0000\u1039\u103a\u0005\u00ea\u0000\u0000"+
		"\u103a\u103c\u0005\u0002\u0000\u0000\u103b\u103d\u0003\u01d6\u00eb\u0000"+
		"\u103c\u103b\u0001\u0000\u0000\u0000\u103c\u103d\u0001\u0000\u0000\u0000"+
		"\u103d\u103e\u0001\u0000\u0000\u0000\u103e\u103f\u0005\u0003\u0000\u0000"+
		"\u103f\u1080\u0001\u0000\u0000\u0000\u1040\u1041\u0005T\u0000\u0000\u1041"+
		"\u1042\u0005\u0187\u0000\u0000\u1042\u1043\u0003\u0208\u0104\u0000\u1043"+
		"\u1044\u0005J\u0000\u0000\u1044\u1045\u0005\u014a\u0000\u0000\u1045\u1046"+
		"\u0003\u01c8\u00e4\u0000\u1046\u1080\u0001\u0000\u0000\u0000\u1047\u1048"+
		"\u0005T\u0000\u0000\u1048\u1049\u0005\u0182\u0000\u0000\u1049\u104a\u0005"+
		"\u0164\u0000\u0000\u104a\u104b\u0005\u013a\u0000\u0000\u104b\u104c\u0003"+
		"\u0208\u0104\u0000\u104c\u104d\u0003\u01c8\u00e4\u0000\u104d\u1080\u0001"+
		"\u0000\u0000\u0000\u104e\u104f\u0005T\u0000\u0000\u104f\u1050\u0005\u0182"+
		"\u0000\u0000\u1050\u1051\u0005\u0164\u0000\u0000\u1051\u1052\u0005\u00df"+
		"\u0000\u0000\u1052\u1053\u0003\u0208\u0104\u0000\u1053\u1054\u0003\u01c8"+
		"\u00e4\u0000\u1054\u1080\u0001\u0000\u0000\u0000\u1055\u1056\u0005T\u0000"+
		"\u0000\u1056\u1057\u0005\u0182\u0000\u0000\u1057\u1058\u0005\u0164\u0000"+
		"\u0000\u1058\u1059\u0005\u0180\u0000\u0000\u1059\u105a\u0003\u0208\u0104"+
		"\u0000\u105a\u105b\u0003\u01c8\u00e4\u0000\u105b\u1080\u0001\u0000\u0000"+
		"\u0000\u105c\u105d\u0005T\u0000\u0000\u105d\u105e\u0005\u0182\u0000\u0000"+
		"\u105e\u105f\u0005\u0164\u0000\u0000\u105f\u1060\u0005\u00c9\u0000\u0000"+
		"\u1060\u1061\u0003\u0208\u0104\u0000\u1061\u1062\u0003\u01c8\u00e4\u0000"+
		"\u1062\u1080\u0001\u0000\u0000\u0000\u1063\u1064\u0005T\u0000\u0000\u1064"+
		"\u1065\u0005\u0092\u0000\u0000\u1065\u1066\u0003\u0208\u0104\u0000\u1066"+
		"\u1067\u0003\u01c8\u00e4\u0000\u1067\u1080\u0001\u0000\u0000\u0000\u1068"+
		"\u1069\u0005T\u0000\u0000\u1069\u106a\u0005\u0092\u0000\u0000\u106a\u106b"+
		"\u0005\u0102\u0000\u0000\u106b\u106c\u0005s\u0000\u0000\u106c\u106d\u0005"+
		"\u01ab\u0000\u0000\u106d\u106e\u0003\u0208\u0104\u0000\u106e\u106f\u0003"+
		"\u01c8\u00e4\u0000\u106f\u1080\u0001\u0000\u0000\u0000\u1070\u1071\u0005"+
		"T\u0000\u0000\u1071\u1072\u0005\u0092\u0000\u0000\u1072\u1073\u0003\u0208"+
		"\u0104\u0000\u1073\u1074\u0005f\u0000\u0000\u1074\u1075\u0003\u0208\u0104"+
		"\u0000\u1075\u1080\u0001\u0000\u0000\u0000\u1076\u1077\u0005T\u0000\u0000"+
		"\u1077\u1078\u0005\u0092\u0000\u0000\u1078\u1079\u0005\u0102\u0000\u0000"+
		"\u1079\u107a\u0005s\u0000\u0000\u107a\u107b\u0005\u01ab\u0000\u0000\u107b"+
		"\u107c\u0003\u0208\u0104\u0000\u107c\u107d\u0005f\u0000\u0000\u107d\u107e"+
		"\u0003\u0208\u0104\u0000\u107e\u1080\u0001\u0000\u0000\u0000\u107f\u100d"+
		"\u0001\u0000\u0000\u0000\u107f\u1016\u0001\u0000\u0000\u0000\u107f\u101e"+
		"\u0001\u0000\u0000\u0000\u107f\u1023\u0001\u0000\u0000\u0000\u107f\u1028"+
		"\u0001\u0000\u0000\u0000\u107f\u102b\u0001\u0000\u0000\u0000\u107f\u1035"+
		"\u0001\u0000\u0000\u0000\u107f\u1040\u0001\u0000\u0000\u0000\u107f\u1047"+
		"\u0001\u0000\u0000\u0000\u107f\u104e\u0001\u0000\u0000\u0000\u107f\u1055"+
		"\u0001\u0000\u0000\u0000\u107f\u105c\u0001\u0000\u0000\u0000\u107f\u1063"+
		"\u0001\u0000\u0000\u0000\u107f\u1068\u0001\u0000\u0000\u0000\u107f\u1070"+
		"\u0001\u0000\u0000\u0000\u107f\u1076\u0001\u0000\u0000\u0000\u1080\u01c7"+
		"\u0001\u0000\u0000\u0000\u1081\u1082\u0005\u0002\u0000\u0000\u1082\u1083"+
		"\u0003\u01ca\u00e5\u0000\u1083\u1084\u0005\u0003\u0000\u0000\u1084\u01c9"+
		"\u0001\u0000\u0000\u0000\u1085\u108a\u0003\u01cc\u00e6\u0000\u1086\u1087"+
		"\u0005\u0006\u0000\u0000\u1087\u1089\u0003\u01cc\u00e6\u0000\u1088\u1086"+
		"\u0001\u0000\u0000\u0000\u1089\u108c\u0001\u0000\u0000\u0000\u108a\u1088"+
		"\u0001\u0000\u0000\u0000\u108a\u108b\u0001\u0000\u0000\u0000\u108b\u01cb"+
		"\u0001\u0000\u0000\u0000\u108c\u108a\u0001\u0000\u0000\u0000\u108d\u1090"+
		"\u0003\u0590\u02c8\u0000\u108e\u108f\u0005\n\u0000\u0000\u108f\u1091\u0003"+
		"\u01ce\u00e7\u0000\u1090\u108e\u0001\u0000\u0000\u0000\u1090\u1091\u0001"+
		"\u0000\u0000\u0000\u1091\u01cd\u0001\u0000\u0000\u0000\u1092\u1099\u0003"+
		"\u027e\u013f\u0000\u1093\u1099\u0003\u059a\u02cd\u0000\u1094\u1099\u0003"+
		"\u04fe\u027f\u0000\u1095\u1099\u0003\u0120\u0090\u0000\u1096\u1099\u0003"+
		"\u057c\u02be\u0000\u1097\u1099\u0005\u01b6\u0000\u0000\u1098\u1092\u0001"+
		"\u0000\u0000\u0000\u1098\u1093\u0001\u0000\u0000\u0000\u1098\u1094\u0001"+
		"\u0000\u0000\u0000\u1098\u1095\u0001\u0000\u0000\u0000\u1098\u1096\u0001"+
		"\u0000\u0000\u0000\u1098\u1097\u0001\u0000\u0000\u0000\u1099\u01cf\u0001"+
		"\u0000\u0000\u0000\u109a\u109b\u0005\u0002\u0000\u0000\u109b\u109c\u0003"+
		"\u01d2\u00e9\u0000\u109c\u109d\u0005\u0003\u0000\u0000\u109d\u01d1\u0001"+
		"\u0000\u0000\u0000\u109e\u10a3\u0003\u01d4\u00ea\u0000\u109f\u10a0\u0005"+
		"\u0006\u0000\u0000\u10a0\u10a2\u0003\u01d4\u00ea\u0000\u10a1\u109f\u0001"+
		"\u0000\u0000\u0000\u10a2\u10a5\u0001\u0000\u0000\u0000\u10a3\u10a1\u0001"+
		"\u0000\u0000\u0000\u10a3\u10a4\u0001\u0000\u0000\u0000\u10a4\u01d3\u0001"+
		"\u0000\u0000\u0000\u10a5\u10a3\u0001\u0000\u0000\u0000\u10a6\u10a7\u0003"+
		"\u05a0\u02d0\u0000\u10a7\u10a8\u0005\n\u0000\u0000\u10a8\u10a9\u0003\u01ce"+
		"\u00e7\u0000\u10a9\u01d5\u0001\u0000\u0000\u0000\u10aa\u10ab\u0003\u01d8"+
		"\u00ec\u0000\u10ab\u01d7\u0001\u0000\u0000\u0000\u10ac\u10b1\u0003\u057c"+
		"\u02be\u0000\u10ad\u10ae\u0005\u0006\u0000\u0000\u10ae\u10b0\u0003\u057c"+
		"\u02be\u0000\u10af\u10ad\u0001\u0000\u0000\u0000\u10b0\u10b3\u0001\u0000"+
		"\u0000\u0000\u10b1\u10af\u0001\u0000\u0000\u0000\u10b1\u10b2\u0001\u0000"+
		"\u0000\u0000\u10b2\u01d9\u0001\u0000\u0000\u0000\u10b3\u10b1\u0001\u0000"+
		"\u0000\u0000\u10b4\u10b5\u0005\u00b0\u0000\u0000\u10b5\u10b6\u0005\u0187"+
		"\u0000\u0000\u10b6\u10b7\u0003\u0208\u0104\u0000\u10b7\u10b8\u0005\u00ab"+
		"\u0000\u0000\u10b8\u10ba\u0005\u01e8\u0000\u0000\u10b9\u10bb\u0003\u01dc"+
		"\u00ee\u0000\u10ba\u10b9\u0001\u0000\u0000\u0000\u10ba\u10bb\u0001\u0000"+
		"\u0000\u0000\u10bb\u10bc\u0001\u0000\u0000\u0000\u10bc\u10bd\u0003\u057c"+
		"\u02be\u0000\u10bd\u10e0\u0001\u0000\u0000\u0000\u10be\u10bf\u0005\u00b0"+
		"\u0000\u0000\u10bf\u10c0\u0005\u0187\u0000\u0000\u10c0\u10c1\u0003\u0208"+
		"\u0104\u0000\u10c1\u10c2\u0005\u00ab\u0000\u0000\u10c2\u10c4\u0005\u01e8"+
		"\u0000\u0000\u10c3\u10c5\u0003\u01dc\u00ee\u0000\u10c4\u10c3\u0001\u0000"+
		"\u0000\u0000\u10c4\u10c5\u0001\u0000\u0000\u0000\u10c5\u10c6\u0001\u0000"+
		"\u0000\u0000\u10c6\u10c7\u0003\u057c\u02be\u0000\u10c7\u10c8\u0005\u00b7"+
		"\u0000\u0000\u10c8\u10c9\u0003\u057c\u02be\u0000\u10c9\u10e0\u0001\u0000"+
		"\u0000\u0000\u10ca\u10cb\u0005\u00b0\u0000\u0000\u10cb\u10cc\u0005\u0187"+
		"\u0000\u0000\u10cc\u10cd\u0003\u0208\u0104\u0000\u10cd\u10ce\u0005\u00ab"+
		"\u0000\u0000\u10ce\u10d0\u0005\u01e8\u0000\u0000\u10cf\u10d1\u0003\u01dc"+
		"\u00ee\u0000\u10d0\u10cf\u0001\u0000\u0000\u0000\u10d0\u10d1\u0001\u0000"+
		"\u0000\u0000\u10d1\u10d2\u0001\u0000\u0000\u0000\u10d2\u10d3\u0003\u057c"+
		"\u02be\u0000\u10d3\u10d4\u0005\u00ad\u0000\u0000\u10d4\u10d5\u0003\u057c"+
		"\u02be\u0000\u10d5\u10e0\u0001\u0000\u0000\u0000\u10d6\u10d7\u0005\u00b0"+
		"\u0000\u0000\u10d7\u10d8\u0005\u0187\u0000\u0000\u10d8\u10d9\u0003\u0208"+
		"\u0104\u0000\u10d9\u10da\u0005\u0154\u0000\u0000\u10da\u10db\u0005\u01e8"+
		"\u0000\u0000\u10db\u10dc\u0003\u057c\u02be\u0000\u10dc\u10dd\u0005\u0084"+
		"\u0000\u0000\u10dd\u10de\u0003\u057c\u02be\u0000\u10de\u10e0\u0001\u0000"+
		"\u0000\u0000\u10df\u10b4\u0001\u0000\u0000\u0000\u10df\u10be\u0001\u0000"+
		"\u0000\u0000\u10df\u10ca\u0001\u0000\u0000\u0000\u10df\u10d6\u0001\u0000"+
		"\u0000\u0000\u10e0\u01db\u0001\u0000\u0000\u0000\u10e1\u10e2\u0005\u0102"+
		"\u0000\u0000\u10e2\u10e3\u0005s\u0000\u0000\u10e3\u10e4\u0005\u01ab\u0000"+
		"\u0000\u10e4\u01dd\u0001\u0000\u0000\u0000\u10e5\u10e6\u0005T\u0000\u0000"+
		"\u10e6\u10e7\u0005\u0135\u0000\u0000\u10e7\u10e8\u0005\u00c2\u0000\u0000"+
		"\u10e8\u10ea\u0003\u0208\u0104\u0000\u10e9\u10eb\u0003\u01e4\u00f2\u0000"+
		"\u10ea\u10e9\u0001\u0000\u0000\u0000\u10ea\u10eb\u0001\u0000\u0000\u0000"+
		"\u10eb\u10ec\u0001\u0000\u0000\u0000\u10ec\u10ed\u0005d\u0000\u0000\u10ed"+
		"\u10ee\u0005\u0187\u0000\u0000\u10ee\u10ef\u0003\u045c\u022e\u0000\u10ef"+
		"\u10f0\u0005\u008a\u0000\u0000\u10f0\u10f2\u0003\u056a\u02b5\u0000\u10f1"+
		"\u10f3\u0003\u01e6\u00f3\u0000\u10f2\u10f1\u0001\u0000\u0000\u0000\u10f2"+
		"\u10f3\u0001\u0000\u0000\u0000\u10f3\u10f4\u0001\u0000\u0000\u0000\u10f4"+
		"\u10f5\u0005J\u0000\u0000\u10f5\u10f6\u0003\u01e0\u00f0\u0000\u10f6\u01df"+
		"\u0001\u0000\u0000\u0000\u10f7\u10fc\u0003\u01e2\u00f1\u0000\u10f8\u10f9"+
		"\u0005\u0006\u0000\u0000\u10f9\u10fb\u0003\u01e2\u00f1\u0000\u10fa\u10f8"+
		"\u0001\u0000\u0000\u0000\u10fb\u10fe\u0001\u0000\u0000\u0000\u10fc\u10fa"+
		"\u0001\u0000\u0000\u0000\u10fc\u10fd\u0001\u0000\u0000\u0000\u10fd\u01e1"+
		"\u0001\u0000\u0000\u0000\u10fe\u10fc\u0001\u0000\u0000\u0000\u10ff\u1100"+
		"\u0005\u0135\u0000\u0000\u1100\u1101\u0003\u057a\u02bd\u0000\u1101\u1103"+
		"\u0003\u02aa\u0155\u0000\u1102\u1104\u0003\u01e8\u00f4\u0000\u1103\u1102"+
		"\u0001\u0000\u0000\u0000\u1103\u1104\u0001\u0000\u0000\u0000\u1104\u1106"+
		"\u0001\u0000\u0000\u0000\u1105\u1107\u0003\u01ea\u00f5\u0000\u1106\u1105"+
		"\u0001\u0000\u0000\u0000\u1106\u1107\u0001\u0000\u0000\u0000\u1107\u111f"+
		"\u0001\u0000\u0000\u0000\u1108\u1109\u0005\u0135\u0000\u0000\u1109\u110a"+
		"\u0003\u057a\u02bd\u0000\u110a\u110c\u0003\u02ae\u0157\u0000\u110b\u110d"+
		"\u0003\u01e8\u00f4\u0000\u110c\u110b\u0001\u0000\u0000\u0000\u110c\u110d"+
		"\u0001\u0000\u0000\u0000\u110d\u110f\u0001\u0000\u0000\u0000\u110e\u1110"+
		"\u0003\u01ea\u00f5\u0000\u110f\u110e\u0001\u0000\u0000\u0000\u110f\u1110"+
		"\u0001\u0000\u0000\u0000\u1110\u111f\u0001\u0000\u0000\u0000\u1111\u1112"+
		"\u0005\u00f9\u0000\u0000\u1112\u1113\u0003\u057a\u02bd\u0000\u1113\u1114"+
		"\u0003\u0270\u0138\u0000\u1114\u111f\u0001\u0000\u0000\u0000\u1115\u1116"+
		"\u0005\u00f9\u0000\u0000\u1116\u1117\u0003\u057a\u02bd\u0000\u1117\u1118"+
		"\u0005\u0002\u0000\u0000\u1118\u1119\u0003\u0508\u0284\u0000\u1119\u111a"+
		"\u0005\u0003\u0000\u0000\u111a\u111b\u0003\u0270\u0138\u0000\u111b\u111f"+
		"\u0001\u0000\u0000\u0000\u111c\u111d\u0005\u0178\u0000\u0000\u111d\u111f"+
		"\u0003\u045c\u022e\u0000\u111e\u10ff\u0001\u0000\u0000\u0000\u111e\u1108"+
		"\u0001\u0000\u0000\u0000\u111e\u1111\u0001\u0000\u0000\u0000\u111e\u1115"+
		"\u0001\u0000\u0000\u0000\u111e\u111c\u0001\u0000\u0000\u0000\u111f\u01e3"+
		"\u0001\u0000\u0000\u0000\u1120\u1121\u0005[\u0000\u0000\u1121\u01e5\u0001"+
		"\u0000\u0000\u0000\u1122\u1123\u0005\u00f4\u0000\u0000\u1123\u1124\u0003"+
		"\u0208\u0104\u0000\u1124\u01e7\u0001\u0000\u0000\u0000\u1125\u1126\u0005"+
		"d\u0000\u0000\u1126\u112c\u0005\u0164\u0000\u0000\u1127\u1128\u0005d\u0000"+
		"\u0000\u1128\u1129\u0005y\u0000\u0000\u1129\u112a\u0005\u00b9\u0000\u0000"+
		"\u112a\u112c\u0003\u0208\u0104\u0000\u112b\u1125\u0001\u0000\u0000\u0000"+
		"\u112b\u1127\u0001\u0000\u0000\u0000\u112c\u01e9\u0001\u0000\u0000\u0000"+
		"\u112d\u112e\u0005\u014d\u0000\u0000\u112e\u01eb\u0001\u0000\u0000\u0000"+
		"\u112f\u1130\u0005T\u0000\u0000\u1130\u1131\u0005\u0135\u0000\u0000\u1131"+
		"\u1132\u0005\u00f4\u0000\u0000\u1132\u1133\u0003\u0208\u0104\u0000\u1133"+
		"\u1134\u0005\u008a\u0000\u0000\u1134\u1135\u0003\u056a\u02b5\u0000\u1135"+
		"\u01ed\u0001\u0000\u0000\u0000\u1136\u1137\u0005\u00b0\u0000\u0000\u1137"+
		"\u1138\u0005\u0135\u0000\u0000\u1138\u1139\u0005\u00f4\u0000\u0000\u1139"+
		"\u113a\u0003\u0208\u0104\u0000\u113a\u113b\u0005\u008a\u0000\u0000\u113b"+
		"\u113c\u0003\u056a\u02b5\u0000\u113c\u113d\u0005\u00ab\u0000\u0000\u113d"+
		"\u113e\u0003\u01e0\u00f0\u0000\u113e\u1149\u0001\u0000\u0000\u0000\u113f"+
		"\u1140\u0005\u00b0\u0000\u0000\u1140\u1141\u0005\u0135\u0000\u0000\u1141"+
		"\u1142\u0005\u00f4\u0000\u0000\u1142\u1143\u0003\u0208\u0104\u0000\u1143"+
		"\u1144\u0005\u008a\u0000\u0000\u1144\u1145\u0003\u056a\u02b5\u0000\u1145"+
		"\u1146\u0005\u00e5\u0000\u0000\u1146\u1147\u0003\u01f0\u00f8\u0000\u1147"+
		"\u1149\u0001\u0000\u0000\u0000\u1148\u1136\u0001\u0000\u0000\u0000\u1148"+
		"\u113f\u0001\u0000\u0000\u0000\u1149\u01ef\u0001\u0000\u0000\u0000\u114a"+
		"\u114f\u0003\u01f2\u00f9\u0000\u114b\u114c\u0005\u0006\u0000\u0000\u114c"+
		"\u114e\u0003\u01f2\u00f9\u0000\u114d\u114b\u0001\u0000\u0000\u0000\u114e"+
		"\u1151\u0001\u0000\u0000\u0000\u114f\u114d\u0001\u0000\u0000\u0000\u114f"+
		"\u1150\u0001\u0000\u0000\u0000\u1150\u01f1\u0001\u0000\u0000\u0000\u1151"+
		"\u114f\u0001\u0000\u0000\u0000\u1152\u1153\u0005\u0135\u0000\u0000\u1153"+
		"\u1154\u0003\u057a\u02bd\u0000\u1154\u1155\u0005\u0002\u0000\u0000\u1155"+
		"\u1156\u0003\u0508\u0284\u0000\u1156\u1157\u0005\u0003\u0000\u0000\u1157"+
		"\u115f\u0001\u0000\u0000\u0000\u1158\u1159\u0005\u00f9\u0000\u0000\u1159"+
		"\u115a\u0003\u057a\u02bd\u0000\u115a\u115b\u0005\u0002\u0000\u0000\u115b"+
		"\u115c\u0003\u0508\u0284\u0000\u115c\u115d\u0005\u0003\u0000\u0000\u115d"+
		"\u115f\u0001\u0000\u0000\u0000\u115e\u1152\u0001\u0000\u0000\u0000\u115e"+
		"\u1158\u0001\u0000\u0000\u0000\u115f\u01f3\u0001\u0000\u0000\u0000\u1160"+
		"\u1161\u0005\u00e5\u0000\u0000\u1161\u1162\u0005\u0135\u0000\u0000\u1162"+
		"\u1163\u0005\u00c2\u0000\u0000\u1163\u1164\u0003\u0208\u0104\u0000\u1164"+
		"\u1165\u0005\u008a\u0000\u0000\u1165\u1167\u0003\u056a\u02b5\u0000\u1166"+
		"\u1168\u0003h4\u0000\u1167\u1166\u0001\u0000\u0000\u0000\u1167\u1168\u0001"+
		"\u0000\u0000\u0000\u1168\u1175\u0001\u0000\u0000\u0000\u1169\u116a\u0005"+
		"\u00e5\u0000\u0000\u116a\u116b\u0005\u0135\u0000\u0000\u116b\u116c\u0005"+
		"\u00c2\u0000\u0000\u116c\u116d\u0005\u0102\u0000\u0000\u116d\u116e\u0005"+
		"\u01ab\u0000\u0000\u116e\u116f\u0003\u0208\u0104\u0000\u116f\u1170\u0005"+
		"\u008a\u0000\u0000\u1170\u1172\u0003\u056a\u02b5\u0000\u1171\u1173\u0003"+
		"h4\u0000\u1172\u1171\u0001\u0000\u0000\u0000\u1172\u1173\u0001\u0000\u0000"+
		"\u0000\u1173\u1175\u0001\u0000\u0000\u0000\u1174\u1160\u0001\u0000\u0000"+
		"\u0000\u1174\u1169\u0001\u0000\u0000\u0000\u1175\u01f5\u0001\u0000\u0000"+
		"\u0000\u1176\u1177\u0005\u00e5\u0000\u0000\u1177\u1178\u0005\u0135\u0000"+
		"\u0000\u1178\u1179\u0005\u00f4\u0000\u0000\u1179\u117a\u0003\u0208\u0104"+
		"\u0000\u117a\u117b\u0005\u008a\u0000\u0000\u117b\u117d\u0003\u056a\u02b5"+
		"\u0000\u117c\u117e\u0003h4\u0000\u117d\u117c\u0001\u0000\u0000\u0000\u117d"+
		"\u117e\u0001\u0000\u0000\u0000\u117e\u118b\u0001\u0000\u0000\u0000\u117f"+
		"\u1180\u0005\u00e5\u0000\u0000\u1180\u1181\u0005\u0135\u0000\u0000\u1181"+
		"\u1182\u0005\u00f4\u0000\u0000\u1182\u1183\u0005\u0102\u0000\u0000\u1183"+
		"\u1184\u0005\u01ab\u0000\u0000\u1184\u1185\u0003\u0208\u0104\u0000\u1185"+
		"\u1186\u0005\u008a\u0000\u0000\u1186\u1188\u0003\u056a\u02b5\u0000\u1187"+
		"\u1189\u0003h4\u0000\u1188\u1187\u0001\u0000\u0000\u0000\u1188\u1189\u0001"+
		"\u0000\u0000\u0000\u1189\u118b\u0001\u0000\u0000\u0000\u118a\u1176\u0001"+
		"\u0000\u0000\u0000\u118a\u117f\u0001\u0000\u0000\u0000\u118b\u01f7\u0001"+
		"\u0000\u0000\u0000\u118c\u118d\u0005\u00e5\u0000\u0000\u118d\u118e\u0005"+
		"\u0138\u0000\u0000\u118e\u118f\u0005\u00b9\u0000\u0000\u118f\u1191\u0003"+
		"\u0588\u02c4\u0000\u1190\u1192\u0003h4\u0000\u1191\u1190\u0001\u0000\u0000"+
		"\u0000\u1191\u1192\u0001\u0000\u0000\u0000\u1192\u01f9\u0001\u0000\u0000"+
		"\u0000\u1193\u1194\u0005\u014c\u0000\u0000\u1194\u1195\u0005\u0138\u0000"+
		"\u0000\u1195\u1196\u0005\u00b9\u0000\u0000\u1196\u1197\u0003\u0588\u02c4"+
		"\u0000\u1197\u1198\u0005\u0084\u0000\u0000\u1198\u1199\u0003\u0586\u02c3"+
		"\u0000\u1199\u01fb\u0001\u0000\u0000\u0000\u119a\u119b\u0005\u00e5\u0000"+
		"\u0000\u119b\u119c\u0003\u01fe\u00ff\u0000\u119c\u119d\u0005\u0102\u0000"+
		"\u0000\u119d\u119e\u0005\u01ab\u0000\u0000\u119e\u11a0\u0003\u0206\u0103"+
		"\u0000\u119f\u11a1\u0003h4\u0000\u11a0\u119f\u0001\u0000\u0000\u0000\u11a0"+
		"\u11a1\u0001\u0000\u0000\u0000\u11a1\u11f5\u0001\u0000\u0000\u0000\u11a2"+
		"\u11a3\u0005\u00e5\u0000\u0000\u11a3\u11a4\u0003\u01fe\u00ff\u0000\u11a4"+
		"\u11a6\u0003\u0206\u0103\u0000\u11a5\u11a7\u0003h4\u0000\u11a6\u11a5\u0001"+
		"\u0000\u0000\u0000\u11a6\u11a7\u0001\u0000\u0000\u0000\u11a7\u11f5\u0001"+
		"\u0000\u0000\u0000\u11a8\u11a9\u0005\u00e5\u0000\u0000\u11a9\u11aa\u0003"+
		"\u0202\u0101\u0000\u11aa\u11ab\u0005\u0102\u0000\u0000\u11ab\u11ac\u0005"+
		"\u01ab\u0000\u0000\u11ac\u11ae\u0003\u0568\u02b4\u0000\u11ad\u11af\u0003"+
		"h4\u0000\u11ae\u11ad\u0001\u0000\u0000\u0000\u11ae\u11af\u0001\u0000\u0000"+
		"\u0000\u11af\u11f5\u0001\u0000\u0000\u0000\u11b0\u11b1\u0005\u00e5\u0000"+
		"\u0000\u11b1\u11b2\u0003\u0202\u0101\u0000\u11b2\u11b4\u0003\u0568\u02b4"+
		"\u0000\u11b3\u11b5\u0003h4\u0000\u11b4\u11b3\u0001\u0000\u0000\u0000\u11b4"+
		"\u11b5\u0001\u0000\u0000\u0000\u11b5\u11f5\u0001\u0000\u0000\u0000\u11b6"+
		"\u11b7\u0005\u00e5\u0000\u0000\u11b7\u11b8\u0003\u0204\u0102\u0000\u11b8"+
		"\u11b9\u0003\u056a\u02b5\u0000\u11b9\u11ba\u0005v\u0000\u0000\u11ba\u11bc"+
		"\u0003\u0208\u0104\u0000\u11bb\u11bd\u0003h4\u0000\u11bc\u11bb\u0001\u0000"+
		"\u0000\u0000\u11bc\u11bd\u0001\u0000\u0000\u0000\u11bd\u11f5\u0001\u0000"+
		"\u0000\u0000\u11be\u11bf\u0005\u00e5\u0000\u0000\u11bf\u11c0\u0003\u0204"+
		"\u0102\u0000\u11c0\u11c1\u0005\u0102\u0000\u0000\u11c1\u11c2\u0005\u01ab"+
		"\u0000\u0000\u11c2\u11c3\u0003\u056a\u02b5\u0000\u11c3\u11c4\u0005v\u0000"+
		"\u0000\u11c4\u11c6\u0003\u0208\u0104\u0000\u11c5\u11c7\u0003h4\u0000\u11c6"+
		"\u11c5\u0001\u0000\u0000\u0000\u11c6\u11c7\u0001\u0000\u0000\u0000\u11c7"+
		"\u11f5\u0001\u0000\u0000\u0000\u11c8\u11c9\u0005\u00e5\u0000\u0000\u11c9"+
		"\u11ca\u0005\u0187\u0000\u0000\u11ca\u11cc\u0003\u020c\u0106\u0000\u11cb"+
		"\u11cd\u0003h4\u0000\u11cc\u11cb\u0001\u0000\u0000\u0000\u11cc\u11cd\u0001"+
		"\u0000\u0000\u0000\u11cd\u11f5\u0001\u0000\u0000\u0000\u11ce\u11cf\u0005"+
		"\u00e5\u0000\u0000\u11cf\u11d0\u0005\u0187\u0000\u0000\u11d0\u11d1\u0005"+
		"\u0102\u0000\u0000\u11d1\u11d2\u0005\u01ab\u0000\u0000\u11d2\u11d4\u0003"+
		"\u020c\u0106\u0000\u11d3\u11d5\u0003h4\u0000\u11d4\u11d3\u0001\u0000\u0000"+
		"\u0000\u11d4\u11d5\u0001\u0000\u0000\u0000\u11d5\u11f5\u0001\u0000\u0000"+
		"\u0000\u11d6\u11d7\u0005\u00e5\u0000\u0000\u11d7\u11d8\u0005\u00e3\u0000"+
		"\u0000\u11d8\u11da\u0003\u020c\u0106\u0000\u11d9\u11db\u0003h4\u0000\u11da"+
		"\u11d9\u0001\u0000\u0000\u0000\u11da\u11db\u0001\u0000\u0000\u0000\u11db"+
		"\u11f5\u0001\u0000\u0000\u0000\u11dc\u11dd\u0005\u00e5\u0000\u0000\u11dd"+
		"\u11de\u0005\u00e3\u0000\u0000\u11de\u11df\u0005\u0102\u0000\u0000\u11df"+
		"\u11e0\u0005\u01ab\u0000\u0000\u11e0\u11e2\u0003\u020c\u0106\u0000\u11e1"+
		"\u11e3\u0003h4\u0000\u11e2\u11e1\u0001\u0000\u0000\u0000\u11e2\u11e3\u0001"+
		"\u0000\u0000\u0000\u11e3\u11f5\u0001\u0000\u0000\u0000\u11e4\u11e5\u0005"+
		"\u00e5\u0000\u0000\u11e5\u11e6\u0005\u0108\u0000\u0000\u11e6\u11e7\u0005"+
		"\u0093\u0000\u0000\u11e7\u11e9\u0003\u0206\u0103\u0000\u11e8\u11ea\u0003"+
		"h4\u0000\u11e9\u11e8\u0001\u0000\u0000\u0000\u11e9\u11ea\u0001\u0000\u0000"+
		"\u0000\u11ea\u11f5\u0001\u0000\u0000\u0000\u11eb\u11ec\u0005\u00e5\u0000"+
		"\u0000\u11ec\u11ed\u0005\u0108\u0000\u0000\u11ed\u11ee\u0005\u0093\u0000"+
		"\u0000\u11ee\u11ef\u0005\u0102\u0000\u0000\u11ef\u11f0\u0005\u01ab\u0000"+
		"\u0000\u11f0\u11f2\u0003\u0206\u0103\u0000\u11f1\u11f3\u0003h4\u0000\u11f2"+
		"\u11f1\u0001\u0000\u0000\u0000\u11f2\u11f3\u0001\u0000\u0000\u0000\u11f3"+
		"\u11f5\u0001\u0000\u0000\u0000\u11f4\u119a\u0001\u0000\u0000\u0000\u11f4"+
		"\u11a2\u0001\u0000\u0000\u0000\u11f4\u11a8\u0001\u0000\u0000\u0000\u11f4"+
		"\u11b0\u0001\u0000\u0000\u0000\u11f4\u11b6\u0001\u0000\u0000\u0000\u11f4"+
		"\u11be\u0001\u0000\u0000\u0000\u11f4\u11c8\u0001\u0000\u0000\u0000\u11f4"+
		"\u11ce\u0001\u0000\u0000\u0000\u11f4\u11d6\u0001\u0000\u0000\u0000\u11f4"+
		"\u11dc\u0001\u0000\u0000\u0000\u11f4\u11e4\u0001\u0000\u0000\u0000\u11f4"+
		"\u11eb\u0001\u0000\u0000\u0000\u11f5\u01fd\u0001\u0000\u0000\u0000\u11f6"+
		"\u120e\u0005\u0082\u0000\u0000\u11f7\u120e\u0005\u0167\u0000\u0000\u11f8"+
		"\u120e\u0005\u0197\u0000\u0000\u11f9\u11fa\u0005\u0121\u0000\u0000\u11fa"+
		"\u120e\u0005\u0197\u0000\u0000\u11fb\u120e\u0005\u0108\u0000\u0000\u11fc"+
		"\u11fd\u0005e\u0000\u0000\u11fd\u120e\u0005\u0082\u0000\u0000\u11fe\u120e"+
		"\u0005\u0092\u0000\u0000\u11ff\u120e\u0005\u00ce\u0000\u0000\u1200\u120e"+
		"\u0005\u0175\u0000\u0000\u1201\u1202\u0005\u0182\u0000\u0000\u1202\u1203"+
		"\u0005\u0164\u0000\u0000\u1203\u120e\u0005\u013a\u0000\u0000\u1204\u1205"+
		"\u0005\u0182\u0000\u0000\u1205\u1206\u0005\u0164\u0000\u0000\u1206\u120e"+
		"\u0005\u00df\u0000\u0000\u1207\u1208\u0005\u0182\u0000\u0000\u1208\u1209"+
		"\u0005\u0164\u0000\u0000\u1209\u120e\u0005\u0180\u0000\u0000\u120a\u120b"+
		"\u0005\u0182\u0000\u0000\u120b\u120c\u0005\u0164\u0000\u0000\u120c\u120e"+
		"\u0005\u00c9\u0000\u0000\u120d\u11f6\u0001\u0000\u0000\u0000\u120d\u11f7"+
		"\u0001\u0000\u0000\u0000\u120d\u11f8\u0001\u0000\u0000\u0000\u120d\u11f9"+
		"\u0001\u0000\u0000\u0000\u120d\u11fb\u0001\u0000\u0000\u0000\u120d\u11fc"+
		"\u0001\u0000\u0000\u0000\u120d\u11fe\u0001\u0000\u0000\u0000\u120d\u11ff"+
		"\u0001\u0000\u0000\u0000\u120d\u1200\u0001\u0000\u0000\u0000\u120d\u1201"+
		"\u0001\u0000\u0000\u0000\u120d\u1204\u0001\u0000\u0000\u0000\u120d\u1207"+
		"\u0001\u0000\u0000\u0000\u120d\u120a\u0001\u0000\u0000\u0000\u120e\u01ff"+
		"\u0001\u0000\u0000\u0000\u120f\u1215\u0003\u0202\u0101\u0000\u1210\u1215"+
		"\u0005\u00d5\u0000\u0000\u1211\u1215\u0005\u015d\u0000\u0000\u1212\u1215"+
		"\u0005\u01e9\u0000\u0000\u1213\u1215\u0005\u017e\u0000\u0000\u1214\u120f"+
		"\u0001\u0000\u0000\u0000\u1214\u1210\u0001\u0000\u0000\u0000\u1214\u1211"+
		"\u0001\u0000\u0000\u0000\u1214\u1212\u0001\u0000\u0000\u0000\u1214\u1213"+
		"\u0001\u0000\u0000\u0000\u1215\u0201\u0001\u0000\u0000\u0000\u1216\u1217"+
		"\u0005\u00a9\u0000\u0000\u1217\u1226\u0005\u01e4\u0000\u0000\u1218\u1219"+
		"\u0005\u00ec\u0000\u0000\u1219\u1226\u0005\u0184\u0000\u0000\u121a\u1226"+
		"\u0005\u00f2\u0000\u0000\u121b\u121c\u0005e\u0000\u0000\u121c\u121d\u0005"+
		"\u00d4\u0000\u0000\u121d\u1226\u0005\u019c\u0000\u0000\u121e\u1220\u0003"+
		"\u0130\u0098\u0000\u121f\u121e\u0001\u0000\u0000\u0000\u121f\u1220\u0001"+
		"\u0000\u0000\u0000\u1220\u1221\u0001\u0000\u0000\u0000\u1221\u1226\u0005"+
		"\u0114\u0000\u0000\u1222\u1226\u0005\u01ea\u0000\u0000\u1223\u1226\u0005"+
		"\u0162\u0000\u0000\u1224\u1226\u0005\u016a\u0000\u0000\u1225\u1216\u0001"+
		"\u0000\u0000\u0000\u1225\u1218\u0001\u0000\u0000\u0000\u1225\u121a\u0001"+
		"\u0000\u0000\u0000\u1225\u121b\u0001\u0000\u0000\u0000\u1225\u121f\u0001"+
		"\u0000\u0000\u0000\u1225\u1222\u0001\u0000\u0000\u0000\u1225\u1223\u0001"+
		"\u0000\u0000\u0000\u1225\u1224\u0001\u0000\u0000\u0000\u1226\u0203\u0001"+
		"\u0000\u0000\u0000\u1227\u1228\u0007\u0018\u0000\u0000\u1228\u0205\u0001"+
		"\u0000\u0000\u0000\u1229\u122e\u0003\u0208\u0104\u0000\u122a\u122b\u0005"+
		"\u0006\u0000\u0000\u122b\u122d\u0003\u0208\u0104\u0000\u122c\u122a\u0001"+
		"\u0000\u0000\u0000\u122d\u1230\u0001\u0000\u0000\u0000\u122e\u122c\u0001"+
		"\u0000\u0000\u0000\u122e\u122f\u0001\u0000\u0000\u0000\u122f\u0207\u0001"+
		"\u0000\u0000\u0000\u1230\u122e\u0001\u0000\u0000\u0000\u1231\u1233\u0003"+
		"\u058a\u02c5\u0000\u1232\u1234\u0003\u020a\u0105\u0000\u1233\u1232\u0001"+
		"\u0000\u0000\u0000\u1233\u1234\u0001\u0000\u0000\u0000\u1234\u0209\u0001"+
		"\u0000\u0000\u0000\u1235\u1236\u0005\u000b\u0000\u0000\u1236\u1238\u0003"+
		"\u056c\u02b6\u0000\u1237\u1235\u0001\u0000\u0000\u0000\u1238\u1239\u0001"+
		"\u0000\u0000\u0000\u1239\u1237\u0001\u0000\u0000\u0000\u1239\u123a\u0001"+
		"\u0000\u0000\u0000\u123a\u020b\u0001\u0000\u0000\u0000\u123b\u1240\u0003"+
		"\u045c\u022e\u0000\u123c\u123d\u0005\u0006\u0000\u0000\u123d\u123f\u0003"+
		"\u045c\u022e\u0000\u123e\u123c\u0001\u0000\u0000\u0000\u123f\u1242\u0001"+
		"\u0000\u0000\u0000\u1240\u123e\u0001\u0000\u0000\u0000\u1240\u1241\u0001"+
		"\u0000\u0000\u0000\u1241\u020d\u0001\u0000\u0000\u0000\u1242\u1240\u0001"+
		"\u0000\u0000\u0000\u1243\u1245\u0005\u0185\u0000\u0000\u1244\u1246\u0003"+
		"\u03e0\u01f0\u0000\u1245\u1244\u0001\u0000\u0000\u0000\u1245\u1246\u0001"+
		"\u0000\u0000\u0000\u1246\u1247\u0001\u0000\u0000\u0000\u1247\u1249\u0003"+
		"\u0432\u0219\u0000\u1248\u124a\u0003\u0210\u0108\u0000\u1249\u1248\u0001"+
		"\u0000\u0000\u0000\u1249\u124a\u0001\u0000\u0000\u0000\u124a\u124c\u0001"+
		"\u0000\u0000\u0000\u124b\u124d\u0003h4\u0000\u124c\u124b\u0001\u0000\u0000"+
		"\u0000\u124c\u124d\u0001\u0000\u0000\u0000\u124d\u020f\u0001\u0000\u0000"+
		"\u0000\u124e\u124f\u0005\u00cd\u0000\u0000\u124f\u1253\u0005\u0101\u0000"+
		"\u0000\u1250\u1251\u0005\u0159\u0000\u0000\u1251\u1253\u0005\u0101\u0000"+
		"\u0000\u1252\u124e\u0001\u0000\u0000\u0000\u1252\u1250\u0001\u0000\u0000"+
		"\u0000\u1253\u0211\u0001\u0000\u0000\u0000\u1254\u1255\u0005\u00c5\u0000"+
		"\u0000\u1255\u1256\u0005v\u0000\u0000\u1256\u1257\u0003\u01fe\u00ff\u0000"+
		"\u1257\u1258\u0003\u0208\u0104\u0000\u1258\u1259\u0005\u009a\u0000\u0000"+
		"\u1259\u125a\u0003\u0214\u010a\u0000\u125a\u12e8\u0001\u0000\u0000\u0000"+
		"\u125b\u125c\u0005\u00c5\u0000\u0000\u125c\u125d\u0005v\u0000\u0000\u125d"+
		"\u125e\u0005R\u0000\u0000\u125e\u125f\u0003\u0208\u0104\u0000\u125f\u1260"+
		"\u0005\u009a\u0000\u0000\u1260\u1261\u0003\u0214\u010a\u0000\u1261\u12e8"+
		"\u0001\u0000\u0000\u0000\u1262\u1263\u0005\u00c5\u0000\u0000\u1263\u1264"+
		"\u0005v\u0000\u0000\u1264\u1265\u0003\u0200\u0100\u0000\u1265\u1266\u0003"+
		"\u056a\u02b5\u0000\u1266\u1267\u0005\u009a\u0000\u0000\u1267\u1268\u0003"+
		"\u0214\u010a\u0000\u1268\u12e8\u0001\u0000\u0000\u0000\u1269\u126a\u0005"+
		"\u00c5\u0000\u0000\u126a\u126b\u0005v\u0000\u0000\u126b\u126c\u0005\u0187"+
		"\u0000\u0000\u126c\u126d\u0003\u045c\u022e\u0000\u126d\u126e\u0005\u009a"+
		"\u0000\u0000\u126e\u126f\u0003\u0214\u010a\u0000\u126f\u12e8\u0001\u0000"+
		"\u0000\u0000\u1270\u1271\u0005\u00c5\u0000\u0000\u1271\u1272\u0005v\u0000"+
		"\u0000\u1272\u1273\u0005\u00e3\u0000\u0000\u1273\u1274\u0003\u045c\u022e"+
		"\u0000\u1274\u1275\u0005\u009a\u0000\u0000\u1275\u1276\u0003\u0214\u010a"+
		"\u0000\u1276\u12e8\u0001\u0000\u0000\u0000\u1277\u1278\u0005\u00c5\u0000"+
		"\u0000\u1278\u1279\u0005v\u0000\u0000\u1279\u127a\u0005\u00ae\u0000\u0000"+
		"\u127a\u127b\u0003\u0288\u0144\u0000\u127b\u127c\u0005\u009a\u0000\u0000"+
		"\u127c\u127d\u0003\u0214\u010a\u0000\u127d\u12e8\u0001\u0000\u0000\u0000"+
		"\u127e\u127f\u0005\u00c5\u0000\u0000\u127f\u1280\u0005v\u0000\u0000\u1280"+
		"\u1281\u0005\u00f9\u0000\u0000\u1281\u1282\u0003\u0270\u0138\u0000\u1282"+
		"\u1283\u0005\u009a\u0000\u0000\u1283\u1284\u0003\u0214\u010a\u0000\u1284"+
		"\u12e8\u0001\u0000\u0000\u0000\u1285\u1286\u0005\u00c5\u0000\u0000\u1286"+
		"\u1287\u0005v\u0000\u0000\u1287\u1288\u0005\u0135\u0000\u0000\u1288\u1289"+
		"\u0003\u02ae\u0157\u0000\u1289\u128a\u0005\u009a\u0000\u0000\u128a\u128b"+
		"\u0003\u0214\u010a\u0000\u128b\u12e8\u0001\u0000\u0000\u0000\u128c\u128d"+
		"\u0005\u00c5\u0000\u0000\u128d\u128e\u0005v\u0000\u0000\u128e\u128f\u0005"+
		"S\u0000\u0000\u128f\u1290\u0003\u056a\u02b5\u0000\u1290\u1291\u0005v\u0000"+
		"\u0000\u1291\u1292\u0003\u0208\u0104\u0000\u1292\u1293\u0005\u009a\u0000"+
		"\u0000\u1293\u1294\u0003\u0214\u010a\u0000\u1294\u12e8\u0001\u0000\u0000"+
		"\u0000\u1295\u1296\u0005\u00c5\u0000\u0000\u1296\u1297\u0005v\u0000\u0000"+
		"\u1297\u1298\u0005S\u0000\u0000\u1298\u1299\u0003\u056a\u02b5\u0000\u1299"+
		"\u129a\u0005v\u0000\u0000\u129a\u129b\u0005\u00e3\u0000\u0000\u129b\u129c"+
		"\u0003\u0208\u0104\u0000\u129c\u129d\u0005\u009a\u0000\u0000\u129d\u129e"+
		"\u0003\u0214\u010a\u0000\u129e\u12e8\u0001\u0000\u0000\u0000\u129f\u12a0"+
		"\u0005\u00c5\u0000\u0000\u12a0\u12a1\u0005v\u0000\u0000\u12a1\u12a2\u0003"+
		"\u0204\u0102\u0000\u12a2\u12a3\u0003\u056a\u02b5\u0000\u12a3\u12a4\u0005"+
		"v\u0000\u0000\u12a4\u12a5\u0003\u0208\u0104\u0000\u12a5\u12a6\u0005\u009a"+
		"\u0000\u0000\u12a6\u12a7\u0003\u0214\u010a\u0000\u12a7\u12e8\u0001\u0000"+
		"\u0000\u0000\u12a8\u12a9\u0005\u00c5\u0000\u0000\u12a9\u12aa\u0005v\u0000"+
		"\u0000\u12aa\u12ab\u0005\u0147\u0000\u0000\u12ab\u12ac\u0003\u0270\u0138"+
		"\u0000\u12ac\u12ad\u0005\u009a\u0000\u0000\u12ad\u12ae\u0003\u0214\u010a"+
		"\u0000\u12ae\u12e8\u0001\u0000\u0000\u0000\u12af\u12b0\u0005\u00c5\u0000"+
		"\u0000\u12b0\u12b1\u0005v\u0000\u0000\u12b1\u12b2\u0005\u01e0\u0000\u0000"+
		"\u12b2\u12b3\u0003\u0270\u0138\u0000\u12b3\u12b4\u0005\u009a\u0000\u0000"+
		"\u12b4\u12b5\u0003\u0214\u010a\u0000\u12b5\u12e8\u0001\u0000\u0000\u0000"+
		"\u12b6\u12b7\u0005\u00c5\u0000\u0000\u12b7\u12b8\u0005v\u0000\u0000\u12b8"+
		"\u12b9\u0005\u01e1\u0000\u0000\u12b9\u12ba\u0005d\u0000\u0000\u12ba\u12bb"+
		"\u0003\u045c\u022e\u0000\u12bb\u12bc\u0005\u0114\u0000\u0000\u12bc\u12bd"+
		"\u0003\u056a\u02b5\u0000\u12bd\u12be\u0005\u009a\u0000\u0000\u12be\u12bf"+
		"\u0003\u0214\u010a\u0000\u12bf\u12e8\u0001\u0000\u0000\u0000\u12c0\u12c1"+
		"\u0005\u00c5\u0000\u0000\u12c1\u12c2\u0005v\u0000\u0000\u12c2\u12c3\u0005"+
		"\u0135\u0000\u0000\u12c3\u12c4\u0005\u00c2\u0000\u0000\u12c4\u12c5\u0003"+
		"\u0208\u0104\u0000\u12c5\u12c6\u0005\u008a\u0000\u0000\u12c6\u12c7\u0003"+
		"\u056a\u02b5\u0000\u12c7\u12c8\u0005\u009a\u0000\u0000\u12c8\u12c9\u0003"+
		"\u0214\u010a\u0000\u12c9\u12e8\u0001\u0000\u0000\u0000\u12ca\u12cb\u0005"+
		"\u00c5\u0000\u0000\u12cb\u12cc\u0005v\u0000\u0000\u12cc\u12cd\u0005\u0135"+
		"\u0000\u0000\u12cd\u12ce\u0005\u00f4\u0000\u0000\u12ce\u12cf\u0003\u0208"+
		"\u0104\u0000\u12cf\u12d0\u0005\u008a\u0000\u0000\u12d0\u12d1\u0003\u056a"+
		"\u02b5\u0000\u12d1\u12d2\u0005\u009a\u0000\u0000\u12d2\u12d3\u0003\u0214"+
		"\u010a\u0000\u12d3\u12e8\u0001\u0000\u0000\u0000\u12d4\u12d5\u0005\u00c5"+
		"\u0000\u0000\u12d5\u12d6\u0005v\u0000\u0000\u12d6\u12d7\u0005\u0115\u0000"+
		"\u0000\u12d7\u12d8\u0005\u0131\u0000\u0000\u12d8\u12d9\u0003\u0120\u0090"+
		"\u0000\u12d9\u12da\u0005\u009a\u0000\u0000\u12da\u12db\u0003\u0214\u010a"+
		"\u0000\u12db\u12e8\u0001\u0000\u0000\u0000\u12dc\u12dd\u0005\u00c5\u0000"+
		"\u0000\u12dd\u12de\u0005v\u0000\u0000\u12de\u12df\u0005O\u0000\u0000\u12df"+
		"\u12e0\u0005\u0002\u0000\u0000\u12e0\u12e1\u0003\u045c\u022e\u0000\u12e1"+
		"\u12e2\u0005J\u0000\u0000\u12e2\u12e3\u0003\u045c\u022e\u0000\u12e3\u12e4"+
		"\u0005\u0003\u0000\u0000\u12e4\u12e5\u0005\u009a\u0000\u0000\u12e5\u12e6"+
		"\u0003\u0214\u010a\u0000\u12e6\u12e8\u0001\u0000\u0000\u0000\u12e7\u1254"+
		"\u0001\u0000\u0000\u0000\u12e7\u125b\u0001\u0000\u0000\u0000\u12e7\u1262"+
		"\u0001\u0000\u0000\u0000\u12e7\u1269\u0001\u0000\u0000\u0000\u12e7\u1270"+
		"\u0001\u0000\u0000\u0000\u12e7\u1277\u0001\u0000\u0000\u0000\u12e7\u127e"+
		"\u0001\u0000\u0000\u0000\u12e7\u1285\u0001\u0000\u0000\u0000\u12e7\u128c"+
		"\u0001\u0000\u0000\u0000\u12e7\u1295\u0001\u0000\u0000\u0000\u12e7\u129f"+
		"\u0001\u0000\u0000\u0000\u12e7\u12a8\u0001\u0000\u0000\u0000\u12e7\u12af"+
		"\u0001\u0000\u0000\u0000\u12e7\u12b6\u0001\u0000\u0000\u0000\u12e7\u12c0"+
		"\u0001\u0000\u0000\u0000\u12e7\u12ca\u0001\u0000\u0000\u0000\u12e7\u12d4"+
		"\u0001\u0000\u0000\u0000\u12e7\u12dc\u0001\u0000\u0000\u0000\u12e8\u0213"+
		"\u0001\u0000\u0000\u0000\u12e9\u12ec\u0003\u057c\u02be\u0000\u12ea\u12ec"+
		"\u0005t\u0000\u0000\u12eb\u12e9\u0001\u0000\u0000\u0000\u12eb\u12ea\u0001"+
		"\u0000\u0000\u0000\u12ec\u0215\u0001\u0000\u0000\u0000\u12ed\u12ee\u0005"+
		"\u0166\u0000\u0000\u12ee\u12f0\u0005\u0113\u0000\u0000\u12ef\u12f1\u0003"+
		"\u0218\u010c\u0000\u12f0\u12ef\u0001\u0000\u0000\u0000\u12f0\u12f1\u0001"+
		"\u0000\u0000\u0000\u12f1\u12f2\u0001\u0000\u0000\u0000\u12f2\u12f3\u0005"+
		"v\u0000\u0000\u12f3\u12f4\u0003\u01fe\u00ff\u0000\u12f4\u12f5\u0003\u0208"+
		"\u0104\u0000\u12f5\u12f6\u0005\u009a\u0000\u0000\u12f6\u12f7\u0003\u021a"+
		"\u010d\u0000\u12f7\u135d\u0001\u0000\u0000\u0000\u12f8\u12f9\u0005\u0166"+
		"\u0000\u0000\u12f9\u12fb\u0005\u0113\u0000\u0000\u12fa\u12fc\u0003\u0218"+
		"\u010c\u0000\u12fb\u12fa\u0001\u0000\u0000\u0000\u12fb\u12fc\u0001\u0000"+
		"\u0000\u0000\u12fc\u12fd\u0001\u0000\u0000\u0000\u12fd\u12fe\u0005v\u0000"+
		"\u0000\u12fe\u12ff\u0005R\u0000\u0000\u12ff\u1300\u0003\u0208\u0104\u0000"+
		"\u1300\u1301\u0005\u009a\u0000\u0000\u1301\u1302\u0003\u021a\u010d\u0000"+
		"\u1302\u135d\u0001\u0000\u0000\u0000\u1303\u1304\u0005\u0166\u0000\u0000"+
		"\u1304\u1306\u0005\u0113\u0000\u0000\u1305\u1307\u0003\u0218\u010c\u0000"+
		"\u1306\u1305\u0001\u0000\u0000\u0000\u1306\u1307\u0001\u0000\u0000\u0000"+
		"\u1307\u1308\u0001\u0000\u0000\u0000\u1308\u1309\u0005v\u0000\u0000\u1309"+
		"\u130a\u0003\u0200\u0100\u0000\u130a\u130b\u0003\u056a\u02b5\u0000\u130b"+
		"\u130c\u0005\u009a\u0000\u0000\u130c\u130d\u0003\u021a\u010d\u0000\u130d"+
		"\u135d\u0001\u0000\u0000\u0000\u130e\u130f\u0005\u0166\u0000\u0000\u130f"+
		"\u1311\u0005\u0113\u0000\u0000\u1310\u1312\u0003\u0218\u010c\u0000\u1311"+
		"\u1310\u0001\u0000\u0000\u0000\u1311\u1312\u0001\u0000\u0000\u0000\u1312"+
		"\u1313\u0001\u0000\u0000\u0000\u1313\u1314\u0005v\u0000\u0000\u1314\u1315"+
		"\u0005\u0187\u0000\u0000\u1315\u1316\u0003\u045c\u022e\u0000\u1316\u1317"+
		"\u0005\u009a\u0000\u0000\u1317\u1318\u0003\u021a\u010d\u0000\u1318\u135d"+
		"\u0001\u0000\u0000\u0000\u1319\u131a\u0005\u0166\u0000\u0000\u131a\u131c"+
		"\u0005\u0113\u0000\u0000\u131b\u131d\u0003\u0218\u010c\u0000\u131c\u131b"+
		"\u0001\u0000\u0000\u0000\u131c\u131d\u0001\u0000\u0000\u0000\u131d\u131e"+
		"\u0001\u0000\u0000\u0000\u131e\u131f\u0005v\u0000\u0000\u131f\u1320\u0005"+
		"\u00e3\u0000\u0000\u1320\u1321\u0003\u045c\u022e\u0000\u1321\u1322\u0005"+
		"\u009a\u0000\u0000\u1322\u1323\u0003\u021a\u010d\u0000\u1323\u135d\u0001"+
		"\u0000\u0000\u0000\u1324\u1325\u0005\u0166\u0000\u0000\u1325\u1327\u0005"+
		"\u0113\u0000\u0000\u1326\u1328\u0003\u0218\u010c\u0000\u1327\u1326\u0001"+
		"\u0000\u0000\u0000\u1327\u1328\u0001\u0000\u0000\u0000\u1328\u1329\u0001"+
		"\u0000\u0000\u0000\u1329\u132a\u0005v\u0000\u0000\u132a\u132b\u0005\u00ae"+
		"\u0000\u0000\u132b\u132c\u0003\u0288\u0144\u0000\u132c\u132d\u0005\u009a"+
		"\u0000\u0000\u132d\u132e\u0003\u021a\u010d\u0000\u132e\u135d\u0001\u0000"+
		"\u0000\u0000\u132f\u1330\u0005\u0166\u0000\u0000\u1330\u1332\u0005\u0113"+
		"\u0000\u0000\u1331\u1333\u0003\u0218\u010c\u0000\u1332\u1331\u0001\u0000"+
		"\u0000\u0000\u1332\u1333\u0001\u0000\u0000\u0000\u1333\u1334\u0001\u0000"+
		"\u0000\u0000\u1334\u1335\u0005v\u0000\u0000\u1335\u1336\u0005\u00f9\u0000"+
		"\u0000\u1336\u1337\u0003\u0270\u0138\u0000\u1337\u1338\u0005\u009a\u0000"+
		"\u0000\u1338\u1339\u0003\u021a\u010d\u0000\u1339\u135d\u0001\u0000\u0000"+
		"\u0000\u133a\u133b\u0005\u0166\u0000\u0000\u133b\u133d\u0005\u0113\u0000"+
		"\u0000\u133c\u133e\u0003\u0218\u010c\u0000\u133d\u133c\u0001\u0000\u0000"+
		"\u0000\u133d\u133e\u0001\u0000\u0000\u0000\u133e\u133f\u0001\u0000\u0000"+
		"\u0000\u133f\u1340\u0005v\u0000\u0000\u1340\u1341\u0005\u0115\u0000\u0000"+
		"\u1341\u1342\u0005\u0131\u0000\u0000\u1342\u1343\u0003\u0120\u0090\u0000"+
		"\u1343\u1344\u0005\u009a\u0000\u0000\u1344\u1345\u0003\u021a\u010d\u0000"+
		"\u1345\u135d\u0001\u0000\u0000\u0000\u1346\u1347\u0005\u0166\u0000\u0000"+
		"\u1347\u1349\u0005\u0113\u0000\u0000\u1348\u134a\u0003\u0218\u010c\u0000"+
		"\u1349\u1348\u0001\u0000\u0000\u0000\u1349\u134a\u0001\u0000\u0000\u0000"+
		"\u134a\u134b\u0001\u0000\u0000\u0000\u134b\u134c\u0005v\u0000\u0000\u134c"+
		"\u134d\u0005\u0147\u0000\u0000\u134d\u134e\u0003\u0270\u0138\u0000\u134e"+
		"\u134f\u0005\u009a\u0000\u0000\u134f\u1350\u0003\u021a\u010d\u0000\u1350"+
		"\u135d\u0001\u0000\u0000\u0000\u1351\u1352\u0005\u0166\u0000\u0000\u1352"+
		"\u1354\u0005\u0113\u0000\u0000\u1353\u1355\u0003\u0218\u010c\u0000\u1354"+
		"\u1353\u0001\u0000\u0000\u0000\u1354\u1355\u0001\u0000\u0000\u0000\u1355"+
		"\u1356\u0001\u0000\u0000\u0000\u1356\u1357\u0005v\u0000\u0000\u1357\u1358"+
		"\u0005\u01e0\u0000\u0000\u1358\u1359\u0003\u0270\u0138\u0000\u1359\u135a"+
		"\u0005\u009a\u0000\u0000\u135a\u135b\u0003\u021a\u010d\u0000\u135b\u135d"+
		"\u0001\u0000\u0000\u0000\u135c\u12ed\u0001\u0000\u0000\u0000\u135c\u12f8"+
		"\u0001\u0000\u0000\u0000\u135c\u1303\u0001\u0000\u0000\u0000\u135c\u130e"+
		"\u0001\u0000\u0000\u0000\u135c\u1319\u0001\u0000\u0000\u0000\u135c\u1324"+
		"\u0001\u0000\u0000\u0000\u135c\u132f\u0001\u0000\u0000\u0000\u135c\u133a"+
		"\u0001\u0000\u0000\u0000\u135c\u1346\u0001\u0000\u0000\u0000\u135c\u1351"+
		"\u0001\u0000\u0000\u0000\u135d\u0217\u0001\u0000\u0000\u0000\u135e\u135f"+
		"\u0005d\u0000\u0000\u135f\u1360\u0003D\"\u0000\u1360\u0219\u0001\u0000"+
		"\u0000\u0000\u1361\u1364\u0003\u057c\u02be\u0000\u1362\u1364\u0005t\u0000"+
		"\u0000\u1363\u1361\u0001\u0000\u0000\u0000\u1363\u1362\u0001\u0000\u0000"+
		"\u0000\u1364\u021b\u0001\u0000\u0000\u0000\u1365\u1366\u0005c\u0000\u0000"+
		"\u1366\u136a\u0003\u021e\u010f\u0000\u1367\u1368\u0005\u0128\u0000\u0000"+
		"\u1368\u136a\u0003\u021e\u010f\u0000\u1369\u1365\u0001\u0000\u0000\u0000"+
		"\u1369\u1367\u0001\u0000\u0000\u0000\u136a\u021d\u0001\u0000\u0000\u0000"+
		"\u136b\u13c1\u0003\u03be\u01df\u0000\u136c\u136d\u0003\u0220\u0110\u0000"+
		"\u136d\u136e\u0003\u03be\u01df\u0000\u136e\u13c1\u0001\u0000\u0000\u0000"+
		"\u136f\u1371\u0005\u012b\u0000\u0000\u1370\u1372\u0003\u0222\u0111\u0000"+
		"\u1371\u1370\u0001\u0000\u0000\u0000\u1371\u1372\u0001\u0000\u0000\u0000"+
		"\u1372\u1373\u0001\u0000\u0000\u0000\u1373\u13c1\u0003\u03be\u01df\u0000"+
		"\u1374\u1376\u0005\u0144\u0000\u0000\u1375\u1377\u0003\u0222\u0111\u0000"+
		"\u1376\u1375\u0001\u0000\u0000\u0000\u1376\u1377\u0001\u0000\u0000\u0000"+
		"\u1377\u1378\u0001\u0000\u0000\u0000\u1378\u13c1\u0003\u03be\u01df\u0000"+
		"\u1379\u137b\u0005\u00f5\u0000\u0000\u137a\u137c\u0003\u0222\u0111\u0000"+
		"\u137b\u137a\u0001\u0000\u0000\u0000\u137b\u137c\u0001\u0000\u0000\u0000"+
		"\u137c\u137d\u0001\u0000\u0000\u0000\u137d\u13c1\u0003\u03be\u01df\u0000"+
		"\u137e\u1380\u0005\u0116\u0000\u0000\u137f\u1381\u0003\u0222\u0111\u0000"+
		"\u1380\u137f\u0001\u0000\u0000\u0000\u1380\u1381\u0001\u0000\u0000\u0000"+
		"\u1381\u1382\u0001\u0000\u0000\u0000\u1382\u13c1\u0003\u03be\u01df\u0000"+
		"\u1383\u1384\u0005\u00a8\u0000\u0000\u1384\u1386\u0003\u0582\u02c1\u0000"+
		"\u1385\u1387\u0003\u0222\u0111\u0000\u1386\u1385\u0001\u0000\u0000\u0000"+
		"\u1386\u1387\u0001\u0000\u0000\u0000\u1387\u1388\u0001\u0000\u0000\u0000"+
		"\u1388\u1389\u0003\u03be\u01df\u0000\u1389\u13c1\u0001\u0000\u0000\u0000"+
		"\u138a\u138b\u0005\u0152\u0000\u0000\u138b\u138d\u0003\u0582\u02c1\u0000"+
		"\u138c\u138e\u0003\u0222\u0111\u0000\u138d\u138c\u0001\u0000\u0000\u0000"+
		"\u138d\u138e\u0001\u0000\u0000\u0000\u138e\u138f\u0001\u0000\u0000\u0000"+
		"\u138f\u1390\u0003\u03be\u01df\u0000\u1390\u13c1\u0001\u0000\u0000\u0000"+
		"\u1391\u1393\u0003\u0582\u02c1\u0000\u1392\u1394\u0003\u0222\u0111\u0000"+
		"\u1393\u1392\u0001\u0000\u0000\u0000\u1393\u1394\u0001\u0000\u0000\u0000"+
		"\u1394\u1395\u0001\u0000\u0000\u0000\u1395\u1396\u0003\u03be\u01df\u0000"+
		"\u1396\u13c1\u0001\u0000\u0000\u0000\u1397\u1399\u0005D\u0000\u0000\u1398"+
		"\u139a\u0003\u0222\u0111\u0000\u1399\u1398\u0001\u0000\u0000\u0000\u1399"+
		"\u139a\u0001\u0000\u0000\u0000\u139a\u139b\u0001\u0000\u0000\u0000\u139b"+
		"\u13c1\u0003\u03be\u01df\u0000\u139c\u139e\u0005\u00f8\u0000\u0000\u139d"+
		"\u139f\u0003\u0222\u0111\u0000\u139e\u139d\u0001\u0000\u0000\u0000\u139e"+
		"\u139f\u0001\u0000\u0000\u0000\u139f\u13a0\u0001\u0000\u0000\u0000\u13a0"+
		"\u13c1\u0003\u03be\u01df\u0000\u13a1\u13a2\u0005\u00f8\u0000\u0000\u13a2"+
		"\u13a4\u0003\u0582\u02c1\u0000\u13a3\u13a5\u0003\u0222\u0111\u0000\u13a4"+
		"\u13a3\u0001\u0000\u0000\u0000\u13a4\u13a5\u0001\u0000\u0000\u0000\u13a5"+
		"\u13a6\u0001\u0000\u0000\u0000\u13a6\u13a7\u0003\u03be\u01df\u0000\u13a7"+
		"\u13c1\u0001\u0000\u0000\u0000\u13a8\u13a9\u0005\u00f8\u0000\u0000\u13a9"+
		"\u13ab\u0005D\u0000\u0000\u13aa\u13ac\u0003\u0222\u0111\u0000\u13ab\u13aa"+
		"\u0001\u0000\u0000\u0000\u13ab\u13ac\u0001\u0000\u0000\u0000\u13ac\u13ad"+
		"\u0001\u0000\u0000\u0000\u13ad\u13c1\u0003\u03be\u01df\u0000\u13ae\u13b0"+
		"\u0005\u00b6\u0000\u0000\u13af\u13b1\u0003\u0222\u0111\u0000\u13b0\u13af"+
		"\u0001\u0000\u0000\u0000\u13b0\u13b1\u0001\u0000\u0000\u0000\u13b1\u13b2"+
		"\u0001\u0000\u0000\u0000\u13b2\u13c1\u0003\u03be\u01df\u0000\u13b3\u13b4"+
		"\u0005\u00b6\u0000\u0000\u13b4\u13b6\u0003\u0582\u02c1\u0000\u13b5\u13b7"+
		"\u0003\u0222\u0111\u0000\u13b6\u13b5\u0001\u0000\u0000\u0000\u13b6\u13b7"+
		"\u0001\u0000\u0000\u0000\u13b7\u13b8\u0001\u0000\u0000\u0000\u13b8\u13b9"+
		"\u0003\u03be\u01df\u0000\u13b9\u13c1\u0001\u0000\u0000\u0000\u13ba\u13bb"+
		"\u0005\u00b6\u0000\u0000\u13bb\u13bd\u0005D\u0000\u0000\u13bc\u13be\u0003"+
		"\u0222\u0111\u0000\u13bd\u13bc\u0001\u0000\u0000\u0000\u13bd\u13be\u0001"+
		"\u0000\u0000\u0000\u13be\u13bf\u0001\u0000\u0000\u0000\u13bf\u13c1\u0003"+
		"\u03be\u01df\u0000\u13c0\u136b\u0001\u0000\u0000\u0000\u13c0\u136c\u0001"+
		"\u0000\u0000\u0000\u13c0\u136f\u0001\u0000\u0000\u0000\u13c0\u1374\u0001"+
		"\u0000\u0000\u0000\u13c0\u1379\u0001\u0000\u0000\u0000\u13c0\u137e\u0001"+
		"\u0000\u0000\u0000\u13c0\u1383\u0001\u0000\u0000\u0000\u13c0\u138a\u0001"+
		"\u0000\u0000\u0000\u13c0\u1391\u0001\u0000\u0000\u0000\u13c0\u1397\u0001"+
		"\u0000\u0000\u0000\u13c0\u139c\u0001\u0000\u0000\u0000\u13c0\u13a1\u0001"+
		"\u0000\u0000\u0000\u13c0\u13a8\u0001\u0000\u0000\u0000\u13c0\u13ae\u0001"+
		"\u0000\u0000\u0000\u13c0\u13b3\u0001\u0000\u0000\u0000\u13c0\u13ba\u0001"+
		"\u0000\u0000\u0000\u13c1\u021f\u0001\u0000\u0000\u0000\u13c2\u13c3\u0007"+
		"\u0019\u0000\u0000\u13c3\u0221\u0001\u0000\u0000\u0000\u13c4\u13c5\u0003"+
		"\u0220\u0110\u0000\u13c5\u0223\u0001\u0000\u0000\u0000\u13c6\u13c7\u0005"+
		"g\u0000\u0000\u13c7\u13c8\u0003\u0228\u0114\u0000\u13c8\u13c9\u0005v\u0000"+
		"\u0000\u13c9\u13ca\u0003\u022e\u0117\u0000\u13ca\u13cb\u0005\u0084\u0000"+
		"\u0000\u13cb\u13cd\u0003\u0230\u0118\u0000\u13cc\u13ce\u0003\u0234\u011a"+
		"\u0000\u13cd\u13cc\u0001\u0000\u0000\u0000\u13cd\u13ce\u0001\u0000\u0000"+
		"\u0000\u13ce\u0225\u0001\u0000\u0000\u0000\u13cf\u13d0\u0005\u015c\u0000"+
		"\u0000\u13d0\u13d1\u0003\u0228\u0114\u0000\u13d1\u13d2\u0005v\u0000\u0000"+
		"\u13d2\u13d3\u0003\u022e\u0117\u0000\u13d3\u13d4\u0005f\u0000\u0000\u13d4"+
		"\u13d6\u0003\u0230\u0118\u0000\u13d5\u13d7\u0003h4\u0000\u13d6\u13d5\u0001"+
		"\u0000\u0000\u0000\u13d6\u13d7\u0001\u0000\u0000\u0000\u13d7\u13e5\u0001"+
		"\u0000\u0000\u0000\u13d8\u13d9\u0005\u015c\u0000\u0000\u13d9\u13da\u0005"+
		"g\u0000\u0000\u13da\u13db\u0005\u0136\u0000\u0000\u13db\u13dc\u0005d\u0000"+
		"\u0000\u13dc\u13dd\u0003\u0228\u0114\u0000\u13dd\u13de\u0005v\u0000\u0000"+
		"\u13de\u13df\u0003\u022e\u0117\u0000\u13df\u13e0\u0005f\u0000\u0000\u13e0"+
		"\u13e2\u0003\u0230\u0118\u0000\u13e1\u13e3\u0003h4\u0000\u13e2\u13e1\u0001"+
		"\u0000\u0000\u0000\u13e2\u13e3\u0001\u0000\u0000\u0000\u13e3\u13e5\u0001"+
		"\u0000\u0000\u0000\u13e4\u13cf\u0001\u0000\u0000\u0000\u13e4\u13d8\u0001"+
		"\u0000\u0000\u0000\u13e5\u0227\u0001\u0000\u0000\u0000\u13e6\u13f6\u0003"+
		"\u022a\u0115\u0000\u13e7\u13f6\u0005D\u0000\u0000\u13e8\u13e9\u0005D\u0000"+
		"\u0000\u13e9\u13f6\u0005\u0145\u0000\u0000\u13ea\u13eb\u0005D\u0000\u0000"+
		"\u13eb\u13ec\u0005\u0002\u0000\u0000\u13ec\u13ed\u0003\u00d4j\u0000\u13ed"+
		"\u13ee\u0005\u0003\u0000\u0000\u13ee\u13f6\u0001\u0000\u0000\u0000\u13ef"+
		"\u13f0\u0005D\u0000\u0000\u13f0\u13f1\u0005\u0145\u0000\u0000\u13f1\u13f2"+
		"\u0005\u0002\u0000\u0000\u13f2\u13f3\u0003\u00d4j\u0000\u13f3\u13f4\u0005"+
		"\u0003\u0000\u0000\u13f4\u13f6\u0001\u0000\u0000\u0000\u13f5\u13e6\u0001"+
		"\u0000\u0000\u0000\u13f5\u13e7\u0001\u0000\u0000\u0000\u13f5\u13e8\u0001"+
		"\u0000\u0000\u0000\u13f5\u13ea\u0001\u0000\u0000\u0000\u13f5\u13ef\u0001"+
		"\u0000\u0000\u0000\u13f6\u0229\u0001\u0000\u0000\u0000\u13f7\u13fc\u0003"+
		"\u022c\u0116\u0000\u13f8\u13f9\u0005\u0006\u0000\u0000\u13f9\u13fb\u0003"+
		"\u022c\u0116\u0000\u13fa\u13f8\u0001\u0000\u0000\u0000\u13fb\u13fe\u0001"+
		"\u0000\u0000\u0000\u13fc\u13fa\u0001\u0000\u0000\u0000\u13fc\u13fd\u0001"+
		"\u0000\u0000\u0000\u13fd\u022b\u0001\u0000\u0000\u0000\u13fe\u13fc\u0001"+
		"\u0000\u0000\u0000\u13ff\u1401\u0005~\u0000\u0000\u1400\u1402\u0003\u00d2"+
		"i\u0000\u1401\u1400\u0001\u0000\u0000\u0000\u1401\u1402\u0001\u0000\u0000"+
		"\u0000\u1402\u1410\u0001\u0000\u0000\u0000\u1403\u1405\u0005|\u0000\u0000"+
		"\u1404\u1406\u0003\u00d2i\u0000\u1405\u1404\u0001\u0000\u0000\u0000\u1405"+
		"\u1406\u0001\u0000\u0000\u0000\u1406\u1410\u0001\u0000\u0000\u0000\u1407"+
		"\u1409\u0005T\u0000\u0000\u1408\u140a\u0003\u00d2i\u0000\u1409\u1408\u0001"+
		"\u0000\u0000\u0000\u1409\u140a\u0001\u0000\u0000\u0000\u140a\u1410\u0001"+
		"\u0000\u0000\u0000\u140b\u140d\u0003\u058a\u02c5\u0000\u140c\u140e\u0003"+
		"\u00d2i\u0000\u140d\u140c\u0001\u0000\u0000\u0000\u140d\u140e\u0001\u0000"+
		"\u0000\u0000\u140e\u1410\u0001\u0000\u0000\u0000\u140f\u13ff\u0001\u0000"+
		"\u0000\u0000\u140f\u1403\u0001\u0000\u0000\u0000\u140f\u1407\u0001\u0000"+
		"\u0000\u0000\u140f\u140b\u0001\u0000\u0000\u0000\u1410\u022d\u0001\u0000"+
		"\u0000\u0000\u1411\u144c\u0003\u0564\u02b2\u0000\u1412\u1413\u0005\u0082"+
		"\u0000\u0000\u1413\u144c\u0003\u0564\u02b2\u0000\u1414\u1415\u0005\u0167"+
		"\u0000\u0000\u1415\u144c\u0003\u0564\u02b2\u0000\u1416\u1417\u0005e\u0000"+
		"\u0000\u1417\u1418\u0005\u00d4\u0000\u0000\u1418\u1419\u0005\u019c\u0000"+
		"\u0000\u1419\u144c\u0003\u0568\u02b4\u0000\u141a\u141b\u0005e\u0000\u0000"+
		"\u141b\u141c\u0005\u016a\u0000\u0000\u141c\u144c\u0003\u0568\u02b4\u0000"+
		"\u141d\u141e\u0005\u00f9\u0000\u0000\u141e\u144c\u0003\u026e\u0137\u0000"+
		"\u141f\u1420\u0005\u0147\u0000\u0000\u1420\u144c\u0003\u026e\u0137\u0000"+
		"\u1421\u1422\u0005\u01e0\u0000\u0000\u1422\u144c\u0003\u026e\u0137\u0000"+
		"\u1423\u1424\u0005\u00d5\u0000\u0000\u1424\u144c\u0003\u0568\u02b4\u0000"+
		"\u1425\u1426\u0005\u00e3\u0000\u0000\u1426\u144c\u0003\u0206\u0103\u0000"+
		"\u1427\u1428\u0005\u0114\u0000\u0000\u1428\u144c\u0003\u0568\u02b4\u0000"+
		"\u1429\u142a\u0005\u0115\u0000\u0000\u142a\u142b\u0005\u0131\u0000\u0000"+
		"\u142b\u144c\u0003\u0122\u0091\u0000\u142c\u142d\u0005\u0162\u0000\u0000"+
		"\u142d\u144c\u0003\u0568\u02b4\u0000\u142e\u142f\u0005\u017e\u0000\u0000"+
		"\u142f\u144c\u0003\u0568\u02b4\u0000\u1430\u1431\u0005\u0187\u0000\u0000"+
		"\u1431\u144c\u0003\u0206\u0103\u0000\u1432\u1433\u0005D\u0000\u0000\u1433"+
		"\u1434\u0005\u017d\u0000\u0000\u1434\u1435\u0005j\u0000\u0000\u1435\u1436"+
		"\u0005\u0162\u0000\u0000\u1436\u144c\u0003\u0568\u02b4\u0000\u1437\u1438"+
		"\u0005D\u0000\u0000\u1438\u1439\u0005\u0168\u0000\u0000\u1439\u143a\u0005"+
		"j\u0000\u0000\u143a\u143b\u0005\u0162\u0000\u0000\u143b\u144c\u0003\u0568"+
		"\u02b4\u0000\u143c\u143d\u0005D\u0000\u0000\u143d\u143e\u0005\u00fa\u0000"+
		"\u0000\u143e\u143f\u0005j\u0000\u0000\u143f\u1440\u0005\u0162\u0000\u0000"+
		"\u1440\u144c\u0003\u0568\u02b4\u0000\u1441\u1442\u0005D\u0000\u0000\u1442"+
		"\u1443\u0005\u01ef\u0000\u0000\u1443\u1444\u0005j\u0000\u0000\u1444\u1445"+
		"\u0005\u0162\u0000\u0000\u1445\u144c\u0003\u0568\u02b4\u0000\u1446\u1447"+
		"\u0005D\u0000\u0000\u1447\u1448\u0005\u01ed\u0000\u0000\u1448\u1449\u0005"+
		"j\u0000\u0000\u1449\u144a\u0005\u0162\u0000\u0000\u144a\u144c\u0003\u0568"+
		"\u02b4\u0000\u144b\u1411\u0001\u0000\u0000\u0000\u144b\u1412\u0001\u0000"+
		"\u0000\u0000\u144b\u1414\u0001\u0000\u0000\u0000\u144b\u1416\u0001\u0000"+
		"\u0000\u0000\u144b\u141a\u0001\u0000\u0000\u0000\u144b\u141d\u0001\u0000"+
		"\u0000\u0000\u144b\u141f\u0001\u0000\u0000\u0000\u144b\u1421\u0001\u0000"+
		"\u0000\u0000\u144b\u1423\u0001\u0000\u0000\u0000\u144b\u1425\u0001\u0000"+
		"\u0000\u0000\u144b\u1427\u0001\u0000\u0000\u0000\u144b\u1429\u0001\u0000"+
		"\u0000\u0000\u144b\u142c\u0001\u0000\u0000\u0000\u144b\u142e\u0001\u0000"+
		"\u0000\u0000\u144b\u1430\u0001\u0000\u0000\u0000\u144b\u1432\u0001\u0000"+
		"\u0000\u0000\u144b\u1437\u0001\u0000\u0000\u0000\u144b\u143c\u0001\u0000"+
		"\u0000\u0000\u144b\u1441\u0001\u0000\u0000\u0000\u144b\u1446\u0001\u0000"+
		"\u0000\u0000\u144c\u022f\u0001\u0000\u0000\u0000\u144d\u1452\u0003\u0232"+
		"\u0119\u0000\u144e\u144f\u0005\u0006\u0000\u0000\u144f\u1451\u0003\u0232"+
		"\u0119\u0000\u1450\u144e\u0001\u0000\u0000\u0000\u1451\u1454\u0001\u0000"+
		"\u0000\u0000\u1452\u1450\u0001\u0000\u0000\u0000\u1452\u1453\u0001\u0000"+
		"\u0000\u0000\u1453\u0231\u0001\u0000\u0000\u0000\u1454\u1452\u0001\u0000"+
		"\u0000\u0000\u1455\u1459\u0003\u0586\u02c3\u0000\u1456\u1457\u0005h\u0000"+
		"\u0000\u1457\u1459\u0003\u0586\u02c3\u0000\u1458\u1455\u0001\u0000\u0000"+
		"\u0000\u1458\u1456\u0001\u0000\u0000\u0000\u1459\u0233\u0001\u0000\u0000"+
		"\u0000\u145a\u145b\u0005\u008f\u0000\u0000\u145b\u145c\u0005g\u0000\u0000"+
		"\u145c\u145d\u0005\u0136\u0000\u0000\u145d\u0235\u0001\u0000\u0000\u0000"+
		"\u145e\u145f\u0005g\u0000\u0000\u145f\u1460\u0003\u022a\u0115\u0000\u1460"+
		"\u1461\u0005\u0084\u0000\u0000\u1461\u1463\u0003\u0588\u02c4\u0000\u1462"+
		"\u1464\u0003\u023a\u011d\u0000\u1463\u1462\u0001\u0000\u0000\u0000\u1463"+
		"\u1464\u0001\u0000\u0000\u0000\u1464\u1466\u0001\u0000\u0000\u0000\u1465"+
		"\u1467\u0003\u023c\u011e\u0000\u1466\u1465\u0001\u0000\u0000\u0000\u1466"+
		"\u1467\u0001\u0000\u0000\u0000\u1467\u0237\u0001\u0000\u0000\u0000\u1468"+
		"\u1469\u0005\u015c\u0000\u0000\u1469\u146a\u0003\u022a\u0115\u0000\u146a"+
		"\u146b\u0005f\u0000\u0000\u146b\u146d\u0003\u0588\u02c4\u0000\u146c\u146e"+
		"\u0003\u023c\u011e\u0000\u146d\u146c\u0001\u0000\u0000\u0000\u146d\u146e"+
		"\u0001\u0000\u0000\u0000\u146e\u1470\u0001\u0000\u0000\u0000\u146f\u1471"+
		"\u0003h4\u0000\u1470\u146f\u0001\u0000\u0000\u0000\u1470\u1471\u0001\u0000"+
		"\u0000\u0000\u1471\u1480\u0001\u0000\u0000\u0000\u1472\u1473\u0005\u015c"+
		"\u0000\u0000\u1473\u1474\u0005\u00ac\u0000\u0000\u1474\u1475\u0005\u0136"+
		"\u0000\u0000\u1475\u1476\u0005d\u0000\u0000\u1476\u1477\u0003\u022a\u0115"+
		"\u0000\u1477\u1478\u0005f\u0000\u0000\u1478\u147a\u0003\u0588\u02c4\u0000"+
		"\u1479\u147b\u0003\u023c\u011e\u0000\u147a\u1479\u0001\u0000\u0000\u0000"+
		"\u147a\u147b\u0001\u0000\u0000\u0000\u147b\u147d\u0001\u0000\u0000\u0000"+
		"\u147c\u147e\u0003h4\u0000\u147d\u147c\u0001\u0000\u0000\u0000\u147d\u147e"+
		"\u0001\u0000\u0000\u0000\u147e\u1480\u0001\u0000\u0000\u0000\u147f\u1468"+
		"\u0001\u0000\u0000\u0000\u147f\u1472\u0001\u0000\u0000\u0000\u1480\u0239"+
		"\u0001\u0000\u0000\u0000\u1481\u1482\u0005\u008f\u0000\u0000\u1482\u1483"+
		"\u0005\u00ac\u0000\u0000\u1483\u1484\u0005\u0136\u0000\u0000\u1484\u023b"+
		"\u0001\u0000\u0000\u0000\u1485\u1486\u0005\u00fc\u0000\u0000\u1486\u1487"+
		"\u0005\u00b9\u0000\u0000\u1487\u1488\u0003\u0586\u02c3\u0000\u1488\u023d"+
		"\u0001\u0000\u0000\u0000\u1489\u148a\u0005\u00b0\u0000\u0000\u148a\u148b"+
		"\u0005[\u0000\u0000\u148b\u148c\u0005\u0145\u0000\u0000\u148c\u148d\u0003"+
		"\u0240\u0120\u0000\u148d\u148e\u0003\u0244\u0122\u0000\u148e\u023f\u0001"+
		"\u0000\u0000\u0000\u148f\u1491\u0003\u0242\u0121\u0000\u1490\u148f\u0001"+
		"\u0000\u0000\u0000\u1491\u1494\u0001\u0000\u0000\u0000\u1492\u1490\u0001"+
		"\u0000\u0000\u0000\u1492\u1493\u0001\u0000\u0000\u0000\u1493\u0241\u0001"+
		"\u0000\u0000\u0000\u1494\u1492\u0001\u0000\u0000\u0000\u1495\u1496\u0005"+
		"j\u0000\u0000\u1496\u1497\u0005\u0162\u0000\u0000\u1497\u149f\u0003\u0568"+
		"\u02b4\u0000\u1498\u1499\u0005d\u0000\u0000\u1499\u149a\u0005\u015d\u0000"+
		"\u0000\u149a\u149f\u0003\u0588\u02c4\u0000\u149b\u149c\u0005d\u0000\u0000"+
		"\u149c\u149d\u0005\u0089\u0000\u0000\u149d\u149f\u0003\u0588\u02c4\u0000"+
		"\u149e\u1495\u0001\u0000\u0000\u0000\u149e\u1498\u0001\u0000\u0000\u0000"+
		"\u149e\u149b\u0001\u0000\u0000\u0000\u149f\u0243\u0001\u0000\u0000\u0000"+
		"\u14a0\u14a1\u0005g\u0000\u0000\u14a1\u14a2\u0003\u0228\u0114\u0000\u14a2"+
		"\u14a3\u0005v\u0000\u0000\u14a3\u14a4\u0003\u0246\u0123\u0000\u14a4\u14a5"+
		"\u0005\u0084\u0000\u0000\u14a5\u14a7\u0003\u0230\u0118\u0000\u14a6\u14a8"+
		"\u0003\u0234\u011a\u0000\u14a7\u14a6\u0001\u0000\u0000\u0000\u14a7\u14a8"+
		"\u0001\u0000\u0000\u0000\u14a8\u14bf\u0001\u0000\u0000\u0000\u14a9\u14aa"+
		"\u0005\u015c\u0000\u0000\u14aa\u14ab\u0003\u0228\u0114\u0000\u14ab\u14ac"+
		"\u0005v\u0000\u0000\u14ac\u14ad\u0003\u0246\u0123\u0000\u14ad\u14ae\u0005"+
		"f\u0000\u0000\u14ae\u14b0\u0003\u0230\u0118\u0000\u14af\u14b1\u0003h4"+
		"\u0000\u14b0\u14af\u0001\u0000\u0000\u0000\u14b0\u14b1\u0001\u0000\u0000"+
		"\u0000\u14b1\u14bf\u0001\u0000\u0000\u0000\u14b2\u14b3\u0005\u015c\u0000"+
		"\u0000\u14b3\u14b4\u0005g\u0000\u0000\u14b4\u14b5\u0005\u0136\u0000\u0000"+
		"\u14b5\u14b6\u0005d\u0000\u0000\u14b6\u14b7\u0003\u0228\u0114\u0000\u14b7"+
		"\u14b8\u0005v\u0000\u0000\u14b8\u14b9\u0003\u0246\u0123\u0000\u14b9\u14ba"+
		"\u0005f\u0000\u0000\u14ba\u14bc\u0003\u0230\u0118\u0000\u14bb\u14bd\u0003"+
		"h4\u0000\u14bc\u14bb\u0001\u0000\u0000\u0000\u14bc\u14bd\u0001\u0000\u0000"+
		"\u0000\u14bd\u14bf\u0001\u0000\u0000\u0000\u14be\u14a0\u0001\u0000\u0000"+
		"\u0000\u14be\u14a9\u0001\u0000\u0000\u0000\u14be\u14b2\u0001\u0000\u0000"+
		"\u0000\u14bf\u0245\u0001\u0000\u0000\u0000\u14c0\u14c1\u0007\u001a\u0000"+
		"\u0000\u14c1\u0247\u0001\u0000\u0000\u0000\u14c2\u14c4\u0005T\u0000\u0000"+
		"\u14c3\u14c5\u0003\u024a\u0125\u0000\u14c4\u14c3\u0001\u0000\u0000\u0000"+
		"\u14c4\u14c5\u0001\u0000\u0000\u0000\u14c5\u14c6\u0001\u0000\u0000\u0000"+
		"\u14c6\u14c8\u0005\u0108\u0000\u0000\u14c7\u14c9\u0003\u024e\u0127\u0000"+
		"\u14c8\u14c7\u0001\u0000\u0000\u0000\u14c8\u14c9\u0001\u0000\u0000\u0000"+
		"\u14c9\u14cb\u0001\u0000\u0000\u0000\u14ca\u14cc\u0003\u0250\u0128\u0000"+
		"\u14cb\u14ca\u0001\u0000\u0000\u0000\u14cb\u14cc\u0001\u0000\u0000\u0000"+
		"\u14cc\u14cd\u0001\u0000\u0000\u0000\u14cd\u14ce\u0005v\u0000\u0000\u14ce"+
		"\u14d0\u0003\u0430\u0218\u0000\u14cf\u14d1\u0003\u0252\u0129\u0000\u14d0"+
		"\u14cf\u0001\u0000\u0000\u0000\u14d0\u14d1\u0001\u0000\u0000\u0000\u14d1"+
		"\u14d2\u0001\u0000\u0000\u0000\u14d2\u14d3\u0005\u0002\u0000\u0000\u14d3"+
		"\u14d4\u0003\u0254\u012a\u0000\u14d4\u14d6\u0005\u0003\u0000\u0000\u14d5"+
		"\u14d7\u0003\u025a\u012d\u0000\u14d6\u14d5\u0001\u0000\u0000\u0000\u14d6"+
		"\u14d7\u0001\u0000\u0000\u0000\u14d7\u14d9\u0001\u0000\u0000\u0000\u14d8"+
		"\u14da\u0003r9\u0000\u14d9\u14d8\u0001\u0000\u0000\u0000\u14d9\u14da\u0001"+
		"\u0000\u0000\u0000\u14da\u14dc\u0001\u0000\u0000\u0000\u14db\u14dd\u0003"+
		"\u00fa}\u0000\u14dc\u14db\u0001\u0000\u0000\u0000\u14dc\u14dd\u0001\u0000"+
		"\u0000\u0000\u14dd\u14df\u0001\u0000\u0000\u0000\u14de\u14e0\u0003\u0444"+
		"\u0222\u0000\u14df\u14de\u0001\u0000\u0000\u0000\u14df\u14e0\u0001\u0000"+
		"\u0000\u0000\u14e0\u1502\u0001\u0000\u0000\u0000\u14e1\u14e3\u0005T\u0000"+
		"\u0000\u14e2\u14e4\u0003\u024a\u0125\u0000\u14e3\u14e2\u0001\u0000\u0000"+
		"\u0000\u14e3\u14e4\u0001\u0000\u0000\u0000\u14e4\u14e5\u0001\u0000\u0000"+
		"\u0000\u14e5\u14e7\u0005\u0108\u0000\u0000\u14e6\u14e8\u0003\u024e\u0127"+
		"\u0000\u14e7\u14e6\u0001\u0000\u0000\u0000\u14e7\u14e8\u0001\u0000\u0000"+
		"\u0000\u14e8\u14e9\u0001\u0000\u0000\u0000\u14e9\u14ea\u0005\u0102\u0000"+
		"\u0000\u14ea\u14eb\u0005s\u0000\u0000\u14eb\u14ec\u0005\u01ab\u0000\u0000"+
		"\u14ec\u14ed\u0003\u056a\u02b5\u0000\u14ed\u14ee\u0005v\u0000\u0000\u14ee"+
		"\u14f0\u0003\u0430\u0218\u0000\u14ef\u14f1\u0003\u0252\u0129\u0000\u14f0"+
		"\u14ef\u0001\u0000\u0000\u0000\u14f0\u14f1\u0001\u0000\u0000\u0000\u14f1"+
		"\u14f2\u0001\u0000\u0000\u0000\u14f2\u14f3\u0005\u0002\u0000\u0000\u14f3"+
		"\u14f4\u0003\u0254\u012a\u0000\u14f4\u14f6\u0005\u0003\u0000\u0000\u14f5"+
		"\u14f7\u0003\u025a\u012d\u0000\u14f6\u14f5\u0001\u0000\u0000\u0000\u14f6"+
		"\u14f7\u0001\u0000\u0000\u0000\u14f7\u14f9\u0001\u0000\u0000\u0000\u14f8"+
		"\u14fa\u0003r9\u0000\u14f9\u14f8\u0001\u0000\u0000\u0000\u14f9\u14fa\u0001"+
		"\u0000\u0000\u0000\u14fa\u14fc\u0001\u0000\u0000\u0000\u14fb\u14fd\u0003"+
		"\u00fa}\u0000\u14fc\u14fb\u0001\u0000\u0000\u0000\u14fc\u14fd\u0001\u0000"+
		"\u0000\u0000\u14fd\u14ff\u0001\u0000\u0000\u0000\u14fe\u1500\u0003\u0444"+
		"\u0222\u0000\u14ff\u14fe\u0001\u0000\u0000\u0000\u14ff\u1500\u0001\u0000"+
		"\u0000\u0000\u1500\u1502\u0001\u0000\u0000\u0000\u1501\u14c2\u0001\u0000"+
		"\u0000\u0000\u1501\u14e1\u0001\u0000\u0000\u0000\u1502\u0249\u0001\u0000"+
		"\u0000\u0000\u1503\u1504\u0005\u0088\u0000\u0000\u1504\u024b\u0001\u0000"+
		"\u0000\u0000\u1505\u1506\u0003\u058a\u02c5\u0000\u1506\u024d\u0001\u0000"+
		"\u0000\u0000\u1507\u1508\u0005\u0093\u0000\u0000\u1508\u024f\u0001\u0000"+
		"\u0000\u0000\u1509\u150a\u0003\u056a\u02b5\u0000\u150a\u0251\u0001\u0000"+
		"\u0000\u0000\u150b\u150c\u0005\u008a\u0000\u0000\u150c\u150d\u0003\u056a"+
		"\u02b5\u0000\u150d\u0253\u0001\u0000\u0000\u0000\u150e\u1513\u0003\u0258"+
		"\u012c\u0000\u150f\u1510\u0005\u0006\u0000\u0000\u1510\u1512\u0003\u0258"+
		"\u012c\u0000\u1511\u150f\u0001\u0000\u0000\u0000\u1512\u1515\u0001\u0000"+
		"\u0000\u0000\u1513\u1511\u0001\u0000\u0000\u0000\u1513\u1514\u0001\u0000"+
		"\u0000\u0000\u1514\u0255\u0001\u0000\u0000\u0000\u1515\u1513\u0001\u0000"+
		"\u0000\u0000\u1516\u1518\u0003\u025e\u012f\u0000\u1517\u1516\u0001\u0000"+
		"\u0000\u0000\u1517\u1518\u0001\u0000\u0000\u0000\u1518\u151a\u0001\u0000"+
		"\u0000\u0000\u1519\u151b\u0003\u0260\u0130\u0000\u151a\u1519\u0001\u0000"+
		"\u0000\u0000\u151a\u151b\u0001\u0000\u0000\u0000\u151b\u151d\u0001\u0000"+
		"\u0000\u0000\u151c\u151e\u0003\u0262\u0131\u0000\u151d\u151c\u0001\u0000"+
		"\u0000\u0000\u151d\u151e\u0001\u0000\u0000\u0000\u151e\u1520\u0001\u0000"+
		"\u0000\u0000\u151f\u1521\u0003\u0264\u0132\u0000\u1520\u151f\u0001\u0000"+
		"\u0000\u0000\u1520\u1521\u0001\u0000\u0000\u0000\u1521\u152e\u0001\u0000"+
		"\u0000\u0000\u1522\u1524\u0003\u025e\u012f\u0000\u1523\u1522\u0001\u0000"+
		"\u0000\u0000\u1523\u1524\u0001\u0000\u0000\u0000\u1524\u1525\u0001\u0000"+
		"\u0000\u0000\u1525\u1526\u0003\u0208\u0104\u0000\u1526\u1528\u0003p8\u0000"+
		"\u1527\u1529\u0003\u0262\u0131\u0000\u1528\u1527\u0001\u0000\u0000\u0000"+
		"\u1528\u1529\u0001\u0000\u0000\u0000\u1529\u152b\u0001\u0000\u0000\u0000"+
		"\u152a\u152c\u0003\u0264\u0132\u0000\u152b\u152a\u0001\u0000\u0000\u0000"+
		"\u152b\u152c\u0001\u0000\u0000\u0000\u152c\u152e\u0001\u0000\u0000\u0000"+
		"\u152d\u1517\u0001\u0000\u0000\u0000\u152d\u1523\u0001\u0000\u0000\u0000"+
		"\u152e\u0257\u0001\u0000\u0000\u0000\u152f\u1530\u0003\u058a\u02c5\u0000"+
		"\u1530\u1531\u0003\u0256\u012b\u0000\u1531\u153b\u0001\u0000\u0000\u0000"+
		"\u1532\u1533\u0003\u04c0\u0260\u0000\u1533\u1534\u0003\u0256\u012b\u0000"+
		"\u1534\u153b\u0001\u0000\u0000\u0000\u1535\u1536\u0005\u0002\u0000\u0000"+
		"\u1536\u1537\u0003\u048a\u0245\u0000\u1537\u1538\u0005\u0003\u0000\u0000"+
		"\u1538\u1539\u0003\u0256\u012b\u0000\u1539\u153b\u0001\u0000\u0000\u0000"+
		"\u153a\u152f\u0001\u0000\u0000\u0000\u153a\u1532\u0001\u0000\u0000\u0000"+
		"\u153a\u1535\u0001\u0000\u0000\u0000\u153b\u0259\u0001\u0000\u0000\u0000"+
		"\u153c\u153d\u0005\u01df\u0000\u0000\u153d\u153e\u0005\u0002\u0000\u0000"+
		"\u153e\u153f\u0003\u025c\u012e\u0000\u153f\u1540\u0005\u0003\u0000\u0000"+
		"\u1540\u025b\u0001\u0000\u0000\u0000\u1541\u1546\u0003\u0258\u012c\u0000"+
		"\u1542\u1543\u0005\u0006\u0000\u0000\u1543\u1545\u0003\u0258\u012c\u0000"+
		"\u1544\u1542\u0001\u0000\u0000\u0000\u1545\u1548\u0001\u0000\u0000\u0000"+
		"\u1546\u1544\u0001\u0000\u0000\u0000\u1546\u1547\u0001\u0000\u0000\u0000"+
		"\u1547\u025d\u0001\u0000\u0000\u0000\u1548\u1546\u0001\u0000\u0000\u0000"+
		"\u1549\u154a\u0005Q\u0000\u0000\u154a\u154b\u0003\u0208\u0104\u0000\u154b"+
		"\u025f\u0001\u0000\u0000\u0000\u154c\u154d\u0003\u0208\u0104\u0000\u154d"+
		"\u0261\u0001\u0000\u0000\u0000\u154e\u154f\u0007\u001b\u0000\u0000\u154f"+
		"\u0263\u0001\u0000\u0000\u0000\u1550\u1551\u0005\u0130\u0000\u0000\u1551"+
		"\u1555\u0005\u00f5\u0000\u0000\u1552\u1553\u0005\u0130\u0000\u0000\u1553"+
		"\u1555\u0005\u0116\u0000\u0000\u1554\u1550\u0001\u0000\u0000\u0000\u1554"+
		"\u1552\u0001\u0000\u0000\u0000\u1555\u0265\u0001\u0000\u0000\u0000\u1556"+
		"\u1558\u0005T\u0000\u0000\u1557\u1559\u0003\u0268\u0134\u0000\u1558\u1557"+
		"\u0001\u0000\u0000\u0000\u1558\u1559\u0001\u0000\u0000\u0000\u1559\u155a"+
		"\u0001\u0000\u0000\u0000\u155a\u155b\u0007\u0017\u0000\u0000\u155b\u155c"+
		"\u0003\u0570\u02b8\u0000\u155c\u1566\u0003\u0272\u0139\u0000\u155d\u1564"+
		"\u0005\u015b\u0000\u0000\u155e\u1565\u0003\u027c\u013e\u0000\u155f\u1560"+
		"\u0005\u0082\u0000\u0000\u1560\u1561\u0005\u0002\u0000\u0000\u1561\u1562"+
		"\u0003\u029a\u014d\u0000\u1562\u1563\u0005\u0003\u0000\u0000\u1563\u1565"+
		"\u0001\u0000\u0000\u0000\u1564\u155e\u0001\u0000\u0000\u0000\u1564\u155f"+
		"\u0001\u0000\u0000\u0000\u1565\u1567\u0001\u0000\u0000\u0000\u1566\u155d"+
		"\u0001\u0000\u0000\u0000\u1566\u1567\u0001\u0000\u0000\u0000\u1567\u1568"+
		"\u0001\u0000\u0000\u0000\u1568\u1569\u0003\u028c\u0146\u0000\u1569\u0267"+
		"\u0001\u0000\u0000\u0000\u156a\u156b\u0005x\u0000\u0000\u156b\u156c\u0005"+
		"\u0156\u0000\u0000\u156c\u0269\u0001\u0000\u0000\u0000\u156d\u156f\u0005"+
		"\u0002\u0000\u0000\u156e\u1570\u0003\u026c\u0136\u0000\u156f\u156e\u0001"+
		"\u0000\u0000\u0000\u156f\u1570\u0001\u0000\u0000\u0000\u1570\u1571\u0001"+
		"\u0000\u0000\u0000\u1571\u1572\u0005\u0003\u0000\u0000\u1572\u026b\u0001"+
		"\u0000\u0000\u0000\u1573\u1578\u0003\u0276\u013b\u0000\u1574\u1575\u0005"+
		"\u0006\u0000\u0000\u1575\u1577\u0003\u0276\u013b\u0000\u1576\u1574\u0001"+
		"\u0000\u0000\u0000\u1577\u157a\u0001\u0000\u0000\u0000\u1578\u1576\u0001"+
		"\u0000\u0000\u0000\u1578\u1579\u0001\u0000\u0000\u0000\u1579\u026d\u0001"+
		"\u0000\u0000\u0000\u157a\u1578\u0001\u0000\u0000\u0000\u157b\u1580\u0003"+
		"\u0270\u0138\u0000\u157c\u157d\u0005\u0006\u0000\u0000\u157d\u157f\u0003"+
		"\u0270\u0138\u0000\u157e\u157c\u0001\u0000\u0000\u0000\u157f\u1582\u0001"+
		"\u0000\u0000\u0000\u1580\u157e\u0001\u0000\u0000\u0000\u1580\u1581\u0001"+
		"\u0000\u0000\u0000\u1581\u026f\u0001\u0000\u0000\u0000\u1582\u1580\u0001"+
		"\u0000\u0000\u0000\u1583\u1584\u0003\u0570\u02b8\u0000\u1584\u1585\u0003"+
		"\u026a\u0135\u0000\u1585\u158c\u0001\u0000\u0000\u0000\u1586\u158c\u0003"+
		"\u0598\u02cc\u0000\u1587\u1589\u0003\u058a\u02c5\u0000\u1588\u158a\u0003"+
		"\u052e\u0297\u0000\u1589\u1588\u0001\u0000\u0000\u0000\u1589\u158a\u0001"+
		"\u0000\u0000\u0000\u158a\u158c\u0001\u0000\u0000\u0000\u158b\u1583\u0001"+
		"\u0000\u0000\u0000\u158b\u1586\u0001\u0000\u0000\u0000\u158b\u1587\u0001"+
		"\u0000\u0000\u0000\u158c\u0271\u0001\u0000\u0000\u0000\u158d\u158f\u0005"+
		"\u0002\u0000\u0000\u158e\u1590\u0003\u0274\u013a\u0000\u158f\u158e\u0001"+
		"\u0000\u0000\u0000\u158f\u1590\u0001\u0000\u0000\u0000\u1590\u1591\u0001"+
		"\u0000\u0000\u0000\u1591\u1592\u0005\u0003\u0000\u0000\u1592\u0273\u0001"+
		"\u0000\u0000\u0000\u1593\u1598\u0003\u0280\u0140\u0000\u1594\u1595\u0005"+
		"\u0006\u0000\u0000\u1595\u1597\u0003\u0280\u0140\u0000\u1596\u1594\u0001"+
		"\u0000\u0000\u0000\u1597\u159a\u0001\u0000\u0000\u0000\u1598\u1596\u0001"+
		"\u0000\u0000\u0000\u1598\u1599\u0001\u0000\u0000\u0000\u1599\u0275\u0001"+
		"\u0000\u0000\u0000\u159a\u1598\u0001\u0000\u0000\u0000\u159b\u159d\u0003"+
		"\u0278\u013c\u0000\u159c\u159e\u0003\u027a\u013d\u0000\u159d\u159c\u0001"+
		"\u0000\u0000\u0000\u159d\u159e\u0001\u0000\u0000\u0000\u159e\u159f\u0001"+
		"\u0000\u0000\u0000\u159f\u15a0\u0003\u027e\u013f\u0000\u15a0\u15a9\u0001"+
		"\u0000\u0000\u0000\u15a1\u15a3\u0003\u027a\u013d\u0000\u15a2\u15a4\u0003"+
		"\u0278\u013c\u0000\u15a3\u15a2\u0001\u0000\u0000\u0000\u15a3\u15a4\u0001"+
		"\u0000\u0000\u0000\u15a4\u15a5\u0001\u0000\u0000\u0000\u15a5\u15a6\u0003"+
		"\u027e\u013f\u0000\u15a6\u15a9\u0001\u0000\u0000\u0000\u15a7\u15a9\u0003"+
		"\u027e\u013f\u0000\u15a8\u159b\u0001\u0000\u0000\u0000\u15a8\u15a1\u0001"+
		"\u0000\u0000\u0000\u15a8\u15a7\u0001\u0000\u0000\u0000\u15a9\u0277\u0001"+
		"\u0000\u0000\u0000\u15aa\u15ac\u0005j\u0000\u0000\u15ab\u15ad\u0005\u01eb"+
		"\u0000\u0000\u15ac\u15ab\u0001\u0000\u0000\u0000\u15ac\u15ad\u0001\u0000"+
		"\u0000\u0000\u15ad\u15b2\u0001\u0000\u0000\u0000\u15ae\u15b2\u0005\u01eb"+
		"\u0000\u0000\u15af\u15b2\u0005\u01af\u0000\u0000\u15b0\u15b2\u0005\u008b"+
		"\u0000\u0000\u15b1\u15aa\u0001\u0000\u0000\u0000\u15b1\u15ae\u0001\u0000"+
		"\u0000\u0000\u15b1\u15af\u0001\u0000\u0000\u0000\u15b1\u15b0\u0001\u0000"+
		"\u0000\u0000\u15b2\u0279\u0001\u0000\u0000\u0000\u15b3\u15b4\u0003\u058c"+
		"\u02c6\u0000\u15b4\u027b\u0001\u0000\u0000\u0000\u15b5\u15b6\u0003\u027e"+
		"\u013f\u0000\u15b6\u027d\u0001\u0000\u0000\u0000\u15b7\u15c1\u0003\u045c"+
		"\u022e\u0000\u15b8\u15ba\u0005\u01be\u0000\u0000\u15b9\u15b8\u0001\u0000"+
		"\u0000\u0000\u15b9\u15ba\u0001\u0000\u0000\u0000\u15ba\u15bb\u0001\u0000"+
		"\u0000\u0000\u15bb\u15bc\u0003\u058c\u02c6\u0000\u15bc\u15bd\u0003\u020a"+
		"\u0105\u0000\u15bd\u15be\u0005\u001b\u0000\u0000\u15be\u15bf\u0005\u0187"+
		"\u0000\u0000\u15bf\u15c1\u0001\u0000\u0000\u0000\u15c0\u15b7\u0001\u0000"+
		"\u0000\u0000\u15c0\u15b9\u0001\u0000\u0000\u0000\u15c1\u027f\u0001\u0000"+
		"\u0000\u0000\u15c2\u15c5\u0003\u0276\u013b\u0000\u15c3\u15c4\u0007\u001c"+
		"\u0000\u0000\u15c4\u15c6\u0003\u048a\u0245\u0000\u15c5\u15c3\u0001\u0000"+
		"\u0000\u0000\u15c5\u15c6\u0001\u0000\u0000\u0000\u15c6\u0281\u0001\u0000"+
		"\u0000\u0000\u15c7\u15c8\u0003\u0276\u013b\u0000\u15c8\u0283\u0001\u0000"+
		"\u0000\u0000\u15c9\u15d4\u0005\u0002\u0000\u0000\u15ca\u15d5\u0005\t\u0000"+
		"\u0000\u15cb\u15d5\u0003\u0286\u0143\u0000\u15cc\u15cd\u0005y\u0000\u0000"+
		"\u15cd\u15ce\u0005\u00b9\u0000\u0000\u15ce\u15d5\u0003\u0286\u0143\u0000"+
		"\u15cf\u15d0\u0003\u0286\u0143\u0000\u15d0\u15d1\u0005y\u0000\u0000\u15d1"+
		"\u15d2\u0005\u00b9\u0000\u0000\u15d2\u15d3\u0003\u0286\u0143\u0000\u15d3"+
		"\u15d5\u0001\u0000\u0000\u0000\u15d4\u15ca\u0001\u0000\u0000\u0000\u15d4"+
		"\u15cb\u0001\u0000\u0000\u0000\u15d4\u15cc\u0001\u0000\u0000\u0000\u15d4"+
		"\u15cf\u0001\u0000\u0000\u0000\u15d5\u15d6\u0001\u0000\u0000\u0000\u15d6"+
		"\u15d7\u0005\u0003\u0000\u0000\u15d7\u0285\u0001\u0000\u0000\u0000\u15d8"+
		"\u15dd\u0003\u0282\u0141\u0000\u15d9\u15da\u0005\u0006\u0000\u0000\u15da"+
		"\u15dc\u0003\u0282\u0141\u0000\u15db\u15d9\u0001\u0000\u0000\u0000\u15dc"+
		"\u15df\u0001\u0000\u0000\u0000\u15dd\u15db\u0001\u0000\u0000\u0000\u15dd"+
		"\u15de\u0001\u0000\u0000\u0000\u15de\u0287\u0001\u0000\u0000\u0000\u15df"+
		"\u15dd\u0001\u0000\u0000\u0000\u15e0\u15e1\u0003\u0570\u02b8\u0000\u15e1"+
		"\u15e2\u0003\u0284\u0142\u0000\u15e2\u0289\u0001\u0000\u0000\u0000\u15e3"+
		"\u15e8\u0003\u0288\u0144\u0000\u15e4\u15e5\u0005\u0006\u0000\u0000\u15e5"+
		"\u15e7\u0003\u0288\u0144\u0000\u15e6\u15e4\u0001\u0000\u0000\u0000\u15e7"+
		"\u15ea\u0001\u0000\u0000\u0000\u15e8\u15e6\u0001\u0000\u0000\u0000\u15e8"+
		"\u15e9\u0001\u0000\u0000\u0000\u15e9\u028b\u0001\u0000\u0000\u0000\u15ea"+
		"\u15e8\u0001\u0000\u0000\u0000\u15eb\u15ed\u0003\u0290\u0148\u0000\u15ec"+
		"\u15eb\u0001\u0000\u0000\u0000\u15ed\u15ee\u0001\u0000\u0000\u0000\u15ee"+
		"\u15ec\u0001\u0000\u0000\u0000\u15ee\u15ef\u0001\u0000\u0000\u0000\u15ef"+
		"\u15f0\u0001\u0000\u0000\u0000\u15f0\u15f1\u0006\u0146\uffff\uffff\u0000"+
		"\u15f1\u028d\u0001\u0000\u0000\u0000\u15f2\u15f3\u0005\u00bb\u0000\u0000"+
		"\u15f3\u15f4\u0005v\u0000\u0000\u15f4\u15f5\u0005t\u0000\u0000\u15f5\u1616"+
		"\u0005\u01f0\u0000\u0000\u15f6\u15f7\u0005\u015b\u0000\u0000\u15f7\u15f8"+
		"\u0005t\u0000\u0000\u15f8\u15f9\u0005v\u0000\u0000\u15f9\u15fa\u0005t"+
		"\u0000\u0000\u15fa\u1616\u0005\u01f0\u0000\u0000\u15fb\u1616\u0005\u0179"+
		"\u0000\u0000\u15fc\u1616\u0005\u0104\u0000\u0000\u15fd\u1616\u0005\u0171"+
		"\u0000\u0000\u15fe\u1616\u0005\u0198\u0000\u0000\u15ff\u1600\u0005\u00f3"+
		"\u0000\u0000\u1600\u1601\u0005\u0166\u0000\u0000\u1601\u1616\u0005\u00db"+
		"\u0000\u0000\u1602\u1603\u0005\u00f3\u0000\u0000\u1603\u1604\u0005\u0166"+
		"\u0000\u0000\u1604\u1616\u0005\u0110\u0000\u0000\u1605\u1606\u0005\u0166"+
		"\u0000\u0000\u1606\u1616\u0005\u00db\u0000\u0000\u1607\u1608\u0005\u0166"+
		"\u0000\u0000\u1608\u1616\u0005\u0110\u0000\u0000\u1609\u1616\u0005\u0117"+
		"\u0000\u0000\u160a\u160b\u0005s\u0000\u0000\u160b\u1616\u0005\u0117\u0000"+
		"\u0000\u160c\u160d\u0005\u00d0\u0000\u0000\u160d\u1616\u0003\u0120\u0090"+
		"\u0000\u160e\u160f\u0005\u015f\u0000\u0000\u160f\u1616\u0003\u0120\u0090"+
		"\u0000\u1610\u1611\u0005\u01f1\u0000\u0000\u1611\u1616\u0003\u0208\u0104"+
		"\u0000\u1612\u1616\u0003N\'\u0000\u1613\u1614\u0005\u01f2\u0000\u0000"+
		"\u1614\u1616\u0003\u058a\u02c5\u0000\u1615\u15f2\u0001\u0000\u0000\u0000"+
		"\u1615\u15f6\u0001\u0000\u0000\u0000\u1615\u15fb\u0001\u0000\u0000\u0000"+
		"\u1615\u15fc\u0001\u0000\u0000\u0000\u1615\u15fd\u0001\u0000\u0000\u0000"+
		"\u1615\u15fe\u0001\u0000\u0000\u0000\u1615\u15ff\u0001\u0000\u0000\u0000"+
		"\u1615\u1602\u0001\u0000\u0000\u0000\u1615\u1605\u0001\u0000\u0000\u0000"+
		"\u1615\u1607\u0001\u0000\u0000\u0000\u1615\u1609\u0001\u0000\u0000\u0000"+
		"\u1615\u160a\u0001\u0000\u0000\u0000\u1615\u160c\u0001\u0000\u0000\u0000"+
		"\u1615\u160e\u0001\u0000\u0000\u0000\u1615\u1610\u0001\u0000\u0000\u0000"+
		"\u1615\u1612\u0001\u0000\u0000\u0000\u1615\u1613\u0001\u0000\u0000\u0000"+
		"\u1616\u028f\u0001\u0000\u0000\u0000\u1617\u1618\u0005J\u0000\u0000\u1618"+
		"\u1620\u0003\u0292\u0149\u0000\u1619\u161a\u0005\u0114\u0000\u0000\u161a"+
		"\u1620\u0003D\"\u0000\u161b\u161c\u0005\u01e1\u0000\u0000\u161c\u1620"+
		"\u0003\u0294\u014a\u0000\u161d\u1620\u0005\u008e\u0000\u0000\u161e\u1620"+
		"\u0003\u028e\u0147\u0000\u161f\u1617\u0001\u0000\u0000\u0000\u161f\u1619"+
		"\u0001\u0000\u0000\u0000\u161f\u161b\u0001\u0000\u0000\u0000\u161f\u161d"+
		"\u0001\u0000\u0000\u0000\u161f\u161e\u0001\u0000\u0000\u0000\u1620\u0291"+
		"\u0001\u0000\u0000\u0000\u1621\u1627\u0003\u057c\u02be\u0000\u1622\u1623"+
		"\u0003\u057c\u02be\u0000\u1623\u1624\u0005\u0006\u0000\u0000\u1624\u1625"+
		"\u0003\u057c\u02be\u0000\u1625\u1627\u0001\u0000\u0000\u0000\u1626\u1621"+
		"\u0001\u0000\u0000\u0000\u1626\u1622\u0001\u0000\u0000\u0000\u1627\u0293"+
		"\u0001\u0000\u0000\u0000\u1628\u1629\u0005d\u0000\u0000\u1629\u162a\u0005"+
		"\u0187\u0000\u0000\u162a\u1631\u0003\u045c\u022e\u0000\u162b\u162c\u0005"+
		"\u0006\u0000\u0000\u162c\u162d\u0005d\u0000\u0000\u162d\u162e\u0005\u0187"+
		"\u0000\u0000\u162e\u1630\u0003\u045c\u022e\u0000\u162f\u162b\u0001\u0000"+
		"\u0000\u0000\u1630\u1633\u0001\u0000\u0000\u0000\u1631\u162f\u0001\u0000"+
		"\u0000\u0000\u1631\u1632\u0001\u0000\u0000\u0000\u1632\u0295\u0001\u0000"+
		"\u0000\u0000\u1633\u1631\u0001\u0000\u0000\u0000\u1634\u1635\u0005\u008f"+
		"\u0000\u0000\u1635\u1636\u0003\u01c8\u00e4\u0000\u1636\u0297\u0001\u0000"+
		"\u0000\u0000\u1637\u1638\u0003\u027a\u013d\u0000\u1638\u1639\u0003\u027e"+
		"\u013f\u0000\u1639\u0299\u0001\u0000\u0000\u0000\u163a\u163f\u0003\u0298"+
		"\u014c\u0000\u163b\u163c\u0005\u0006\u0000\u0000\u163c\u163e\u0003\u0298"+
		"\u014c\u0000\u163d\u163b\u0001\u0000\u0000\u0000\u163e\u1641\u0001\u0000"+
		"\u0000\u0000\u163f\u163d\u0001\u0000\u0000\u0000\u163f\u1640\u0001\u0000"+
		"\u0000\u0000\u1640\u029b\u0001\u0000\u0000\u0000\u1641\u163f\u0001\u0000"+
		"\u0000\u0000\u1642\u1643\u0005\u00b0\u0000\u0000\u1643\u1644\u0007\u001d"+
		"\u0000\u0000\u1644\u1645\u0003\u0270\u0138\u0000\u1645\u1647\u0003\u029e"+
		"\u014f\u0000\u1646\u1648\u0003\u02a0\u0150\u0000\u1647\u1646\u0001\u0000"+
		"\u0000\u0000\u1647\u1648\u0001\u0000\u0000\u0000\u1648\u029d\u0001\u0000"+
		"\u0000\u0000\u1649\u164b\u0003\u028e\u0147\u0000\u164a\u1649\u0001\u0000"+
		"\u0000\u0000\u164b\u164c\u0001\u0000\u0000\u0000\u164c\u164a\u0001\u0000"+
		"\u0000\u0000\u164c\u164d\u0001\u0000\u0000\u0000\u164d\u029f\u0001\u0000"+
		"\u0000\u0000\u164e\u164f\u0005\u015a\u0000\u0000\u164f\u02a1\u0001\u0000"+
		"\u0000\u0000\u1650\u1651\u0005\u00e5\u0000\u0000\u1651\u1652\u0005\u00f9"+
		"\u0000\u0000\u1652\u1654\u0003\u026e\u0137\u0000\u1653\u1655\u0003h4\u0000"+
		"\u1654\u1653\u0001\u0000\u0000\u0000\u1654\u1655\u0001\u0000\u0000\u0000"+
		"\u1655\u167b\u0001\u0000\u0000\u0000\u1656\u1657\u0005\u00e5\u0000\u0000"+
		"\u1657\u1658\u0005\u00f9\u0000\u0000\u1658\u1659\u0005\u0102\u0000\u0000"+
		"\u1659\u165a\u0005\u01ab\u0000\u0000\u165a\u165c\u0003\u026e\u0137\u0000"+
		"\u165b\u165d\u0003h4\u0000\u165c\u165b\u0001\u0000\u0000\u0000\u165c\u165d"+
		"\u0001\u0000\u0000\u0000\u165d\u167b\u0001\u0000\u0000\u0000\u165e\u165f"+
		"\u0005\u00e5\u0000\u0000\u165f\u1660\u0005\u0147\u0000\u0000\u1660\u1662"+
		"\u0003\u026e\u0137\u0000\u1661\u1663\u0003h4\u0000\u1662\u1661\u0001\u0000"+
		"\u0000\u0000\u1662\u1663\u0001\u0000\u0000\u0000\u1663\u167b\u0001\u0000"+
		"\u0000\u0000\u1664\u1665\u0005\u00e5\u0000\u0000\u1665\u1666\u0005\u0147"+
		"\u0000\u0000\u1666\u1667\u0005\u0102\u0000\u0000\u1667\u1668\u0005\u01ab"+
		"\u0000\u0000\u1668\u166a\u0003\u026e\u0137\u0000\u1669\u166b\u0003h4\u0000"+
		"\u166a\u1669\u0001\u0000\u0000\u0000\u166a\u166b\u0001\u0000\u0000\u0000"+
		"\u166b\u167b\u0001\u0000\u0000\u0000\u166c\u166d\u0005\u00e5\u0000\u0000"+
		"\u166d\u166e\u0005\u01e0\u0000\u0000\u166e\u1670\u0003\u026e\u0137\u0000"+
		"\u166f\u1671\u0003h4\u0000\u1670\u166f\u0001\u0000\u0000\u0000\u1670\u1671"+
		"\u0001\u0000\u0000\u0000\u1671\u167b\u0001\u0000\u0000\u0000\u1672\u1673"+
		"\u0005\u00e5\u0000\u0000\u1673\u1674\u0005\u01e0\u0000\u0000\u1674\u1675"+
		"\u0005\u0102\u0000\u0000\u1675\u1676\u0005\u01ab\u0000\u0000\u1676\u1678"+
		"\u0003\u026e\u0137\u0000\u1677\u1679\u0003h4\u0000\u1678\u1677\u0001\u0000"+
		"\u0000\u0000\u1678\u1679\u0001\u0000\u0000\u0000\u1679\u167b\u0001\u0000"+
		"\u0000\u0000\u167a\u1650\u0001\u0000\u0000\u0000\u167a\u1656\u0001\u0000"+
		"\u0000\u0000\u167a\u165e\u0001\u0000\u0000\u0000\u167a\u1664\u0001\u0000"+
		"\u0000\u0000\u167a\u166c\u0001\u0000\u0000\u0000\u167a\u1672\u0001\u0000"+
		"\u0000\u0000\u167b\u02a3\u0001\u0000\u0000\u0000\u167c\u167d\u0005\u00e5"+
		"\u0000\u0000\u167d\u167e\u0005\u00ae\u0000\u0000\u167e\u1680\u0003\u028a"+
		"\u0145\u0000\u167f\u1681\u0003h4\u0000\u1680\u167f\u0001\u0000\u0000\u0000"+
		"\u1680\u1681\u0001\u0000\u0000\u0000\u1681\u168b\u0001\u0000\u0000\u0000"+
		"\u1682\u1683\u0005\u00e5\u0000\u0000\u1683\u1684\u0005\u00ae\u0000\u0000"+
		"\u1684\u1685\u0005\u0102\u0000\u0000\u1685\u1686\u0005\u01ab\u0000\u0000"+
		"\u1686\u1688\u0003\u028a\u0145\u0000\u1687\u1689\u0003h4\u0000\u1688\u1687"+
		"\u0001\u0000\u0000\u0000\u1688\u1689\u0001\u0000\u0000\u0000\u1689\u168b"+
		"\u0001\u0000\u0000\u0000\u168a\u167c\u0001\u0000\u0000\u0000\u168a\u1682"+
		"\u0001\u0000\u0000\u0000\u168b\u02a5\u0001\u0000\u0000\u0000\u168c\u168d"+
		"\u0005\u00e5\u0000\u0000\u168d\u168e\u0005\u0135\u0000\u0000\u168e\u1690"+
		"\u0003\u02ac\u0156\u0000\u168f\u1691\u0003h4\u0000\u1690\u168f\u0001\u0000"+
		"\u0000\u0000\u1690\u1691\u0001\u0000\u0000\u0000\u1691\u169b\u0001\u0000"+
		"\u0000\u0000\u1692\u1693\u0005\u00e5\u0000\u0000\u1693\u1694\u0005\u0135"+
		"\u0000\u0000\u1694\u1695\u0005\u0102\u0000\u0000\u1695\u1696\u0005\u01ab"+
		"\u0000\u0000\u1696\u1698\u0003\u02ac\u0156\u0000\u1697\u1699\u0003h4\u0000"+
		"\u1698\u1697\u0001\u0000\u0000\u0000\u1698\u1699\u0001\u0000\u0000\u0000"+
		"\u1699\u169b\u0001\u0000\u0000\u0000\u169a\u168c\u0001\u0000\u0000\u0000"+
		"\u169a\u1692\u0001\u0000\u0000\u0000\u169b\u02a7\u0001\u0000\u0000\u0000"+
		"\u169c\u169d\u0005\u0002\u0000\u0000\u169d\u169e\u0003\u045c\u022e\u0000"+
		"\u169e\u169f\u0005\u0003\u0000\u0000\u169f\u16b3\u0001\u0000\u0000\u0000"+
		"\u16a0\u16a1\u0005\u0002\u0000\u0000\u16a1\u16a2\u0003\u045c\u022e\u0000"+
		"\u16a2\u16a3\u0005\u0006\u0000\u0000\u16a3\u16a4\u0003\u045c\u022e\u0000"+
		"\u16a4\u16a5\u0005\u0003\u0000\u0000\u16a5\u16b3\u0001\u0000\u0000\u0000"+
		"\u16a6\u16a7\u0005\u0002\u0000\u0000\u16a7\u16a8\u0005\u01b6\u0000\u0000"+
		"\u16a8\u16a9\u0005\u0006\u0000\u0000\u16a9\u16aa\u0003\u045c\u022e\u0000"+
		"\u16aa\u16ab\u0005\u0003\u0000\u0000\u16ab\u16b3\u0001\u0000\u0000\u0000"+
		"\u16ac\u16ad\u0005\u0002\u0000\u0000\u16ad\u16ae\u0003\u045c\u022e\u0000"+
		"\u16ae\u16af\u0005\u0006\u0000\u0000\u16af\u16b0\u0005\u01b6\u0000\u0000"+
		"\u16b0\u16b1\u0005\u0003\u0000\u0000\u16b1\u16b3\u0001\u0000\u0000\u0000"+
		"\u16b2\u169c\u0001\u0000\u0000\u0000\u16b2\u16a0\u0001\u0000\u0000\u0000"+
		"\u16b2\u16a6\u0001\u0000\u0000\u0000\u16b2\u16ac\u0001\u0000\u0000\u0000"+
		"\u16b3\u02a9\u0001\u0000\u0000\u0000\u16b4\u16b5\u0003\u058a\u02c5\u0000"+
		"\u16b5\u16b6\u0005\u000b\u0000\u0000\u16b6\u16b8\u0001\u0000\u0000\u0000"+
		"\u16b7\u16b4\u0001\u0000\u0000\u0000\u16b8\u16bb\u0001\u0000\u0000\u0000"+
		"\u16b9\u16b7\u0001\u0000\u0000\u0000\u16b9\u16ba\u0001\u0000\u0000\u0000"+
		"\u16ba\u16bc\u0001\u0000\u0000\u0000\u16bb\u16b9\u0001\u0000\u0000\u0000"+
		"\u16bc\u16bd\u0003\u04f8\u027c\u0000\u16bd\u02ab\u0001\u0000\u0000\u0000"+
		"\u16be\u16c3\u0003\u02ae\u0157\u0000\u16bf\u16c0\u0005\u0006\u0000\u0000"+
		"\u16c0\u16c2\u0003\u02ae\u0157\u0000\u16c1\u16bf\u0001\u0000\u0000\u0000"+
		"\u16c2\u16c5\u0001\u0000\u0000\u0000\u16c3\u16c1\u0001\u0000\u0000\u0000"+
		"\u16c3\u16c4\u0001\u0000\u0000\u0000\u16c4\u02ad\u0001\u0000\u0000\u0000"+
		"\u16c5\u16c3\u0001\u0000\u0000\u0000\u16c6\u16c7\u0003\u02aa\u0155\u0000"+
		"\u16c7\u16c8\u0003\u02a8\u0154\u0000\u16c8\u02af\u0001\u0000\u0000\u0000"+
		"\u16c9\u16ca\u0005_\u0000\u0000\u16ca\u16cb\u0003\u02b2\u0159\u0000\u16cb"+
		"\u02b1\u0001\u0000\u0000\u0000\u16cc\u16ce\u0003\u02b4\u015a\u0000\u16cd"+
		"\u16cc\u0001\u0000\u0000\u0000\u16ce\u16cf\u0001\u0000\u0000\u0000\u16cf"+
		"\u16cd\u0001\u0000\u0000\u0000\u16cf\u16d0\u0001\u0000\u0000\u0000\u16d0"+
		"\u02b3\u0001\u0000\u0000\u0000\u16d1\u16d5\u0003\u057c\u02be\u0000\u16d2"+
		"\u16d3\u0005\u0114\u0000\u0000\u16d3\u16d5\u0003D\"\u0000\u16d4\u16d1"+
		"\u0001\u0000\u0000\u0000\u16d4\u16d2\u0001\u0000\u0000\u0000\u16d5\u02b5"+
		"\u0001\u0000\u0000\u0000\u16d6\u16d7\u0005T\u0000\u0000\u16d7\u16d8\u0005"+
		"O\u0000\u0000\u16d8\u16d9\u0005\u0002\u0000\u0000\u16d9\u16da\u0003\u045c"+
		"\u022e\u0000\u16da\u16db\u0005J\u0000\u0000\u16db\u16dc\u0003\u045c\u022e"+
		"\u0000\u16dc\u16dd\u0005\u0003\u0000\u0000\u16dd\u16de\u0005\u008f\u0000"+
		"\u0000\u16de\u16df\u0005\u00f9\u0000\u0000\u16df\u16e1\u0003\u0270\u0138"+
		"\u0000\u16e0\u16e2\u0003\u02b8\u015c\u0000\u16e1\u16e0\u0001\u0000\u0000"+
		"\u0000\u16e1\u16e2\u0001\u0000\u0000\u0000\u16e2\u16fc\u0001\u0000\u0000"+
		"\u0000\u16e3\u16e4\u0005T\u0000\u0000\u16e4\u16e5\u0005O\u0000\u0000\u16e5"+
		"\u16e6\u0005\u0002\u0000\u0000\u16e6\u16e7\u0003\u045c\u022e\u0000\u16e7"+
		"\u16e8\u0005J\u0000\u0000\u16e8\u16e9\u0003\u045c\u022e\u0000\u16e9\u16ea"+
		"\u0005\u0003\u0000\u0000\u16ea\u16eb\u0005\u019a\u0000\u0000\u16eb\u16ed"+
		"\u0005\u00f9\u0000\u0000\u16ec\u16ee\u0003\u02b8\u015c\u0000\u16ed\u16ec"+
		"\u0001\u0000\u0000\u0000\u16ed\u16ee\u0001\u0000\u0000\u0000\u16ee\u16fc"+
		"\u0001\u0000\u0000\u0000\u16ef\u16f0\u0005T\u0000\u0000\u16f0\u16f1\u0005"+
		"O\u0000\u0000\u16f1\u16f2\u0005\u0002\u0000\u0000\u16f2\u16f3\u0003\u045c"+
		"\u022e\u0000\u16f3\u16f4\u0005J\u0000\u0000\u16f4\u16f5\u0003\u045c\u022e"+
		"\u0000\u16f5\u16f6\u0005\u0003\u0000\u0000\u16f6\u16f7\u0005\u008f\u0000"+
		"\u0000\u16f7\u16f9\u0005\u01af\u0000\u0000\u16f8\u16fa\u0003\u02b8\u015c"+
		"\u0000\u16f9\u16f8\u0001\u0000\u0000\u0000\u16f9\u16fa\u0001\u0000\u0000"+
		"\u0000\u16fa\u16fc\u0001\u0000\u0000\u0000\u16fb\u16d6\u0001\u0000\u0000"+
		"\u0000\u16fb\u16e3\u0001\u0000\u0000\u0000\u16fb\u16ef\u0001\u0000\u0000"+
		"\u0000\u16fc\u02b7\u0001\u0000\u0000\u0000\u16fd\u16fe\u0005J\u0000\u0000"+
		"\u16fe\u1702\u0005\u0105\u0000\u0000\u16ff\u1700\u0005J\u0000\u0000\u1700"+
		"\u1702\u0005\u00b3\u0000\u0000\u1701\u16fd\u0001\u0000\u0000\u0000\u1701"+
		"\u16ff\u0001\u0000\u0000\u0000\u1702\u02b9\u0001\u0000\u0000\u0000\u1703"+
		"\u1704\u0005\u00e5\u0000\u0000\u1704\u1706\u0005O\u0000\u0000\u1705\u1707"+
		"\u0003\u02bc\u015e\u0000\u1706\u1705\u0001\u0000\u0000\u0000\u1706\u1707"+
		"\u0001\u0000\u0000\u0000\u1707\u1708\u0001\u0000\u0000\u0000\u1708\u1709"+
		"\u0005\u0002\u0000\u0000\u1709\u170a\u0003\u045c\u022e\u0000\u170a\u170b"+
		"\u0005J\u0000\u0000\u170b\u170c\u0003\u045c\u022e\u0000\u170c\u170e\u0005"+
		"\u0003\u0000\u0000\u170d\u170f\u0003h4\u0000\u170e\u170d\u0001\u0000\u0000"+
		"\u0000\u170e\u170f\u0001\u0000\u0000\u0000\u170f\u02bb\u0001\u0000\u0000"+
		"\u0000\u1710\u1711\u0005\u0102\u0000\u0000\u1711\u1712\u0005\u01ab\u0000"+
		"\u0000\u1712\u02bd\u0001\u0000\u0000\u0000\u1713\u1715\u0005T\u0000\u0000"+
		"\u1714\u1716\u0003\u0268\u0134\u0000\u1715\u1714\u0001\u0000\u0000\u0000"+
		"\u1715\u1716\u0001\u0000\u0000\u0000\u1716\u1717\u0001\u0000\u0000\u0000"+
		"\u1717\u1718\u0005\u01e1\u0000\u0000\u1718\u1719\u0005d\u0000\u0000\u1719"+
		"\u171a\u0003\u045c\u022e\u0000\u171a\u171b\u0005\u0114\u0000\u0000\u171b"+
		"\u171c\u0003\u056a\u02b5\u0000\u171c\u171d\u0005\u0002\u0000\u0000\u171d"+
		"\u171e\u0003\u02c0\u0160\u0000\u171e\u171f\u0005\u0003\u0000\u0000\u171f"+
		"\u02bf\u0001\u0000\u0000\u0000\u1720\u1721\u0005f\u0000\u0000\u1721\u1722"+
		"\u0005\u01f3\u0000\u0000\u1722\u1723\u0005\u008f\u0000\u0000\u1723\u1724"+
		"\u0005\u00f9\u0000\u0000\u1724\u1725\u0003\u0270\u0138\u0000\u1725\u1726"+
		"\u0005\u0006\u0000\u0000\u1726\u1727\u0005\u0084\u0000\u0000\u1727\u1728"+
		"\u0005\u01f3\u0000\u0000\u1728\u1729\u0005\u008f\u0000\u0000\u1729\u172a"+
		"\u0005\u00f9\u0000\u0000\u172a\u172b\u0003\u0270\u0138\u0000\u172b\u1743"+
		"\u0001\u0000\u0000\u0000\u172c\u172d\u0005\u0084\u0000\u0000\u172d\u172e"+
		"\u0005\u01f3\u0000\u0000\u172e\u172f\u0005\u008f\u0000\u0000\u172f\u1730"+
		"\u0005\u00f9\u0000\u0000\u1730\u1731\u0003\u0270\u0138\u0000\u1731\u1732"+
		"\u0005\u0006\u0000\u0000\u1732\u1733\u0005f\u0000\u0000\u1733\u1734\u0005"+
		"\u01f3\u0000\u0000\u1734\u1735\u0005\u008f\u0000\u0000\u1735\u1736\u0005"+
		"\u00f9\u0000\u0000\u1736\u1737\u0003\u0270\u0138\u0000\u1737\u1743\u0001"+
		"\u0000\u0000\u0000\u1738\u1739\u0005f\u0000\u0000\u1739\u173a\u0005\u01f3"+
		"\u0000\u0000\u173a\u173b\u0005\u008f\u0000\u0000\u173b\u173c\u0005\u00f9"+
		"\u0000\u0000\u173c\u1743\u0003\u0270\u0138\u0000\u173d\u173e\u0005\u0084"+
		"\u0000\u0000\u173e\u173f\u0005\u01f3\u0000\u0000\u173f\u1740\u0005\u008f"+
		"\u0000\u0000\u1740\u1741\u0005\u00f9\u0000\u0000\u1741\u1743\u0003\u0270"+
		"\u0138\u0000\u1742\u1720\u0001\u0000\u0000\u0000\u1742\u172c\u0001\u0000"+
		"\u0000\u0000\u1742\u1738\u0001\u0000\u0000\u0000\u1742\u173d\u0001\u0000"+
		"\u0000\u0000\u1743\u02c1\u0001\u0000\u0000\u0000\u1744\u1745\u0005\u00e5"+
		"\u0000\u0000\u1745\u1747\u0005\u01e1\u0000\u0000\u1746\u1748\u0003\u02bc"+
		"\u015e\u0000\u1747\u1746\u0001\u0000\u0000\u0000\u1747\u1748\u0001\u0000"+
		"\u0000\u0000\u1748\u1749\u0001\u0000\u0000\u0000\u1749\u174a\u0005d\u0000"+
		"\u0000\u174a\u174b\u0003\u045c\u022e\u0000\u174b\u174c\u0005\u0114\u0000"+
		"\u0000\u174c\u174e\u0003\u056a\u02b5\u0000\u174d\u174f\u0003h4\u0000\u174e"+
		"\u174d\u0001\u0000\u0000\u0000\u174e\u174f\u0001\u0000\u0000\u0000\u174f"+
		"\u02c3\u0001\u0000\u0000\u0000\u1750\u1752\u0005\u0151\u0000\u0000\u1751"+
		"\u1753\u0003\u02ca\u0165\u0000\u1752\u1751\u0001\u0000\u0000\u0000\u1752"+
		"\u1753\u0001\u0000\u0000\u0000\u1753\u1754\u0001\u0000\u0000\u0000\u1754"+
		"\u1756\u0003\u02c6\u0163\u0000\u1755\u1757\u0003\u024e\u0127\u0000\u1756"+
		"\u1755\u0001\u0000\u0000\u0000\u1756\u1757\u0001\u0000\u0000\u0000\u1757"+
		"\u1758\u0001\u0000\u0000\u0000\u1758\u1759\u0003\u0566\u02b3\u0000\u1759"+
		"\u176f\u0001\u0000\u0000\u0000\u175a\u175c\u0005\u0151\u0000\u0000\u175b"+
		"\u175d\u0003\u02ca\u0165\u0000\u175c\u175b\u0001\u0000\u0000\u0000\u175c"+
		"\u175d\u0001\u0000\u0000\u0000\u175d\u175e\u0001\u0000\u0000\u0000\u175e"+
		"\u1760\u0005\u0162\u0000\u0000\u175f\u1761\u0003\u024e\u0127\u0000\u1760"+
		"\u175f\u0001\u0000\u0000\u0000\u1760\u1761\u0001\u0000\u0000\u0000\u1761"+
		"\u1762\u0001\u0000\u0000\u0000\u1762\u176f\u0003\u056a\u02b5\u0000\u1763"+
		"\u1765\u0005\u0151\u0000\u0000\u1764\u1766\u0003\u02ca\u0165\u0000\u1765"+
		"\u1764\u0001\u0000\u0000\u0000\u1765\u1766\u0001\u0000\u0000\u0000\u1766"+
		"\u1767\u0001\u0000\u0000\u0000\u1767\u1769\u0003\u02c8\u0164\u0000\u1768"+
		"\u176a\u0003\u024e\u0127\u0000\u1769\u1768\u0001\u0000\u0000\u0000\u1769"+
		"\u176a\u0001\u0000\u0000\u0000\u176a\u176c\u0001\u0000\u0000\u0000\u176b"+
		"\u176d\u0003\u024c\u0126\u0000\u176c\u176b\u0001\u0000\u0000\u0000\u176c"+
		"\u176d\u0001\u0000\u0000\u0000\u176d\u176f\u0001\u0000\u0000\u0000\u176e"+
		"\u1750\u0001\u0000\u0000\u0000\u176e\u175a\u0001\u0000\u0000\u0000\u176e"+
		"\u1763\u0001\u0000\u0000\u0000\u176f\u02c5\u0001\u0000\u0000\u0000\u1770"+
		"\u1771\u0007\u0013\u0000\u0000\u1771\u02c7\u0001\u0000\u0000\u0000\u1772"+
		"\u1773\u0007\u001e\u0000\u0000\u1773\u02c9\u0001\u0000\u0000\u0000\u1774"+
		"\u1775\u0005\u0002\u0000\u0000\u1775\u1776\u0003\u0350\u01a8\u0000\u1776"+
		"\u1777\u0005\u0003\u0000\u0000\u1777\u02cb\u0001\u0000\u0000\u0000\u1778"+
		"\u1779\u0005\u00b0\u0000\u0000\u1779\u177a\u0005\u017e\u0000\u0000\u177a"+
		"\u177b\u0003\u056a\u02b5\u0000\u177b\u177c\u0005\u016c\u0000\u0000\u177c"+
		"\u177d\u0003p8\u0000\u177d\u1785\u0001\u0000\u0000\u0000\u177e\u177f\u0005"+
		"\u00b0\u0000\u0000\u177f\u1780\u0005\u017e\u0000\u0000\u1780\u1781\u0003"+
		"\u056a\u02b5\u0000\u1781\u1782\u0005\u0158\u0000\u0000\u1782\u1783\u0003"+
		"p8\u0000\u1783\u1785\u0001\u0000\u0000\u0000\u1784\u1778\u0001\u0000\u0000"+
		"\u0000\u1784\u177e\u0001\u0000\u0000\u0000\u1785\u02cd\u0001\u0000\u0000"+
		"\u0000\u1786\u1787\u0005\u00b0\u0000\u0000\u1787\u1788\u0005\u00ae\u0000"+
		"\u0000\u1788\u1789\u0003\u0288\u0144\u0000\u1789\u178a\u0005\u0154\u0000"+
		"\u0000\u178a\u178b\u0005\u0084\u0000\u0000\u178b\u178c\u0003\u056a\u02b5"+
		"\u0000\u178c\u196e\u0001\u0000\u0000\u0000\u178d\u178e\u0005\u00b0\u0000"+
		"\u0000\u178e\u178f\u0005\u0092\u0000\u0000\u178f\u1790\u0003\u0208\u0104"+
		"\u0000\u1790\u1791\u0005\u0154\u0000\u0000\u1791\u1792\u0005\u0084\u0000"+
		"\u0000\u1792\u1793\u0003\u056a\u02b5\u0000\u1793\u196e\u0001\u0000\u0000"+
		"\u0000\u1794\u1795\u0005\u00b0\u0000\u0000\u1795\u1796\u0005\u00ce\u0000"+
		"\u0000\u1796\u1797\u0003\u0208\u0104\u0000\u1797\u1798\u0005\u0154\u0000"+
		"\u0000\u1798\u1799\u0005\u0084\u0000\u0000\u1799\u179a\u0003\u056a\u02b5"+
		"\u0000\u179a\u196e\u0001\u0000\u0000\u0000\u179b\u179c\u0005\u00b0\u0000"+
		"\u0000\u179c\u179d\u0005\u00d5\u0000\u0000\u179d\u179e\u0003\u056a\u02b5"+
		"\u0000\u179e\u179f\u0005\u0154\u0000\u0000\u179f\u17a0\u0005\u0084\u0000"+
		"\u0000\u17a0\u17a1\u0003\u056a\u02b5\u0000\u17a1\u196e\u0001\u0000\u0000"+
		"\u0000\u17a2\u17a3\u0005\u00b0\u0000\u0000\u17a3\u17a4\u0005\u00e3\u0000"+
		"\u0000\u17a4\u17a5\u0003\u0208\u0104\u0000\u17a5\u17a6\u0005\u0154\u0000"+
		"\u0000\u17a6\u17a7\u0005\u0084\u0000\u0000\u17a7\u17a8\u0003\u056a\u02b5"+
		"\u0000\u17a8\u196e\u0001\u0000\u0000\u0000\u17a9\u17aa\u0005\u00b0\u0000"+
		"\u0000\u17aa\u17ab\u0005\u00e3\u0000\u0000\u17ab\u17ac\u0003\u0208\u0104"+
		"\u0000\u17ac\u17ad\u0005\u0154\u0000\u0000\u17ad\u17ae\u0005S\u0000\u0000"+
		"\u17ae\u17af\u0003\u056a\u02b5\u0000\u17af\u17b0\u0005\u0084\u0000\u0000"+
		"\u17b0\u17b1\u0003\u056a\u02b5\u0000\u17b1\u196e\u0001\u0000\u0000\u0000"+
		"\u17b2\u17b3\u0005\u00b0\u0000\u0000\u17b3\u17b4\u0005e\u0000\u0000\u17b4"+
		"\u17b5\u0005\u00d4\u0000\u0000\u17b5\u17b6\u0005\u019c\u0000\u0000\u17b6"+
		"\u17b7\u0003\u056a\u02b5\u0000\u17b7\u17b8\u0005\u0154\u0000\u0000\u17b8"+
		"\u17b9\u0005\u0084\u0000\u0000\u17b9\u17ba\u0003\u056a\u02b5\u0000\u17ba"+
		"\u196e\u0001\u0000\u0000\u0000\u17bb\u17bc\u0005\u00b0\u0000\u0000\u17bc"+
		"\u17bd\u0005\u00f9\u0000\u0000\u17bd\u17be\u0003\u0270\u0138\u0000\u17be"+
		"\u17bf\u0005\u0154\u0000\u0000\u17bf\u17c0\u0005\u0084\u0000\u0000\u17c0"+
		"\u17c1\u0003\u056a\u02b5\u0000\u17c1\u196e\u0001\u0000\u0000\u0000\u17c2"+
		"\u17c3\u0005\u00b0\u0000\u0000\u17c3\u17c4\u0005h\u0000\u0000\u17c4\u17c5"+
		"\u0003\u0584\u02c2\u0000\u17c5\u17c6\u0005\u0154\u0000\u0000\u17c6\u17c7"+
		"\u0005\u0084\u0000\u0000\u17c7\u17c8\u0003\u0584\u02c2\u0000\u17c8\u196e"+
		"\u0001\u0000\u0000\u0000\u17c9\u17cb\u0005\u00b0\u0000\u0000\u17ca\u17cc"+
		"\u0003\u0130\u0098\u0000\u17cb\u17ca\u0001\u0000\u0000\u0000\u17cb\u17cc"+
		"\u0001\u0000\u0000\u0000\u17cc\u17cd\u0001\u0000\u0000\u0000\u17cd\u17ce"+
		"\u0005\u0114\u0000\u0000\u17ce\u17cf\u0003\u056a\u02b5\u0000\u17cf\u17d0"+
		"\u0005\u0154\u0000\u0000\u17d0\u17d1\u0005\u0084\u0000\u0000\u17d1\u17d2"+
		"\u0003\u056a\u02b5\u0000\u17d2\u196e\u0001\u0000\u0000\u0000\u17d3\u17d4"+
		"\u0005\u00b0\u0000\u0000\u17d4\u17d5\u0005\u0135\u0000\u0000\u17d5\u17d6"+
		"\u0005\u00c2\u0000\u0000\u17d6\u17d7\u0003\u0208\u0104\u0000\u17d7\u17d8"+
		"\u0005\u008a\u0000\u0000\u17d8\u17d9\u0003\u056a\u02b5\u0000\u17d9\u17da"+
		"\u0005\u0154\u0000\u0000\u17da\u17db\u0005\u0084\u0000\u0000\u17db\u17dc"+
		"\u0003\u056a\u02b5\u0000\u17dc\u196e\u0001\u0000\u0000\u0000\u17dd\u17de"+
		"\u0005\u00b0\u0000\u0000\u17de\u17df\u0005\u0135\u0000\u0000\u17df\u17e0"+
		"\u0005\u00f4\u0000\u0000\u17e0\u17e1\u0003\u0208\u0104\u0000\u17e1\u17e2"+
		"\u0005\u008a\u0000\u0000\u17e2\u17e3\u0003\u056a\u02b5\u0000\u17e3\u17e4"+
		"\u0005\u0154\u0000\u0000\u17e4\u17e5\u0005\u0084\u0000\u0000\u17e5\u17e6"+
		"\u0003\u056a\u02b5\u0000\u17e6\u196e\u0001\u0000\u0000\u0000\u17e7\u17e8"+
		"\u0005\u00b0\u0000\u0000\u17e8\u17e9\u0005\u01e3\u0000\u0000\u17e9\u17ea"+
		"\u0003\u056a\u02b5\u0000\u17ea\u17eb\u0005v\u0000\u0000\u17eb\u17ec\u0003"+
		"\u0566\u02b3\u0000\u17ec\u17ed\u0005\u0154\u0000\u0000\u17ed\u17ee\u0005"+
		"\u0084\u0000\u0000\u17ee\u17ef\u0003\u056a\u02b5\u0000\u17ef\u196e\u0001"+
		"\u0000\u0000\u0000\u17f0\u17f1\u0005\u00b0\u0000\u0000\u17f1\u17f2\u0005"+
		"\u01e3\u0000\u0000\u17f2\u17f3\u0005\u0102\u0000\u0000\u17f3\u17f4\u0005"+
		"\u01ab\u0000\u0000\u17f4\u17f5\u0003\u056a\u02b5\u0000\u17f5\u17f6\u0005"+
		"v\u0000\u0000\u17f6\u17f7\u0003\u0566\u02b3\u0000\u17f7\u17f8\u0005\u0154"+
		"\u0000\u0000\u17f8\u17f9\u0005\u0084\u0000\u0000\u17f9\u17fa\u0003\u056a"+
		"\u02b5\u0000\u17fa\u196e\u0001\u0000\u0000\u0000\u17fb\u17fc\u0005\u00b0"+
		"\u0000\u0000\u17fc\u17fd\u0005\u0147\u0000\u0000\u17fd\u17fe\u0003\u0270"+
		"\u0138\u0000\u17fe\u17ff\u0005\u0154\u0000\u0000\u17ff\u1800\u0005\u0084"+
		"\u0000\u0000\u1800\u1801\u0003\u056a\u02b5\u0000\u1801\u196e\u0001\u0000"+
		"\u0000\u0000\u1802\u1803\u0005\u00b0\u0000\u0000\u1803\u1804\u0005\u01ea"+
		"\u0000\u0000\u1804\u1805\u0003\u056a\u02b5\u0000\u1805\u1806\u0005\u0154"+
		"\u0000\u0000\u1806\u1807\u0005\u0084\u0000\u0000\u1807\u1808\u0003\u056a"+
		"\u02b5\u0000\u1808\u196e\u0001\u0000\u0000\u0000\u1809\u180a\u0005\u00b0"+
		"\u0000\u0000\u180a\u180b\u0005\u01e0\u0000\u0000\u180b\u180c\u0003\u0270"+
		"\u0138\u0000\u180c\u180d\u0005\u0154\u0000\u0000\u180d\u180e\u0005\u0084"+
		"\u0000\u0000\u180e\u180f\u0003\u056a\u02b5\u0000\u180f\u196e\u0001\u0000"+
		"\u0000\u0000\u1810\u1811\u0005\u00b0\u0000\u0000\u1811\u1812\u0005\u0162"+
		"\u0000\u0000\u1812\u1813\u0003\u056a\u02b5\u0000\u1813\u1814\u0005\u0154"+
		"\u0000\u0000\u1814\u1815\u0005\u0084\u0000\u0000\u1815\u1816\u0003\u056a"+
		"\u02b5\u0000\u1816\u196e\u0001\u0000\u0000\u0000\u1817\u1818\u0005\u00b0"+
		"\u0000\u0000\u1818\u1819\u0005\u016a\u0000\u0000\u1819\u181a\u0003\u056a"+
		"\u02b5\u0000\u181a\u181b\u0005\u0154\u0000\u0000\u181b\u181c\u0005\u0084"+
		"\u0000\u0000\u181c\u181d\u0003\u056a\u02b5\u0000\u181d\u196e\u0001\u0000"+
		"\u0000\u0000\u181e\u181f\u0005\u00b0\u0000\u0000\u181f\u1820\u0005\u01e9"+
		"\u0000\u0000\u1820\u1821\u0003\u056a\u02b5\u0000\u1821\u1822\u0005\u0154"+
		"\u0000\u0000\u1822\u1823\u0005\u0084\u0000\u0000\u1823\u1824\u0003\u056a"+
		"\u02b5\u0000\u1824\u196e\u0001\u0000\u0000\u0000\u1825\u1826\u0005\u00b0"+
		"\u0000\u0000\u1826\u1827\u0005\u0082\u0000\u0000\u1827\u1828\u0003\u0430"+
		"\u0218\u0000\u1828\u1829\u0005\u0154\u0000\u0000\u1829\u182a\u0005\u0084"+
		"\u0000\u0000\u182a\u182b\u0003\u056a\u02b5\u0000\u182b\u196e\u0001\u0000"+
		"\u0000\u0000\u182c\u182d\u0005\u00b0\u0000\u0000\u182d\u182e\u0005\u0082"+
		"\u0000\u0000\u182e\u182f\u0005\u0102\u0000\u0000\u182f\u1830\u0005\u01ab"+
		"\u0000\u0000\u1830\u1831\u0003\u0430\u0218\u0000\u1831\u1832\u0005\u0154"+
		"\u0000\u0000\u1832\u1833\u0005\u0084\u0000\u0000\u1833\u1834\u0003\u056a"+
		"\u02b5\u0000\u1834\u196e\u0001\u0000\u0000\u0000\u1835\u1836\u0005\u00b0"+
		"\u0000\u0000\u1836\u1837\u0005\u0167\u0000\u0000\u1837\u1838\u0003\u0566"+
		"\u02b3\u0000\u1838\u1839\u0005\u0154\u0000\u0000\u1839\u183a\u0005\u0084"+
		"\u0000\u0000\u183a\u183b\u0003\u056a\u02b5\u0000\u183b\u196e\u0001\u0000"+
		"\u0000\u0000\u183c\u183d\u0005\u00b0\u0000\u0000\u183d\u183e\u0005\u0167"+
		"\u0000\u0000\u183e\u183f\u0005\u0102\u0000\u0000\u183f\u1840\u0005\u01ab"+
		"\u0000\u0000\u1840\u1841\u0003\u0566\u02b3\u0000\u1841\u1842\u0005\u0154"+
		"\u0000\u0000\u1842\u1843\u0005\u0084\u0000\u0000\u1843\u1844\u0003\u056a"+
		"\u02b5\u0000\u1844\u196e\u0001\u0000\u0000\u0000\u1845\u1846\u0005\u00b0"+
		"\u0000\u0000\u1846\u1847\u0005\u0197\u0000\u0000\u1847\u1848\u0003\u0566"+
		"\u02b3\u0000\u1848\u1849\u0005\u0154\u0000\u0000\u1849\u184a\u0005\u0084"+
		"\u0000\u0000\u184a\u184b\u0003\u056a\u02b5\u0000\u184b\u196e\u0001\u0000"+
		"\u0000\u0000\u184c\u184d\u0005\u00b0\u0000\u0000\u184d\u184e\u0005\u0197"+
		"\u0000\u0000\u184e\u184f\u0005\u0102\u0000\u0000\u184f\u1850\u0005\u01ab"+
		"\u0000\u0000\u1850\u1851\u0003\u0566\u02b3\u0000\u1851\u1852\u0005\u0154"+
		"\u0000\u0000\u1852\u1853\u0005\u0084\u0000\u0000\u1853\u1854\u0003\u056a"+
		"\u02b5\u0000\u1854\u196e\u0001\u0000\u0000\u0000\u1855\u1856\u0005\u00b0"+
		"\u0000\u0000\u1856\u1857\u0005\u0121\u0000\u0000\u1857\u1858\u0005\u0197"+
		"\u0000\u0000\u1858\u1859\u0003\u0566\u02b3\u0000\u1859\u185a\u0005\u0154"+
		"\u0000\u0000\u185a\u185b\u0005\u0084\u0000\u0000\u185b\u185c\u0003\u056a"+
		"\u02b5\u0000\u185c\u196e\u0001\u0000\u0000\u0000\u185d\u185e\u0005\u00b0"+
		"\u0000\u0000\u185e\u185f\u0005\u0121\u0000\u0000\u185f\u1860\u0005\u0197"+
		"\u0000\u0000\u1860\u1861\u0005\u0102\u0000\u0000\u1861\u1862\u0005\u01ab"+
		"\u0000\u0000\u1862\u1863\u0003\u0566\u02b3\u0000\u1863\u1864\u0005\u0154"+
		"\u0000\u0000\u1864\u1865\u0005\u0084\u0000\u0000\u1865\u1866\u0003\u056a"+
		"\u02b5\u0000\u1866\u196e\u0001\u0000\u0000\u0000\u1867\u1868\u0005\u00b0"+
		"\u0000\u0000\u1868\u1869\u0005\u0108\u0000\u0000\u1869\u186a\u0003\u0566"+
		"\u02b3\u0000\u186a\u186b\u0005\u0154\u0000\u0000\u186b\u186c\u0005\u0084"+
		"\u0000\u0000\u186c\u186d\u0003\u056a\u02b5\u0000\u186d\u196e\u0001\u0000"+
		"\u0000\u0000\u186e\u186f\u0005\u00b0\u0000\u0000\u186f\u1870\u0005\u0108"+
		"\u0000\u0000\u1870\u1871\u0005\u0102\u0000\u0000\u1871\u1872\u0005\u01ab"+
		"\u0000\u0000\u1872\u1873\u0003\u0566\u02b3\u0000\u1873\u1874\u0005\u0154"+
		"\u0000\u0000\u1874\u1875\u0005\u0084\u0000\u0000\u1875\u1876\u0003\u056a"+
		"\u02b5\u0000\u1876\u196e\u0001\u0000\u0000\u0000\u1877\u1878\u0005\u00b0"+
		"\u0000\u0000\u1878\u1879\u0005e\u0000\u0000\u1879\u187a\u0005\u0082\u0000"+
		"\u0000\u187a\u187b\u0003\u0430\u0218\u0000\u187b\u187c\u0005\u0154\u0000"+
		"\u0000\u187c\u187d\u0005\u0084\u0000\u0000\u187d\u187e\u0003\u056a\u02b5"+
		"\u0000\u187e\u196e\u0001\u0000\u0000\u0000\u187f\u1880\u0005\u00b0\u0000"+
		"\u0000\u1880\u1881\u0005e\u0000\u0000\u1881\u1882\u0005\u0082\u0000\u0000"+
		"\u1882\u1883\u0005\u0102\u0000\u0000\u1883\u1884\u0005\u01ab\u0000\u0000"+
		"\u1884\u1885\u0003\u0430\u0218\u0000\u1885\u1886\u0005\u0154\u0000\u0000"+
		"\u1886\u1887\u0005\u0084\u0000\u0000\u1887\u1888\u0003\u056a\u02b5\u0000"+
		"\u1888\u196e\u0001\u0000\u0000\u0000\u1889\u188a\u0005\u00b0\u0000\u0000"+
		"\u188a\u188b\u0005\u0082\u0000\u0000\u188b\u188c\u0003\u0430\u0218\u0000"+
		"\u188c\u188e\u0005\u0154\u0000\u0000\u188d\u188f\u0003\u02d0\u0168\u0000"+
		"\u188e\u188d\u0001\u0000\u0000\u0000\u188e\u188f\u0001\u0000\u0000\u0000"+
		"\u188f\u1890\u0001\u0000\u0000\u0000\u1890\u1891\u0003\u056a\u02b5\u0000"+
		"\u1891\u1892\u0005\u0084\u0000\u0000\u1892\u1893\u0003\u056a\u02b5\u0000"+
		"\u1893\u196e\u0001\u0000\u0000\u0000\u1894\u1895\u0005\u00b0\u0000\u0000"+
		"\u1895\u1896\u0005\u0082\u0000\u0000\u1896\u1897\u0005\u0102\u0000\u0000"+
		"\u1897\u1898\u0005\u01ab\u0000\u0000\u1898\u1899\u0003\u0430\u0218\u0000"+
		"\u1899\u189b\u0005\u0154\u0000\u0000\u189a\u189c\u0003\u02d0\u0168\u0000"+
		"\u189b\u189a\u0001\u0000\u0000\u0000\u189b\u189c\u0001\u0000\u0000\u0000"+
		"\u189c\u189d\u0001\u0000\u0000\u0000\u189d\u189e\u0003\u056a\u02b5\u0000"+
		"\u189e\u189f\u0005\u0084\u0000\u0000\u189f\u18a0\u0003\u056a\u02b5\u0000"+
		"\u18a0\u196e\u0001\u0000\u0000\u0000\u18a1\u18a2\u0005\u00b0\u0000\u0000"+
		"\u18a2\u18a3\u0005\u0197\u0000\u0000\u18a3\u18a4\u0003\u0566\u02b3\u0000"+
		"\u18a4\u18a6\u0005\u0154\u0000\u0000\u18a5\u18a7\u0003\u02d0\u0168\u0000"+
		"\u18a6\u18a5\u0001\u0000\u0000\u0000\u18a6\u18a7\u0001\u0000\u0000\u0000"+
		"\u18a7\u18a8\u0001\u0000\u0000\u0000\u18a8\u18a9\u0003\u056a\u02b5\u0000"+
		"\u18a9\u18aa\u0005\u0084\u0000\u0000\u18aa\u18ab\u0003\u056a\u02b5\u0000"+
		"\u18ab\u196e\u0001\u0000\u0000\u0000\u18ac\u18ad\u0005\u00b0\u0000\u0000"+
		"\u18ad\u18ae\u0005\u0197\u0000\u0000\u18ae\u18af\u0005\u0102\u0000\u0000"+
		"\u18af\u18b0\u0005\u01ab\u0000\u0000\u18b0\u18b1\u0003\u0566\u02b3\u0000"+
		"\u18b1\u18b3\u0005\u0154\u0000\u0000\u18b2\u18b4\u0003\u02d0\u0168\u0000"+
		"\u18b3\u18b2\u0001\u0000\u0000\u0000\u18b3\u18b4\u0001\u0000\u0000\u0000"+
		"\u18b4\u18b5\u0001\u0000\u0000\u0000\u18b5\u18b6\u0003\u056a\u02b5\u0000"+
		"\u18b6\u18b7\u0005\u0084\u0000\u0000\u18b7\u18b8\u0003\u056a\u02b5\u0000"+
		"\u18b8\u196e\u0001\u0000\u0000\u0000\u18b9\u18ba\u0005\u00b0\u0000\u0000"+
		"\u18ba\u18bb\u0005\u0121\u0000\u0000\u18bb\u18bc\u0005\u0197\u0000\u0000"+
		"\u18bc\u18bd\u0003\u0566\u02b3\u0000\u18bd\u18bf\u0005\u0154\u0000\u0000"+
		"\u18be\u18c0\u0003\u02d0\u0168\u0000\u18bf\u18be\u0001\u0000\u0000\u0000"+
		"\u18bf\u18c0\u0001\u0000\u0000\u0000\u18c0\u18c1\u0001\u0000\u0000\u0000"+
		"\u18c1\u18c2\u0003\u056a\u02b5\u0000\u18c2\u18c3\u0005\u0084\u0000\u0000"+
		"\u18c3\u18c4\u0003\u056a\u02b5\u0000\u18c4\u196e\u0001\u0000\u0000\u0000"+
		"\u18c5\u18c6\u0005\u00b0\u0000\u0000\u18c6\u18c7\u0005\u0121\u0000\u0000"+
		"\u18c7\u18c8\u0005\u0197\u0000\u0000\u18c8\u18c9\u0005\u0102\u0000\u0000"+
		"\u18c9\u18ca\u0005\u01ab\u0000\u0000\u18ca\u18cb\u0003\u0566\u02b3\u0000"+
		"\u18cb\u18cd\u0005\u0154\u0000\u0000\u18cc\u18ce\u0003\u02d0\u0168\u0000"+
		"\u18cd\u18cc\u0001\u0000\u0000\u0000\u18cd\u18ce\u0001\u0000\u0000\u0000"+
		"\u18ce\u18cf\u0001\u0000\u0000\u0000\u18cf\u18d0\u0003\u056a\u02b5\u0000"+
		"\u18d0\u18d1\u0005\u0084\u0000\u0000\u18d1\u18d2\u0003\u056a\u02b5\u0000"+
		"\u18d2\u196e\u0001\u0000\u0000\u0000\u18d3\u18d4\u0005\u00b0\u0000\u0000"+
		"\u18d4\u18d5\u0005\u0082\u0000\u0000\u18d5\u18d6\u0003\u0430\u0218\u0000"+
		"\u18d6\u18d7\u0005\u0154\u0000\u0000\u18d7\u18d8\u0005S\u0000\u0000\u18d8"+
		"\u18d9\u0003\u056a\u02b5\u0000\u18d9\u18da\u0005\u0084\u0000\u0000\u18da"+
		"\u18db\u0003\u056a\u02b5\u0000\u18db\u196e\u0001\u0000\u0000\u0000\u18dc"+
		"\u18dd\u0005\u00b0\u0000\u0000\u18dd\u18de\u0005\u0082\u0000\u0000\u18de"+
		"\u18df\u0005\u0102\u0000\u0000\u18df\u18e0\u0005\u01ab\u0000\u0000\u18e0"+
		"\u18e1\u0003\u0430\u0218\u0000\u18e1\u18e2\u0005\u0154\u0000\u0000\u18e2"+
		"\u18e3\u0005S\u0000\u0000\u18e3\u18e4\u0003\u056a\u02b5\u0000\u18e4\u18e5"+
		"\u0005\u0084\u0000\u0000\u18e5\u18e6\u0003\u056a\u02b5\u0000\u18e6\u196e"+
		"\u0001\u0000\u0000\u0000\u18e7\u18e8\u0005\u00b0\u0000\u0000\u18e8\u18e9"+
		"\u0005e\u0000\u0000\u18e9\u18ea\u0005\u0082\u0000\u0000\u18ea\u18eb\u0003"+
		"\u0430\u0218\u0000\u18eb\u18ed\u0005\u0154\u0000\u0000\u18ec\u18ee\u0003"+
		"\u02d0\u0168\u0000\u18ed\u18ec\u0001\u0000\u0000\u0000\u18ed\u18ee\u0001"+
		"\u0000\u0000\u0000\u18ee\u18ef\u0001\u0000\u0000\u0000\u18ef\u18f0\u0003"+
		"\u056a\u02b5\u0000\u18f0\u18f1\u0005\u0084\u0000\u0000\u18f1\u18f2\u0003"+
		"\u056a\u02b5\u0000\u18f2\u196e\u0001\u0000\u0000\u0000\u18f3\u18f4\u0005"+
		"\u00b0\u0000\u0000\u18f4\u18f5\u0005e\u0000\u0000\u18f5\u18f6\u0005\u0082"+
		"\u0000\u0000\u18f6\u18f7\u0005\u0102\u0000\u0000\u18f7\u18f8\u0005\u01ab"+
		"\u0000\u0000\u18f8\u18f9\u0003\u0430\u0218\u0000\u18f9\u18fb\u0005\u0154"+
		"\u0000\u0000\u18fa\u18fc\u0003\u02d0\u0168\u0000\u18fb\u18fa\u0001\u0000"+
		"\u0000\u0000\u18fb\u18fc\u0001\u0000\u0000\u0000\u18fc\u18fd\u0001\u0000"+
		"\u0000\u0000\u18fd\u18fe\u0003\u056a\u02b5\u0000\u18fe\u18ff\u0005\u0084"+
		"\u0000\u0000\u18ff\u1900\u0003\u056a\u02b5\u0000\u1900\u196e\u0001\u0000"+
		"\u0000\u0000\u1901\u1902\u0005\u00b0\u0000\u0000\u1902\u1903\u0005\u0160"+
		"\u0000\u0000\u1903\u1904\u0003\u056a\u02b5\u0000\u1904\u1905\u0005v\u0000"+
		"\u0000\u1905\u1906\u0003\u0566\u02b3\u0000\u1906\u1907\u0005\u0154\u0000"+
		"\u0000\u1907\u1908\u0005\u0084\u0000\u0000\u1908\u1909\u0003\u056a\u02b5"+
		"\u0000\u1909\u196e\u0001\u0000\u0000\u0000\u190a\u190b\u0005\u00b0\u0000"+
		"\u0000\u190b\u190c\u0005\u0184\u0000\u0000\u190c\u190d\u0003\u056a\u02b5"+
		"\u0000\u190d\u190e\u0005v\u0000\u0000\u190e\u190f\u0003\u0566\u02b3\u0000"+
		"\u190f\u1910\u0005\u0154\u0000\u0000\u1910\u1911\u0005\u0084\u0000\u0000"+
		"\u1911\u1912\u0003\u056a\u02b5\u0000\u1912\u196e\u0001\u0000\u0000\u0000"+
		"\u1913\u1914\u0005\u00b0\u0000\u0000\u1914\u1915\u0005\u00ec\u0000\u0000"+
		"\u1915\u1916\u0005\u0184\u0000\u0000\u1916\u1917\u0003\u056a\u02b5\u0000"+
		"\u1917\u1918\u0005\u0154\u0000\u0000\u1918\u1919\u0005\u0084\u0000\u0000"+
		"\u1919\u191a\u0003\u056a\u02b5\u0000\u191a\u196e\u0001\u0000\u0000\u0000"+
		"\u191b\u191c\u0005\u00b0\u0000\u0000\u191c\u191d\u0005\u015d\u0000\u0000"+
		"\u191d\u191e\u0003\u0584\u02c2\u0000\u191e\u191f\u0005\u0154\u0000\u0000"+
		"\u191f\u1920\u0005\u0084\u0000\u0000\u1920\u1921\u0003\u0584\u02c2\u0000"+
		"\u1921\u196e\u0001\u0000\u0000\u0000\u1922\u1923\u0005\u00b0\u0000\u0000"+
		"\u1923\u1924\u0005\u0089\u0000\u0000\u1924\u1925\u0003\u0584\u02c2\u0000"+
		"\u1925\u1926\u0005\u0154\u0000\u0000\u1926\u1927\u0005\u0084\u0000\u0000"+
		"\u1927\u1928\u0003\u0584\u02c2\u0000\u1928\u196e\u0001\u0000\u0000\u0000"+
		"\u1929\u192a\u0005\u00b0\u0000\u0000\u192a\u192b\u0005\u017e\u0000\u0000"+
		"\u192b\u192c\u0003\u056a\u02b5\u0000\u192c\u192d\u0005\u0154\u0000\u0000"+
		"\u192d\u192e\u0005\u0084\u0000\u0000\u192e\u192f\u0003\u056a\u02b5\u0000"+
		"\u192f\u196e\u0001\u0000\u0000\u0000\u1930\u1931\u0005\u00b0\u0000\u0000"+
		"\u1931\u1932\u0005\u0175\u0000\u0000\u1932\u1933\u0003\u0208\u0104\u0000"+
		"\u1933\u1934\u0005\u0154\u0000\u0000\u1934\u1935\u0005\u0084\u0000\u0000"+
		"\u1935\u1936\u0003\u056a\u02b5\u0000\u1936\u196e\u0001\u0000\u0000\u0000"+
		"\u1937\u1938\u0005\u00b0\u0000\u0000\u1938\u1939\u0005\u0182\u0000\u0000"+
		"\u1939\u193a\u0005\u0164\u0000\u0000\u193a\u193b\u0005\u013a\u0000\u0000"+
		"\u193b\u193c\u0003\u0208\u0104\u0000\u193c\u193d\u0005\u0154\u0000\u0000"+
		"\u193d\u193e\u0005\u0084\u0000\u0000\u193e\u193f\u0003\u056a\u02b5\u0000"+
		"\u193f\u196e\u0001\u0000\u0000\u0000\u1940\u1941\u0005\u00b0\u0000\u0000"+
		"\u1941\u1942\u0005\u0182\u0000\u0000\u1942\u1943\u0005\u0164\u0000\u0000"+
		"\u1943\u1944\u0005\u00df\u0000\u0000\u1944\u1945\u0003\u0208\u0104\u0000"+
		"\u1945\u1946\u0005\u0154\u0000\u0000\u1946\u1947\u0005\u0084\u0000\u0000"+
		"\u1947\u1948\u0003\u056a\u02b5\u0000\u1948\u196e\u0001\u0000\u0000\u0000"+
		"\u1949\u194a\u0005\u00b0\u0000\u0000\u194a\u194b\u0005\u0182\u0000\u0000"+
		"\u194b\u194c\u0005\u0164\u0000\u0000\u194c\u194d\u0005\u0180\u0000\u0000"+
		"\u194d\u194e\u0003\u0208\u0104\u0000\u194e\u194f\u0005\u0154\u0000\u0000"+
		"\u194f\u1950\u0005\u0084\u0000\u0000\u1950\u1951\u0003\u056a\u02b5\u0000"+
		"\u1951\u196e\u0001\u0000\u0000\u0000\u1952\u1953\u0005\u00b0\u0000\u0000"+
		"\u1953\u1954\u0005\u0182\u0000\u0000\u1954\u1955\u0005\u0164\u0000\u0000"+
		"\u1955\u1956\u0005\u00c9\u0000\u0000\u1956\u1957\u0003\u0208\u0104\u0000"+
		"\u1957\u1958\u0005\u0154\u0000\u0000\u1958\u1959\u0005\u0084\u0000\u0000"+
		"\u1959\u195a\u0003\u056a\u02b5\u0000\u195a\u196e\u0001\u0000\u0000\u0000"+
		"\u195b\u195c\u0005\u00b0\u0000\u0000\u195c\u195d\u0005\u0187\u0000\u0000"+
		"\u195d\u195e\u0003\u0208\u0104\u0000\u195e\u195f\u0005\u0154\u0000\u0000"+
		"\u195f\u1960\u0005\u0084\u0000\u0000\u1960\u1961\u0003\u056a\u02b5\u0000"+
		"\u1961\u196e\u0001\u0000\u0000\u0000\u1962\u1963\u0005\u00b0\u0000\u0000"+
		"\u1963\u1964\u0005\u0187\u0000\u0000\u1964\u1965\u0003\u0208\u0104\u0000"+
		"\u1965\u1966\u0005\u0154\u0000\u0000\u1966\u1967\u0005\u00b5\u0000\u0000"+
		"\u1967\u1968\u0003\u056a\u02b5\u0000\u1968\u1969\u0005\u0084\u0000\u0000"+
		"\u1969\u196b\u0003\u056a\u02b5\u0000\u196a\u196c\u0003h4\u0000\u196b\u196a"+
		"\u0001\u0000\u0000\u0000\u196b\u196c\u0001\u0000\u0000\u0000\u196c\u196e"+
		"\u0001\u0000\u0000\u0000\u196d\u1786\u0001\u0000\u0000\u0000\u196d\u178d"+
		"\u0001\u0000\u0000\u0000\u196d\u1794\u0001\u0000\u0000\u0000\u196d\u179b"+
		"\u0001\u0000\u0000\u0000\u196d\u17a2\u0001\u0000\u0000\u0000\u196d\u17a9"+
		"\u0001\u0000\u0000\u0000\u196d\u17b2\u0001\u0000\u0000\u0000\u196d\u17bb"+
		"\u0001\u0000\u0000\u0000\u196d\u17c2\u0001\u0000\u0000\u0000\u196d\u17c9"+
		"\u0001\u0000\u0000\u0000\u196d\u17d3\u0001\u0000\u0000\u0000\u196d\u17dd"+
		"\u0001\u0000\u0000\u0000\u196d\u17e7\u0001\u0000\u0000\u0000\u196d\u17f0"+
		"\u0001\u0000\u0000\u0000\u196d\u17fb\u0001\u0000\u0000\u0000\u196d\u1802"+
		"\u0001\u0000\u0000\u0000\u196d\u1809\u0001\u0000\u0000\u0000\u196d\u1810"+
		"\u0001\u0000\u0000\u0000\u196d\u1817\u0001\u0000\u0000\u0000\u196d\u181e"+
		"\u0001\u0000\u0000\u0000\u196d\u1825\u0001\u0000\u0000\u0000\u196d\u182c"+
		"\u0001\u0000\u0000\u0000\u196d\u1835\u0001\u0000\u0000\u0000\u196d\u183c"+
		"\u0001\u0000\u0000\u0000\u196d\u1845\u0001\u0000\u0000\u0000\u196d\u184c"+
		"\u0001\u0000\u0000\u0000\u196d\u1855\u0001\u0000\u0000\u0000\u196d\u185d"+
		"\u0001\u0000\u0000\u0000\u196d\u1867\u0001\u0000\u0000\u0000\u196d\u186e"+
		"\u0001\u0000\u0000\u0000\u196d\u1877\u0001\u0000\u0000\u0000\u196d\u187f"+
		"\u0001\u0000\u0000\u0000\u196d\u1889\u0001\u0000\u0000\u0000\u196d\u1894"+
		"\u0001\u0000\u0000\u0000\u196d\u18a1\u0001\u0000\u0000\u0000\u196d\u18ac"+
		"\u0001\u0000\u0000\u0000\u196d\u18b9\u0001\u0000\u0000\u0000\u196d\u18c5"+
		"\u0001\u0000\u0000\u0000\u196d\u18d3\u0001\u0000\u0000\u0000\u196d\u18dc"+
		"\u0001\u0000\u0000\u0000\u196d\u18e7\u0001\u0000\u0000\u0000\u196d\u18f3"+
		"\u0001\u0000\u0000\u0000\u196d\u1901\u0001\u0000\u0000\u0000\u196d\u190a"+
		"\u0001\u0000\u0000\u0000\u196d\u1913\u0001\u0000\u0000\u0000\u196d\u191b"+
		"\u0001\u0000\u0000\u0000\u196d\u1922\u0001\u0000\u0000\u0000\u196d\u1929"+
		"\u0001\u0000\u0000\u0000\u196d\u1930\u0001\u0000\u0000\u0000\u196d\u1937"+
		"\u0001\u0000\u0000\u0000\u196d\u1940\u0001\u0000\u0000\u0000\u196d\u1949"+
		"\u0001\u0000\u0000\u0000\u196d\u1952\u0001\u0000\u0000\u0000\u196d\u195b"+
		"\u0001\u0000\u0000\u0000\u196d\u1962\u0001\u0000\u0000\u0000\u196e\u02cf"+
		"\u0001\u0000\u0000\u0000\u196f\u1970\u0005R\u0000\u0000\u1970\u02d1\u0001"+
		"\u0000\u0000\u0000\u1971\u1972\u0005\u016c\u0000\u0000\u1972\u1973\u0005"+
		"\u00d4\u0000\u0000\u1973\u02d3\u0001\u0000\u0000\u0000\u1974\u1975\u0005"+
		"\u00b0\u0000\u0000\u1975\u1976\u0005\u00f9\u0000\u0000\u1976\u1978\u0003"+
		"\u0270\u0138\u0000\u1977\u1979\u0003\u02d6\u016b\u0000\u1978\u1977\u0001"+
		"\u0000\u0000\u0000\u1978\u1979\u0001\u0000\u0000\u0000\u1979\u197a\u0001"+
		"\u0000\u0000\u0000\u197a\u197b\u0005\u01f4\u0000\u0000\u197b\u197c\u0005"+
		"v\u0000\u0000\u197c\u197d\u0005\u00f2\u0000\u0000\u197d\u197e\u0003\u056a"+
		"\u02b5\u0000\u197e\u19ba\u0001\u0000\u0000\u0000\u197f\u1980\u0005\u00b0"+
		"\u0000\u0000\u1980\u1981\u0005\u0147\u0000\u0000\u1981\u1983\u0003\u0270"+
		"\u0138\u0000\u1982\u1984\u0003\u02d6\u016b\u0000\u1983\u1982\u0001\u0000"+
		"\u0000\u0000\u1983\u1984\u0001\u0000\u0000\u0000\u1984\u1985\u0001\u0000"+
		"\u0000\u0000\u1985\u1986\u0005\u01f4\u0000\u0000\u1986\u1987\u0005v\u0000"+
		"\u0000\u1987\u1988\u0005\u00f2\u0000\u0000\u1988\u1989\u0003\u056a\u02b5"+
		"\u0000\u1989\u19ba\u0001\u0000\u0000\u0000\u198a\u198b\u0005\u00b0\u0000"+
		"\u0000\u198b\u198c\u0005\u01e0\u0000\u0000\u198c\u198e\u0003\u0270\u0138"+
		"\u0000\u198d\u198f\u0003\u02d6\u016b\u0000\u198e\u198d\u0001\u0000\u0000"+
		"\u0000\u198e\u198f\u0001\u0000\u0000\u0000\u198f\u1990\u0001\u0000\u0000"+
		"\u0000\u1990\u1991\u0005\u01f4\u0000\u0000\u1991\u1992\u0005v\u0000\u0000"+
		"\u1992\u1993\u0005\u00f2\u0000\u0000\u1993\u1994\u0003\u056a\u02b5\u0000"+
		"\u1994\u19ba\u0001\u0000\u0000\u0000\u1995\u1996\u0005\u00b0\u0000\u0000"+
		"\u1996\u1997\u0005\u0184\u0000\u0000\u1997\u1998\u0003\u056a\u02b5\u0000"+
		"\u1998\u1999\u0005v\u0000\u0000\u1999\u199b\u0003\u0566\u02b3\u0000\u199a"+
		"\u199c\u0003\u02d6\u016b\u0000\u199b\u199a\u0001\u0000\u0000\u0000\u199b"+
		"\u199c\u0001\u0000\u0000\u0000\u199c\u199d\u0001\u0000\u0000\u0000\u199d"+
		"\u199e\u0005\u01f4\u0000\u0000\u199e\u199f\u0005v\u0000\u0000\u199f\u19a0"+
		"\u0005\u00f2\u0000\u0000\u19a0\u19a1\u0003\u056a\u02b5\u0000\u19a1\u19ba"+
		"\u0001\u0000\u0000\u0000\u19a2\u19a3\u0005\u00b0\u0000\u0000\u19a3\u19a4"+
		"\u0005\u0121\u0000\u0000\u19a4\u19a5\u0005\u0197\u0000\u0000\u19a5\u19a7"+
		"\u0003\u0566\u02b3\u0000\u19a6\u19a8\u0003\u02d6\u016b\u0000\u19a7\u19a6"+
		"\u0001\u0000\u0000\u0000\u19a7\u19a8\u0001\u0000\u0000\u0000\u19a8\u19a9"+
		"\u0001\u0000\u0000\u0000\u19a9\u19aa\u0005\u01f4\u0000\u0000\u19aa\u19ab"+
		"\u0005v\u0000\u0000\u19ab\u19ac\u0005\u00f2\u0000\u0000\u19ac\u19ad\u0003"+
		"\u056a\u02b5\u0000\u19ad\u19ba\u0001\u0000\u0000\u0000\u19ae\u19af\u0005"+
		"\u00b0\u0000\u0000\u19af\u19b0\u0005\u0108\u0000\u0000\u19b0\u19b2\u0003"+
		"\u0566\u02b3\u0000\u19b1\u19b3\u0003\u02d6\u016b\u0000\u19b2\u19b1\u0001"+
		"\u0000\u0000\u0000\u19b2\u19b3\u0001\u0000\u0000\u0000\u19b3\u19b4\u0001"+
		"\u0000\u0000\u0000\u19b4\u19b5\u0005\u01f4\u0000\u0000\u19b5\u19b6\u0005"+
		"v\u0000\u0000\u19b6\u19b7\u0005\u00f2\u0000\u0000\u19b7\u19b8\u0003\u056a"+
		"\u02b5\u0000\u19b8\u19ba\u0001\u0000\u0000\u0000\u19b9\u1974\u0001\u0000"+
		"\u0000\u0000\u19b9\u197f\u0001\u0000\u0000\u0000\u19b9\u198a\u0001\u0000"+
		"\u0000\u0000\u19b9\u1995\u0001\u0000\u0000\u0000\u19b9\u19a2\u0001\u0000"+
		"\u0000\u0000\u19b9\u19ae\u0001\u0000\u0000\u0000\u19ba\u02d5\u0001\u0000"+
		"\u0000\u0000\u19bb\u19bc\u0005\u012c\u0000\u0000\u19bc\u02d7\u0001\u0000"+
		"\u0000\u0000\u19bd\u19be\u0005\u00b0\u0000\u0000\u19be\u19bf\u0005\u00ae"+
		"\u0000\u0000\u19bf\u19c0\u0003\u0288\u0144\u0000\u19c0\u19c1\u0005\u016c"+
		"\u0000\u0000\u19c1\u19c2\u0005\u0162\u0000\u0000\u19c2\u19c3\u0003\u056a"+
		"\u02b5\u0000\u19c3\u1a97\u0001\u0000\u0000\u0000\u19c4\u19c5\u0005\u00b0"+
		"\u0000\u0000\u19c5\u19c6\u0005\u0092\u0000\u0000\u19c6\u19c7\u0003\u0208"+
		"\u0104\u0000\u19c7\u19c8\u0005\u016c\u0000\u0000\u19c8\u19c9\u0005\u0162"+
		"\u0000\u0000\u19c9\u19ca\u0003\u056a\u02b5\u0000\u19ca\u1a97\u0001\u0000"+
		"\u0000\u0000\u19cb\u19cc\u0005\u00b0\u0000\u0000\u19cc\u19cd\u0005\u00ce"+
		"\u0000\u0000\u19cd\u19ce\u0003\u0208\u0104\u0000\u19ce\u19cf\u0005\u016c"+
		"\u0000\u0000\u19cf\u19d0\u0005\u0162\u0000\u0000\u19d0\u19d1\u0003\u056a"+
		"\u02b5\u0000\u19d1\u1a97\u0001\u0000\u0000\u0000\u19d2\u19d3\u0005\u00b0"+
		"\u0000\u0000\u19d3\u19d4\u0005\u00e3\u0000\u0000\u19d4\u19d5\u0003\u0208"+
		"\u0104\u0000\u19d5\u19d6\u0005\u016c\u0000\u0000\u19d6\u19d7\u0005\u0162"+
		"\u0000\u0000\u19d7\u19d8\u0003\u056a\u02b5\u0000\u19d8\u1a97\u0001\u0000"+
		"\u0000\u0000\u19d9\u19da\u0005\u00b0\u0000\u0000\u19da\u19db\u0005\u00f2"+
		"\u0000\u0000\u19db\u19dc\u0003\u056a\u02b5\u0000\u19dc\u19dd\u0005\u016c"+
		"\u0000\u0000\u19dd\u19de\u0005\u0162\u0000\u0000\u19de\u19df\u0003\u056a"+
		"\u02b5\u0000\u19df\u1a97\u0001\u0000\u0000\u0000\u19e0\u19e1\u0005\u00b0"+
		"\u0000\u0000\u19e1\u19e2\u0005\u00f9\u0000\u0000\u19e2\u19e3\u0003\u0270"+
		"\u0138\u0000\u19e3\u19e4\u0005\u016c\u0000\u0000\u19e4\u19e5\u0005\u0162"+
		"\u0000\u0000\u19e5\u19e6\u0003\u056a\u02b5\u0000\u19e6\u1a97\u0001\u0000"+
		"\u0000\u0000\u19e7\u19e8\u0005\u00b0\u0000\u0000\u19e8\u19e9\u0005\u0135"+
		"\u0000\u0000\u19e9\u19ea\u0003\u02ae\u0157\u0000\u19ea\u19eb\u0005\u016c"+
		"\u0000\u0000\u19eb\u19ec\u0005\u0162\u0000\u0000\u19ec\u19ed\u0003\u056a"+
		"\u02b5\u0000\u19ed\u1a97\u0001\u0000\u0000\u0000\u19ee\u19ef\u0005\u00b0"+
		"\u0000\u0000\u19ef\u19f0\u0005\u0135\u0000\u0000\u19f0\u19f1\u0005\u00c2"+
		"\u0000\u0000\u19f1\u19f2\u0003\u0208\u0104\u0000\u19f2\u19f3\u0005\u008a"+
		"\u0000\u0000\u19f3\u19f4\u0003\u056a\u02b5\u0000\u19f4\u19f5\u0005\u016c"+
		"\u0000\u0000\u19f5\u19f6\u0005\u0162\u0000\u0000\u19f6\u19f7\u0003\u056a"+
		"\u02b5\u0000\u19f7\u1a97\u0001\u0000\u0000\u0000\u19f8\u19f9\u0005\u00b0"+
		"\u0000\u0000\u19f9\u19fa\u0005\u0135\u0000\u0000\u19fa\u19fb\u0005\u00f4"+
		"\u0000\u0000\u19fb\u19fc\u0003\u0208\u0104\u0000\u19fc\u19fd\u0005\u008a"+
		"\u0000\u0000\u19fd\u19fe\u0003\u056a\u02b5\u0000\u19fe\u19ff\u0005\u016c"+
		"\u0000\u0000\u19ff\u1a00\u0005\u0162\u0000\u0000\u1a00\u1a01\u0003\u056a"+
		"\u02b5\u0000\u1a01\u1a97\u0001\u0000\u0000\u0000\u1a02\u1a03\u0005\u00b0"+
		"\u0000\u0000\u1a03\u1a04\u0005\u0147\u0000\u0000\u1a04\u1a05\u0003";
	private static final String _serializedATNSegment3 =
		"\u0270\u0138\u0000\u1a05\u1a06\u0005\u016c\u0000\u0000\u1a06\u1a07\u0005"+
		"\u0162\u0000\u0000\u1a07\u1a08\u0003\u056a\u02b5\u0000\u1a08\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a09\u1a0a\u0005\u00b0\u0000\u0000\u1a0a\u1a0b\u0005"+
		"\u01e0\u0000\u0000\u1a0b\u1a0c\u0003\u0270\u0138\u0000\u1a0c\u1a0d\u0005"+
		"\u016c\u0000\u0000\u1a0d\u1a0e\u0005\u0162\u0000\u0000\u1a0e\u1a0f\u0003"+
		"\u056a\u02b5\u0000\u1a0f\u1a97\u0001\u0000\u0000\u0000\u1a10\u1a11\u0005"+
		"\u00b0\u0000\u0000\u1a11\u1a12\u0005\u0082\u0000\u0000\u1a12\u1a13\u0003"+
		"\u0430\u0218\u0000\u1a13\u1a14\u0005\u016c\u0000\u0000\u1a14\u1a15\u0005"+
		"\u0162\u0000\u0000\u1a15\u1a16\u0003\u056a\u02b5\u0000\u1a16\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a17\u1a18\u0005\u00b0\u0000\u0000\u1a18\u1a19\u0005"+
		"\u0082\u0000\u0000\u1a19\u1a1a\u0005\u0102\u0000\u0000\u1a1a\u1a1b\u0005"+
		"\u01ab\u0000\u0000\u1a1b\u1a1c\u0003\u0430\u0218\u0000\u1a1c\u1a1d\u0005"+
		"\u016c\u0000\u0000\u1a1d\u1a1e\u0005\u0162\u0000\u0000\u1a1e\u1a1f\u0003"+
		"\u056a\u02b5\u0000\u1a1f\u1a97\u0001\u0000\u0000\u0000\u1a20\u1a21\u0005"+
		"\u00b0\u0000\u0000\u1a21\u1a22\u0005\u0175\u0000\u0000\u1a22\u1a23\u0003"+
		"\u0208\u0104\u0000\u1a23\u1a24\u0005\u016c\u0000\u0000\u1a24\u1a25\u0005"+
		"\u0162\u0000\u0000\u1a25\u1a26\u0003\u056a\u02b5\u0000\u1a26\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a27\u1a28\u0005\u00b0\u0000\u0000\u1a28\u1a29\u0005"+
		"\u0182\u0000\u0000\u1a29\u1a2a\u0005\u0164\u0000\u0000\u1a2a\u1a2b\u0005"+
		"\u013a\u0000\u0000\u1a2b\u1a2c\u0003\u0208\u0104\u0000\u1a2c\u1a2d\u0005"+
		"\u016c\u0000\u0000\u1a2d\u1a2e\u0005\u0162\u0000\u0000\u1a2e\u1a2f\u0003"+
		"\u056a\u02b5\u0000\u1a2f\u1a97\u0001\u0000\u0000\u0000\u1a30\u1a31\u0005"+
		"\u00b0\u0000\u0000\u1a31\u1a32\u0005\u0182\u0000\u0000\u1a32\u1a33\u0005"+
		"\u0164\u0000\u0000\u1a33\u1a34\u0005\u00df\u0000\u0000\u1a34\u1a35\u0003"+
		"\u0208\u0104\u0000\u1a35\u1a36\u0005\u016c\u0000\u0000\u1a36\u1a37\u0005"+
		"\u0162\u0000\u0000\u1a37\u1a38\u0003\u056a\u02b5\u0000\u1a38\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a39\u1a3a\u0005\u00b0\u0000\u0000\u1a3a\u1a3b\u0005"+
		"\u0182\u0000\u0000\u1a3b\u1a3c\u0005\u0164\u0000\u0000\u1a3c\u1a3d\u0005"+
		"\u0180\u0000\u0000\u1a3d\u1a3e\u0003\u0208\u0104\u0000\u1a3e\u1a3f\u0005"+
		"\u016c\u0000\u0000\u1a3f\u1a40\u0005\u0162\u0000\u0000\u1a40\u1a41\u0003"+
		"\u056a\u02b5\u0000\u1a41\u1a97\u0001\u0000\u0000\u0000\u1a42\u1a43\u0005"+
		"\u00b0\u0000\u0000\u1a43\u1a44\u0005\u0182\u0000\u0000\u1a44\u1a45\u0005"+
		"\u0164\u0000\u0000\u1a45\u1a46\u0005\u00c9\u0000\u0000\u1a46\u1a47\u0003"+
		"\u0208\u0104\u0000\u1a47\u1a48\u0005\u016c\u0000\u0000\u1a48\u1a49\u0005"+
		"\u0162\u0000\u0000\u1a49\u1a4a\u0003\u056a\u02b5\u0000\u1a4a\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a4b\u1a4c\u0005\u00b0\u0000\u0000\u1a4c\u1a4d\u0005"+
		"\u0167\u0000\u0000\u1a4d\u1a4e\u0003\u0566\u02b3\u0000\u1a4e\u1a4f\u0005"+
		"\u016c\u0000\u0000\u1a4f\u1a50\u0005\u0162\u0000\u0000\u1a50\u1a51\u0003"+
		"\u056a\u02b5\u0000\u1a51\u1a97\u0001\u0000\u0000\u0000\u1a52\u1a53\u0005"+
		"\u00b0\u0000\u0000\u1a53\u1a54\u0005\u0167\u0000\u0000\u1a54\u1a55\u0005"+
		"\u0102\u0000\u0000\u1a55\u1a56\u0005\u01ab\u0000\u0000\u1a56\u1a57\u0003"+
		"\u0566\u02b3\u0000\u1a57\u1a58\u0005\u016c\u0000\u0000\u1a58\u1a59\u0005"+
		"\u0162\u0000\u0000\u1a59\u1a5a\u0003\u056a\u02b5\u0000\u1a5a\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a5b\u1a5c\u0005\u00b0\u0000\u0000\u1a5c\u1a5d\u0005"+
		"\u0197\u0000\u0000\u1a5d\u1a5e\u0003\u0566\u02b3\u0000\u1a5e\u1a5f\u0005"+
		"\u016c\u0000\u0000\u1a5f\u1a60\u0005\u0162\u0000\u0000\u1a60\u1a61\u0003"+
		"\u056a\u02b5\u0000\u1a61\u1a97\u0001\u0000\u0000\u0000\u1a62\u1a63\u0005"+
		"\u00b0\u0000\u0000\u1a63\u1a64\u0005\u0197\u0000\u0000\u1a64\u1a65\u0005"+
		"\u0102\u0000\u0000\u1a65\u1a66\u0005\u01ab\u0000\u0000\u1a66\u1a67\u0003"+
		"\u0566\u02b3\u0000\u1a67\u1a68\u0005\u016c\u0000\u0000\u1a68\u1a69\u0005"+
		"\u0162\u0000\u0000\u1a69\u1a6a\u0003\u056a\u02b5\u0000\u1a6a\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a6b\u1a6c\u0005\u00b0\u0000\u0000\u1a6c\u1a6d\u0005"+
		"\u0121\u0000\u0000\u1a6d\u1a6e\u0005\u0197\u0000\u0000\u1a6e\u1a6f\u0003"+
		"\u0566\u02b3\u0000\u1a6f\u1a70\u0005\u016c\u0000\u0000\u1a70\u1a71\u0005"+
		"\u0162\u0000\u0000\u1a71\u1a72\u0003\u056a\u02b5\u0000\u1a72\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a73\u1a74\u0005\u00b0\u0000\u0000\u1a74\u1a75\u0005"+
		"\u0121\u0000\u0000\u1a75\u1a76\u0005\u0197\u0000\u0000\u1a76\u1a77\u0005"+
		"\u0102\u0000\u0000\u1a77\u1a78\u0005\u01ab\u0000\u0000\u1a78\u1a79\u0003"+
		"\u0566\u02b3\u0000\u1a79\u1a7a\u0005\u016c\u0000\u0000\u1a7a\u1a7b\u0005"+
		"\u0162\u0000\u0000\u1a7b\u1a7c\u0003\u056a\u02b5\u0000\u1a7c\u1a97\u0001"+
		"\u0000\u0000\u0000\u1a7d\u1a7e\u0005\u00b0\u0000\u0000\u1a7e\u1a7f\u0005"+
		"e\u0000\u0000\u1a7f\u1a80\u0005\u0082\u0000\u0000\u1a80\u1a81\u0003\u0430"+
		"\u0218\u0000\u1a81\u1a82\u0005\u016c\u0000\u0000\u1a82\u1a83\u0005\u0162"+
		"\u0000\u0000\u1a83\u1a84\u0003\u056a\u02b5\u0000\u1a84\u1a97\u0001\u0000"+
		"\u0000\u0000\u1a85\u1a86\u0005\u00b0\u0000\u0000\u1a86\u1a87\u0005e\u0000"+
		"\u0000\u1a87\u1a88\u0005\u0082\u0000\u0000\u1a88\u1a89\u0005\u0102\u0000"+
		"\u0000\u1a89\u1a8a\u0005\u01ab\u0000\u0000\u1a8a\u1a8b\u0003\u0430\u0218"+
		"\u0000\u1a8b\u1a8c\u0005\u016c\u0000\u0000\u1a8c\u1a8d\u0005\u0162\u0000"+
		"\u0000\u1a8d\u1a8e\u0003\u056a\u02b5\u0000\u1a8e\u1a97\u0001\u0000\u0000"+
		"\u0000\u1a8f\u1a90\u0005\u00b0\u0000\u0000\u1a90\u1a91\u0005\u0187\u0000"+
		"\u0000\u1a91\u1a92\u0003\u0208\u0104\u0000\u1a92\u1a93\u0005\u016c\u0000"+
		"\u0000\u1a93\u1a94\u0005\u0162\u0000\u0000\u1a94\u1a95\u0003\u056a\u02b5"+
		"\u0000\u1a95\u1a97\u0001\u0000\u0000\u0000\u1a96\u19bd\u0001\u0000\u0000"+
		"\u0000\u1a96\u19c4\u0001\u0000\u0000\u0000\u1a96\u19cb\u0001\u0000\u0000"+
		"\u0000\u1a96\u19d2\u0001\u0000\u0000\u0000\u1a96\u19d9\u0001\u0000\u0000"+
		"\u0000\u1a96\u19e0\u0001\u0000\u0000\u0000\u1a96\u19e7\u0001\u0000\u0000"+
		"\u0000\u1a96\u19ee\u0001\u0000\u0000\u0000\u1a96\u19f8\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a02\u0001\u0000\u0000\u0000\u1a96\u1a09\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a10\u0001\u0000\u0000\u0000\u1a96\u1a17\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a20\u0001\u0000\u0000\u0000\u1a96\u1a27\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a30\u0001\u0000\u0000\u0000\u1a96\u1a39\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a42\u0001\u0000\u0000\u0000\u1a96\u1a4b\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a52\u0001\u0000\u0000\u0000\u1a96\u1a5b\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a62\u0001\u0000\u0000\u0000\u1a96\u1a6b\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a73\u0001\u0000\u0000\u0000\u1a96\u1a7d\u0001\u0000\u0000"+
		"\u0000\u1a96\u1a85\u0001\u0000\u0000\u0000\u1a96\u1a8f\u0001\u0000\u0000"+
		"\u0000\u1a97\u02d9\u0001\u0000\u0000\u0000\u1a98\u1a99\u0005\u00b0\u0000"+
		"\u0000\u1a99\u1a9a\u0005\u0135\u0000\u0000\u1a9a\u1a9b\u0003\u02ae\u0157"+
		"\u0000\u1a9b\u1a9c\u0005\u016c\u0000\u0000\u1a9c\u1a9d\u0005\u0002\u0000"+
		"\u0000\u1a9d\u1a9e\u0003\u02dc\u016e\u0000\u1a9e\u1a9f\u0005\u0003\u0000"+
		"\u0000\u1a9f\u02db\u0001\u0000\u0000\u0000\u1aa0\u1aa5\u0003\u02de\u016f"+
		"\u0000\u1aa1\u1aa2\u0005\u0006\u0000\u0000\u1aa2\u1aa4\u0003\u02de\u016f"+
		"\u0000\u1aa3\u1aa1\u0001\u0000\u0000\u0000\u1aa4\u1aa7\u0001\u0000\u0000"+
		"\u0000\u1aa5\u1aa3\u0001\u0000\u0000\u0000\u1aa5\u1aa6\u0001\u0000\u0000"+
		"\u0000\u1aa6\u02dd\u0001\u0000\u0000\u0000\u1aa7\u1aa5\u0001\u0000\u0000"+
		"\u0000\u1aa8\u1aa9\u0003\u0590\u02c8\u0000\u1aa9\u1aaa\u0005\n\u0000\u0000"+
		"\u1aaa\u1aab\u0005\u01b6\u0000\u0000\u1aab\u1ab1\u0001\u0000\u0000\u0000"+
		"\u1aac\u1aad\u0003\u0590\u02c8\u0000\u1aad\u1aae\u0005\n\u0000\u0000\u1aae"+
		"\u1aaf\u0003\u02e0\u0170\u0000\u1aaf\u1ab1\u0001\u0000\u0000\u0000\u1ab0"+
		"\u1aa8\u0001\u0000\u0000\u0000\u1ab0\u1aac\u0001\u0000\u0000\u0000\u1ab1"+
		"\u02df\u0001\u0000\u0000\u0000\u1ab2\u1ab8\u0003\u027e\u013f\u0000\u1ab3"+
		"\u1ab8\u0003\u059a\u02cd\u0000\u1ab4\u1ab8\u0003\u04fe\u027f\u0000\u1ab5"+
		"\u1ab8\u0003\u0120\u0090\u0000\u1ab6\u1ab8\u0003\u057c\u02be\u0000\u1ab7"+
		"\u1ab2\u0001\u0000\u0000\u0000\u1ab7\u1ab3\u0001\u0000\u0000\u0000\u1ab7"+
		"\u1ab4\u0001\u0000\u0000\u0000\u1ab7\u1ab5\u0001\u0000\u0000\u0000\u1ab7"+
		"\u1ab6\u0001\u0000\u0000\u0000\u1ab8\u02e1\u0001\u0000\u0000\u0000\u1ab9"+
		"\u1aba\u0005\u00b0\u0000\u0000\u1aba\u1abb\u0005\u0187\u0000\u0000\u1abb"+
		"\u1abc\u0003\u0208\u0104\u0000\u1abc\u1abd\u0005\u016c\u0000\u0000\u1abd"+
		"\u1abe\u0005\u0002\u0000\u0000\u1abe\u1abf\u0003\u02dc\u016e\u0000\u1abf"+
		"\u1ac0\u0005\u0003\u0000\u0000\u1ac0\u02e3\u0001\u0000\u0000\u0000\u1ac1"+
		"\u1ac2\u0005\u00b0\u0000\u0000\u1ac2\u1ac3\u0005\u00ae\u0000\u0000\u1ac3"+
		"\u1ac4\u0003\u0288\u0144\u0000\u1ac4\u1ac5\u0005\u0139\u0000\u0000\u1ac5"+
		"\u1ac6\u0005\u0084\u0000\u0000\u1ac6\u1ac7\u0003\u0586\u02c3\u0000\u1ac7"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1ac8\u1ac9\u0005\u00b0\u0000\u0000\u1ac9"+
		"\u1aca\u0005\u0092\u0000\u0000\u1aca\u1acb\u0003\u0208\u0104\u0000\u1acb"+
		"\u1acc\u0005\u0139\u0000\u0000\u1acc\u1acd\u0005\u0084\u0000\u0000\u1acd"+
		"\u1ace\u0003\u0586\u02c3\u0000\u1ace\u1b7b\u0001\u0000\u0000\u0000\u1acf"+
		"\u1ad0\u0005\u00b0\u0000\u0000\u1ad0\u1ad1\u0005\u00ce\u0000\u0000\u1ad1"+
		"\u1ad2\u0003\u0208\u0104\u0000\u1ad2\u1ad3\u0005\u0139\u0000\u0000\u1ad3"+
		"\u1ad4\u0005\u0084\u0000\u0000\u1ad4\u1ad5\u0003\u0586\u02c3\u0000\u1ad5"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1ad6\u1ad7\u0005\u00b0\u0000\u0000\u1ad7"+
		"\u1ad8\u0005\u00d5\u0000\u0000\u1ad8\u1ad9\u0003\u056a\u02b5\u0000\u1ad9"+
		"\u1ada\u0005\u0139\u0000\u0000\u1ada\u1adb\u0005\u0084\u0000\u0000\u1adb"+
		"\u1adc\u0003\u0586\u02c3\u0000\u1adc\u1b7b\u0001\u0000\u0000\u0000\u1add"+
		"\u1ade\u0005\u00b0\u0000\u0000\u1ade\u1adf\u0005\u00e3\u0000\u0000\u1adf"+
		"\u1ae0\u0003\u0208\u0104\u0000\u1ae0\u1ae1\u0005\u0139\u0000\u0000\u1ae1"+
		"\u1ae2\u0005\u0084\u0000\u0000\u1ae2\u1ae3\u0003\u0586\u02c3\u0000\u1ae3"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1ae4\u1ae5\u0005\u00b0\u0000\u0000\u1ae5"+
		"\u1ae6\u0005\u00f9\u0000\u0000\u1ae6\u1ae7\u0003\u0270\u0138\u0000\u1ae7"+
		"\u1ae8\u0005\u0139\u0000\u0000\u1ae8\u1ae9\u0005\u0084\u0000\u0000\u1ae9"+
		"\u1aea\u0003\u0586\u02c3\u0000\u1aea\u1b7b\u0001\u0000\u0000\u0000\u1aeb"+
		"\u1aed\u0005\u00b0\u0000\u0000\u1aec\u1aee\u0003\u0130\u0098\u0000\u1aed"+
		"\u1aec\u0001\u0000\u0000\u0000\u1aed\u1aee\u0001\u0000\u0000\u0000\u1aee"+
		"\u1aef\u0001\u0000\u0000\u0000\u1aef\u1af0\u0005\u0114\u0000\u0000\u1af0"+
		"\u1af1\u0003\u056a\u02b5\u0000\u1af1\u1af2\u0005\u0139\u0000\u0000\u1af2"+
		"\u1af3\u0005\u0084\u0000\u0000\u1af3\u1af4\u0003\u0586\u02c3\u0000\u1af4"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1af5\u1af6\u0005\u00b0\u0000\u0000\u1af6"+
		"\u1af7\u0005\u0115\u0000\u0000\u1af7\u1af8\u0005\u0131\u0000\u0000\u1af8"+
		"\u1af9\u0003\u0120\u0090\u0000\u1af9\u1afa\u0005\u0139\u0000\u0000\u1afa"+
		"\u1afb\u0005\u0084\u0000\u0000\u1afb\u1afc\u0003\u0586\u02c3\u0000\u1afc"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1afd\u1afe\u0005\u00b0\u0000\u0000\u1afe"+
		"\u1aff\u0005\u0135\u0000\u0000\u1aff\u1b00\u0003\u02ae\u0157\u0000\u1b00"+
		"\u1b01\u0005\u0139\u0000\u0000\u1b01\u1b02\u0005\u0084\u0000\u0000\u1b02"+
		"\u1b03\u0003\u0586\u02c3\u0000\u1b03\u1b7b\u0001\u0000\u0000\u0000\u1b04"+
		"\u1b05\u0005\u00b0\u0000\u0000\u1b05\u1b06\u0005\u0135\u0000\u0000\u1b06"+
		"\u1b07\u0005\u00c2\u0000\u0000\u1b07\u1b08\u0003\u0208\u0104\u0000\u1b08"+
		"\u1b09\u0005\u008a\u0000\u0000\u1b09\u1b0a\u0003\u056a\u02b5\u0000\u1b0a"+
		"\u1b0b\u0005\u0139\u0000\u0000\u1b0b\u1b0c\u0005\u0084\u0000\u0000\u1b0c"+
		"\u1b0d\u0003\u0586\u02c3\u0000\u1b0d\u1b7b\u0001\u0000\u0000\u0000\u1b0e"+
		"\u1b0f\u0005\u00b0\u0000\u0000\u1b0f\u1b10\u0005\u0135\u0000\u0000\u1b10"+
		"\u1b11\u0005\u00f4\u0000\u0000\u1b11\u1b12\u0003\u0208\u0104\u0000\u1b12"+
		"\u1b13\u0005\u008a\u0000\u0000\u1b13\u1b14\u0003\u056a\u02b5\u0000\u1b14"+
		"\u1b15\u0005\u0139\u0000\u0000\u1b15\u1b16\u0005\u0084\u0000\u0000\u1b16"+
		"\u1b17\u0003\u0586\u02c3\u0000\u1b17\u1b7b\u0001\u0000\u0000\u0000\u1b18"+
		"\u1b19\u0005\u00b0\u0000\u0000\u1b19\u1b1a\u0005\u0147\u0000\u0000\u1b1a"+
		"\u1b1b\u0003\u0270\u0138\u0000\u1b1b\u1b1c\u0005\u0139\u0000\u0000\u1b1c"+
		"\u1b1d\u0005\u0084\u0000\u0000\u1b1d\u1b1e\u0003\u0586\u02c3\u0000\u1b1e"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1b1f\u1b20\u0005\u00b0\u0000\u0000\u1b20"+
		"\u1b21\u0005\u01e0\u0000\u0000\u1b21\u1b22\u0003\u0270\u0138\u0000\u1b22"+
		"\u1b23\u0005\u0139\u0000\u0000\u1b23\u1b24\u0005\u0084\u0000\u0000\u1b24"+
		"\u1b25\u0003\u0586\u02c3\u0000\u1b25\u1b7b\u0001\u0000\u0000\u0000\u1b26"+
		"\u1b27\u0005\u00b0\u0000\u0000\u1b27\u1b28\u0005\u0162\u0000\u0000\u1b28"+
		"\u1b29\u0003\u056a\u02b5\u0000\u1b29\u1b2a\u0005\u0139\u0000\u0000\u1b2a"+
		"\u1b2b\u0005\u0084\u0000\u0000\u1b2b\u1b2c\u0003\u0586\u02c3\u0000\u1b2c"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1b2d\u1b2e\u0005\u00b0\u0000\u0000\u1b2e"+
		"\u1b2f\u0005\u0187\u0000\u0000\u1b2f\u1b30\u0003\u0208\u0104\u0000\u1b30"+
		"\u1b31\u0005\u0139\u0000\u0000\u1b31\u1b32\u0005\u0084\u0000\u0000\u1b32"+
		"\u1b33\u0003\u0586\u02c3\u0000\u1b33\u1b7b\u0001\u0000\u0000\u0000\u1b34"+
		"\u1b35\u0005\u00b0\u0000\u0000\u1b35\u1b36\u0005\u017e\u0000\u0000\u1b36"+
		"\u1b37\u0003\u056a\u02b5\u0000\u1b37\u1b38\u0005\u0139\u0000\u0000\u1b38"+
		"\u1b39\u0005\u0084\u0000\u0000\u1b39\u1b3a\u0003\u0586\u02c3\u0000\u1b3a"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1b3b\u1b3c\u0005\u00b0\u0000\u0000\u1b3c"+
		"\u1b3d\u0005\u0175\u0000\u0000\u1b3d\u1b3e\u0003\u0208\u0104\u0000\u1b3e"+
		"\u1b3f\u0005\u0139\u0000\u0000\u1b3f\u1b40\u0005\u0084\u0000\u0000\u1b40"+
		"\u1b41\u0003\u0586\u02c3\u0000\u1b41\u1b7b\u0001\u0000\u0000\u0000\u1b42"+
		"\u1b43\u0005\u00b0\u0000\u0000\u1b43\u1b44\u0005\u0182\u0000\u0000\u1b44"+
		"\u1b45\u0005\u0164\u0000\u0000\u1b45\u1b46\u0005\u00df\u0000\u0000\u1b46"+
		"\u1b47\u0003\u0208\u0104\u0000\u1b47\u1b48\u0005\u0139\u0000\u0000\u1b48"+
		"\u1b49\u0005\u0084\u0000\u0000\u1b49\u1b4a\u0003\u0586\u02c3\u0000\u1b4a"+
		"\u1b7b\u0001\u0000\u0000\u0000\u1b4b\u1b4c\u0005\u00b0\u0000\u0000\u1b4c"+
		"\u1b4d\u0005\u0182\u0000\u0000\u1b4d\u1b4e\u0005\u0164\u0000\u0000\u1b4e"+
		"\u1b4f\u0005\u00c9\u0000\u0000\u1b4f\u1b50\u0003\u0208\u0104\u0000\u1b50"+
		"\u1b51\u0005\u0139\u0000\u0000\u1b51\u1b52\u0005\u0084\u0000\u0000\u1b52"+
		"\u1b53\u0003\u0586\u02c3\u0000\u1b53\u1b7b\u0001\u0000\u0000\u0000\u1b54"+
		"\u1b55\u0005\u00b0\u0000\u0000\u1b55\u1b56\u0005e\u0000\u0000\u1b56\u1b57"+
		"\u0005\u00d4\u0000\u0000\u1b57\u1b58\u0005\u019c\u0000\u0000\u1b58\u1b59"+
		"\u0003\u056a\u02b5\u0000\u1b59\u1b5a\u0005\u0139\u0000\u0000\u1b5a\u1b5b"+
		"\u0005\u0084\u0000\u0000\u1b5b\u1b5c\u0003\u0586\u02c3\u0000\u1b5c\u1b7b"+
		"\u0001\u0000\u0000\u0000\u1b5d\u1b5e\u0005\u00b0\u0000\u0000\u1b5e\u1b5f"+
		"\u0005\u016a\u0000\u0000\u1b5f\u1b60\u0003\u056a\u02b5\u0000\u1b60\u1b61"+
		"\u0005\u0139\u0000\u0000\u1b61\u1b62\u0005\u0084\u0000\u0000\u1b62\u1b63"+
		"\u0003\u0586\u02c3\u0000\u1b63\u1b7b\u0001\u0000\u0000\u0000\u1b64\u1b65"+
		"\u0005\u00b0\u0000\u0000\u1b65\u1b66\u0005\u00ec\u0000\u0000\u1b66\u1b67"+
		"\u0005\u0184\u0000\u0000\u1b67\u1b68\u0003\u056a\u02b5\u0000\u1b68\u1b69"+
		"\u0005\u0139\u0000\u0000\u1b69\u1b6a\u0005\u0084\u0000\u0000\u1b6a\u1b6b"+
		"\u0003\u0586\u02c3\u0000\u1b6b\u1b7b\u0001\u0000\u0000\u0000\u1b6c\u1b6d"+
		"\u0005\u00b0\u0000\u0000\u1b6d\u1b6e\u0005\u01ea\u0000\u0000\u1b6e\u1b6f"+
		"\u0003\u056a\u02b5\u0000\u1b6f\u1b70\u0005\u0139\u0000\u0000\u1b70\u1b71"+
		"\u0005\u0084\u0000\u0000\u1b71\u1b72\u0003\u0586\u02c3\u0000\u1b72\u1b7b"+
		"\u0001\u0000\u0000\u0000\u1b73\u1b74\u0005\u00b0\u0000\u0000\u1b74\u1b75"+
		"\u0005\u01e9\u0000\u0000\u1b75\u1b76\u0003\u056a\u02b5\u0000\u1b76\u1b77"+
		"\u0005\u0139\u0000\u0000\u1b77\u1b78\u0005\u0084\u0000\u0000\u1b78\u1b79"+
		"\u0003\u0586\u02c3\u0000\u1b79\u1b7b\u0001\u0000\u0000\u0000\u1b7a\u1ac1"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1ac8\u0001\u0000\u0000\u0000\u1b7a\u1acf"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1ad6\u0001\u0000\u0000\u0000\u1b7a\u1add"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1ae4\u0001\u0000\u0000\u0000\u1b7a\u1aeb"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1af5\u0001\u0000\u0000\u0000\u1b7a\u1afd"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b04\u0001\u0000\u0000\u0000\u1b7a\u1b0e"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b18\u0001\u0000\u0000\u0000\u1b7a\u1b1f"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b26\u0001\u0000\u0000\u0000\u1b7a\u1b2d"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b34\u0001\u0000\u0000\u0000\u1b7a\u1b3b"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b42\u0001\u0000\u0000\u0000\u1b7a\u1b4b"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b54\u0001\u0000\u0000\u0000\u1b7a\u1b5d"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b64\u0001\u0000\u0000\u0000\u1b7a\u1b6c"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b73\u0001\u0000\u0000\u0000\u1b7b\u02e5"+
		"\u0001\u0000\u0000\u0000\u1b7c\u1b7d\u0005T\u0000\u0000\u1b7d\u1b7e\u0005"+
		"\u01ea\u0000\u0000\u1b7e\u1b80\u0003\u056a\u02b5\u0000\u1b7f\u1b81\u0003"+
		"\u02e8\u0174\u0000\u1b80\u1b7f\u0001\u0000\u0000\u0000\u1b80\u1b81\u0001"+
		"\u0000\u0000\u0000\u1b81\u1b83\u0001\u0000\u0000\u0000\u1b82\u1b84\u0003"+
		"\u0296\u014b\u0000\u1b83\u1b82\u0001\u0000\u0000\u0000\u1b83\u1b84\u0001"+
		"\u0000\u0000\u0000\u1b84\u02e7\u0001\u0000\u0000\u0000\u1b85\u1b86\u0003"+
		"\u02ea\u0175\u0000\u1b86\u02e9\u0001\u0000\u0000\u0000\u1b87\u1b88\u0005"+
		"d\u0000\u0000\u1b88\u1b89\u0005\u0082\u0000\u0000\u1b89\u1b8e\u0003\u0432"+
		"\u0219\u0000\u1b8a\u1b8b\u0005d\u0000\u0000\u1b8b\u1b8c\u0005D\u0000\u0000"+
		"\u1b8c\u1b8e\u0005\u017d\u0000\u0000\u1b8d\u1b87\u0001\u0000\u0000\u0000"+
		"\u1b8d\u1b8a\u0001\u0000\u0000\u0000\u1b8e\u02eb\u0001\u0000\u0000\u0000"+
		"\u1b8f\u1b90\u0005\u00b0\u0000\u0000\u1b90\u1b91\u0005\u01ea\u0000\u0000"+
		"\u1b91\u1b92\u0003\u056a\u02b5\u0000\u1b92\u1b93\u0005\u016c\u0000\u0000"+
		"\u1b93\u1b94\u0003\u01c8\u00e4\u0000\u1b94\u1bab\u0001\u0000\u0000\u0000"+
		"\u1b95\u1b96\u0005\u00b0\u0000\u0000\u1b96\u1b97\u0005\u01ea\u0000\u0000"+
		"\u1b97\u1b98\u0003\u056a\u02b5\u0000\u1b98\u1b99\u0005\u00ab\u0000\u0000"+
		"\u1b99\u1b9a\u0005\u0082\u0000\u0000\u1b9a\u1b9b\u0003\u0432\u0219\u0000"+
		"\u1b9b\u1bab\u0001\u0000\u0000\u0000\u1b9c\u1b9d\u0005\u00b0\u0000\u0000"+
		"\u1b9d\u1b9e\u0005\u01ea\u0000\u0000\u1b9e\u1b9f\u0003\u056a\u02b5\u0000"+
		"\u1b9f\u1ba0\u0005\u016c\u0000\u0000\u1ba0\u1ba1\u0005\u0082\u0000\u0000"+
		"\u1ba1\u1ba2\u0003\u0432\u0219\u0000\u1ba2\u1bab\u0001\u0000\u0000\u0000"+
		"\u1ba3\u1ba4\u0005\u00b0\u0000\u0000\u1ba4\u1ba5\u0005\u01ea\u0000\u0000"+
		"\u1ba5\u1ba6\u0003\u056a\u02b5\u0000\u1ba6\u1ba7\u0005\u00e5\u0000\u0000"+
		"\u1ba7\u1ba8\u0005\u0082\u0000\u0000\u1ba8\u1ba9\u0003\u0432\u0219\u0000"+
		"\u1ba9\u1bab\u0001\u0000\u0000\u0000\u1baa\u1b8f\u0001\u0000\u0000\u0000"+
		"\u1baa\u1b95\u0001\u0000\u0000\u0000\u1baa\u1b9c\u0001\u0000\u0000\u0000"+
		"\u1baa\u1ba3\u0001\u0000\u0000\u0000\u1bab\u02ed\u0001\u0000\u0000\u0000"+
		"\u1bac\u1bad\u0005T\u0000\u0000\u1bad\u1bae\u0005\u01e9\u0000\u0000\u1bae"+
		"\u1baf\u0003\u056a\u02b5\u0000\u1baf\u1bb0\u0005\u00ca\u0000\u0000\u1bb0"+
		"\u1bb1\u0003\u057c\u02be\u0000\u1bb1\u1bb2\u0005\u01ea\u0000\u0000\u1bb2"+
		"\u1bb4\u0003\u02f0\u0178\u0000\u1bb3\u1bb5\u0003\u0296\u014b\u0000\u1bb4"+
		"\u1bb3\u0001\u0000\u0000\u0000\u1bb4\u1bb5\u0001\u0000\u0000\u0000\u1bb5"+
		"\u02ef\u0001\u0000\u0000\u0000\u1bb6\u1bbb\u0003\u02f2\u0179\u0000\u1bb7"+
		"\u1bb8\u0005\u0006\u0000\u0000\u1bb8\u1bba\u0003\u02f2\u0179\u0000\u1bb9"+
		"\u1bb7\u0001\u0000\u0000\u0000\u1bba\u1bbd\u0001\u0000\u0000\u0000\u1bbb"+
		"\u1bb9\u0001\u0000\u0000\u0000\u1bbb\u1bbc\u0001\u0000\u0000\u0000\u1bbc"+
		"\u02f1\u0001\u0000\u0000\u0000\u1bbd\u1bbb\u0001\u0000\u0000\u0000\u1bbe"+
		"\u1bbf\u0003\u0590\u02c8\u0000\u1bbf\u02f3\u0001\u0000\u0000\u0000\u1bc0"+
		"\u1bc1\u0005\u00b0\u0000\u0000\u1bc1\u1bc2\u0005\u01e9\u0000\u0000\u1bc2"+
		"\u1bc3\u0003\u056a\u02b5\u0000\u1bc3\u1bc4\u0005\u016c\u0000\u0000\u1bc4"+
		"\u1bc5\u0003\u01c8\u00e4\u0000\u1bc5\u1be8\u0001\u0000\u0000\u0000\u1bc6"+
		"\u1bc7\u0005\u00b0\u0000\u0000\u1bc7\u1bc8\u0005\u01e9\u0000\u0000\u1bc8"+
		"\u1bc9\u0003\u056a\u02b5\u0000\u1bc9\u1bca\u0005\u00ca\u0000\u0000\u1bca"+
		"\u1bcb\u0003\u057c\u02be\u0000\u1bcb\u1be8\u0001\u0000\u0000\u0000\u1bcc"+
		"\u1bcd\u0005\u00b0\u0000\u0000\u1bcd\u1bce\u0005\u01e9\u0000\u0000\u1bce"+
		"\u1bcf\u0003\u056a\u02b5\u0000\u1bcf\u1bd0\u0005\u0150\u0000\u0000\u1bd0"+
		"\u1bd2\u0005\u01ea\u0000\u0000\u1bd1\u1bd3\u0003\u0296\u014b\u0000\u1bd2"+
		"\u1bd1\u0001\u0000\u0000\u0000\u1bd2\u1bd3\u0001\u0000\u0000\u0000\u1bd3"+
		"\u1be8\u0001\u0000\u0000\u0000\u1bd4\u1bd5\u0005\u00b0\u0000\u0000\u1bd5"+
		"\u1bd6\u0005\u01e9\u0000\u0000\u1bd6\u1bd7\u0003\u056a\u02b5\u0000\u1bd7"+
		"\u1bd8\u0005\u016c\u0000\u0000\u1bd8\u1bd9\u0005\u01ea\u0000\u0000\u1bd9"+
		"\u1bdb\u0003\u02f0\u0178\u0000\u1bda\u1bdc\u0003\u0296\u014b\u0000\u1bdb"+
		"\u1bda\u0001\u0000\u0000\u0000\u1bdb\u1bdc\u0001\u0000\u0000\u0000\u1bdc"+
		"\u1be8\u0001\u0000\u0000\u0000\u1bdd\u1bde\u0005\u00b0\u0000\u0000\u1bde"+
		"\u1bdf\u0005\u01e9\u0000\u0000\u1bdf\u1be0\u0003\u056a\u02b5\u0000\u1be0"+
		"\u1be1\u0005\u00e7\u0000\u0000\u1be1\u1be8\u0001\u0000\u0000\u0000\u1be2"+
		"\u1be3\u0005\u00b0\u0000\u0000\u1be3\u1be4\u0005\u01e9\u0000\u0000\u1be4"+
		"\u1be5\u0003\u056a\u02b5\u0000\u1be5\u1be6\u0005\u00e0\u0000\u0000\u1be6"+
		"\u1be8\u0001\u0000\u0000\u0000\u1be7\u1bc0\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bc6\u0001\u0000\u0000\u0000\u1be7\u1bcc\u0001\u0000\u0000\u0000\u1be7"+
		"\u1bd4\u0001\u0000\u0000\u0000\u1be7\u1bdd\u0001\u0000\u0000\u0000\u1be7"+
		"\u1be2\u0001\u0000\u0000\u0000\u1be8\u02f5\u0001\u0000\u0000\u0000\u1be9"+
		"\u1bea\u0005\u00e5\u0000\u0000\u1bea\u1beb\u0005\u01e9\u0000\u0000\u1beb"+
		"\u1bed\u0003\u056a\u02b5\u0000\u1bec\u1bee\u0003h4\u0000\u1bed\u1bec\u0001"+
		"\u0000\u0000\u0000\u1bed\u1bee\u0001\u0000\u0000\u0000\u1bee\u1bf8\u0001"+
		"\u0000\u0000\u0000\u1bef\u1bf0\u0005\u00e5\u0000\u0000\u1bf0\u1bf1\u0005"+
		"\u01e9\u0000\u0000\u1bf1\u1bf2\u0005\u0102\u0000\u0000\u1bf2\u1bf3\u0005"+
		"\u01ab\u0000\u0000\u1bf3\u1bf5\u0003\u056a\u02b5\u0000\u1bf4\u1bf6\u0003"+
		"h4\u0000\u1bf5\u1bf4\u0001\u0000\u0000\u0000\u1bf5\u1bf6\u0001\u0000\u0000"+
		"\u0000\u1bf6\u1bf8\u0001\u0000\u0000\u0000\u1bf7\u1be9\u0001\u0000\u0000"+
		"\u0000\u1bf7\u1bef\u0001\u0000\u0000\u0000\u1bf8\u02f7\u0001\u0000\u0000"+
		"\u0000\u1bf9\u1bfb\u0005T\u0000\u0000\u1bfa\u1bfc\u0003\u0268\u0134\u0000"+
		"\u1bfb\u1bfa\u0001\u0000\u0000\u0000\u1bfb\u1bfc\u0001\u0000\u0000\u0000"+
		"\u1bfc\u1bfd\u0001\u0000\u0000\u0000\u1bfd\u1bfe\u0005\u0160\u0000\u0000"+
		"\u1bfe\u1bff\u0003\u056a\u02b5\u0000\u1bff\u1c00\u0005J\u0000\u0000\u1c00"+
		"\u1c01\u0005v\u0000\u0000\u1c01\u1c02\u0003\u0302\u0181\u0000\u1c02\u1c03"+
		"\u0005\u0084\u0000\u0000\u1c03\u1c05\u0003\u0566\u02b3\u0000\u1c04\u1c06"+
		"\u0003\u0444\u0222\u0000\u1c05\u1c04\u0001\u0000\u0000\u0000\u1c05\u1c06"+
		"\u0001\u0000\u0000\u0000\u1c06\u1c07\u0001\u0000\u0000\u0000\u1c07\u1c09"+
		"\u0005_\u0000\u0000\u1c08\u1c0a\u0003\u0304\u0182\u0000\u1c09\u1c08\u0001"+
		"\u0000\u0000\u0000\u1c09\u1c0a\u0001\u0000\u0000\u0000\u1c0a\u1c0b\u0001"+
		"\u0000\u0000\u0000\u1c0b\u1c0c\u0003\u02fa\u017d\u0000\u1c0c\u02f9\u0001"+
		"\u0000\u0000\u0000\u1c0d\u1c14\u0005\u012d\u0000\u0000\u1c0e\u1c14\u0003"+
		"\u02fe\u017f\u0000\u1c0f\u1c10\u0005\u0002\u0000\u0000\u1c10\u1c11\u0003"+
		"\u02fc\u017e\u0000\u1c11\u1c12\u0005\u0003\u0000\u0000\u1c12\u1c14\u0001"+
		"\u0000\u0000\u0000\u1c13\u1c0d\u0001\u0000\u0000\u0000\u1c13\u1c0e\u0001"+
		"\u0000\u0000\u0000\u1c13\u1c0f\u0001\u0000\u0000\u0000\u1c14\u02fb\u0001"+
		"\u0000\u0000\u0000\u1c15\u1c17\u0003\u0300\u0180\u0000\u1c16\u1c15\u0001"+
		"\u0000\u0000\u0000\u1c16\u1c17\u0001\u0000\u0000\u0000\u1c17\u1c1e\u0001"+
		"\u0000\u0000\u0000\u1c18\u1c1a\u0005\u0007\u0000\u0000\u1c19\u1c1b\u0003"+
		"\u0300\u0180\u0000\u1c1a\u1c19\u0001\u0000\u0000\u0000\u1c1a\u1c1b\u0001"+
		"\u0000\u0000\u0000\u1c1b\u1c1d\u0001\u0000\u0000\u0000\u1c1c\u1c18\u0001"+
		"\u0000\u0000\u0000\u1c1d\u1c20\u0001\u0000\u0000\u0000\u1c1e\u1c1c\u0001"+
		"\u0000\u0000\u0000\u1c1e\u1c1f\u0001\u0000\u0000\u0000\u1c1f\u02fd\u0001"+
		"\u0000\u0000\u0000\u1c20\u1c1e\u0001\u0000\u0000\u0000\u1c21\u1c27\u0003"+
		"\u03c4\u01e2\u0000\u1c22\u1c27\u0003\u038a\u01c5\u0000\u1c23\u1c27\u0003"+
		"\u03b2\u01d9\u0000\u1c24\u1c27\u0003\u03a4\u01d2\u0000\u1c25\u1c27\u0003"+
		"\u0306\u0183\u0000\u1c26\u1c21\u0001\u0000\u0000\u0000\u1c26\u1c22\u0001"+
		"\u0000\u0000\u0000\u1c26\u1c23\u0001\u0000\u0000\u0000\u1c26\u1c24\u0001"+
		"\u0000\u0000\u0000\u1c26\u1c25\u0001\u0000\u0000\u0000\u1c27\u02ff\u0001"+
		"\u0000\u0000\u0000\u1c28\u1c29\u0003\u02fe\u017f\u0000\u1c29\u0301\u0001"+
		"\u0000\u0000\u0000\u1c2a\u1c2b\u0007\u001f\u0000\u0000\u1c2b\u0303\u0001"+
		"\u0000\u0000\u0000\u1c2c\u1c2d\u0007 \u0000\u0000\u1c2d\u0305\u0001\u0000"+
		"\u0000\u0000\u1c2e\u1c2f\u0005\u012e\u0000\u0000\u1c2f\u1c31\u0003\u058a"+
		"\u02c5\u0000\u1c30\u1c32\u0003\u0308\u0184\u0000\u1c31\u1c30\u0001\u0000"+
		"\u0000\u0000\u1c31\u1c32\u0001\u0000\u0000\u0000\u1c32\u0307\u0001\u0000"+
		"\u0000\u0000\u1c33\u1c34\u0005\u0006\u0000\u0000\u1c34\u1c35\u0003\u057c"+
		"\u02be\u0000\u1c35\u0309\u0001\u0000\u0000\u0000\u1c36\u1c37\u0005\u0119"+
		"\u0000\u0000\u1c37\u1c38\u0003\u058a\u02c5\u0000\u1c38\u030b\u0001\u0000"+
		"\u0000\u0000\u1c39\u1c3a\u0005\u018d\u0000\u0000\u1c3a\u1c3e\u0003\u058a"+
		"\u02c5\u0000\u1c3b\u1c3c\u0005\u018d\u0000\u0000\u1c3c\u1c3e\u0005\t\u0000"+
		"\u0000\u1c3d\u1c39\u0001\u0000\u0000\u0000\u1c3d\u1c3b\u0001\u0000\u0000"+
		"\u0000\u1c3e\u030d\u0001\u0000\u0000\u0000\u1c3f\u1c41\u0005\u00a7\u0000"+
		"\u0000\u1c40\u1c42\u0003\u0310\u0188\u0000\u1c41\u1c40\u0001\u0000\u0000"+
		"\u0000\u1c41\u1c42\u0001\u0000\u0000\u0000\u1c42\u1c44\u0001\u0000\u0000"+
		"\u0000\u1c43\u1c45\u0003\u0318\u018c\u0000\u1c44\u1c43\u0001\u0000\u0000"+
		"\u0000\u1c44\u1c45\u0001\u0000\u0000\u0000\u1c45\u1c85\u0001\u0000\u0000"+
		"\u0000\u1c46\u1c48\u0005\u00b8\u0000\u0000\u1c47\u1c49\u0003\u0310\u0188"+
		"\u0000\u1c48\u1c47\u0001\u0000\u0000\u0000\u1c48\u1c49\u0001\u0000\u0000"+
		"\u0000\u1c49\u1c4b\u0001\u0000\u0000\u0000\u1c4a\u1c4c\u0003\u0316\u018b"+
		"\u0000\u1c4b\u1c4a\u0001\u0000\u0000\u0000\u1c4b\u1c4c\u0001\u0000\u0000"+
		"\u0000\u1c4c\u1c85\u0001\u0000\u0000\u0000\u1c4d\u1c4e\u0005\u0173\u0000"+
		"\u0000\u1c4e\u1c50\u0005\u0183\u0000\u0000\u1c4f\u1c51\u0003\u0316\u018b"+
		"\u0000\u1c50\u1c4f\u0001\u0000\u0000\u0000\u1c50\u1c51\u0001\u0000\u0000"+
		"\u0000\u1c51\u1c85\u0001\u0000\u0000\u0000\u1c52\u1c54\u0005\u00c7\u0000"+
		"\u0000\u1c53\u1c55\u0003\u0310\u0188\u0000\u1c54\u1c53\u0001\u0000\u0000"+
		"\u0000\u1c54\u1c55\u0001\u0000\u0000\u0000\u1c55\u1c57\u0001\u0000\u0000"+
		"\u0000\u1c56\u1c58\u0003\u0318\u018c\u0000\u1c57\u1c56\u0001\u0000\u0000"+
		"\u0000\u1c57\u1c58\u0001\u0000\u0000\u0000\u1c58\u1c85\u0001\u0000\u0000"+
		"\u0000\u1c59\u1c5b\u0005\u01ec\u0000\u0000\u1c5a\u1c5c\u0003\u0310\u0188"+
		"\u0000\u1c5b\u1c5a\u0001\u0000\u0000\u0000\u1c5b\u1c5c\u0001\u0000\u0000"+
		"\u0000\u1c5c\u1c5e\u0001\u0000\u0000\u0000\u1c5d\u1c5f\u0003\u0318\u018c"+
		"\u0000\u1c5e\u1c5d\u0001\u0000\u0000\u0000\u1c5e\u1c5f\u0001\u0000\u0000"+
		"\u0000\u1c5f\u1c85\u0001\u0000\u0000\u0000\u1c60\u1c62\u0005\u015e\u0000"+
		"\u0000\u1c61\u1c63\u0003\u0310\u0188\u0000\u1c62\u1c61\u0001\u0000\u0000"+
		"\u0000\u1c62\u1c63\u0001\u0000\u0000\u0000\u1c63\u1c65\u0001\u0000\u0000"+
		"\u0000\u1c64\u1c66\u0003\u0318\u018c\u0000\u1c65\u1c64\u0001\u0000\u0000"+
		"\u0000\u1c65\u1c66\u0001\u0000\u0000\u0000\u1c66\u1c85\u0001\u0000\u0000"+
		"\u0000\u1c67\u1c68\u0005\u0161\u0000\u0000\u1c68\u1c85\u0003\u058a\u02c5"+
		"\u0000\u1c69\u1c6a\u0005\u0153\u0000\u0000\u1c6a\u1c6b\u0005\u0161\u0000"+
		"\u0000\u1c6b\u1c85\u0003\u058a\u02c5\u0000\u1c6c\u1c6d\u0005\u0153\u0000"+
		"\u0000\u1c6d\u1c85\u0003\u058a\u02c5\u0000\u1c6e\u1c70\u0005\u015e\u0000"+
		"\u0000\u1c6f\u1c71\u0003\u0310\u0188\u0000\u1c70\u1c6f\u0001\u0000\u0000"+
		"\u0000\u1c70\u1c71\u0001\u0000\u0000\u0000\u1c71\u1c72\u0001\u0000\u0000"+
		"\u0000\u1c72\u1c73\u0005\u0084\u0000\u0000\u1c73\u1c74\u0005\u0161\u0000"+
		"\u0000\u1c74\u1c85\u0003\u058a\u02c5\u0000\u1c75\u1c77\u0005\u015e\u0000"+
		"\u0000\u1c76\u1c78\u0003\u0310\u0188\u0000\u1c77\u1c76\u0001\u0000\u0000"+
		"\u0000\u1c77\u1c78\u0001\u0000\u0000\u0000\u1c78\u1c79\u0001\u0000\u0000"+
		"\u0000\u1c79\u1c7a\u0005\u0084\u0000\u0000\u1c7a\u1c85\u0003\u058a\u02c5"+
		"\u0000\u1c7b\u1c7c\u0005\u0141\u0000\u0000\u1c7c\u1c7d\u0005\u0183\u0000"+
		"\u0000\u1c7d\u1c85\u0003\u057c\u02be\u0000\u1c7e\u1c7f\u0005\u00c7\u0000"+
		"\u0000\u1c7f\u1c80\u0005\u0142\u0000\u0000\u1c80\u1c85\u0003\u057c\u02be"+
		"\u0000\u1c81\u1c82\u0005\u015e\u0000\u0000\u1c82\u1c83\u0005\u0142\u0000"+
		"\u0000\u1c83\u1c85\u0003\u057c\u02be\u0000\u1c84\u1c3f\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c46\u0001\u0000\u0000\u0000\u1c84\u1c4d\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c52\u0001\u0000\u0000\u0000\u1c84\u1c59\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c60\u0001\u0000\u0000\u0000\u1c84\u1c67\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c69\u0001\u0000\u0000\u0000\u1c84\u1c6c\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c6e\u0001\u0000\u0000\u0000\u1c84\u1c75\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c7b\u0001\u0000\u0000\u0000\u1c84\u1c7e\u0001\u0000\u0000"+
		"\u0000\u1c84\u1c81\u0001\u0000\u0000\u0000\u1c85\u030f\u0001\u0000\u0000"+
		"\u0000\u1c86\u1c87\u0007!\u0000\u0000\u1c87\u0311\u0001\u0000\u0000\u0000"+
		"\u1c88\u1c89\u0005\u0111\u0000\u0000\u1c89\u1c8a\u0005\u0118\u0000\u0000"+
		"\u1c8a\u1c93\u0003<\u001e\u0000\u1c8b\u1c8c\u0005\u014b\u0000\u0000\u1c8c"+
		"\u1c93\u0005w\u0000\u0000\u1c8d\u1c8e\u0005\u014b\u0000\u0000\u1c8e\u1c93"+
		"\u0005\u019d\u0000\u0000\u1c8f\u1c93\u0005\\\u0000\u0000\u1c90\u1c91\u0005"+
		"s\u0000\u0000\u1c91\u1c93\u0005\\\u0000\u0000\u1c92\u1c88\u0001\u0000"+
		"\u0000\u0000\u1c92\u1c8b\u0001\u0000\u0000\u0000\u1c92\u1c8d\u0001\u0000"+
		"\u0000\u0000\u1c92\u1c8f\u0001\u0000\u0000\u0000\u1c92\u1c90\u0001\u0000"+
		"\u0000\u0000\u1c93\u0313\u0001\u0000\u0000\u0000\u1c94\u1c9b\u0003\u0312"+
		"\u0189\u0000\u1c95\u1c97\u0005\u0006\u0000\u0000\u1c96\u1c95\u0001\u0000"+
		"\u0000\u0000\u1c96\u1c97\u0001\u0000\u0000\u0000\u1c97\u1c98\u0001\u0000"+
		"\u0000\u0000\u1c98\u1c9a\u0003\u0312\u0189\u0000\u1c99\u1c96\u0001\u0000"+
		"\u0000\u0000\u1c9a\u1c9d\u0001\u0000\u0000\u0000\u1c9b\u1c99\u0001\u0000"+
		"\u0000\u0000\u1c9b\u1c9c\u0001\u0000\u0000\u0000\u1c9c\u0315\u0001\u0000"+
		"\u0000\u0000\u1c9d\u1c9b\u0001\u0000\u0000\u0000\u1c9e\u1c9f\u0003\u0314"+
		"\u018a\u0000\u1c9f\u0317\u0001\u0000\u0000\u0000\u1ca0\u1ca2\u0005G\u0000"+
		"\u0000\u1ca1\u1ca3\u0005\u012c\u0000\u0000\u1ca2\u1ca1\u0001\u0000\u0000"+
		"\u0000\u1ca2\u1ca3\u0001\u0000\u0000\u0000\u1ca3\u1ca4\u0001\u0000\u0000"+
		"\u0000\u1ca4\u1ca5\u0005\u00bf\u0000\u0000\u1ca5\u0319\u0001\u0000\u0000"+
		"\u0000\u1ca6\u1ca9\u0005T\u0000\u0000\u1ca7\u1ca8\u0005x\u0000\u0000\u1ca8"+
		"\u1caa\u0005\u0156\u0000\u0000\u1ca9\u1ca7\u0001\u0000\u0000\u0000\u1ca9"+
		"\u1caa\u0001\u0000\u0000\u0000\u1caa\u1cac\u0001\u0000\u0000\u0000\u1cab"+
		"\u1cad\u0003\u00aaU\u0000\u1cac\u1cab\u0001\u0000\u0000\u0000\u1cac\u1cad"+
		"\u0001\u0000\u0000\u0000\u1cad\u1cbf\u0001\u0000\u0000\u0000\u1cae\u1caf"+
		"\u0005\u0197\u0000\u0000\u1caf\u1cb1\u0003\u0566\u02b3\u0000\u1cb0\u1cb2"+
		"\u0003\u00d2i\u0000\u1cb1\u1cb0\u0001\u0000\u0000\u0000\u1cb1\u1cb2\u0001"+
		"\u0000\u0000\u0000\u1cb2\u1cb4\u0001\u0000\u0000\u0000\u1cb3\u1cb5\u0003"+
		"r9\u0000\u1cb4\u1cb3\u0001\u0000\u0000\u0000\u1cb4\u1cb5\u0001\u0000\u0000"+
		"\u0000\u1cb5\u1cc0\u0001\u0000\u0000\u0000\u1cb6\u1cb7\u0005\u014e\u0000"+
		"\u0000\u1cb7\u1cb8\u0005\u0197\u0000\u0000\u1cb8\u1cb9\u0003\u0566\u02b3"+
		"\u0000\u1cb9\u1cba\u0005\u0002\u0000\u0000\u1cba\u1cbb\u0003\u00d4j\u0000"+
		"\u1cbb\u1cbd\u0005\u0003\u0000\u0000\u1cbc\u1cbe\u0003r9\u0000\u1cbd\u1cbc"+
		"\u0001\u0000\u0000\u0000\u1cbd\u1cbe\u0001\u0000\u0000\u0000\u1cbe\u1cc0"+
		"\u0001\u0000\u0000\u0000\u1cbf\u1cae\u0001\u0000\u0000\u0000\u1cbf\u1cb6"+
		"\u0001\u0000\u0000\u0000\u1cc0\u1cc1\u0001\u0000\u0000\u0000\u1cc1\u1cc2"+
		"\u0005J\u0000\u0000\u1cc2\u1cc4\u0003\u03c4\u01e2\u0000\u1cc3\u1cc5\u0003"+
		"\u031c\u018e\u0000\u1cc4\u1cc3\u0001\u0000\u0000\u0000\u1cc4\u1cc5\u0001"+
		"\u0000\u0000\u0000\u1cc5\u031b\u0001\u0000\u0000\u0000\u1cc6\u1cc8\u0005"+
		"\u008f\u0000\u0000\u1cc7\u1cc9\u0007\"\u0000\u0000\u1cc8\u1cc7\u0001\u0000"+
		"\u0000\u0000\u1cc8\u1cc9\u0001\u0000\u0000\u0000\u1cc9\u1cca\u0001\u0000"+
		"\u0000\u0000\u1cca\u1ccb\u0005P\u0000\u0000\u1ccb\u1ccc\u0005\u0136\u0000"+
		"\u0000\u1ccc\u031d\u0001\u0000\u0000\u0000\u1ccd\u1cce\u0005\u011a\u0000"+
		"\u0000\u1cce\u1ccf\u0003\u056e\u02b7\u0000\u1ccf\u031f\u0001\u0000\u0000"+
		"\u0000\u1cd0\u1cd1\u0005T\u0000\u0000\u1cd1\u1cd2\u0005\u00d5\u0000\u0000"+
		"\u1cd2\u1cd4\u0003\u056a\u02b5\u0000\u1cd3\u1cd5\u0003\f\u0006\u0000\u1cd4"+
		"\u1cd3\u0001\u0000\u0000\u0000\u1cd4\u1cd5\u0001\u0000\u0000\u0000\u1cd5"+
		"\u1cd7\u0001\u0000\u0000\u0000\u1cd6\u1cd8\u0003\u0322\u0191\u0000\u1cd7"+
		"\u1cd6\u0001\u0000\u0000\u0000\u1cd7\u1cd8\u0001\u0000\u0000\u0000\u1cd8"+
		"\u0321\u0001\u0000\u0000\u0000\u1cd9\u1cda\u0003\u0324\u0192\u0000\u1cda"+
		"\u0323\u0001\u0000\u0000\u0000\u1cdb\u1cdd\u0003\u0326\u0193\u0000\u1cdc"+
		"\u1cdb\u0001\u0000\u0000\u0000\u1cdd\u1cde\u0001\u0000\u0000\u0000\u1cde"+
		"\u1cdc\u0001\u0000\u0000\u0000\u1cde\u1cdf\u0001\u0000\u0000\u0000\u1cdf"+
		"\u0325\u0001\u0000\u0000\u0000\u1ce0\u1ce2\u0003\u0328\u0194\u0000\u1ce1"+
		"\u1ce3\u0003\u032a\u0195\u0000\u1ce2\u1ce1\u0001\u0000\u0000\u0000\u1ce2"+
		"\u1ce3\u0001\u0000\u0000\u0000\u1ce3\u1ce7\u0001\u0000\u0000\u0000\u1ce4"+
		"\u1ce8\u0003\u0582\u02c1\u0000\u1ce5\u1ce8\u0003>\u001f\u0000\u1ce6\u1ce8"+
		"\u0005[\u0000\u0000\u1ce7\u1ce4\u0001\u0000\u0000\u0000\u1ce7\u1ce5\u0001"+
		"\u0000\u0000\u0000\u1ce7\u1ce6\u0001\u0000\u0000\u0000\u1ce8\u0327\u0001"+
		"\u0000\u0000\u0000\u1ce9\u1cf2\u0003\u05a0\u02d0\u0000\u1cea\u1ceb\u0005"+
		"\u00ca\u0000\u0000\u1ceb\u1cf2\u0005p\u0000\u0000\u1cec\u1cf2\u0005\u00e8"+
		"\u0000\u0000\u1ced\u1cf2\u0005\u011c\u0000\u0000\u1cee\u1cf2\u0005\u0139"+
		"\u0000\u0000\u1cef\u1cf2\u0005\u017e\u0000\u0000\u1cf0\u1cf2\u0005\u0180"+
		"\u0000\u0000\u1cf1\u1ce9\u0001\u0000\u0000\u0000\u1cf1\u1cea\u0001\u0000"+
		"\u0000\u0000\u1cf1\u1cec\u0001\u0000\u0000\u0000\u1cf1\u1ced\u0001\u0000"+
		"\u0000\u0000\u1cf1\u1cee\u0001\u0000\u0000\u0000\u1cf1\u1cef\u0001\u0000"+
		"\u0000\u0000\u1cf1\u1cf0\u0001\u0000\u0000\u0000\u1cf2\u0329\u0001\u0000"+
		"\u0000\u0000\u1cf3\u1cf4\u0005\n\u0000\u0000\u1cf4\u032b\u0001\u0000\u0000"+
		"\u0000\u1cf5\u1cf6\u0005\u00b0\u0000\u0000\u1cf6\u1cf7\u0005\u00d5\u0000"+
		"\u0000\u1cf7\u1d02\u0003\u056a\u02b5\u0000\u1cf8\u1cfa\u0005\u008f\u0000"+
		"\u0000\u1cf9\u1cfb\u0003\u0322\u0191\u0000\u1cfa\u1cf9\u0001\u0000\u0000"+
		"\u0000\u1cfa\u1cfb\u0001\u0000\u0000\u0000\u1cfb\u1d03\u0001\u0000\u0000"+
		"\u0000\u1cfc\u1cfe\u0003\u0322\u0191\u0000\u1cfd\u1cfc\u0001\u0000\u0000"+
		"\u0000\u1cfd\u1cfe\u0001\u0000\u0000\u0000\u1cfe\u1d03\u0001\u0000\u0000"+
		"\u0000\u1cff\u1d00\u0005\u016c\u0000\u0000\u1d00\u1d01\u0005\u017e\u0000"+
		"\u0000\u1d01\u1d03\u0003\u056a\u02b5\u0000\u1d02\u1cf8\u0001\u0000\u0000"+
		"\u0000\u1d02\u1cfd\u0001\u0000\u0000\u0000\u1d02\u1cff\u0001\u0000\u0000"+
		"\u0000\u1d03\u032d\u0001\u0000\u0000\u0000\u1d04\u1d05\u0005\u00b0\u0000"+
		"\u0000\u1d05\u1d06\u0005\u00d5\u0000\u0000\u1d06\u1d07\u0003\u056a\u02b5"+
		"\u0000\u1d07\u1d08\u0003L&\u0000\u1d08\u032f\u0001\u0000\u0000\u0000\u1d09"+
		"\u1d0a\u0005\u00e5\u0000\u0000\u1d0a\u1d0d\u0005\u00d5\u0000\u0000\u1d0b"+
		"\u1d0c\u0005\u0102\u0000\u0000\u1d0c\u1d0e\u0005\u01ab\u0000\u0000\u1d0d"+
		"\u1d0b\u0001\u0000\u0000\u0000\u1d0d\u1d0e\u0001\u0000\u0000\u0000\u1d0e"+
		"\u1d0f\u0001\u0000\u0000\u0000\u1d0f\u1d17\u0003\u056a\u02b5\u0000\u1d10"+
		"\u1d12\u0003\f\u0006\u0000\u1d11\u1d10\u0001\u0000\u0000\u0000\u1d11\u1d12"+
		"\u0001\u0000\u0000\u0000\u1d12\u1d13\u0001\u0000\u0000\u0000\u1d13\u1d14"+
		"\u0005\u0002\u0000\u0000\u1d14\u1d15\u0003\u0332\u0199\u0000\u1d15\u1d16"+
		"\u0005\u0003\u0000\u0000\u1d16\u1d18\u0001\u0000\u0000\u0000\u1d17\u1d11"+
		"\u0001\u0000\u0000\u0000\u1d17\u1d18\u0001\u0000\u0000\u0000\u1d18\u0331"+
		"\u0001\u0000\u0000\u0000\u1d19\u1d1e\u0003\u0334\u019a\u0000\u1d1a\u1d1b"+
		"\u0005\u0006\u0000\u0000\u1d1b\u1d1d\u0003\u0334\u019a\u0000\u1d1c\u1d1a"+
		"\u0001\u0000\u0000\u0000\u1d1d\u1d20\u0001\u0000\u0000\u0000\u1d1e\u1d1c"+
		"\u0001\u0000\u0000\u0000\u1d1e\u1d1f\u0001\u0000\u0000\u0000\u1d1f\u0333"+
		"\u0001\u0000\u0000\u0000\u1d20\u1d1e\u0001\u0000\u0000\u0000\u1d21\u1d22"+
		"\u0005\u00f7\u0000\u0000\u1d22\u0335\u0001\u0000\u0000\u0000\u1d23\u1d24"+
		"\u0005\u00b0\u0000\u0000\u1d24\u1d25\u0005\u0092\u0000\u0000\u1d25\u1d26"+
		"\u0003\u0208\u0104\u0000\u1d26\u1d27\u0005\u0150\u0000\u0000\u1d27\u1d28"+
		"\u0005\u0196\u0000\u0000\u1d28\u0337\u0001\u0000\u0000\u0000\u1d29\u1d2a"+
		"\u0005\u00b0\u0000\u0000\u1d2a\u1d2b\u0005\u017c\u0000\u0000\u1d2b\u1d2c"+
		"\u0007#\u0000\u0000\u1d2c\u1d2d\u00032\u0019\u0000\u1d2d\u0339\u0001\u0000"+
		"\u0000\u0000\u1d2e\u1d2f\u0005T\u0000\u0000\u1d2f\u1d30\u0005\u00e3\u0000"+
		"\u0000\u1d30\u1d32\u0003\u0208\u0104\u0000\u1d31\u1d33\u0003\u033e\u019f"+
		"\u0000\u1d32\u1d31\u0001\u0000\u0000\u0000\u1d32\u1d33\u0001\u0000\u0000"+
		"\u0000\u1d33\u1d34\u0001\u0000\u0000\u0000\u1d34\u1d35\u0003\u045c\u022e"+
		"\u0000\u1d35\u1d36\u0003\u00bc^\u0000\u1d36\u033b\u0001\u0000\u0000\u0000"+
		"\u1d37\u1d38\u0005\u00b0\u0000\u0000\u1d38\u1d39\u0005\u00e3\u0000\u0000"+
		"\u1d39\u1d50\u0003\u0208\u0104\u0000\u1d3a\u1d51\u0003f3\u0000\u1d3b\u1d3c"+
		"\u0005\u00e5\u0000\u0000\u1d3c\u1d3d\u0005s\u0000\u0000\u1d3d\u1d51\u0005"+
		"t\u0000\u0000\u1d3e\u1d3f\u0005\u016c\u0000\u0000\u1d3f\u1d40\u0005s\u0000"+
		"\u0000\u1d40\u1d51\u0005t\u0000\u0000\u1d41\u1d42\u0005\u00ab\u0000\u0000"+
		"\u1d42\u1d51\u0003\u00ccf\u0000\u1d43\u1d44\u0005\u00e5\u0000\u0000\u1d44"+
		"\u1d47\u0005S\u0000\u0000\u1d45\u1d46\u0005\u0102\u0000\u0000\u1d46\u1d48"+
		"\u0005\u01ab\u0000\u0000\u1d47\u1d45\u0001\u0000\u0000\u0000\u1d47\u1d48"+
		"\u0001\u0000\u0000\u0000\u1d48\u1d49\u0001\u0000\u0000\u0000\u1d49\u1d4b"+
		"\u0003\u056a\u02b5\u0000\u1d4a\u1d4c\u0003h4\u0000\u1d4b\u1d4a\u0001\u0000"+
		"\u0000\u0000\u1d4b\u1d4c\u0001\u0000\u0000\u0000\u1d4c\u1d51\u0001\u0000"+
		"\u0000\u0000\u1d4d\u1d4e\u0005\u0193\u0000\u0000\u1d4e\u1d4f\u0005S\u0000"+
		"\u0000\u1d4f\u1d51\u0003\u056a\u02b5\u0000\u1d50\u1d3a\u0001\u0000\u0000"+
		"\u0000\u1d50\u1d3b\u0001\u0000\u0000\u0000\u1d50\u1d3e\u0001\u0000\u0000"+
		"\u0000\u1d50\u1d41\u0001\u0000\u0000\u0000\u1d50\u1d43\u0001\u0000\u0000"+
		"\u0000\u1d50\u1d4d\u0001\u0000\u0000\u0000\u1d51\u033d\u0001\u0000\u0000"+
		"\u0000\u1d52\u1d53\u0005J\u0000\u0000\u1d53\u033f\u0001\u0000\u0000\u0000"+
		"\u1d54\u1d55\u0005\u00b0\u0000\u0000\u1d55\u1d56\u0005\u0182\u0000\u0000"+
		"\u1d56\u1d57\u0005\u0164\u0000\u0000\u1d57\u1d58\u0005\u00df\u0000\u0000"+
		"\u1d58\u1d59\u0003\u0208\u0104\u0000\u1d59\u1d5a\u0003\u01c8\u00e4\u0000"+
		"\u1d5a\u0341\u0001\u0000\u0000\u0000\u1d5b\u1d5c\u0005\u00b0\u0000\u0000"+
		"\u1d5c\u1d5d\u0005\u0182\u0000\u0000\u1d5d\u1d5e\u0005\u0164\u0000\u0000"+
		"\u1d5e\u1d5f\u0005\u00c9\u0000\u0000\u1d5f\u1d60\u0003\u0208\u0104\u0000"+
		"\u1d60\u1d61\u0005\u00ab\u0000\u0000\u1d61\u1d62\u0005\u011e\u0000\u0000"+
		"\u1d62\u1d63\u0005d\u0000\u0000\u1d63\u1d64\u0003\u0568\u02b4\u0000\u1d64"+
		"\u1d65\u0003\u0344\u01a2\u0000\u1d65\u1d66\u0003\u0206\u0103\u0000\u1d66"+
		"\u1da4\u0001\u0000\u0000\u0000\u1d67\u1d68\u0005\u00b0\u0000\u0000\u1d68"+
		"\u1d69\u0005\u0182\u0000\u0000\u1d69\u1d6a\u0005\u0164\u0000\u0000\u1d6a"+
		"\u1d6b\u0005\u00c9\u0000\u0000\u1d6b\u1d6c\u0003\u0208\u0104\u0000\u1d6c"+
		"\u1d6d\u0005\u00b0\u0000\u0000\u1d6d\u1d6e\u0005\u011e\u0000\u0000\u1d6e"+
		"\u1d6f\u0005d\u0000\u0000\u1d6f\u1d70\u0003\u0568\u02b4\u0000\u1d70\u1d71"+
		"\u0003\u0344\u01a2\u0000\u1d71\u1d72\u0003\u0206\u0103\u0000\u1d72\u1da4"+
		"\u0001\u0000\u0000\u0000\u1d73\u1d74\u0005\u00b0\u0000\u0000\u1d74\u1d75"+
		"\u0005\u0182\u0000\u0000\u1d75\u1d76\u0005\u0164\u0000\u0000\u1d76\u1d77"+
		"\u0005\u00c9\u0000\u0000\u1d77\u1d78\u0003\u0208\u0104\u0000\u1d78\u1d79"+
		"\u0005\u00b0\u0000\u0000\u1d79\u1d7a\u0005\u011e\u0000\u0000\u1d7a\u1d7b"+
		"\u0005\u0156\u0000\u0000\u1d7b\u1d7c\u0003\u0208\u0104\u0000\u1d7c\u1d7d"+
		"\u0003\u0344\u01a2\u0000\u1d7d\u1d7e\u0003\u0208\u0104\u0000\u1d7e\u1da4"+
		"\u0001\u0000\u0000\u0000\u1d7f\u1d80\u0005\u00b0\u0000\u0000\u1d80\u1d81"+
		"\u0005\u0182\u0000\u0000\u1d81\u1d82\u0005\u0164\u0000\u0000\u1d82\u1d83"+
		"\u0005\u00c9\u0000\u0000\u1d83\u1d84\u0003\u0208\u0104\u0000\u1d84\u1d85"+
		"\u0005\u00b0\u0000\u0000\u1d85\u1d86\u0005\u011e\u0000\u0000\u1d86\u1d87"+
		"\u0005d\u0000\u0000\u1d87\u1d88\u0003\u0568\u02b4\u0000\u1d88\u1d89\u0005"+
		"\u0156\u0000\u0000\u1d89\u1d8a\u0003\u0208\u0104\u0000\u1d8a\u1d8b\u0003"+
		"\u0344\u01a2\u0000\u1d8b\u1d8c\u0003\u0208\u0104\u0000\u1d8c\u1da4\u0001"+
		"\u0000\u0000\u0000\u1d8d\u1d8e\u0005\u00b0\u0000\u0000\u1d8e\u1d8f\u0005"+
		"\u0182\u0000\u0000\u1d8f\u1d90\u0005\u0164\u0000\u0000\u1d90\u1d91\u0005"+
		"\u00c9\u0000\u0000\u1d91\u1d92\u0003\u0208\u0104\u0000\u1d92\u1d93\u0005"+
		"\u00e5\u0000\u0000\u1d93\u1d94\u0005\u011e\u0000\u0000\u1d94\u1d95\u0005"+
		"d\u0000\u0000\u1d95\u1d96\u0003\u0568\u02b4\u0000\u1d96\u1da4\u0001\u0000"+
		"\u0000\u0000\u1d97\u1d98\u0005\u00b0\u0000\u0000\u1d98\u1d99\u0005\u0182"+
		"\u0000\u0000\u1d99\u1d9a\u0005\u0164\u0000\u0000\u1d9a\u1d9b\u0005\u00c9"+
		"\u0000\u0000\u1d9b\u1d9c\u0003\u0208\u0104\u0000\u1d9c\u1d9d\u0005\u00e5"+
		"\u0000\u0000\u1d9d\u1d9e\u0005\u011e\u0000\u0000\u1d9e\u1d9f\u0005\u0102"+
		"\u0000\u0000\u1d9f\u1da0\u0005\u01ab\u0000\u0000\u1da0\u1da1\u0005d\u0000"+
		"\u0000\u1da1\u1da2\u0003\u0568\u02b4\u0000\u1da2\u1da4\u0001\u0000\u0000"+
		"\u0000\u1da3\u1d5b\u0001\u0000\u0000\u0000\u1da3\u1d67\u0001\u0000\u0000"+
		"\u0000\u1da3\u1d73\u0001\u0000\u0000\u0000\u1da3\u1d7f\u0001\u0000\u0000"+
		"\u0000\u1da3\u1d8d\u0001\u0000\u0000\u0000\u1da3\u1d97\u0001\u0000\u0000"+
		"\u0000\u1da4\u0343\u0001\u0000\u0000\u0000\u1da5\u1da6\u0005\u008f\u0000"+
		"\u0000\u1da6\u0345\u0001\u0000\u0000\u0000\u1da7\u1da9\u0005T\u0000\u0000"+
		"\u1da8\u1daa\u0003\u01e4\u00f2\u0000\u1da9\u1da8\u0001\u0000\u0000\u0000"+
		"\u1da9\u1daa\u0001\u0000\u0000\u0000\u1daa\u1dab\u0001\u0000\u0000\u0000"+
		"\u1dab\u1dac\u0005\u00ce\u0000\u0000\u1dac\u1dad\u0003\u0208\u0104\u0000"+
		"\u1dad\u1dae\u0005d\u0000\u0000\u1dae\u1daf\u0003\u057c\u02be\u0000\u1daf"+
		"\u1db0\u0005\u0084\u0000\u0000\u1db0\u1db1\u0003\u057c\u02be\u0000\u1db1"+
		"\u1db2\u0005f\u0000\u0000\u1db2\u1db3\u0003\u0208\u0104\u0000\u1db3\u0347"+
		"\u0001\u0000\u0000\u0000\u1db4\u1db6\u0005\u00c4\u0000\u0000\u1db5\u1db7"+
		"\u0003\u0364\u01b2\u0000\u1db6\u1db5\u0001\u0000\u0000\u0000\u1db6\u1db7"+
		"\u0001\u0000\u0000\u0000\u1db7\u1db8\u0001\u0000\u0000\u0000\u1db8\u1dba"+
		"\u0003\u0566\u02b3\u0000\u1db9\u1dbb\u0003\u034a\u01a5\u0000\u1dba\u1db9"+
		"\u0001\u0000\u0000\u0000\u1dba\u1dbb\u0001\u0000\u0000\u0000\u1dbb\u1dc9"+
		"\u0001\u0000\u0000\u0000\u1dbc\u1dbe\u0005\u00c4\u0000\u0000\u1dbd\u1dbf"+
		"\u0003\u0364\u01b2\u0000\u1dbe\u1dbd\u0001\u0000\u0000\u0000\u1dbe\u1dbf"+
		"\u0001\u0000\u0000\u0000\u1dbf\u1dc9\u0001\u0000\u0000\u0000\u1dc0\u1dc2"+
		"\u0005\u00c4\u0000\u0000\u1dc1\u1dc3\u0003\u0364\u01b2\u0000\u1dc2\u1dc1"+
		"\u0001\u0000\u0000\u0000\u1dc2\u1dc3\u0001\u0000\u0000\u0000\u1dc3\u1dc4"+
		"\u0001\u0000\u0000\u0000\u1dc4\u1dc5\u0003\u056a\u02b5\u0000\u1dc5\u1dc6"+
		"\u0005v\u0000\u0000\u1dc6\u1dc7\u0003\u0566\u02b3\u0000\u1dc7\u1dc9\u0001"+
		"\u0000\u0000\u0000\u1dc8\u1db4\u0001\u0000\u0000\u0000\u1dc8\u1dbc\u0001"+
		"\u0000\u0000\u0000\u1dc8\u1dc0\u0001\u0000\u0000\u0000\u1dc9\u0349\u0001"+
		"\u0000\u0000\u0000\u1dca\u1dcb\u0005\u008a\u0000\u0000\u1dcb\u1dcc\u0003"+
		"\u056a\u02b5\u0000\u1dcc\u034b\u0001\u0000\u0000\u0000\u1dcd\u1dcf\u0005"+
		"\u0191\u0000\u0000\u1dce\u1dd0\u0003\u0366\u01b3\u0000\u1dcf\u1dce\u0001"+
		"\u0000\u0000\u0000\u1dcf\u1dd0\u0001\u0000\u0000\u0000\u1dd0\u1dd2\u0001"+
		"\u0000\u0000\u0000\u1dd1\u1dd3\u0003\u0368\u01b4\u0000\u1dd2\u1dd1\u0001"+
		"\u0000\u0000\u0000\u1dd2\u1dd3\u0001\u0000\u0000\u0000\u1dd3\u1dd5\u0001"+
		"\u0000\u0000\u0000\u1dd4\u1dd6\u0003\u0364\u01b2\u0000\u1dd5\u1dd4\u0001"+
		"\u0000\u0000\u0000\u1dd5\u1dd6\u0001\u0000\u0000\u0000\u1dd6\u1dd8\u0001"+
		"\u0000\u0000\u0000\u1dd7\u1dd9\u0003\u0362\u01b1\u0000\u1dd8\u1dd7\u0001"+
		"\u0000\u0000\u0000\u1dd8\u1dd9\u0001\u0000\u0000\u0000\u1dd9\u1ddb\u0001"+
		"\u0000\u0000\u0000\u1dda\u1ddc\u0003\u0370\u01b8\u0000\u1ddb\u1dda\u0001"+
		"\u0000\u0000\u0000\u1ddb\u1ddc\u0001\u0000\u0000\u0000\u1ddc\u1de5\u0001"+
		"\u0000\u0000\u0000\u1ddd\u1dde\u0005\u0191\u0000\u0000\u1dde\u1ddf\u0005"+
		"\u0002\u0000\u0000\u1ddf\u1de0\u0003\u0352\u01a9\u0000\u1de0\u1de2\u0005"+
		"\u0003\u0000\u0000\u1de1\u1de3\u0003\u0370\u01b8\u0000\u1de2\u1de1\u0001"+
		"\u0000\u0000\u0000\u1de2\u1de3\u0001\u0000\u0000\u0000\u1de3\u1de5\u0001"+
		"\u0000\u0000\u0000\u1de4\u1dcd\u0001\u0000\u0000\u0000\u1de4\u1ddd\u0001"+
		"\u0000\u0000\u0000\u1de5\u034d\u0001\u0000\u0000\u0000\u1de6\u1de8\u0003"+
		"\u0354\u01aa\u0000\u1de7\u1de9\u0003\u0364\u01b2\u0000\u1de8\u1de7\u0001"+
		"\u0000\u0000\u0000\u1de8\u1de9\u0001\u0000\u0000\u0000\u1de9\u1deb\u0001"+
		"\u0000\u0000\u0000\u1dea\u1dec\u0003\u0370\u01b8\u0000\u1deb\u1dea\u0001"+
		"\u0000\u0000\u0000\u1deb\u1dec\u0001\u0000\u0000\u0000\u1dec\u1df5\u0001"+
		"\u0000\u0000\u0000\u1ded\u1dee\u0003\u0354\u01aa\u0000\u1dee\u1def\u0005"+
		"\u0002\u0000\u0000\u1def\u1df0\u0003\u0352\u01a9\u0000\u1df0\u1df2\u0005"+
		"\u0003\u0000\u0000\u1df1\u1df3\u0003\u0370\u01b8\u0000\u1df2\u1df1\u0001"+
		"\u0000\u0000\u0000\u1df2\u1df3\u0001\u0000\u0000\u0000\u1df3\u1df5\u0001"+
		"\u0000\u0000\u0000\u1df4\u1de6\u0001\u0000\u0000\u0000\u1df4\u1ded\u0001"+
		"\u0000\u0000\u0000\u1df5\u034f\u0001\u0000\u0000\u0000\u1df6\u1dfb\u0003"+
		"\u0356\u01ab\u0000\u1df7\u1df8\u0005\u0006\u0000\u0000\u1df8\u1dfa\u0003"+
		"\u0356\u01ab\u0000\u1df9\u1df7\u0001\u0000\u0000\u0000\u1dfa\u1dfd\u0001"+
		"\u0000\u0000\u0000\u1dfb\u1df9\u0001\u0000\u0000\u0000\u1dfb\u1dfc\u0001"+
		"\u0000\u0000\u0000\u1dfc\u0351\u0001\u0000\u0000\u0000\u1dfd\u1dfb\u0001"+
		"\u0000\u0000\u0000\u1dfe\u1e03\u0003\u035c\u01ae\u0000\u1dff\u1e00\u0005"+
		"\u0006\u0000\u0000\u1e00\u1e02\u0003\u035c\u01ae\u0000\u1e01\u1dff\u0001"+
		"\u0000\u0000\u0000\u1e02\u1e05\u0001\u0000\u0000\u0000\u1e03\u1e01\u0001"+
		"\u0000\u0000\u0000\u1e03\u1e04\u0001\u0000\u0000\u0000\u1e04\u0353\u0001"+
		"\u0000\u0000\u0000\u1e05\u1e03\u0001\u0000\u0000\u0000\u1e06\u1e07\u0007"+
		"$\u0000\u0000\u1e07\u0355\u0001\u0000\u0000\u0000\u1e08\u1e0a\u0003\u0358"+
		"\u01ac\u0000\u1e09\u1e0b\u0003\u035a\u01ad\u0000\u1e0a\u1e09\u0001\u0000"+
		"\u0000\u0000\u1e0a\u1e0b\u0001\u0000\u0000\u0000\u1e0b\u0357\u0001\u0000"+
		"\u0000\u0000\u1e0c\u1e10\u0003\u058e\u02c7\u0000\u1e0d\u1e10\u0003\u0354"+
		"\u01aa\u0000\u1e0e\u1e10\u0005C\u0000\u0000\u1e0f\u1e0c\u0001\u0000\u0000"+
		"\u0000\u1e0f\u1e0d\u0001\u0000\u0000\u0000\u1e0f\u1e0e\u0001\u0000\u0000"+
		"\u0000\u1e10\u0359\u0001\u0000\u0000\u0000\u1e11\u1e14\u0003>\u001f\u0000"+
		"\u1e12\u1e14\u0003\u0120\u0090\u0000\u1e13\u1e11\u0001\u0000\u0000\u0000"+
		"\u1e13\u1e12\u0001\u0000\u0000\u0000\u1e14\u035b\u0001\u0000\u0000\u0000"+
		"\u1e15\u1e17\u0003\u035e\u01af\u0000\u1e16\u1e18\u0003\u0360\u01b0\u0000"+
		"\u1e17\u1e16\u0001\u0000\u0000\u0000\u1e17\u1e18\u0001\u0000\u0000\u0000"+
		"\u1e18\u035d\u0001\u0000\u0000\u0000\u1e19\u1e1c\u0003\u058e\u02c7\u0000"+
		"\u1e1a\u1e1c\u0003\u0354\u01aa\u0000\u1e1b\u1e19\u0001\u0000\u0000\u0000"+
		"\u1e1b\u1e1a\u0001\u0000\u0000\u0000\u1e1c\u035f\u0001\u0000\u0000\u0000"+
		"\u1e1d\u1e20\u0003>\u001f\u0000\u1e1e\u1e20\u0003\u0120\u0090\u0000\u1e1f"+
		"\u1e1d\u0001\u0000\u0000\u0000\u1e1f\u1e1e\u0001\u0000\u0000\u0000\u1e20"+
		"\u0361\u0001\u0000\u0000\u0000\u1e21\u1e22\u0003\u0354\u01aa\u0000\u1e22"+
		"\u0363\u0001\u0000\u0000\u0000\u1e23\u1e24\u0005\u00a6\u0000\u0000\u1e24"+
		"\u0365\u0001\u0000\u0000\u0000\u1e25\u1e26\u0005\u0097\u0000\u0000\u1e26"+
		"\u0367\u0001\u0000\u0000\u0000\u1e27\u1e28\u0005\u0096\u0000\u0000\u1e28"+
		"\u0369\u0001\u0000\u0000\u0000\u1e29\u1e2a\u0005\u0002\u0000\u0000\u1e2a"+
		"\u1e2b\u0003\u0568\u02b4\u0000\u1e2b\u1e2c\u0005\u0003\u0000\u0000\u1e2c"+
		"\u036b\u0001\u0000\u0000\u0000\u1e2d\u1e2f\u0003\u0566\u02b3\u0000\u1e2e"+
		"\u1e30\u0003\u036a\u01b5\u0000\u1e2f\u1e2e\u0001\u0000\u0000\u0000\u1e2f"+
		"\u1e30\u0001\u0000\u0000\u0000\u1e30\u036d\u0001\u0000\u0000\u0000\u1e31"+
		"\u1e36\u0003\u036c\u01b6\u0000\u1e32\u1e33\u0005\u0006\u0000\u0000\u1e33"+
		"\u1e35\u0003\u036c\u01b6\u0000\u1e34\u1e32\u0001\u0000\u0000\u0000\u1e35"+
		"\u1e38\u0001\u0000\u0000\u0000\u1e36\u1e34\u0001\u0000\u0000\u0000\u1e36"+
		"\u1e37\u0001\u0000\u0000\u0000\u1e37\u036f\u0001\u0000\u0000\u0000\u1e38"+
		"\u1e36\u0001\u0000\u0000\u0000\u1e39\u1e3a\u0003\u036e\u01b7\u0000\u1e3a"+
		"\u0371\u0001\u0000\u0000\u0000\u1e3b\u1e3c\u0005\u00f1\u0000\u0000\u1e3c"+
		"\u1e4e\u0003\u0374\u01ba\u0000\u1e3d\u1e3e\u0005\u00f1\u0000\u0000\u1e3e"+
		"\u1e40\u0003\u0354\u01aa\u0000\u1e3f\u1e41\u0003\u0364\u01b2\u0000\u1e40"+
		"\u1e3f\u0001\u0000\u0000\u0000\u1e40\u1e41\u0001\u0000\u0000\u0000\u1e41"+
		"\u1e42\u0001\u0000\u0000\u0000\u1e42\u1e43\u0003\u0374\u01ba\u0000\u1e43"+
		"\u1e4e\u0001\u0000\u0000\u0000\u1e44\u1e45\u0005\u00f1\u0000\u0000\u1e45"+
		"\u1e46\u0005\u00a6\u0000\u0000\u1e46\u1e4e\u0003\u0374\u01ba\u0000\u1e47"+
		"\u1e48\u0005\u00f1\u0000\u0000\u1e48\u1e49\u0005\u0002\u0000\u0000\u1e49"+
		"\u1e4a\u0003\u0376\u01bb\u0000\u1e4a\u1e4b\u0005\u0003\u0000\u0000\u1e4b"+
		"\u1e4c\u0003\u0374\u01ba\u0000\u1e4c\u1e4e\u0001\u0000\u0000\u0000\u1e4d"+
		"\u1e3b\u0001\u0000\u0000\u0000\u1e4d\u1e3d\u0001\u0000\u0000\u0000\u1e4d"+
		"\u1e44\u0001\u0000\u0000\u0000\u1e4d\u1e47\u0001\u0000\u0000\u0000\u1e4e"+
		"\u0373\u0001\u0000\u0000\u0000\u1e4f\u1e59\u0003\u03c4\u01e2\u0000\u1e50"+
		"\u1e59\u0003\u038a\u01c5\u0000\u1e51\u1e59\u0003\u03b2\u01d9\u0000\u1e52"+
		"\u1e59\u0003\u03a4\u01d2\u0000\u1e53\u1e59\u0003\u03bc\u01de\u0000\u1e54"+
		"\u1e59\u0003\u0104\u0082\u0000\u1e55\u1e59\u0003\u010a\u0085\u0000\u1e56"+
		"\u1e59\u0003\u0110\u0088\u0000\u1e57\u1e59\u0003\u0384\u01c2\u0000\u1e58"+
		"\u1e4f\u0001\u0000\u0000\u0000\u1e58\u1e50\u0001\u0000\u0000\u0000\u1e58"+
		"\u1e51\u0001\u0000\u0000\u0000\u1e58\u1e52\u0001\u0000\u0000\u0000\u1e58"+
		"\u1e53\u0001\u0000\u0000\u0000\u1e58\u1e54\u0001\u0000\u0000\u0000\u1e58"+
		"\u1e55\u0001\u0000\u0000\u0000\u1e58\u1e56\u0001\u0000\u0000\u0000\u1e58"+
		"\u1e57\u0001\u0000\u0000\u0000\u1e59\u0375\u0001\u0000\u0000\u0000\u1e5a"+
		"\u1e5f\u0003\u0378\u01bc\u0000\u1e5b\u1e5c\u0005\u0006\u0000\u0000\u1e5c"+
		"\u1e5e\u0003\u0378\u01bc\u0000\u1e5d\u1e5b\u0001\u0000\u0000\u0000\u1e5e"+
		"\u1e61\u0001\u0000\u0000\u0000\u1e5f\u1e5d\u0001\u0000\u0000\u0000\u1e5f"+
		"\u1e60\u0001\u0000\u0000\u0000\u1e60\u0377\u0001\u0000\u0000\u0000\u1e61"+
		"\u1e5f\u0001\u0000\u0000\u0000\u1e62\u1e64\u0003\u037a\u01bd\u0000\u1e63"+
		"\u1e65\u0003\u037c\u01be\u0000\u1e64\u1e63\u0001\u0000\u0000\u0000\u1e64"+
		"\u1e65\u0001\u0000\u0000\u0000\u1e65\u0379\u0001\u0000\u0000\u0000\u1e66"+
		"\u1e69\u0003\u058e\u02c7\u0000\u1e67\u1e69\u0003\u0354\u01aa\u0000\u1e68"+
		"\u1e66\u0001\u0000\u0000\u0000\u1e68\u1e67\u0001\u0000\u0000\u0000\u1e69"+
		"\u037b\u0001\u0000\u0000\u0000\u1e6a\u1e6d\u0003>\u001f\u0000\u1e6b\u1e6d"+
		"\u0003\u0120\u0090\u0000\u1e6c\u1e6a\u0001\u0000\u0000\u0000\u1e6c\u1e6b"+
		"\u0001\u0000\u0000\u0000\u1e6d\u037d\u0001\u0000\u0000\u0000\u1e6e\u1e6f"+
		"\u0005\u0141\u0000\u0000\u1e6f\u1e71\u0003\u056a\u02b5\u0000\u1e70\u1e72"+
		"\u0003\u0380\u01c0\u0000\u1e71\u1e70\u0001\u0000\u0000\u0000\u1e71\u1e72"+
		"\u0001\u0000\u0000\u0000\u1e72\u1e73\u0001\u0000\u0000\u0000\u1e73\u1e74"+
		"\u0005J\u0000\u0000\u1e74\u1e75\u0003\u0382\u01c1\u0000\u1e75\u037f\u0001"+
		"\u0000\u0000\u0000\u1e76\u1e77\u0005\u0002\u0000\u0000\u1e77\u1e78\u0003"+
		"\u0508\u0284\u0000\u1e78\u1e79\u0005\u0003\u0000\u0000\u1e79\u0381\u0001"+
		"\u0000\u0000\u0000\u1e7a\u1e7f\u0003\u03c4\u01e2\u0000\u1e7b\u1e7f\u0003"+
		"\u038a\u01c5\u0000\u1e7c\u1e7f\u0003\u03b2\u01d9\u0000\u1e7d\u1e7f\u0003"+
		"\u03a4\u01d2\u0000\u1e7e\u1e7a\u0001\u0000\u0000\u0000\u1e7e\u1e7b\u0001"+
		"\u0000\u0000\u0000\u1e7e\u1e7c\u0001\u0000\u0000\u0000\u1e7e\u1e7d\u0001"+
		"\u0000\u0000\u0000\u1e7f\u0383\u0001\u0000\u0000\u0000\u1e80\u1e81\u0005"+
		"\u00f0\u0000\u0000\u1e81\u1e83\u0003\u056a\u02b5\u0000\u1e82\u1e84\u0003"+
		"\u0386\u01c3\u0000\u1e83\u1e82\u0001\u0000\u0000\u0000\u1e83\u1e84\u0001"+
		"\u0000\u0000\u0000\u1e84\u1ea7\u0001\u0000\u0000\u0000\u1e85\u1e87\u0005"+
		"T\u0000\u0000\u1e86\u1e88\u0003\u00aaU\u0000\u1e87\u1e86\u0001\u0000\u0000"+
		"\u0000\u1e87\u1e88\u0001\u0000\u0000\u0000\u1e88\u1e89\u0001\u0000\u0000"+
		"\u0000\u1e89\u1e8a\u0005\u0082\u0000\u0000\u1e8a\u1e8b\u0003\u0106\u0083"+
		"\u0000\u1e8b\u1e8c\u0005J\u0000\u0000\u1e8c\u1e8d\u0005\u00f0\u0000\u0000"+
		"\u1e8d\u1e8f\u0003\u056a\u02b5\u0000\u1e8e\u1e90\u0003\u0386\u01c3\u0000"+
		"\u1e8f\u1e8e\u0001\u0000\u0000\u0000\u1e8f\u1e90\u0001\u0000\u0000\u0000"+
		"\u1e90\u1e92\u0001\u0000\u0000\u0000\u1e91\u1e93\u0003\u0108\u0084\u0000"+
		"\u1e92\u1e91\u0001\u0000\u0000\u0000\u1e92\u1e93\u0001\u0000\u0000\u0000"+
		"\u1e93\u1ea7\u0001\u0000\u0000\u0000\u1e94\u1e96\u0005T\u0000\u0000\u1e95"+
		"\u1e97\u0003\u00aaU\u0000\u1e96\u1e95\u0001\u0000\u0000\u0000\u1e96\u1e97"+
		"\u0001\u0000\u0000\u0000\u1e97\u1e98\u0001\u0000\u0000\u0000\u1e98\u1e99"+
		"\u0005\u0082\u0000\u0000\u1e99\u1e9a\u0005\u0102\u0000\u0000\u1e9a\u1e9b"+
		"\u0005s\u0000\u0000\u1e9b\u1e9c\u0005\u01ab\u0000\u0000\u1e9c\u1e9d\u0003"+
		"\u0106\u0083\u0000\u1e9d\u1e9e\u0005J\u0000\u0000\u1e9e\u1e9f\u0005\u00f0"+
		"\u0000\u0000\u1e9f\u1ea1\u0003\u056a\u02b5\u0000\u1ea0\u1ea2\u0003\u0386"+
		"\u01c3\u0000\u1ea1\u1ea0\u0001\u0000\u0000\u0000\u1ea1\u1ea2\u0001\u0000"+
		"\u0000\u0000\u1ea2\u1ea4\u0001\u0000\u0000\u0000\u1ea3\u1ea5\u0003\u0108"+
		"\u0084\u0000\u1ea4\u1ea3\u0001\u0000\u0000\u0000\u1ea4\u1ea5\u0001\u0000"+
		"\u0000\u0000\u1ea5\u1ea7\u0001\u0000\u0000\u0000\u1ea6\u1e80\u0001\u0000"+
		"\u0000\u0000\u1ea6\u1e85\u0001\u0000\u0000\u0000\u1ea6\u1e94\u0001\u0000"+
		"\u0000\u0000\u1ea7\u0385\u0001\u0000\u0000\u0000\u1ea8\u1ea9\u0005\u0002"+
		"\u0000\u0000\u1ea9\u1eaa\u0003\u0502\u0281\u0000\u1eaa\u1eab\u0005\u0003"+
		"\u0000\u0000\u1eab\u0387\u0001\u0000\u0000\u0000\u1eac\u1ead\u0005\u00d7"+
		"\u0000\u0000\u1ead\u1eb7\u0003\u056a\u02b5\u0000\u1eae\u1eaf\u0005\u00d7"+
		"\u0000\u0000\u1eaf\u1eb0\u0005\u0141\u0000\u0000\u1eb0\u1eb7\u0003\u056a"+
		"\u02b5\u0000\u1eb1\u1eb2\u0005\u00d7\u0000\u0000\u1eb2\u1eb7\u0005D\u0000"+
		"\u0000\u1eb3\u1eb4\u0005\u00d7\u0000\u0000\u1eb4\u1eb5\u0005\u0141\u0000"+
		"\u0000\u1eb5\u1eb7\u0005D\u0000\u0000\u1eb6\u1eac\u0001\u0000\u0000\u0000"+
		"\u1eb6\u1eae\u0001\u0000\u0000\u0000\u1eb6\u1eb1\u0001\u0000\u0000\u0000"+
		"\u1eb6\u1eb3\u0001\u0000\u0000\u0000\u1eb7\u0389\u0001\u0000\u0000\u0000"+
		"\u1eb8\u1eba\u0003\u03d8\u01ec\u0000\u1eb9\u1eb8\u0001\u0000\u0000\u0000"+
		"\u1eb9\u1eba\u0001\u0000\u0000\u0000\u1eba\u1ebb\u0001\u0000\u0000\u0000"+
		"\u1ebb\u1ebc\u0005\u010e\u0000\u0000\u1ebc\u1ebd\u0005m\u0000\u0000\u1ebd"+
		"\u1ebe\u0003\u038c\u01c6\u0000\u1ebe\u1ec0\u0003\u038e\u01c7\u0000\u1ebf"+
		"\u1ec1\u0003\u0396\u01cb\u0000\u1ec0\u1ebf\u0001\u0000\u0000\u0000\u1ec0"+
		"\u1ec1\u0001\u0000\u0000\u0000\u1ec1\u1ec3\u0001\u0000\u0000\u0000\u1ec2"+
		"\u1ec4\u0003\u039a\u01cd\u0000\u1ec3\u1ec2\u0001\u0000\u0000\u0000\u1ec3"+
		"\u1ec4\u0001\u0000\u0000\u0000\u1ec4\u038b\u0001\u0000\u0000\u0000\u1ec5"+
		"\u1ec8\u0003\u0566\u02b3\u0000\u1ec6\u1ec7\u0005J\u0000\u0000\u1ec7\u1ec9"+
		"\u0003\u058a\u02c5\u0000\u1ec8\u1ec6\u0001\u0000\u0000\u0000\u1ec8\u1ec9"+
		"\u0001\u0000\u0000\u0000\u1ec9\u038d\u0001\u0000\u0000\u0000\u1eca\u1ede"+
		"\u0003\u03c4\u01e2\u0000\u1ecb\u1ecc\u0005\u01f5\u0000\u0000\u1ecc\u1ecd"+
		"\u0003\u0390\u01c8\u0000\u1ecd\u1ece\u0005\u01e8\u0000\u0000\u1ece\u1ecf"+
		"\u0003\u03c4\u01e2\u0000\u1ecf\u1ede\u0001\u0000\u0000\u0000\u1ed0\u1ed1"+
		"\u0005\u0002\u0000\u0000\u1ed1\u1ed2\u0003\u0392\u01c9\u0000\u1ed2\u1ed7"+
		"\u0005\u0003\u0000\u0000\u1ed3\u1ed4\u0005\u01f5\u0000\u0000\u1ed4\u1ed5"+
		"\u0003\u0390\u01c8\u0000\u1ed5\u1ed6\u0005\u01e8\u0000\u0000\u1ed6\u1ed8"+
		"\u0001\u0000\u0000\u0000\u1ed7\u1ed3\u0001\u0000\u0000\u0000\u1ed7\u1ed8"+
		"\u0001\u0000\u0000\u0000\u1ed8\u1ed9\u0001\u0000\u0000\u0000\u1ed9\u1eda"+
		"\u0003\u03c4\u01e2\u0000\u1eda\u1ede\u0001\u0000\u0000\u0000\u1edb\u1edc"+
		"\u0005[\u0000\u0000\u1edc\u1ede\u0005\u01c5\u0000\u0000\u1edd\u1eca\u0001"+
		"\u0000\u0000\u0000\u1edd\u1ecb\u0001\u0000\u0000\u0000\u1edd\u1ed0\u0001"+
		"\u0000\u0000\u0000\u1edd\u1edb\u0001\u0000\u0000\u0000\u1ede\u038f\u0001"+
		"\u0000\u0000\u0000\u1edf\u1ee0\u0007%\u0000\u0000\u1ee0\u0391\u0001\u0000"+
		"\u0000\u0000\u1ee1\u1ee6\u0003\u0394\u01ca\u0000\u1ee2\u1ee3\u0005\u0006"+
		"\u0000\u0000\u1ee3\u1ee5\u0003\u0394\u01ca\u0000\u1ee4\u1ee2\u0001\u0000"+
		"\u0000\u0000\u1ee5\u1ee8\u0001\u0000\u0000\u0000\u1ee6\u1ee4\u0001\u0000"+
		"\u0000\u0000\u1ee6\u1ee7\u0001\u0000\u0000\u0000\u1ee7\u0393\u0001\u0000"+
		"\u0000\u0000\u1ee8\u1ee6\u0001\u0000\u0000\u0000\u1ee9\u1eea\u0003\u058a"+
		"\u02c5\u0000\u1eea\u1eeb\u0003\u0530\u0298\u0000\u1eeb\u0395\u0001\u0000"+
		"\u0000\u0000\u1eec\u1eed\u0005v\u0000\u0000\u1eed\u1eef\u0005\u01f6\u0000"+
		"\u0000\u1eee\u1ef0\u0003\u0398\u01cc\u0000\u1eef\u1eee\u0001\u0000\u0000"+
		"\u0000\u1eef\u1ef0\u0001\u0000\u0000\u0000\u1ef0\u1ef1\u0001\u0000\u0000"+
		"\u0000\u1ef1\u1ef9\u0005_\u0000\u0000\u1ef2\u1ef3\u0005\u0190\u0000\u0000"+
		"\u1ef3\u1ef4\u0005\u016c\u0000\u0000\u1ef4\u1ef6\u0003\u03b4\u01da\u0000"+
		"\u1ef5\u1ef7\u0003\u0444\u0222\u0000\u1ef6\u1ef5\u0001\u0000\u0000\u0000"+
		"\u1ef6\u1ef7\u0001\u0000\u0000\u0000\u1ef7\u1efa\u0001\u0000\u0000\u0000"+
		"\u1ef8\u1efa\u0005\u012d\u0000\u0000\u1ef9\u1ef2\u0001\u0000\u0000\u0000"+
		"\u1ef9\u1ef8\u0001\u0000\u0000\u0000\u1efa\u0397\u0001\u0000\u0000\u0000"+
		"\u1efb\u1efc\u0005\u0002\u0000\u0000\u1efc\u1efd\u0003\u0254\u012a\u0000"+
		"\u1efd\u1eff\u0005\u0003\u0000\u0000\u1efe\u1f00\u0003\u0444\u0222\u0000"+
		"\u1eff\u1efe\u0001\u0000\u0000\u0000\u1eff\u1f00\u0001\u0000\u0000\u0000"+
		"\u1f00\u1f05\u0001\u0000\u0000\u0000\u1f01\u1f02\u0005v\u0000\u0000\u1f02"+
		"\u1f03\u0005S\u0000\u0000\u1f03\u1f05\u0003\u056a\u02b5\u0000\u1f04\u1efb"+
		"\u0001\u0000\u0000\u0000\u1f04\u1f01\u0001\u0000\u0000\u0000\u1f05\u0399"+
		"\u0001\u0000\u0000\u0000\u1f06\u1f07\u0005}\u0000\u0000\u1f07\u1f08\u0003"+
		"\u055e\u02af\u0000\u1f08\u039b\u0001\u0000\u0000\u0000\u1f09\u1f0b\u0005"+
		"\u0123\u0000\u0000\u1f0a\u1f0c\u0005m\u0000\u0000\u1f0b\u1f0a\u0001\u0000"+
		"\u0000\u0000\u1f0b\u1f0c\u0001\u0000\u0000\u0000\u1f0c\u1f0d\u0001\u0000"+
		"\u0000\u0000\u1f0d\u1f0f\u0003\u0566\u02b3\u0000\u1f0e\u1f10\u0003\u0428"+
		"\u0214\u0000\u1f0f\u1f0e\u0001\u0000\u0000\u0000\u1f0f\u1f10\u0001\u0000"+
		"\u0000\u0000\u1f10\u1f11\u0001\u0000\u0000\u0000\u1f11\u1f14\u0005\u008a"+
		"\u0000\u0000\u1f12\u1f15\u0003\u03c6\u01e3\u0000\u1f13\u1f15\u0003\u0566"+
		"\u02b3\u0000\u1f14\u1f12\u0001\u0000\u0000\u0000\u1f14\u1f13\u0001\u0000"+
		"\u0000\u0000\u1f15\u1f17\u0001\u0000\u0000\u0000\u1f16\u1f18\u0003\u0428"+
		"\u0214\u0000\u1f17\u1f16\u0001\u0000\u0000\u0000\u1f17\u1f18\u0001\u0000"+
		"\u0000\u0000\u1f18\u1f19\u0001\u0000\u0000\u0000\u1f19\u1f1a\u0005v\u0000"+
		"\u0000\u1f1a\u1f23\u0003\u048a\u0245\u0000\u1f1b\u1f1d\u0003\u039e\u01cf"+
		"\u0000\u1f1c\u1f1e\u0003\u03a0\u01d0\u0000\u1f1d\u1f1c\u0001\u0000\u0000"+
		"\u0000\u1f1d\u1f1e\u0001\u0000\u0000\u0000\u1f1e\u1f24\u0001\u0000\u0000"+
		"\u0000\u1f1f\u1f21\u0003\u03a0\u01d0\u0000\u1f20\u1f22\u0003\u039e\u01cf"+
		"\u0000\u1f21\u1f20\u0001\u0000\u0000\u0000\u1f21\u1f22\u0001\u0000\u0000"+
		"\u0000\u1f22\u1f24\u0001\u0000\u0000\u0000\u1f23\u1f1b\u0001\u0000\u0000"+
		"\u0000\u1f23\u1f1f\u0001\u0000\u0000\u0000\u1f24\u1f26\u0001\u0000\u0000"+
		"\u0000\u1f25\u1f27\u0003\u03a2\u01d1\u0000\u1f26\u1f25\u0001\u0000\u0000"+
		"\u0000\u1f26\u1f27\u0001\u0000\u0000\u0000\u1f27\u039d\u0001\u0000\u0000"+
		"\u0000\u1f28\u1f29\u0005\u008c\u0000\u0000\u1f29\u1f2a\u0005s\u0000\u0000"+
		"\u1f2a\u1f2d\u0005\u0120\u0000\u0000\u1f2b\u1f2c\u0005G\u0000\u0000\u1f2c"+
		"\u1f2e\u0003\u048a\u0245\u0000\u1f2d\u1f2b\u0001\u0000\u0000\u0000\u1f2d"+
		"\u1f2e\u0001\u0000\u0000\u0000\u1f2e\u1f30\u0001\u0000\u0000\u0000\u1f2f"+
		"\u1f31\u0005\u0083\u0000\u0000\u1f30\u1f2f\u0001\u0000\u0000\u0000\u1f30"+
		"\u1f31\u0001\u0000\u0000\u0000\u1f31\u1f32\u0001\u0000\u0000\u0000\u1f32"+
		"\u1f37\u0005\u010e\u0000\u0000\u1f33\u1f34\u0005\u0002\u0000\u0000\u1f34"+
		"\u1f35\u0003\u0392\u01c9\u0000\u1f35\u1f36\u0005\u0003\u0000\u0000\u1f36"+
		"\u1f38\u0001\u0000\u0000\u0000\u1f37\u1f33\u0001\u0000\u0000\u0000\u1f37"+
		"\u1f38\u0001\u0000\u0000\u0000\u1f38\u1f39\u0001\u0000\u0000\u0000\u1f39"+
		"\u1f3a\u0003\u0420\u0210\u0000\u1f3a\u039f\u0001\u0000\u0000\u0000\u1f3b"+
		"\u1f3c\u0005\u008c\u0000\u0000\u1f3c\u1f3f\u0005\u0120\u0000\u0000\u1f3d"+
		"\u1f3e\u0005G\u0000\u0000\u1f3e\u1f40\u0003\u048a\u0245\u0000\u1f3f\u1f3d"+
		"\u0001\u0000\u0000\u0000\u1f3f\u1f40\u0001\u0000\u0000\u0000\u1f40\u1f42"+
		"\u0001\u0000\u0000\u0000\u1f41\u1f43\u0005\u0083\u0000\u0000\u1f42\u1f41"+
		"\u0001\u0000\u0000\u0000\u1f42\u1f43\u0001\u0000\u0000\u0000\u1f43\u1f44"+
		"\u0001\u0000\u0000\u0000\u1f44\u1f45\u0005\u0190\u0000\u0000\u1f45\u1f46"+
		"\u0005\u016c\u0000\u0000\u1f46\u1f47\u0003\u03b4\u01da\u0000\u1f47\u03a1"+
		"\u0001\u0000\u0000\u0000\u1f48\u1f49\u0005\u008c\u0000\u0000\u1f49\u1f4b"+
		"\u0005\u0120\u0000\u0000\u1f4a\u1f4c\u0005\u0083\u0000\u0000\u1f4b\u1f4a"+
		"\u0001\u0000\u0000\u0000\u1f4b\u1f4c\u0001\u0000\u0000\u0000\u1f4c\u1f4d"+
		"\u0001\u0000\u0000\u0000\u1f4d\u1f4e\u0005\u00dc\u0000\u0000\u1f4e\u03a3"+
		"\u0001\u0000\u0000\u0000\u1f4f\u1f51\u0003\u03d8\u01ec\u0000\u1f50\u1f4f"+
		"\u0001\u0000\u0000\u0000\u1f50\u1f51\u0001\u0000\u0000\u0000\u1f51\u1f52"+
		"\u0001\u0000\u0000\u0000\u1f52\u1f53\u0005\u00dc\u0000\u0000\u1f53\u1f54"+
		"\u0005f\u0000\u0000\u1f54\u1f56\u0003\u0434\u021a\u0000\u1f55\u1f57\u0003"+
		"\u03a6\u01d3\u0000\u1f56\u1f55\u0001\u0000\u0000\u0000\u1f56\u1f57\u0001"+
		"\u0000\u0000\u0000\u1f57\u1f59\u0001\u0000\u0000\u0000\u1f58\u1f5a\u0003"+
		"\u0446\u0223\u0000\u1f59\u1f58\u0001\u0000\u0000\u0000\u1f59\u1f5a\u0001"+
		"\u0000\u0000\u0000\u1f5a\u1f5c\u0001\u0000\u0000\u0000\u1f5b\u1f5d\u0003"+
		"\u039a\u01cd\u0000\u1f5c\u1f5b\u0001\u0000\u0000\u0000\u1f5c\u1f5d\u0001"+
		"\u0000\u0000\u0000\u1f5d\u03a5\u0001\u0000\u0000\u0000\u1f5e\u1f5f\u0005"+
		"\u008a\u0000\u0000\u1f5f\u1f60\u0003\u0424\u0212\u0000\u1f60\u03a7\u0001"+
		"\u0000\u0000\u0000\u1f61\u1f63\u0005\u011d\u0000\u0000\u1f62\u1f64\u0003"+
		"\u03e0\u01f0\u0000\u1f63\u1f62\u0001\u0000\u0000\u0000\u1f63\u1f64\u0001"+
		"\u0000\u0000\u0000\u1f64\u1f65\u0001\u0000\u0000\u0000\u1f65\u1f67\u0003"+
		"\u0432\u0219\u0000\u1f66\u1f68\u0003\u03aa\u01d5\u0000\u1f67\u1f66\u0001"+
		"\u0000\u0000\u0000\u1f67\u1f68\u0001\u0000\u0000\u0000\u1f68\u1f6a\u0001"+
		"\u0000\u0000\u0000\u1f69\u1f6b\u0003\u03ae\u01d7\u0000\u1f6a\u1f69\u0001"+
		"\u0000\u0000\u0000\u1f6a\u1f6b\u0001\u0000\u0000\u0000\u1f6b\u03a9\u0001"+
		"\u0000\u0000\u0000\u1f6c\u1f6d\u0005j\u0000\u0000\u1f6d\u1f6e\u0003\u03ac"+
		"\u01d6\u0000\u1f6e\u1f6f\u0005\u0126\u0000\u0000\u1f6f\u03ab\u0001\u0000"+
		"\u0000\u0000\u1f70\u1f71\u0005\u00a9\u0000\u0000\u1f71\u1f7d\u0007&\u0000"+
		"\u0000\u1f72\u1f73\u0005\u01bd\u0000\u0000\u1f73\u1f7d\u0007&\u0000\u0000"+
		"\u1f74\u1f79\u0005\u016d\u0000\u0000\u1f75\u1f76\u0005\u0190\u0000\u0000"+
		"\u1f76\u1f7a\u0005\u00ef\u0000\u0000\u1f77\u1f78\u0005\u01bd\u0000\u0000"+
		"\u1f78\u1f7a\u0005\u00ef\u0000\u0000\u1f79\u1f75\u0001\u0000\u0000\u0000"+
		"\u1f79\u1f77\u0001\u0000\u0000\u0000\u1f79\u1f7a\u0001\u0000\u0000\u0000"+
		"\u1f7a\u1f7d\u0001\u0000\u0000\u0000\u1f7b\u1f7d\u0005\u00ef\u0000\u0000"+
		"\u1f7c\u1f70\u0001\u0000\u0000\u0000\u1f7c\u1f72\u0001\u0000\u0000\u0000"+
		"\u1f7c\u1f74\u0001\u0000\u0000\u0000\u1f7c\u1f7b\u0001\u0000\u0000\u0000"+
		"\u1f7d\u03ad\u0001\u0000\u0000\u0000\u1f7e\u1f7f\u0005\u012f\u0000\u0000"+
		"\u1f7f\u03af\u0001\u0000\u0000\u0000\u1f80\u1f84\u0005\u012f\u0000\u0000"+
		"\u1f81\u1f82\u0005\u01f7\u0000\u0000\u1f82\u1f84\u0005\u01f8\u0000\u0000"+
		"\u1f83\u1f80\u0001\u0000\u0000\u0000\u1f83\u1f81\u0001\u0000\u0000\u0000"+
		"\u1f84\u03b1\u0001\u0000\u0000\u0000\u1f85\u1f87\u0003\u03d8\u01ec\u0000"+
		"\u1f86\u1f85\u0001\u0000\u0000\u0000\u1f86\u1f87\u0001\u0000\u0000\u0000"+
		"\u1f87\u1f88\u0001\u0000\u0000\u0000\u1f88\u1f89\u0005\u0190\u0000\u0000"+
		"\u1f89\u1f8a\u0003\u0434\u021a\u0000\u1f8a\u1f8b\u0005\u016c\u0000\u0000"+
		"\u1f8b\u1f8d\u0003\u03b4\u01da\u0000\u1f8c\u1f8e\u0003\u0422\u0211\u0000"+
		"\u1f8d\u1f8c\u0001\u0000\u0000\u0000\u1f8d\u1f8e\u0001\u0000\u0000\u0000"+
		"\u1f8e\u1f90\u0001\u0000\u0000\u0000\u1f8f\u1f91\u0003\u0446\u0223\u0000"+
		"\u1f90\u1f8f\u0001\u0000\u0000\u0000\u1f90\u1f91\u0001\u0000\u0000\u0000"+
		"\u1f91\u1f93\u0001\u0000\u0000\u0000\u1f92\u1f94\u0003\u039a\u01cd\u0000"+
		"\u1f93\u1f92\u0001\u0000\u0000\u0000\u1f93\u1f94\u0001\u0000\u0000\u0000"+
		"\u1f94\u03b3\u0001\u0000\u0000\u0000\u1f95\u1f9a\u0003\u03b6\u01db\u0000"+
		"\u1f96\u1f97\u0005\u0006\u0000\u0000\u1f97\u1f99\u0003\u03b6\u01db\u0000"+
		"\u1f98\u1f96\u0001\u0000\u0000\u0000\u1f99\u1f9c\u0001\u0000\u0000\u0000"+
		"\u1f9a\u1f98\u0001\u0000\u0000\u0000\u1f9a\u1f9b\u0001\u0000\u0000\u0000"+
		"\u1f9b\u03b5\u0001\u0000\u0000\u0000\u1f9c\u1f9a\u0001\u0000\u0000\u0000"+
		"\u1f9d\u1f9e\u0003\u03b8\u01dc\u0000\u1f9e\u1f9f\u0005\n\u0000\u0000\u1f9f"+
		"\u1fa0\u0003\u048a\u0245\u0000\u1fa0\u1fa8\u0001\u0000\u0000\u0000\u1fa1"+
		"\u1fa2\u0005\u0002\u0000\u0000\u1fa2\u1fa3\u0003\u03ba\u01dd\u0000\u1fa3"+
		"\u1fa4\u0005\u0003\u0000\u0000\u1fa4\u1fa5\u0005\n\u0000\u0000\u1fa5\u1fa6"+
		"\u0003\u048a\u0245\u0000\u1fa6\u1fa8\u0001\u0000\u0000\u0000\u1fa7\u1f9d"+
		"\u0001\u0000\u0000\u0000\u1fa7\u1fa1\u0001\u0000\u0000\u0000\u1fa8\u03b7"+
		"\u0001\u0000\u0000\u0000\u1fa9\u1faa\u0003\u058a\u02c5\u0000\u1faa\u1fab"+
		"\u0003\u0530\u0298\u0000\u1fab\u03b9\u0001\u0000\u0000\u0000\u1fac\u1fb1"+
		"\u0003\u03b8\u01dc\u0000\u1fad\u1fae\u0005\u0006\u0000\u0000\u1fae\u1fb0"+
		"\u0003\u03b8\u01dc\u0000\u1faf\u1fad\u0001\u0000\u0000\u0000\u1fb0\u1fb3"+
		"\u0001\u0000\u0000\u0000\u1fb1\u1faf\u0001\u0000\u0000\u0000\u1fb1\u1fb2"+
		"\u0001\u0000\u0000\u0000\u1fb2\u03bb\u0001\u0000\u0000\u0000\u1fb3\u1fb1"+
		"\u0001\u0000\u0000\u0000\u1fb4\u1fb5\u0005\u00d8\u0000\u0000\u1fb5\u1fb6"+
		"\u0003\u03be\u01df\u0000\u1fb6\u1fb7\u0003\u03c0\u01e0\u0000\u1fb7\u1fb9"+
		"\u0005\u00d2\u0000\u0000\u1fb8\u1fba\u0003\u03c2\u01e1\u0000\u1fb9\u1fb8"+
		"\u0001\u0000\u0000\u0000\u1fb9\u1fba\u0001\u0000\u0000\u0000\u1fba\u1fbb"+
		"\u0001\u0000\u0000\u0000\u1fbb\u1fbc\u0005d\u0000\u0000\u1fbc\u1fbd\u0003"+
		"\u03c4\u01e2\u0000\u1fbd\u03bd\u0001\u0000\u0000\u0000\u1fbe\u1fbf\u0003"+
		"\u056a\u02b5\u0000\u1fbf\u03bf\u0001\u0000\u0000\u0000\u1fc0\u1fc1\u0005"+
		"\u012c\u0000\u0000\u1fc1\u1fc6\u0005\u0163\u0000\u0000\u1fc2\u1fc6\u0005"+
		"\u0163\u0000\u0000\u1fc3\u1fc6\u0005\u0091\u0000\u0000\u1fc4\u1fc6\u0005"+
		"\u010d\u0000\u0000\u1fc5\u1fc0\u0001\u0000\u0000\u0000\u1fc5\u1fc2\u0001"+
		"\u0000\u0000\u0000\u1fc5\u1fc3\u0001\u0000\u0000\u0000\u1fc5\u1fc4\u0001"+
		"\u0000\u0000\u0000\u1fc6\u1fc9\u0001\u0000\u0000\u0000\u1fc7\u1fc5\u0001"+
		"\u0000\u0000\u0000\u1fc7\u1fc8\u0001\u0000\u0000\u0000\u1fc8\u03c1\u0001"+
		"\u0000\u0000\u0000\u1fc9\u1fc7\u0001\u0000\u0000\u0000\u1fca\u1fcb\u0005"+
		"\u008f\u0000\u0000\u1fcb\u1fcf\u0005\u00ff\u0000\u0000\u1fcc\u1fcd\u0005"+
		"\u019a\u0000\u0000\u1fcd\u1fcf\u0005\u00ff\u0000\u0000\u1fce\u1fca\u0001"+
		"\u0000\u0000\u0000\u1fce\u1fcc\u0001\u0000\u0000\u0000\u1fcf\u03c3\u0001"+
		"\u0000\u0000\u0000\u1fd0\u1fd3\u0003\u03c8\u01e4\u0000\u1fd1\u1fd3\u0003"+
		"\u03c6\u01e3\u0000\u1fd2\u1fd0\u0001\u0000\u0000\u0000\u1fd2\u1fd1\u0001"+
		"\u0000\u0000\u0000\u1fd3\u03c5\u0001\u0000\u0000\u0000\u1fd4\u1fd5\u0005"+
		"\u0002\u0000\u0000\u1fd5\u1fd6\u0003\u03c8\u01e4\u0000\u1fd6\u1fd7\u0005"+
		"\u0003\u0000\u0000\u1fd7\u1fdd\u0001\u0000\u0000\u0000\u1fd8\u1fd9\u0005"+
		"\u0002\u0000\u0000\u1fd9\u1fda\u0003\u03c6\u01e3\u0000\u1fda\u1fdb\u0005"+
		"\u0003\u0000\u0000\u1fdb\u1fdd\u0001\u0000\u0000\u0000\u1fdc\u1fd4\u0001"+
		"\u0000\u0000\u0000\u1fdc\u1fd8\u0001\u0000\u0000\u0000\u1fdd\u03c7\u0001"+
		"\u0000\u0000\u0000\u1fde\u1fe0\u0003\u03ca\u01e5\u0000\u1fdf\u1fe1\u0003"+
		"\u03e8\u01f4\u0000\u1fe0\u1fdf\u0001\u0000\u0000\u0000\u1fe0\u1fe1\u0001"+
		"\u0000\u0000\u0000\u1fe1\u1fea\u0001\u0000\u0000\u0000\u1fe2\u1fe4\u0003"+
		"\u0414\u020a\u0000\u1fe3\u1fe5\u0003\u03f2\u01f9\u0000\u1fe4\u1fe3\u0001"+
		"\u0000\u0000\u0000\u1fe4\u1fe5\u0001\u0000\u0000\u0000\u1fe5\u1feb\u0001"+
		"\u0000\u0000\u0000\u1fe6\u1fe8\u0003\u03f0\u01f8\u0000\u1fe7\u1fe9\u0003"+
		"\u0416\u020b\u0000\u1fe8\u1fe7\u0001\u0000\u0000\u0000\u1fe8\u1fe9\u0001"+
		"\u0000\u0000\u0000\u1fe9\u1feb\u0001\u0000\u0000\u0000\u1fea\u1fe2\u0001"+
		"\u0000\u0000\u0000\u1fea\u1fe6\u0001\u0000\u0000\u0000\u1fea\u1feb\u0001"+
		"\u0000\u0000\u0000\u1feb\u1ffc\u0001\u0000\u0000\u0000\u1fec\u1fed\u0003"+
		"\u03d0\u01e8\u0000\u1fed\u1fef\u0003\u03ca\u01e5\u0000\u1fee\u1ff0\u0003"+
		"\u03e8\u01f4\u0000\u1fef\u1fee\u0001\u0000\u0000\u0000\u1fef\u1ff0\u0001"+
		"\u0000\u0000\u0000\u1ff0\u1ff9\u0001\u0000\u0000\u0000\u1ff1\u1ff3\u0003"+
		"\u0414\u020a\u0000\u1ff2\u1ff4\u0003\u03f2\u01f9\u0000\u1ff3\u1ff2\u0001"+
		"\u0000\u0000\u0000\u1ff3\u1ff4\u0001\u0000\u0000\u0000\u1ff4\u1ffa\u0001"+
		"\u0000\u0000\u0000\u1ff5\u1ff7\u0003\u03f0\u01f8\u0000\u1ff6\u1ff8\u0003"+
		"\u0416\u020b\u0000\u1ff7\u1ff6\u0001\u0000\u0000\u0000\u1ff7\u1ff8\u0001"+
		"\u0000\u0000\u0000\u1ff8\u1ffa\u0001\u0000\u0000\u0000\u1ff9\u1ff1\u0001"+
		"\u0000\u0000\u0000\u1ff9\u1ff5\u0001\u0000\u0000\u0000\u1ff9\u1ffa\u0001"+
		"\u0000\u0000\u0000\u1ffa\u1ffc\u0001\u0000\u0000\u0000\u1ffb\u1fde\u0001"+
		"\u0000\u0000\u0000\u1ffb\u1fec\u0001\u0000\u0000\u0000\u1ffc\u03c9\u0001"+
		"\u0000\u0000\u0000\u1ffd\u2005\u0003\u03cc\u01e6\u0000\u1ffe\u2000\u0007"+
		"\'\u0000\u0000\u1fff\u2001\u0003\u03e2\u01f1\u0000\u2000\u1fff\u0001\u0000"+
		"\u0000\u0000\u2000\u2001\u0001\u0000\u0000\u0000\u2001\u2002\u0001\u0000"+
		"\u0000\u0000\u2002\u2004\u0003\u03cc\u01e6\u0000\u2003\u1ffe\u0001\u0000"+
		"\u0000\u0000\u2004\u2007\u0001\u0000\u0000\u0000\u2005\u2003\u0001\u0000"+
		"\u0000\u0000\u2005\u2006\u0001\u0000\u0000\u0000\u2006\u03cb\u0001\u0000"+
		"\u0000\u0000\u2007\u2005\u0001\u0000\u0000\u0000\u2008\u2010\u0003\u03ce"+
		"\u01e7\u0000\u2009\u200b\u0005l\u0000\u0000\u200a\u200c\u0003\u03e2\u01f1"+
		"\u0000\u200b\u200a\u0001\u0000\u0000\u0000\u200b\u200c\u0001\u0000\u0000"+
		"\u0000\u200c\u200d\u0001\u0000\u0000\u0000\u200d\u200f\u0003\u03ce\u01e7"+
		"\u0000\u200e\u2009\u0001\u0000\u0000\u0000\u200f\u2012\u0001\u0000\u0000"+
		"\u0000\u2010\u200e\u0001\u0000\u0000\u0000\u2010\u2011\u0001\u0000\u0000"+
		"\u0000\u2011\u03cd\u0001\u0000\u0000\u0000\u2012\u2010\u0001\u0000\u0000"+
		"\u0000\u2013\u2040\u0005~\u0000\u0000\u2014\u2016\u0003\u03e6\u01f3\u0000"+
		"\u2015\u2014\u0001\u0000\u0000\u0000\u2015\u2016\u0001\u0000\u0000\u0000"+
		"\u2016\u2018\u0001\u0000\u0000\u0000\u2017\u2019\u0003\u055c\u02ae\u0000"+
		"\u2018\u2017\u0001\u0000\u0000\u0000\u2018\u2019\u0001\u0000\u0000\u0000"+
		"\u2019\u201b\u0001\u0000\u0000\u0000\u201a\u201c\u0003\u03da\u01ed\u0000"+
		"\u201b\u201a\u0001\u0000\u0000\u0000\u201b\u201c\u0001\u0000\u0000\u0000"+
		"\u201c\u201e\u0001\u0000\u0000\u0000\u201d\u201f\u0003\u0422\u0211\u0000"+
		"\u201e\u201d\u0001\u0000\u0000\u0000\u201e\u201f\u0001\u0000\u0000\u0000"+
		"\u201f\u2021\u0001\u0000\u0000\u0000\u2020\u2022\u0003\u0444\u0222\u0000"+
		"\u2021\u2020\u0001\u0000\u0000\u0000\u2021\u2022\u0001\u0000\u0000\u0000"+
		"\u2022\u2024\u0001\u0000\u0000\u0000\u2023\u2025\u0003\u0404\u0202\u0000"+
		"\u2024\u2023\u0001\u0000\u0000\u0000\u2024\u2025\u0001\u0000\u0000\u0000"+
		"\u2025\u2027\u0001\u0000\u0000\u0000\u2026\u2028\u0003\u0412\u0209\u0000"+
		"\u2027\u2026\u0001\u0000\u0000\u0000\u2027\u2028\u0001\u0000\u0000\u0000"+
		"\u2028\u202a\u0001\u0000\u0000\u0000\u2029\u202b\u0003\u04da\u026d\u0000"+
		"\u202a\u2029\u0001\u0000\u0000\u0000\u202a\u202b\u0001\u0000\u0000\u0000"+
		"\u202b\u2041\u0001\u0000\u0000\u0000\u202c\u202d\u0003\u03e4\u01f2\u0000"+
		"\u202d\u202f\u0003\u055e\u02af\u0000\u202e\u2030\u0003\u03da\u01ed\u0000"+
		"\u202f\u202e\u0001\u0000\u0000\u0000\u202f\u2030\u0001\u0000\u0000\u0000"+
		"\u2030\u2032\u0001\u0000\u0000\u0000\u2031\u2033\u0003\u0422\u0211\u0000"+
		"\u2032\u2031\u0001\u0000\u0000\u0000\u2032\u2033\u0001\u0000\u0000\u0000"+
		"\u2033\u2035\u0001\u0000\u0000\u0000\u2034\u2036\u0003\u0444\u0222\u0000"+
		"\u2035\u2034\u0001\u0000\u0000\u0000\u2035\u2036\u0001\u0000\u0000\u0000"+
		"\u2036\u2038\u0001\u0000\u0000\u0000\u2037\u2039\u0003\u0404\u0202\u0000"+
		"\u2038\u2037\u0001\u0000\u0000\u0000\u2038\u2039\u0001\u0000\u0000\u0000"+
		"\u2039\u203b\u0001\u0000\u0000\u0000\u203a\u203c\u0003\u0412\u0209\u0000"+
		"\u203b\u203a\u0001\u0000\u0000\u0000\u203b\u203c\u0001\u0000\u0000\u0000"+
		"\u203c\u203e\u0001\u0000\u0000\u0000\u203d\u203f\u0003\u04da\u026d\u0000"+
		"\u203e\u203d\u0001\u0000\u0000\u0000\u203e\u203f\u0001\u0000\u0000\u0000"+
		"\u203f\u2041\u0001\u0000\u0000\u0000\u2040\u2015\u0001\u0000\u0000\u0000"+
		"\u2040\u202c\u0001\u0000\u0000\u0000\u2041\u2047\u0001\u0000\u0000\u0000"+
		"\u2042\u2047\u0003\u0420\u0210\u0000\u2043\u2044\u0005\u0082\u0000\u0000"+
		"\u2044\u2047\u0003\u0430\u0218\u0000\u2045\u2047\u0003\u03c6\u01e3\u0000"+
		"\u2046\u2013\u0001\u0000\u0000\u0000\u2046\u2042\u0001\u0000\u0000\u0000"+
		"\u2046\u2043\u0001\u0000\u0000\u0000\u2046\u2045\u0001\u0000\u0000\u0000"+
		"\u2047\u03cf\u0001\u0000\u0000\u0000\u2048\u204a\u0005\u008f\u0000\u0000"+
		"\u2049\u204b\u0005\u014e\u0000\u0000\u204a\u2049\u0001\u0000\u0000\u0000"+
		"\u204a\u204b\u0001\u0000\u0000\u0000\u204b\u204c\u0001\u0000\u0000\u0000"+
		"\u204c\u204d\u0003\u03d2\u01e9\u0000\u204d\u03d1\u0001\u0000\u0000\u0000"+
		"\u204e\u2053\u0003\u03d4\u01ea\u0000\u204f\u2050\u0005\u0006\u0000\u0000"+
		"\u2050\u2052\u0003\u03d4\u01ea\u0000\u2051\u204f\u0001\u0000\u0000\u0000"+
		"\u2052\u2055\u0001\u0000\u0000\u0000\u2053\u2051\u0001\u0000\u0000\u0000"+
		"\u2053\u2054\u0001\u0000\u0000\u0000\u2054\u03d3\u0001\u0000\u0000\u0000"+
		"\u2055\u2053\u0001\u0000\u0000\u0000\u2056\u2058\u0003\u056a\u02b5\u0000"+
		"\u2057\u2059\u0003\u036a\u01b5\u0000\u2058\u2057\u0001\u0000\u0000\u0000"+
		"\u2058\u2059\u0001\u0000\u0000\u0000\u2059\u205a\u0001\u0000\u0000\u0000"+
		"\u205a\u205c\u0005J\u0000\u0000\u205b\u205d\u0003\u03d6\u01eb\u0000\u205c"+
		"\u205b\u0001\u0000\u0000\u0000\u205c\u205d\u0001\u0000\u0000\u0000\u205d"+
		"\u205e\u0001\u0000\u0000\u0000\u205e\u205f\u0005\u0002\u0000\u0000\u205f"+
		"\u2060\u0003\u0382\u01c1\u0000\u2060\u2061\u0005\u0003\u0000\u0000\u2061"+
		"\u03d5\u0001\u0000\u0000\u0000\u2062\u2066\u0005\u0121\u0000\u0000\u2063"+
		"\u2064\u0005s\u0000\u0000\u2064\u2066\u0005\u0121\u0000\u0000\u2065\u2062"+
		"\u0001\u0000\u0000\u0000\u2065\u2063\u0001\u0000\u0000\u0000\u2066\u03d7"+
		"\u0001\u0000\u0000\u0000\u2067\u2068\u0003\u03d0\u01e8\u0000\u2068\u03d9"+
		"\u0001\u0000\u0000\u0000\u2069\u206a\u0005m\u0000\u0000\u206a\u206b\u0003"+
		"\u03de\u01ef\u0000\u206b\u03db\u0001\u0000\u0000\u0000\u206c\u206d\u0005"+
		"\u0179\u0000\u0000\u206d\u03dd\u0001\u0000\u0000\u0000\u206e\u2070\u0007"+
		"(\u0000\u0000\u206f\u206e\u0001\u0000\u0000\u0000\u206f\u2070\u0001\u0000"+
		"\u0000\u0000\u2070\u2071\u0001\u0000\u0000\u0000\u2071\u2073\u0007\f\u0000"+
		"\u0000\u2072\u2074\u0003\u03e0\u01f0\u0000\u2073\u2072\u0001\u0000\u0000"+
		"\u0000\u2073\u2074\u0001\u0000\u0000\u0000\u2074\u2075\u0001\u0000\u0000"+
		"\u0000\u2075\u207f\u0003\u0566\u02b3\u0000\u2076\u2078\u0005\u018e\u0000"+
		"\u0000\u2077\u2079\u0003\u03e0\u01f0\u0000\u2078\u2077\u0001\u0000\u0000"+
		"\u0000\u2078\u2079\u0001\u0000\u0000\u0000\u2079\u207a\u0001\u0000\u0000"+
		"\u0000\u207a\u207f\u0003\u0566\u02b3\u0000\u207b\u207c\u0005\u0082\u0000"+
		"\u0000\u207c\u207f\u0003\u0566\u02b3\u0000\u207d\u207f\u0003\u0566\u02b3"+
		"\u0000\u207e\u206f\u0001\u0000\u0000\u0000\u207e\u2076\u0001\u0000\u0000"+
		"\u0000\u207e\u207b\u0001\u0000\u0000\u0000\u207e\u207d\u0001\u0000\u0000"+
		"\u0000\u207f\u03df\u0001\u0000\u0000\u0000\u2080\u2081\u0005\u0082\u0000"+
		"\u0000\u2081\u03e1\u0001\u0000\u0000\u0000\u2082\u2083\u0007)\u0000\u0000"+
		"\u2083\u03e3\u0001\u0000\u0000\u0000\u2084\u208a\u0005^\u0000\u0000\u2085"+
		"\u2086\u0005v\u0000\u0000\u2086\u2087\u0005\u0002\u0000\u0000\u2087\u2088"+
		"\u0003\u0502\u0281\u0000\u2088\u2089\u0005\u0003\u0000\u0000\u2089\u208b"+
		"\u0001\u0000\u0000\u0000\u208a\u2085\u0001\u0000\u0000\u0000\u208a\u208b"+
		"\u0001\u0000\u0000\u0000\u208b\u03e5\u0001\u0000\u0000\u0000\u208c\u208d"+
		"\u0005D\u0000\u0000\u208d\u03e7\u0001\u0000\u0000\u0000\u208e\u208f\u0003"+
		"\u03ea\u01f5\u0000\u208f\u03e9\u0001\u0000\u0000\u0000\u2090\u2091\u0005"+
		"y\u0000\u0000\u2091\u2092\u0005\u00b9\u0000\u0000\u2092\u2093\u0003\u03ec"+
		"\u01f6\u0000\u2093\u03eb\u0001\u0000\u0000\u0000\u2094\u2099\u0003\u03ee"+
		"\u01f7\u0000\u2095\u2096\u0005\u0006\u0000\u0000\u2096\u2098\u0003\u03ee"+
		"\u01f7\u0000\u2097\u2095\u0001\u0000\u0000\u0000\u2098\u209b\u0001\u0000"+
		"\u0000\u0000\u2099\u2097\u0001\u0000\u0000\u0000\u2099\u209a\u0001\u0000"+
		"\u0000\u0000\u209a\u03ed\u0001\u0000\u0000\u0000\u209b\u2099\u0001\u0000"+
		"\u0000\u0000\u209c\u20a2\u0003\u048a\u0245\u0000\u209d\u209e\u0005\u008a"+
		"\u0000\u0000\u209e\u20a3\u0003\u04fe\u027f\u0000\u209f\u20a1\u0003\u0262"+
		"\u0131\u0000\u20a0\u209f\u0001\u0000\u0000\u0000\u20a0\u20a1\u0001\u0000"+
		"\u0000\u0000\u20a1\u20a3\u0001\u0000\u0000\u0000\u20a2\u209d\u0001\u0000"+
		"\u0000\u0000\u20a2\u20a0\u0001\u0000\u0000\u0000\u20a3\u20a5\u0001\u0000"+
		"\u0000\u0000\u20a4\u20a6\u0003\u0264\u0132\u0000\u20a5\u20a4\u0001\u0000"+
		"\u0000\u0000\u20a5\u20a6\u0001\u0000\u0000\u0000\u20a6\u03ef\u0001\u0000"+
		"\u0000\u0000\u20a7\u20a9\u0003\u03f4\u01fa\u0000\u20a8\u20aa\u0003\u03f6"+
		"\u01fb\u0000\u20a9\u20a8\u0001\u0000\u0000\u0000\u20a9\u20aa\u0001\u0000"+
		"\u0000\u0000\u20aa\u20b0\u0001\u0000\u0000\u0000\u20ab\u20ad\u0003\u03f6"+
		"\u01fb\u0000\u20ac\u20ae\u0003\u03f4\u01fa\u0000\u20ad\u20ac\u0001\u0000"+
		"\u0000\u0000\u20ad\u20ae\u0001\u0000\u0000\u0000\u20ae\u20b0\u0001\u0000"+
		"\u0000\u0000\u20af\u20a7\u0001\u0000\u0000\u0000\u20af\u20ab\u0001\u0000"+
		"\u0000\u0000\u20b0\u03f1\u0001\u0000\u0000\u0000\u20b1\u20b2\u0003\u03f0"+
		"\u01f8\u0000\u20b2\u03f3\u0001\u0000\u0000\u0000\u20b3\u20b4\u0005p\u0000"+
		"\u0000\u20b4\u20b7\u0003\u03f8\u01fc\u0000\u20b5\u20b6\u0005\u0006\u0000"+
		"\u0000\u20b6\u20b8\u0003\u03fa\u01fd\u0000\u20b7\u20b5\u0001\u0000\u0000"+
		"\u0000\u20b7\u20b8\u0001\u0000\u0000\u0000\u20b8\u20cb\u0001\u0000\u0000"+
		"\u0000\u20b9\u20ba\u0005c\u0000\u0000\u20ba\u20c8\u0003\u0402\u0201\u0000"+
		"\u20bb\u20bc\u0003\u03fc\u01fe\u0000\u20bc\u20c0\u0003\u0400\u0200\u0000"+
		"\u20bd\u20c1\u0005w\u0000\u0000\u20be\u20bf\u0005\u008f\u0000\u0000\u20bf"+
		"\u20c1\u0005\u01f9\u0000\u0000\u20c0\u20bd\u0001\u0000\u0000\u0000\u20c0"+
		"\u20be\u0001\u0000\u0000\u0000\u20c1\u20c9\u0001\u0000\u0000\u0000\u20c2"+
		"\u20c6\u0003\u0400\u0200\u0000\u20c3\u20c7\u0005w\u0000\u0000\u20c4\u20c5"+
		"\u0005\u008f\u0000\u0000\u20c5\u20c7\u0005\u01f9\u0000\u0000\u20c6\u20c3"+
		"\u0001\u0000\u0000\u0000\u20c6\u20c4\u0001\u0000\u0000\u0000\u20c7\u20c9"+
		"\u0001\u0000\u0000\u0000\u20c8\u20bb\u0001\u0000\u0000\u0000\u20c8\u20c2"+
		"\u0001\u0000\u0000\u0000\u20c9\u20cb\u0001\u0000\u0000\u0000\u20ca\u20b3"+
		"\u0001\u0000\u0000\u0000\u20ca\u20b9\u0001\u0000\u0000\u0000\u20cb\u03f5"+
		"\u0001\u0000\u0000\u0000\u20cc\u20d1\u0005u\u0000\u0000\u20cd\u20d2\u0003"+
		"\u03fa\u01fd\u0000\u20ce\u20cf\u0003\u03fc\u01fe\u0000\u20cf\u20d0\u0003"+
		"\u0400\u0200\u0000\u20d0\u20d2\u0001\u0000\u0000\u0000\u20d1\u20cd\u0001"+
		"\u0000\u0000\u0000\u20d1\u20ce\u0001\u0000\u0000\u0000\u20d2\u03f7\u0001"+
		"\u0000\u0000\u0000\u20d3\u20d6\u0003\u048a\u0245\u0000\u20d4\u20d6\u0005"+
		"D\u0000\u0000\u20d5\u20d3\u0001\u0000\u0000\u0000\u20d5\u20d4\u0001\u0000"+
		"\u0000\u0000\u20d6\u03f9\u0001\u0000\u0000\u0000\u20d7\u20d8\u0003\u048a"+
		"\u0245\u0000\u20d8\u03fb\u0001\u0000\u0000\u0000\u20d9\u20df\u0003\u04b6"+
		"\u025b\u0000\u20da\u20db\u0005\f\u0000\u0000\u20db\u20df\u0003\u03fe\u01ff"+
		"\u0000\u20dc\u20dd\u0005\r\u0000\u0000\u20dd\u20df\u0003\u03fe\u01ff\u0000"+
		"\u20de\u20d9\u0001\u0000\u0000\u0000\u20de\u20da\u0001\u0000\u0000\u0000"+
		"\u20de\u20dc\u0001\u0000\u0000\u0000\u20df\u03fd\u0001\u0000\u0000\u0000"+
		"\u20e0\u20e3\u0003\u057a\u02bd\u0000\u20e1\u20e3\u0003\u0578\u02bc\u0000"+
		"\u20e2\u20e0\u0001\u0000\u0000\u0000\u20e2\u20e1\u0001\u0000\u0000\u0000"+
		"\u20e3\u03ff\u0001\u0000\u0000\u0000\u20e4\u20e5\u0007*\u0000\u0000\u20e5"+
		"\u0401\u0001\u0000\u0000\u0000\u20e6\u20e7\u0007+\u0000\u0000\u20e7\u0403"+
		"\u0001\u0000\u0000\u0000\u20e8\u20e9\u0005h\u0000\u0000\u20e9\u20ea\u0005"+
		"\u00b9\u0000\u0000\u20ea\u20eb\u0003\u0406\u0203\u0000\u20eb\u0405\u0001"+
		"\u0000\u0000\u0000\u20ec\u20f1\u0003\u0408\u0204\u0000\u20ed\u20ee\u0005"+
		"\u0006\u0000\u0000\u20ee\u20f0\u0003\u0408\u0204\u0000\u20ef\u20ed\u0001"+
		"\u0000\u0000\u0000\u20f0\u20f3\u0001\u0000\u0000\u0000\u20f1\u20ef\u0001"+
		"\u0000\u0000\u0000\u20f1\u20f2\u0001\u0000\u0000\u0000\u20f2\u0407\u0001"+
		"\u0000\u0000\u0000\u20f3\u20f1\u0001\u0000\u0000\u0000\u20f4\u20fa\u0003"+
		"\u040a\u0205\u0000\u20f5\u20fa\u0003\u040e\u0207\u0000\u20f6\u20fa\u0003"+
		"\u040c\u0206\u0000\u20f7\u20fa\u0003\u0410\u0208\u0000\u20f8\u20fa\u0003"+
		"\u048a\u0245\u0000\u20f9\u20f4\u0001\u0000\u0000\u0000\u20f9\u20f5\u0001"+
		"\u0000\u0000\u0000\u20f9\u20f6\u0001\u0000\u0000\u0000\u20f9\u20f7\u0001"+
		"\u0000\u0000\u0000\u20f9\u20f8\u0001\u0000\u0000\u0000\u20fa\u0409\u0001"+
		"\u0000\u0000\u0000\u20fb\u20fc\u0005\u0002\u0000\u0000\u20fc\u20fd\u0005"+
		"\u0003\u0000\u0000\u20fd\u040b\u0001\u0000\u0000\u0000\u20fe\u20ff\u0005"+
		"\u01fa\u0000\u0000\u20ff\u2100\u0005\u0002\u0000\u0000\u2100\u2101\u0003"+
		"\u0502\u0281\u0000\u2101\u2102\u0005\u0003\u0000\u0000\u2102\u040d\u0001"+
		"\u0000\u0000\u0000\u2103\u2104\u0005\u01fb\u0000\u0000\u2104\u2105\u0005"+
		"\u0002\u0000\u0000\u2105\u2106\u0003\u0502\u0281\u0000\u2106\u2107\u0005"+
		"\u0003\u0000\u0000\u2107\u040f\u0001\u0000\u0000\u0000\u2108\u2109\u0005"+
		"\u01fc\u0000\u0000\u2109\u210a\u0005\u01fd\u0000\u0000\u210a\u210b\u0005"+
		"\u0002\u0000\u0000\u210b\u210c\u0003\u0406\u0203\u0000\u210c\u210d\u0005"+
		"\u0003\u0000\u0000\u210d\u0411\u0001\u0000\u0000\u0000\u210e\u210f\u0005"+
		"i\u0000\u0000\u210f\u2110\u0003\u048a\u0245\u0000\u2110\u0413\u0001\u0000"+
		"\u0000\u0000\u2111\u2116\u0003\u0418\u020c\u0000\u2112\u2113\u0005d\u0000"+
		"\u0000\u2113\u2114\u0005\u014b\u0000\u0000\u2114\u2116\u0005w\u0000\u0000"+
		"\u2115\u2111\u0001\u0000\u0000\u0000\u2115\u2112\u0001\u0000\u0000\u0000"+
		"\u2116\u0415\u0001\u0000\u0000\u0000\u2117\u2118\u0003\u0414\u020a\u0000"+
		"\u2118\u0417\u0001\u0000\u0000\u0000\u2119\u211b\u0003\u041a\u020d\u0000"+
		"\u211a\u2119\u0001\u0000\u0000\u0000\u211b\u211c\u0001\u0000\u0000\u0000"+
		"\u211c\u211a\u0001\u0000\u0000\u0000\u211c\u211d\u0001\u0000\u0000\u0000"+
		"\u211d\u0419\u0001\u0000\u0000\u0000\u211e\u2120\u0003\u041c\u020e\u0000"+
		"\u211f\u2121\u0003\u041e\u020f\u0000\u2120\u211f\u0001\u0000\u0000\u0000"+
		"\u2120\u2121\u0001\u0000\u0000\u0000\u2121\u2123\u0001\u0000\u0000\u0000"+
		"\u2122\u2124\u0003\u03b0\u01d8\u0000\u2123\u2122\u0001\u0000\u0000\u0000"+
		"\u2123\u2124\u0001\u0000\u0000\u0000\u2124\u041b\u0001\u0000\u0000\u0000"+
		"\u2125\u212f\u0005d\u0000\u0000\u2126\u2127\u0005\u012c\u0000\u0000\u2127"+
		"\u2129\u0005\u0112\u0000\u0000\u2128\u2126\u0001\u0000\u0000\u0000\u2128"+
		"\u2129\u0001\u0000\u0000\u0000\u2129\u212a\u0001\u0000\u0000\u0000\u212a"+
		"\u2130\u0005\u0190\u0000\u0000\u212b\u212d\u0005\u0112\u0000\u0000\u212c"+
		"\u212b\u0001\u0000\u0000\u0000\u212c\u212d\u0001\u0000\u0000\u0000\u212d"+
		"\u212e\u0001\u0000\u0000\u0000\u212e\u2130\u0005\u016d\u0000\u0000\u212f"+
		"\u2128\u0001\u0000\u0000\u0000\u212f\u212c\u0001\u0000\u0000\u0000\u2130"+
		"\u041d\u0001\u0000\u0000\u0000\u2131\u2132\u0005\u0132\u0000\u0000\u2132"+
		"\u2133\u0003\u0564\u02b2\u0000\u2133\u041f\u0001\u0000\u0000\u0000\u2134"+
		"\u2135\u0005\u01c5\u0000\u0000\u2135\u2136\u0005\u0002\u0000\u0000\u2136"+
		"\u2137\u0003\u0502\u0281\u0000\u2137\u213f\u0005\u0003\u0000\u0000\u2138"+
		"\u2139\u0005\u0006\u0000\u0000\u2139\u213a\u0005\u0002\u0000\u0000\u213a"+
		"\u213b\u0003\u0502\u0281\u0000\u213b\u213c\u0005\u0003\u0000\u0000\u213c"+
		"\u213e\u0001\u0000\u0000\u0000\u213d\u2138\u0001\u0000\u0000\u0000\u213e"+
		"\u2141\u0001\u0000\u0000\u0000\u213f\u213d\u0001\u0000\u0000\u0000\u213f"+
		"\u2140\u0001\u0000\u0000\u0000\u2140\u0421\u0001\u0000\u0000\u0000\u2141"+
		"\u213f\u0001\u0000\u0000\u0000\u2142\u2143\u0005f\u0000\u0000\u2143\u2144"+
		"\u0003\u0424\u0212\u0000\u2144\u0423\u0001\u0000\u0000\u0000\u2145\u214a"+
		"\u0003\u0426\u0213\u0000\u2146\u2147\u0005\u0006\u0000\u0000\u2147\u2149"+
		"\u0003\u0426\u0213\u0000\u2148\u2146\u0001\u0000\u0000\u0000\u2149\u214c"+
		"\u0001\u0000\u0000\u0000\u214a\u2148\u0001\u0000\u0000\u0000\u214a\u214b"+
		"\u0001\u0000\u0000\u0000\u214b\u0425\u0001\u0000\u0000\u0000\u214c\u214a"+
		"\u0001\u0000\u0000\u0000\u214d\u214f\u0003\u0430\u0218\u0000\u214e\u2150"+
		"\u0003\u0428\u0214\u0000\u214f\u214e\u0001\u0000\u0000\u0000\u214f\u2150"+
		"\u0001\u0000\u0000\u0000\u2150\u2152\u0001\u0000\u0000\u0000\u2151\u2153"+
		"\u0003\u0436\u021b\u0000\u2152\u2151\u0001\u0000\u0000\u0000\u2152\u2153"+
		"\u0001\u0000\u0000\u0000\u2153\u2188\u0001\u0000\u0000\u0000\u2154\u2156"+
		"\u0003\u043a\u021d\u0000\u2155\u2157\u0003\u042a\u0215\u0000\u2156\u2155"+
		"\u0001\u0000\u0000\u0000\u2156\u2157\u0001\u0000\u0000\u0000\u2157\u2188"+
		"\u0001\u0000\u0000\u0000\u2158\u215a\u0003\u044e\u0227\u0000\u2159\u215b"+
		"\u0003\u0428\u0214\u0000\u215a\u2159\u0001\u0000\u0000\u0000\u215a\u215b"+
		"\u0001\u0000\u0000\u0000\u215b\u2188\u0001\u0000\u0000\u0000\u215c\u215e"+
		"\u0003\u03c6\u01e3\u0000\u215d\u215f\u0003\u0428\u0214\u0000\u215e\u215d"+
		"\u0001\u0000\u0000\u0000\u215e\u215f\u0001\u0000\u0000\u0000\u215f\u2188"+
		"\u0001\u0000\u0000\u0000\u2160\u216d\u0005n\u0000\u0000\u2161\u2163\u0003"+
		"\u044e\u0227\u0000\u2162\u2164\u0003\u0428\u0214\u0000\u2163\u2162\u0001"+
		"\u0000\u0000\u0000\u2163\u2164\u0001\u0000\u0000\u0000\u2164\u216e\u0001"+
		"\u0000\u0000\u0000\u2165\u2167\u0003\u043a\u021d\u0000\u2166\u2168\u0003"+
		"\u042a\u0215\u0000\u2167\u2166\u0001\u0000\u0000\u0000\u2167\u2168\u0001"+
		"\u0000\u0000\u0000\u2168\u216e\u0001\u0000\u0000\u0000\u2169\u216b\u0003"+
		"\u03c6\u01e3\u0000\u216a\u216c\u0003\u0428\u0214\u0000\u216b\u216a\u0001"+
		"\u0000\u0000\u0000\u216b\u216c\u0001\u0000\u0000\u0000\u216c\u216e\u0001"+
		"\u0000\u0000\u0000\u216d\u2161\u0001\u0000\u0000\u0000\u216d\u2165\u0001"+
		"\u0000\u0000\u0000\u216d\u2169\u0001\u0000\u0000\u0000\u216e\u2188\u0001"+
		"\u0000\u0000\u0000\u216f\u2170\u0005\u0002\u0000\u0000\u2170\u2181\u0003"+
		"\u0426\u0213\u0000\u2171\u2172\u0005\u0094\u0000\u0000\u2172\u2173\u0005"+
		"\u009c\u0000\u0000\u2173\u2182\u0003\u0426\u0213\u0000\u2174\u2176\u0005"+
		"\u009f\u0000\u0000\u2175\u2177\u0003\u042c\u0216\u0000\u2176\u2175\u0001"+
		"\u0000\u0000\u0000\u2176\u2177\u0001\u0000\u0000\u0000\u2177\u2178\u0001"+
		"\u0000\u0000\u0000\u2178\u2179\u0005\u009c\u0000\u0000\u2179\u2182\u0003"+
		"\u0426\u0213\u0000\u217a\u217c\u0003\u042c\u0216\u0000\u217b\u217a\u0001"+
		"\u0000\u0000\u0000\u217b\u217c\u0001\u0000\u0000\u0000\u217c\u217d\u0001"+
		"\u0000\u0000\u0000\u217d\u217e\u0005\u009c\u0000\u0000\u217e\u217f\u0003"+
		"\u0426\u0213\u0000\u217f\u2180\u0003\u042e\u0217\u0000\u2180\u2182\u0001"+
		"\u0000\u0000\u0000\u2181\u2171\u0001\u0000\u0000\u0000\u2181\u2174\u0001"+
		"\u0000\u0000\u0000\u2181\u217b\u0001\u0000\u0000\u0000\u2181\u2182\u0001"+
		"\u0000\u0000\u0000\u2182\u2183\u0001\u0000\u0000\u0000\u2183\u2185\u0005"+
		"\u0003\u0000\u0000\u2184\u2186\u0003\u0428\u0214\u0000\u2185\u2184\u0001"+
		"\u0000\u0000\u0000\u2185\u2186\u0001\u0000\u0000\u0000\u2186\u2188\u0001"+
		"\u0000\u0000\u0000\u2187\u214d\u0001\u0000\u0000\u0000\u2187\u2154\u0001"+
		"\u0000\u0000\u0000\u2187\u2158\u0001\u0000\u0000\u0000\u2187\u215c\u0001"+
		"\u0000\u0000\u0000\u2187\u2160\u0001\u0000\u0000\u0000\u2187\u216f\u0001"+
		"\u0000\u0000\u0000\u2188\u219b\u0001\u0000\u0000\u0000\u2189\u218a\u0005"+
		"\u0094\u0000\u0000\u218a\u218b\u0005\u009c\u0000\u0000\u218b\u219a\u0003"+
		"\u0426\u0213\u0000\u218c\u218e\u0005\u009f\u0000\u0000\u218d\u218f\u0003"+
		"\u042c\u0216\u0000\u218e\u218d\u0001\u0000\u0000\u0000\u218e\u218f\u0001"+
		"\u0000\u0000\u0000\u218f\u2190\u0001\u0000\u0000\u0000\u2190\u2191\u0005"+
		"\u009c\u0000\u0000\u2191\u219a\u0003\u0426\u0213\u0000\u2192\u2194\u0003"+
		"\u042c\u0216\u0000\u2193\u2192\u0001\u0000\u0000\u0000\u2193\u2194\u0001"+
		"\u0000\u0000\u0000\u2194\u2195\u0001\u0000\u0000\u0000\u2195\u2196\u0005"+
		"\u009c\u0000\u0000\u2196\u2197\u0003\u0426\u0213\u0000\u2197\u2198\u0003"+
		"\u042e\u0217\u0000\u2198\u219a\u0001\u0000\u0000\u0000\u2199\u2189\u0001"+
		"\u0000\u0000\u0000\u2199\u218c\u0001\u0000\u0000\u0000\u2199\u2193\u0001"+
		"\u0000\u0000\u0000\u219a\u219d\u0001\u0000\u0000\u0000\u219b\u2199\u0001"+
		"\u0000\u0000\u0000\u219b\u219c\u0001\u0000\u0000\u0000\u219c\u0427\u0001"+
		"\u0000\u0000\u0000\u219d\u219b\u0001\u0000\u0000\u0000\u219e\u21a0\u0005"+
		"J\u0000\u0000\u219f\u219e\u0001\u0000\u0000\u0000\u219f\u21a0\u0001\u0000"+
		"\u0000\u0000\u21a0\u21a1\u0001\u0000\u0000\u0000\u21a1\u21a6\u0003\u058a"+
		"\u02c5\u0000\u21a2\u21a3\u0005\u0002\u0000\u0000\u21a3\u21a4\u0003\u0568"+
		"\u02b4\u0000\u21a4\u21a5\u0005\u0003\u0000\u0000\u21a5\u21a7\u0001\u0000"+
		"\u0000\u0000\u21a6\u21a2\u0001\u0000\u0000\u0000\u21a6\u21a7\u0001\u0000"+
		"\u0000\u0000\u21a7\u0429\u0001\u0000\u0000\u0000\u21a8\u21b5\u0003\u0428"+
		"\u0214\u0000\u21a9\u21ab\u0005J\u0000\u0000\u21aa\u21ac\u0003\u058a\u02c5"+
		"\u0000\u21ab\u21aa\u0001\u0000\u0000\u0000\u21ab\u21ac\u0001\u0000\u0000"+
		"\u0000\u21ac\u21af\u0001\u0000\u0000\u0000\u21ad\u21af\u0003\u058a\u02c5"+
		"\u0000\u21ae\u21a9\u0001\u0000\u0000\u0000\u21ae\u21ad\u0001\u0000\u0000"+
		"\u0000\u21af\u21b0\u0001\u0000\u0000\u0000\u21b0\u21b1\u0005\u0002\u0000"+
		"\u0000\u21b1\u21b2\u0003\u044a\u0225\u0000\u21b2\u21b3\u0005\u0003\u0000"+
		"\u0000\u21b3\u21b5\u0001\u0000\u0000\u0000\u21b4\u21a8\u0001\u0000\u0000"+
		"\u0000\u21b4\u21ae\u0001\u0000\u0000\u0000\u21b5\u042b\u0001\u0000\u0000"+
		"\u0000\u21b6\u21b8\u0007,\u0000\u0000\u21b7\u21b9\u0005\u00a1\u0000\u0000"+
		"\u21b8\u21b7\u0001\u0000\u0000\u0000\u21b8\u21b9\u0001\u0000\u0000\u0000"+
		"\u21b9\u042d\u0001\u0000\u0000\u0000\u21ba\u21bb\u0005\u008a\u0000\u0000"+
		"\u21bb\u21bc\u0005\u0002\u0000\u0000\u21bc\u21bd\u0003\u0568\u02b4\u0000"+
		"\u21bd\u21be\u0005\u0003\u0000\u0000\u21be\u21c2\u0001\u0000\u0000\u0000"+
		"\u21bf\u21c0\u0005v\u0000\u0000\u21c0\u21c2\u0003\u048a\u0245\u0000\u21c1"+
		"\u21ba\u0001\u0000\u0000\u0000\u21c1\u21bf\u0001\u0000\u0000\u0000\u21c2"+
		"\u042f\u0001\u0000\u0000\u0000\u21c3\u21c5\u0003\u0566\u02b3\u0000\u21c4"+
		"\u21c6\u0005\t\u0000\u0000\u21c5\u21c4\u0001\u0000\u0000\u0000\u21c5\u21c6"+
		"\u0001\u0000\u0000\u0000\u21c6\u21d0\u0001\u0000\u0000\u0000\u21c7\u21cd"+
		"\u0005w\u0000\u0000\u21c8\u21ce\u0003\u0566\u02b3\u0000\u21c9\u21ca\u0005"+
		"\u0002\u0000\u0000\u21ca\u21cb\u0003\u0566\u02b3\u0000\u21cb\u21cc\u0005"+
		"\u0003\u0000\u0000\u21cc\u21ce\u0001\u0000\u0000\u0000\u21cd\u21c8\u0001"+
		"\u0000\u0000\u0000\u21cd\u21c9\u0001\u0000\u0000\u0000\u21ce\u21d0\u0001"+
		"\u0000\u0000\u0000\u21cf\u21c3\u0001\u0000\u0000\u0000\u21cf\u21c7\u0001"+
		"\u0000\u0000\u0000\u21d0\u0431\u0001\u0000\u0000\u0000\u21d1\u21d6\u0003"+
		"\u0430\u0218\u0000\u21d2\u21d3\u0005\u0006\u0000\u0000\u21d3\u21d5\u0003"+
		"\u0430\u0218\u0000\u21d4\u21d2\u0001\u0000\u0000\u0000\u21d5\u21d8\u0001"+
		"\u0000\u0000\u0000\u21d6\u21d4\u0001\u0000\u0000\u0000\u21d6\u21d7\u0001"+
		"\u0000\u0000\u0000\u21d7\u0433\u0001\u0000\u0000\u0000\u21d8\u21d6\u0001"+
		"\u0000\u0000\u0000\u21d9\u21de\u0003\u0430\u0218\u0000\u21da\u21dc\u0005"+
		"J\u0000\u0000\u21db\u21da\u0001\u0000\u0000\u0000\u21db\u21dc\u0001\u0000"+
		"\u0000\u0000\u21dc\u21dd\u0001\u0000\u0000\u0000\u21dd\u21df\u0003\u058a"+
		"\u02c5\u0000\u21de\u21db\u0001\u0000\u0000\u0000\u21de\u21df\u0001\u0000"+
		"\u0000\u0000\u21df\u0435\u0001\u0000\u0000\u0000\u21e0\u21e1\u0005\u01fe"+
		"\u0000\u0000\u21e1\u21e2\u0003\u0570\u02b8\u0000\u21e2\u21e3\u0005\u0002"+
		"\u0000\u0000\u21e3\u21e4\u0003\u0502\u0281\u0000\u21e4\u21e6\u0005\u0003"+
		"\u0000\u0000\u21e5\u21e7\u0003\u0438\u021c\u0000\u21e6\u21e5\u0001\u0000"+
		"\u0000\u0000\u21e6\u21e7\u0001\u0000\u0000\u0000\u21e7\u0437\u0001\u0000"+
		"\u0000\u0000\u21e8\u21e9\u0005\u0155\u0000\u0000\u21e9\u21ea\u0005\u0002"+
		"\u0000\u0000\u21ea\u21eb\u0003\u048a\u0245\u0000\u21eb\u21ec\u0005\u0003"+
		"\u0000\u0000\u21ec\u0439\u0001\u0000\u0000\u0000\u21ed\u21ef\u0003\u04c0"+
		"\u0260\u0000\u21ee\u21f0\u0003\u0442\u0221\u0000\u21ef\u21ee\u0001\u0000"+
		"\u0000\u0000\u21ef\u21f0\u0001\u0000\u0000\u0000\u21f0\u21fa\u0001\u0000"+
		"\u0000\u0000\u21f1\u21f2\u0005\u015f\u0000\u0000\u21f2\u21f3\u0005f\u0000"+
		"\u0000\u21f3\u21f4\u0005\u0002\u0000\u0000\u21f4\u21f5\u0003\u043e\u021f"+
		"\u0000\u21f5\u21f7\u0005\u0003\u0000\u0000\u21f6\u21f8\u0003\u0442\u0221"+
		"\u0000\u21f7\u21f6\u0001\u0000\u0000\u0000\u21f7\u21f8\u0001\u0000\u0000"+
		"\u0000\u21f8\u21fa\u0001\u0000\u0000\u0000\u21f9\u21ed\u0001\u0000\u0000"+
		"\u0000\u21f9\u21f1\u0001\u0000\u0000\u0000\u21fa\u043b\u0001\u0000\u0000"+
		"\u0000\u21fb\u21fd\u0003\u04c0\u0260\u0000\u21fc\u21fe\u0003\u0440\u0220"+
		"\u0000\u21fd\u21fc\u0001\u0000\u0000\u0000\u21fd\u21fe\u0001\u0000\u0000"+
		"\u0000\u21fe\u043d\u0001\u0000\u0000\u0000\u21ff\u2204\u0003\u043c\u021e"+
		"\u0000\u2200\u2201\u0005\u0006\u0000\u0000\u2201\u2203\u0003\u043c\u021e"+
		"\u0000\u2202\u2200\u0001\u0000\u0000\u0000\u2203\u2206\u0001\u0000\u0000"+
		"\u0000\u2204\u2202\u0001\u0000\u0000\u0000\u2204\u2205\u0001\u0000\u0000"+
		"\u0000\u2205\u043f\u0001\u0000\u0000\u0000\u2206\u2204\u0001\u0000\u0000"+
		"\u0000\u2207\u2208\u0005J\u0000\u0000\u2208\u2209\u0005\u0002\u0000\u0000"+
		"\u2209\u220a\u0003\u044a\u0225\u0000\u220a\u220b\u0005\u0003\u0000\u0000"+
		"\u220b\u0441\u0001\u0000\u0000\u0000\u220c\u220d\u0005\u008f\u0000\u0000"+
		"\u220d\u220e\u0005\u01ff\u0000\u0000\u220e\u0443\u0001\u0000\u0000\u0000"+
		"\u220f\u2210\u0005\u008d\u0000\u0000\u2210\u2211\u0003\u048a\u0245\u0000"+
		"\u2211\u0445\u0001\u0000\u0000\u0000\u2212\u2217\u0005\u008d\u0000\u0000"+
		"\u2213\u2214\u0005\u01d8\u0000\u0000\u2214\u2215\u0005\u0132\u0000\u0000"+
		"\u2215\u2218\u0003\u03be\u01df\u0000\u2216\u2218\u0003\u048a\u0245\u0000"+
		"\u2217\u2213\u0001\u0000\u0000\u0000\u2217\u2216\u0001\u0000\u0000\u0000"+
		"\u2218\u0447\u0001\u0000\u0000\u0000\u2219\u221a\u0003\u044a\u0225\u0000"+
		"\u221a\u0449\u0001\u0000\u0000\u0000\u221b\u2220\u0003\u044c\u0226\u0000"+
		"\u221c\u221d\u0005\u0006\u0000\u0000\u221d\u221f\u0003\u044c\u0226\u0000"+
		"\u221e\u221c\u0001\u0000\u0000\u0000\u221f\u2222\u0001\u0000\u0000\u0000"+
		"\u2220\u221e\u0001\u0000\u0000\u0000\u2220\u2221\u0001\u0000\u0000\u0000"+
		"\u2221\u044b\u0001\u0000\u0000\u0000\u2222\u2220\u0001\u0000\u0000\u0000"+
		"\u2223\u2224\u0003\u058a\u02c5\u0000\u2224\u2226\u0003\u045c\u022e\u0000"+
		"\u2225\u2227\u0003j5\u0000\u2226\u2225\u0001\u0000\u0000\u0000\u2226\u2227"+
		"\u0001\u0000\u0000\u0000\u2227\u044d\u0001\u0000\u0000\u0000\u2228\u2229"+
		"\u0005\u0200\u0000\u0000\u2229\u2239\u0005\u0002\u0000\u0000\u222a\u222b"+
		"\u0003\u04b6\u025b\u0000\u222b\u222c\u0003\u04d2\u0269\u0000\u222c\u222d"+
		"\u0005\u0201\u0000\u0000\u222d\u222e\u0003\u0450\u0228\u0000\u222e\u223a"+
		"\u0001\u0000\u0000\u0000\u222f\u2230\u0005\u0202\u0000\u0000\u2230\u2231"+
		"\u0005\u0002\u0000\u0000\u2231\u2232\u0003\u0458\u022c\u0000\u2232\u2233"+
		"\u0005\u0003\u0000\u0000\u2233\u2234\u0005\u0006\u0000\u0000\u2234\u2235"+
		"\u0003\u04b6\u025b\u0000\u2235\u2236\u0003\u04d2\u0269\u0000\u2236\u2237"+
		"\u0005\u0201\u0000\u0000\u2237\u2238\u0003\u0450\u0228\u0000\u2238\u223a"+
		"\u0001\u0000\u0000\u0000\u2239\u222a\u0001\u0000\u0000\u0000\u2239\u222f"+
		"\u0001\u0000\u0000\u0000\u223a\u223b\u0001\u0000\u0000\u0000\u223b\u223c"+
		"\u0005\u0003\u0000\u0000\u223c\u044f\u0001\u0000\u0000\u0000\u223d\u2242"+
		"\u0003\u0452\u0229\u0000\u223e\u223f\u0005\u0006\u0000\u0000\u223f\u2241"+
		"\u0003\u0452\u0229\u0000\u2240\u223e\u0001\u0000\u0000\u0000\u2241\u2244"+
		"\u0001\u0000\u0000\u0000\u2242\u2240\u0001\u0000\u0000\u0000\u2242\u2243"+
		"\u0001\u0000\u0000\u0000\u2243\u0451\u0001\u0000\u0000\u0000\u2244\u2242"+
		"\u0001\u0000\u0000\u0000\u2245\u224c\u0003\u058a\u02c5\u0000\u2246\u2248"+
		"\u0003\u045c\u022e\u0000\u2247\u2249\u0003\u0454\u022a\u0000\u2248\u2247"+
		"\u0001\u0000\u0000\u0000\u2248\u2249\u0001\u0000\u0000\u0000\u2249\u224d"+
		"\u0001\u0000\u0000\u0000\u224a\u224b\u0005d\u0000\u0000\u224b\u224d\u0005"+
		"\u01ff\u0000\u0000\u224c\u2246\u0001\u0000\u0000\u0000\u224c\u224a\u0001"+
		"\u0000\u0000\u0000\u224d\u0453\u0001\u0000\u0000\u0000\u224e\u2250\u0003"+
		"\u0456\u022b\u0000\u224f\u224e\u0001\u0000\u0000\u0000\u2250\u2251\u0001"+
		"\u0000\u0000\u0000\u2251\u224f\u0001\u0000\u0000\u0000\u2251\u2252\u0001"+
		"\u0000\u0000\u0000\u2252\u0455\u0001\u0000\u0000\u0000\u2253\u2254\u0005"+
		"[\u0000\u0000\u2254\u225c\u0003\u048a\u0245\u0000\u2255\u2256\u0003\u05a0"+
		"\u02d0\u0000\u2256\u2257\u0003\u048a\u0245\u0000\u2257\u225c\u0001\u0000"+
		"\u0000\u0000\u2258\u2259\u0005s\u0000\u0000\u2259\u225c\u0005t\u0000\u0000"+
		"\u225a\u225c\u0005t\u0000\u0000\u225b\u2253\u0001\u0000\u0000\u0000\u225b"+
		"\u2255\u0001\u0000\u0000\u0000\u225b\u2258\u0001\u0000\u0000\u0000\u225b"+
		"\u225a\u0001\u0000\u0000\u0000\u225c\u0457\u0001\u0000\u0000\u0000\u225d"+
		"\u2262\u0003\u045a\u022d\u0000\u225e\u225f\u0005\u0006\u0000\u0000\u225f"+
		"\u2261\u0003\u045a\u022d\u0000\u2260\u225e\u0001\u0000\u0000\u0000\u2261"+
		"\u2264\u0001\u0000\u0000\u0000\u2262\u2260\u0001\u0000\u0000\u0000\u2262"+
		"\u2263\u0001\u0000\u0000\u0000\u2263\u0459\u0001\u0000\u0000\u0000\u2264"+
		"\u2262\u0001\u0000\u0000\u0000\u2265\u2266\u0003\u04b4\u025a\u0000\u2266"+
		"\u2267\u0005J\u0000\u0000\u2267\u2268\u0003\u0590\u02c8\u0000\u2268\u226c"+
		"\u0001\u0000\u0000\u0000\u2269\u226a\u0005[\u0000\u0000\u226a\u226c\u0003"+
		"\u04b4\u025a\u0000\u226b\u2265\u0001\u0000\u0000\u0000\u226b\u2269\u0001"+
		"\u0000\u0000\u0000\u226c\u045b\u0001\u0000\u0000\u0000\u226d\u226f\u0005"+
		"\u01be\u0000\u0000\u226e\u226d\u0001\u0000\u0000\u0000\u226e\u226f\u0001"+
		"\u0000\u0000\u0000\u226f\u2270\u0001\u0000\u0000\u0000\u2270\u2279\u0003"+
		"\u0460\u0230\u0000\u2271\u227a\u0003\u045e\u022f\u0000\u2272\u2277\u0005"+
		"I\u0000\u0000\u2273\u2274\u0005\u0004\u0000\u0000\u2274\u2275\u0003\u057a"+
		"\u02bd\u0000\u2275\u2276\u0005\u0005\u0000\u0000\u2276\u2278\u0001\u0000"+
		"\u0000\u0000\u2277\u2273\u0001\u0000\u0000\u0000\u2277\u2278\u0001\u0000"+
		"\u0000\u0000\u2278\u227a\u0001\u0000\u0000\u0000\u2279\u2271\u0001\u0000"+
		"\u0000\u0000\u2279\u2272\u0001\u0000\u0000\u0000\u227a\u045d\u0001\u0000"+
		"\u0000\u0000\u227b\u227d\u0005\u0004\u0000\u0000\u227c\u227e\u0003\u057a"+
		"\u02bd\u0000\u227d\u227c\u0001\u0000\u0000\u0000\u227d\u227e\u0001\u0000"+
		"\u0000\u0000\u227e\u227f\u0001\u0000\u0000\u0000\u227f\u2281\u0005\u0005"+
		"\u0000\u0000\u2280\u227b\u0001\u0000\u0000\u0000\u2281\u2284\u0001\u0000"+
		"\u0000\u0000\u2282\u2280\u0001\u0000\u0000\u0000\u2282\u2283\u0001\u0000"+
		"\u0000\u0000\u2283\u045f\u0001\u0000\u0000\u0000\u2284\u2282\u0001\u0000"+
		"\u0000\u0000\u2285\u2296\u0003\u0464\u0232\u0000\u2286\u2296\u0003\u0468"+
		"\u0234\u0000\u2287\u2296\u0003\u046c\u0236\u0000\u2288\u2296\u0003\u0474"+
		"\u023a\u0000\u2289\u2296\u0003\u047c\u023e\u0000\u228a\u2292\u0003\u047e"+
		"\u023f\u0000\u228b\u228d\u0003\u0482\u0241\u0000\u228c\u228b\u0001\u0000"+
		"\u0000\u0000\u228c\u228d\u0001\u0000\u0000\u0000\u228d\u2293\u0001\u0000"+
		"\u0000\u0000\u228e\u228f\u0005\u0002\u0000\u0000\u228f\u2290\u0003\u057a"+
		"\u02bd\u0000\u2290\u2291\u0005\u0003\u0000\u0000\u2291\u2293\u0001\u0000"+
		"\u0000\u0000\u2292\u228c\u0001\u0000\u0000\u0000\u2292\u228e\u0001\u0000"+
		"\u0000\u0000\u2293\u2296\u0001\u0000\u0000\u0000\u2294\u2296\u0003\u0486"+
		"\u0243\u0000\u2295\u2285\u0001\u0000\u0000\u0000\u2295\u2286\u0001\u0000"+
		"\u0000\u0000\u2295\u2287\u0001\u0000\u0000\u0000\u2295\u2288\u0001\u0000"+
		"\u0000\u0000\u2295\u2289\u0001\u0000\u0000\u0000\u2295\u228a\u0001\u0000"+
		"\u0000\u0000\u2295\u2294\u0001\u0000\u0000\u0000\u2296\u0461\u0001\u0000"+
		"\u0000\u0000\u2297\u229d\u0003\u0468\u0234\u0000\u2298\u229d\u0003\u046e"+
		"\u0237\u0000\u2299\u229d\u0003\u0476\u023b\u0000\u229a\u229d\u0003\u047c"+
		"\u023e\u0000\u229b\u229d\u0003\u0486\u0243\u0000\u229c\u2297\u0001\u0000"+
		"\u0000\u0000\u229c\u2298\u0001\u0000\u0000\u0000\u229c\u2299\u0001\u0000"+
		"\u0000\u0000\u229c\u229a\u0001\u0000\u0000\u0000\u229c\u229b\u0001\u0000"+
		"\u0000\u0000\u229d\u0463\u0001\u0000\u0000\u0000\u229e\u22a0\u0003\u058c"+
		"\u02c6\u0000\u229f\u22a1\u0003\u020a\u0105\u0000\u22a0\u229f\u0001\u0000"+
		"\u0000\u0000\u22a0\u22a1\u0001\u0000\u0000\u0000\u22a1\u22a3\u0001\u0000"+
		"\u0000\u0000\u22a2\u22a4\u0003\u0466\u0233\u0000\u22a3\u22a2\u0001\u0000"+
		"\u0000\u0000\u22a3\u22a4\u0001\u0000\u0000\u0000\u22a4\u0465\u0001\u0000"+
		"\u0000\u0000\u22a5\u22a6\u0005\u0002\u0000\u0000\u22a6\u22a7\u0003\u0502"+
		"\u0281\u0000\u22a7\u22a8\u0005\u0003\u0000\u0000\u22a8\u0467\u0001\u0000"+
		"\u0000\u0000\u22a9\u22c2\u0005\u01b0\u0000\u0000\u22aa\u22c2\u0005\u01b1"+
		"\u0000\u0000\u22ab\u22c2\u0005\u01bf\u0000\u0000\u22ac\u22c2\u0005\u01a3"+
		"\u0000\u0000\u22ad\u22c2\u0005\u01bc\u0000\u0000\u22ae\u22b0\u0005\u01ad"+
		"\u0000\u0000\u22af\u22b1\u0003\u046a\u0235\u0000\u22b0\u22af\u0001\u0000"+
		"\u0000\u0000\u22b0\u22b1\u0001\u0000\u0000\u0000\u22b1\u22c2\u0001\u0000"+
		"\u0000\u0000\u22b2\u22b3\u0005\u00e4\u0000\u0000\u22b3\u22c2\u0005\u01bb"+
		"\u0000\u0000\u22b4\u22b6\u0005\u01aa\u0000\u0000\u22b5\u22b7\u0003\u0466"+
		"\u0233\u0000\u22b6\u22b5\u0001\u0000\u0000\u0000\u22b6\u22b7\u0001\u0000"+
		"\u0000\u0000\u22b7\u22c2\u0001\u0000\u0000\u0000\u22b8\u22ba\u0005\u01a9"+
		"\u0000\u0000\u22b9\u22bb\u0003\u0466\u0233\u0000\u22ba\u22b9\u0001\u0000"+
		"\u0000\u0000\u22ba\u22bb\u0001\u0000\u0000\u0000\u22bb\u22c2\u0001\u0000"+
		"\u0000\u0000\u22bc\u22be\u0005\u01b8\u0000\u0000\u22bd\u22bf\u0003\u0466"+
		"\u0233\u0000\u22be\u22bd\u0001\u0000\u0000\u0000\u22be\u22bf\u0001\u0000"+
		"\u0000\u0000\u22bf\u22c2\u0001\u0000\u0000\u0000\u22c0\u22c2\u0005\u01a5"+
		"\u0000\u0000\u22c1\u22a9\u0001\u0000\u0000\u0000\u22c1\u22aa\u0001\u0000"+
		"\u0000\u0000\u22c1\u22ab\u0001\u0000\u0000\u0000\u22c1\u22ac\u0001\u0000"+
		"\u0000\u0000\u22c1\u22ad\u0001\u0000\u0000\u0000\u22c1\u22ae\u0001\u0000"+
		"\u0000\u0000\u22c1\u22b2\u0001\u0000\u0000\u0000\u22c1\u22b4\u0001\u0000"+
		"\u0000\u0000\u22c1\u22b8\u0001\u0000\u0000\u0000\u22c1\u22bc\u0001\u0000"+
		"\u0000\u0000\u22c1\u22c0\u0001\u0000\u0000\u0000\u22c2\u0469\u0001\u0000"+
		"\u0000\u0000\u22c3\u22c4\u0005\u0002\u0000\u0000\u22c4\u22c5\u0003\u057a"+
		"\u02bd\u0000\u22c5\u22c6\u0005\u0003\u0000\u0000\u22c6\u046b\u0001\u0000"+
		"\u0000\u0000\u22c7\u22ca\u0003\u0470\u0238\u0000\u22c8\u22ca\u0003\u0472"+
		"\u0239\u0000\u22c9\u22c7\u0001\u0000\u0000\u0000\u22c9\u22c8\u0001\u0000"+
		"\u0000\u0000\u22ca\u046d\u0001\u0000\u0000\u0000\u22cb\u22ce\u0003\u0470"+
		"\u0238\u0000\u22cc\u22ce\u0003\u0472\u0239\u0000\u22cd\u22cb\u0001\u0000"+
		"\u0000\u0000\u22cd\u22cc\u0001\u0000\u0000\u0000\u22ce\u046f\u0001\u0000"+
		"\u0000\u0000\u22cf\u22d1\u0005\u01a4\u0000\u0000\u22d0\u22d2\u0003\u047a"+
		"\u023d\u0000\u22d1\u22d0\u0001\u0000\u0000\u0000\u22d1\u22d2\u0001\u0000"+
		"\u0000\u0000\u22d2\u22d3\u0001\u0000\u0000\u0000\u22d3\u22d4\u0005\u0002"+
		"\u0000\u0000\u22d4\u22d5\u0003\u0502\u0281\u0000\u22d5\u22d6\u0005\u0003"+
		"\u0000\u0000\u22d6\u0471\u0001\u0000\u0000\u0000\u22d7\u22d9\u0005\u01a4"+
		"\u0000\u0000\u22d8\u22da\u0003\u047a\u023d\u0000\u22d9\u22d8\u0001\u0000"+
		"\u0000\u0000\u22d9\u22da\u0001\u0000\u0000\u0000\u22da\u0473\u0001\u0000"+
		"\u0000\u0000\u22db\u22e0\u0003\u0478\u023c\u0000\u22dc\u22dd\u0005\u0002"+
		"\u0000\u0000\u22dd\u22de\u0003\u057a\u02bd\u0000\u22de\u22df\u0005\u0003"+
		"\u0000\u0000\u22df\u22e1\u0001\u0000\u0000\u0000\u22e0\u22dc\u0001\u0000"+
		"\u0000\u0000\u22e0\u22e1\u0001\u0000\u0000\u0000\u22e1\u0475\u0001\u0000"+
		"\u0000\u0000\u22e2\u22e7\u0003\u0478\u023c\u0000\u22e3\u22e4\u0005\u0002"+
		"\u0000\u0000\u22e4\u22e5\u0003\u057a\u02bd\u0000\u22e5\u22e6\u0005\u0003"+
		"\u0000\u0000\u22e6\u22e8\u0001\u0000\u0000\u0000\u22e7\u22e3\u0001\u0000"+
		"\u0000\u0000\u22e7\u22e8\u0001\u0000\u0000\u0000\u22e8\u0477\u0001\u0000"+
		"\u0000\u0000\u22e9\u22eb\u0007-\u0000\u0000\u22ea\u22ec\u0003\u047a\u023d"+
		"\u0000\u22eb\u22ea\u0001\u0000\u0000\u0000\u22eb\u22ec\u0001\u0000\u0000"+
		"\u0000\u22ec\u22f4\u0001\u0000\u0000\u0000\u22ed\u22f4\u0005\u01c6\u0000"+
		"\u0000\u22ee\u22ef\u0005\u01b4\u0000\u0000\u22ef\u22f1\u0007.\u0000\u0000"+
		"\u22f0\u22f2\u0003\u047a\u023d\u0000\u22f1\u22f0\u0001\u0000\u0000\u0000"+
		"\u22f1\u22f2\u0001\u0000\u0000\u0000\u22f2\u22f4\u0001\u0000\u0000\u0000"+
		"\u22f3\u22e9\u0001\u0000\u0000\u0000\u22f3\u22ed\u0001\u0000\u0000\u0000"+
		"\u22f3\u22ee\u0001\u0000\u0000\u0000\u22f4\u0479\u0001\u0000\u0000\u0000"+
		"\u22f5\u22f6\u0005\u0195\u0000\u0000\u22f6\u047b\u0001\u0000\u0000\u0000"+
		"\u22f7\u22fc\u0007/\u0000\u0000\u22f8\u22f9\u0005\u0002\u0000\u0000\u22f9"+
		"\u22fa\u0003\u057a\u02bd\u0000\u22fa\u22fb\u0005\u0003\u0000\u0000\u22fb"+
		"\u22fd\u0001\u0000\u0000\u0000\u22fc\u22f8\u0001\u0000\u0000\u0000\u22fc"+
		"\u22fd\u0001\u0000\u0000\u0000\u22fd\u22ff\u0001\u0000\u0000\u0000\u22fe"+
		"\u2300\u0003\u0480\u0240\u0000\u22ff\u22fe\u0001\u0000\u0000\u0000\u22ff"+
		"\u2300\u0001\u0000\u0000\u0000\u2300\u047d\u0001\u0000\u0000\u0000\u2301"+
		"\u2302\u0005\u01b2\u0000\u0000\u2302\u047f\u0001\u0000\u0000\u0000\u2303"+
		"\u2304\u0005\u008f\u0000\u0000\u2304\u2305\u0005\u01c1\u0000\u0000\u2305"+
		"\u230a\u0005\u01a1\u0000\u0000\u2306\u2307\u0005\u019a\u0000\u0000\u2307"+
		"\u2308\u0005\u01c1\u0000\u0000\u2308\u230a\u0005\u01a1\u0000\u0000\u2309"+
		"\u2303\u0001\u0000\u0000\u0000\u2309\u2306\u0001\u0000\u0000\u0000\u230a"+
		"\u0481\u0001\u0000\u0000\u0000\u230b\u2325\u0005\u019f\u0000\u0000\u230c"+
		"\u2325\u0005\u0127\u0000\u0000\u230d\u2325\u0005\u00d6\u0000\u0000\u230e"+
		"\u2325\u0005\u0100\u0000\u0000\u230f\u2325\u0005\u0124\u0000\u0000\u2310"+
		"\u2325\u0003\u0484\u0242\u0000\u2311\u2312\u0005\u019f\u0000\u0000\u2312"+
		"\u2313\u0005\u0084\u0000\u0000\u2313\u2325\u0005\u0127\u0000\u0000\u2314"+
		"\u2315\u0005\u00d6\u0000\u0000\u2315\u2319\u0005\u0084\u0000\u0000\u2316"+
		"\u231a\u0005\u0100\u0000\u0000\u2317\u231a\u0005\u0124\u0000\u0000\u2318"+
		"\u231a\u0003\u0484\u0242\u0000\u2319\u2316\u0001\u0000\u0000\u0000\u2319"+
		"\u2317\u0001\u0000\u0000\u0000\u2319\u2318\u0001\u0000\u0000\u0000\u231a"+
		"\u2325\u0001\u0000\u0000\u0000\u231b\u231c\u0005\u0100\u0000\u0000\u231c"+
		"\u231f\u0005\u0084\u0000\u0000\u231d\u2320\u0005\u0124\u0000\u0000\u231e"+
		"\u2320\u0003\u0484\u0242\u0000\u231f\u231d\u0001\u0000\u0000\u0000\u231f"+
		"\u231e\u0001\u0000\u0000\u0000\u2320\u2325\u0001\u0000\u0000\u0000\u2321"+
		"\u2322\u0005\u0124\u0000\u0000\u2322\u2323\u0005\u0084\u0000\u0000\u2323"+
		"\u2325\u0003\u0484\u0242\u0000\u2324\u230b\u0001\u0000\u0000\u0000\u2324"+
		"\u230c\u0001\u0000\u0000\u0000\u2324\u230d\u0001\u0000\u0000\u0000\u2324"+
		"\u230e\u0001\u0000\u0000\u0000\u2324\u230f\u0001\u0000\u0000\u0000\u2324"+
		"\u2310\u0001\u0000\u0000\u0000\u2324\u2311\u0001\u0000\u0000\u0000\u2324"+
		"\u2314\u0001\u0000\u0000\u0000\u2324\u231b\u0001\u0000\u0000\u0000\u2324"+
		"\u2321\u0001\u0000\u0000\u0000\u2325\u0483\u0001\u0000\u0000\u0000\u2326"+
		"\u232b\u0005\u0165\u0000\u0000\u2327\u2328\u0005\u0002\u0000\u0000\u2328"+
		"\u2329\u0003\u057a\u02bd\u0000\u2329\u232a\u0005\u0003\u0000\u0000\u232a"+
		"\u232c\u0001\u0000\u0000\u0000\u232b\u2327\u0001\u0000\u0000\u0000\u232b"+
		"\u232c\u0001\u0000\u0000\u0000\u232c\u0485\u0001\u0000\u0000\u0000\u232d"+
		"\u232e\u0005\u001e\u0000\u0000\u232e\u0487\u0001\u0000\u0000\u0000\u232f"+
		"\u2330\u0005\u00eb\u0000\u0000\u2330\u2331\u0003\u048a\u0245\u0000\u2331"+
		"\u0489\u0001\u0000\u0000\u0000\u2332\u2333\u0003\u048c\u0246\u0000\u2333"+
		"\u048b\u0001\u0000\u0000\u0000\u2334\u2338\u0003\u048e\u0247\u0000\u2335"+
		"\u2336\u0004\u0246\u0000\u0000\u2336\u2339\u0003\u04fc\u027e\u0000\u2337"+
		"\u2339\u0001\u0000\u0000\u0000\u2338\u2335\u0001\u0000\u0000\u0000\u2338"+
		"\u2337\u0001\u0000\u0000\u0000\u2339\u048d\u0001\u0000\u0000\u0000\u233a"+
		"\u233f\u0003\u0490\u0248\u0000\u233b\u233c\u00070\u0000\u0000\u233c\u233e"+
		"\u0003\u0490\u0248\u0000\u233d\u233b\u0001\u0000\u0000\u0000\u233e\u2341"+
		"\u0001\u0000\u0000\u0000\u233f\u233d\u0001\u0000\u0000\u0000\u233f\u2340"+
		"\u0001\u0000\u0000\u0000\u2340\u048f\u0001\u0000\u0000\u0000\u2341\u233f"+
		"\u0001\u0000\u0000\u0000\u2342\u2347\u0003\u0492\u0249\u0000\u2343\u2344"+
		"\u0005x\u0000\u0000\u2344\u2346\u0003\u0492\u0249\u0000\u2345\u2343\u0001"+
		"\u0000\u0000\u0000\u2346\u2349\u0001\u0000\u0000\u0000\u2347\u2345\u0001"+
		"\u0000\u0000\u0000\u2347\u2348\u0001\u0000\u0000\u0000\u2348\u0491\u0001"+
		"\u0000\u0000\u0000\u2349\u2347\u0001\u0000\u0000\u0000\u234a\u234f\u0003"+
		"\u0494\u024a\u0000\u234b\u234c\u0005G\u0000\u0000\u234c\u234e\u0003\u0494"+
		"\u024a\u0000\u234d\u234b\u0001\u0000\u0000\u0000\u234e\u2351\u0001\u0000"+
		"\u0000\u0000\u234f\u234d\u0001\u0000\u0000\u0000\u234f\u2350\u0001\u0000"+
		"\u0000\u0000\u2350\u0493\u0001\u0000\u0000\u0000\u2351\u234f\u0001\u0000"+
		"\u0000\u0000\u2352\u235e\u0003\u0496\u024b\u0000\u2353\u2355\u0005s\u0000"+
		"\u0000\u2354\u2353\u0001\u0000\u0000\u0000\u2354\u2355\u0001\u0000\u0000"+
		"\u0000\u2355\u2356\u0001\u0000\u0000\u0000\u2356\u2358\u0005\u01a2\u0000"+
		"\u0000\u2357\u2359\u0005\u0081\u0000\u0000\u2358\u2357\u0001\u0000\u0000"+
		"\u0000\u2358\u2359\u0001\u0000\u0000\u0000\u2359\u235a\u0001\u0000\u0000"+
		"\u0000\u235a\u235b\u0003\u0496\u024b\u0000\u235b\u235c\u0005G\u0000\u0000"+
		"\u235c\u235d\u0003\u0496\u024b\u0000\u235d\u235f\u0001\u0000\u0000\u0000"+
		"\u235e\u2354\u0001\u0000\u0000\u0000\u235e\u235f\u0001\u0000\u0000\u0000"+
		"\u235f\u0495\u0001\u0000\u0000\u0000\u2360\u2366\u0003\u0498\u024c\u0000"+
		"\u2361\u2363\u0005s\u0000\u0000\u2362\u2361\u0001\u0000\u0000\u0000\u2362"+
		"\u2363\u0001\u0000\u0000\u0000\u2363\u2364\u0001\u0000\u0000\u0000\u2364"+
		"\u2365\u0005j\u0000\u0000\u2365\u2367\u0003\u051c\u028e\u0000\u2366\u2362"+
		"\u0001\u0000\u0000\u0000\u2366\u2367\u0001\u0000\u0000\u0000\u2367\u0497"+
		"\u0001\u0000\u0000\u0000\u2368\u236a\u0005s\u0000\u0000\u2369\u2368\u0001"+
		"\u0000\u0000\u0000\u2369\u236a\u0001\u0000\u0000\u0000\u236a\u236b\u0001"+
		"\u0000\u0000\u0000\u236b\u236c\u0003\u049a\u024d\u0000\u236c\u0499\u0001"+
		"\u0000\u0000\u0000\u236d\u236f\u0003\u049c\u024e\u0000\u236e\u2370\u0007"+
		"1\u0000\u0000\u236f\u236e\u0001\u0000\u0000\u0000\u236f\u2370\u0001\u0000"+
		"\u0000\u0000\u2370\u049b\u0001\u0000\u0000\u0000\u2371\u2389\u0003\u049e"+
		"\u024f\u0000\u2372\u2374\u0005\u009a\u0000\u0000\u2373\u2375\u0005s\u0000"+
		"\u0000\u2374\u2373\u0001\u0000\u0000\u0000\u2374\u2375\u0001\u0000\u0000"+
		"\u0000\u2375\u2387\u0001\u0000\u0000\u0000\u2376\u2388\u0005t\u0000\u0000"+
		"\u2377\u2388\u0005\u0086\u0000\u0000\u2378\u2388\u0005b\u0000\u0000\u2379"+
		"\u2388\u0005\u018c\u0000\u0000\u237a\u237b\u0005^\u0000\u0000\u237b\u237c"+
		"\u0005f\u0000\u0000\u237c\u2388\u0003\u048a\u0245\u0000\u237d\u237e\u0005"+
		"\u0132\u0000\u0000\u237e\u237f\u0005\u0002\u0000\u0000\u237f\u2380\u0003"+
		"\u0508\u0284\u0000\u2380\u2381\u0005\u0003\u0000\u0000\u2381\u2388\u0001"+
		"\u0000\u0000\u0000\u2382\u2388\u0005\u00e2\u0000\u0000\u2383\u2385\u0003"+
		"\u0512\u0289\u0000\u2384\u2383\u0001\u0000\u0000\u0000\u2384\u2385\u0001"+
		"\u0000\u0000\u0000\u2385\u2386\u0001\u0000\u0000\u0000\u2386\u2388\u0005"+
		"\u0204\u0000\u0000\u2387\u2376\u0001\u0000\u0000\u0000\u2387\u2377\u0001"+
		"\u0000\u0000\u0000\u2387\u2378\u0001\u0000\u0000\u0000\u2387\u2379\u0001"+
		"\u0000\u0000\u0000\u2387\u237a\u0001\u0000\u0000\u0000\u2387\u237d\u0001"+
		"\u0000\u0000\u0000\u2387\u2382\u0001\u0000\u0000\u0000\u2387\u2384\u0001"+
		"\u0000\u0000\u0000\u2388\u238a\u0001\u0000\u0000\u0000\u2389\u2372\u0001"+
		"\u0000\u0000\u0000\u2389\u238a\u0001\u0000\u0000\u0000\u238a\u049d\u0001"+
		"\u0000\u0000\u0000\u238b\u2397\u0003\u04a0\u0250\u0000\u238c\u238d\u0007"+
		"2\u0000\u0000\u238d\u2398\u0003\u04a0\u0250\u0000\u238e\u238f\u0003\u0500"+
		"\u0280\u0000\u238f\u2395\u0003\u04f6\u027b\u0000\u2390\u2396\u0003\u03c6"+
		"\u01e3\u0000\u2391\u2392\u0005\u0002\u0000\u0000\u2392\u2393\u0003\u048a"+
		"\u0245\u0000\u2393\u2394\u0005\u0003\u0000\u0000\u2394\u2396\u0001\u0000"+
		"\u0000\u0000\u2395\u2390\u0001\u0000\u0000\u0000\u2395\u2391\u0001\u0000"+
		"\u0000\u0000\u2396\u2398\u0001\u0000\u0000\u0000\u2397\u238c\u0001\u0000"+
		"\u0000\u0000\u2397\u238e\u0001\u0000\u0000\u0000\u2397\u2398\u0001\u0000"+
		"\u0000\u0000\u2398\u049f\u0001\u0000\u0000\u0000\u2399\u23a7\u0003\u04a2"+
		"\u0251\u0000\u239a\u239c\u0005s\u0000\u0000\u239b\u239a\u0001\u0000\u0000"+
		"\u0000\u239b\u239c\u0001\u0000\u0000\u0000\u239c\u23a1\u0001\u0000\u0000"+
		"\u0000\u239d\u23a2\u0005\u009e\u0000\u0000\u239e\u23a2\u0005\u0098\u0000"+
		"\u0000\u239f\u23a0\u0005\u00a5\u0000\u0000\u23a0\u23a2\u0005\u0084\u0000"+
		"\u0000\u23a1\u239d\u0001\u0000\u0000\u0000\u23a1\u239e\u0001\u0000\u0000"+
		"\u0000\u23a1\u239f\u0001\u0000\u0000\u0000\u23a2\u23a3\u0001\u0000\u0000"+
		"\u0000\u23a3\u23a5\u0003\u04a2\u0251\u0000\u23a4\u23a6\u0003\u0488\u0244"+
		"\u0000\u23a5\u23a4\u0001\u0000\u0000\u0000\u23a5\u23a6\u0001\u0000\u0000"+
		"\u0000\u23a6\u23a8\u0001\u0000\u0000\u0000\u23a7\u239b\u0001\u0000\u0000"+
		"\u0000\u23a7\u23a8\u0001\u0000\u0000\u0000\u23a8\u04a1\u0001\u0000\u0000"+
		"\u0000\u23a9\u23af\u0003\u04a4\u0252\u0000\u23aa\u23ab\u0003\u04fc\u027e"+
		"\u0000\u23ab\u23ac\u0003\u04a4\u0252\u0000\u23ac\u23ae\u0001\u0000\u0000"+
		"\u0000\u23ad\u23aa\u0001\u0000\u0000\u0000\u23ae\u23b1\u0001\u0000\u0000"+
		"\u0000\u23af\u23ad\u0001\u0000\u0000\u0000\u23af\u23b0\u0001\u0000\u0000"+
		"\u0000\u23b0\u04a3\u0001\u0000\u0000\u0000\u23b1\u23af\u0001\u0000\u0000"+
		"\u0000\u23b2\u23b4\u0003\u04fc\u027e\u0000\u23b3\u23b2\u0001\u0000\u0000"+
		"\u0000\u23b3\u23b4\u0001\u0000\u0000\u0000\u23b4\u23b5\u0001\u0000\u0000"+
		"\u0000\u23b5\u23b6\u0003\u04a6\u0253\u0000\u23b6\u04a5\u0001\u0000\u0000"+
		"\u0000\u23b7\u23bc\u0003\u04a8\u0254\u0000\u23b8\u23b9\u00073\u0000\u0000"+
		"\u23b9\u23bb\u0003\u04a8\u0254\u0000\u23ba\u23b8\u0001\u0000\u0000\u0000"+
		"\u23bb\u23be\u0001\u0000\u0000\u0000\u23bc\u23ba\u0001\u0000\u0000\u0000"+
		"\u23bc\u23bd\u0001\u0000\u0000\u0000\u23bd\u04a7\u0001\u0000\u0000\u0000"+
		"\u23be\u23bc\u0001\u0000\u0000\u0000\u23bf\u23c4\u0003\u04aa\u0255\u0000"+
		"\u23c0\u23c1\u00074\u0000\u0000\u23c1\u23c3\u0003\u04aa\u0255\u0000\u23c2"+
		"\u23c0\u0001\u0000\u0000\u0000\u23c3\u23c6\u0001\u0000\u0000\u0000\u23c4"+
		"\u23c2\u0001\u0000\u0000\u0000\u23c4\u23c5\u0001\u0000\u0000\u0000\u23c5"+
		"\u04a9\u0001\u0000\u0000\u0000\u23c6\u23c4\u0001\u0000\u0000\u0000\u23c7"+
		"\u23ca\u0003\u04ac\u0256\u0000\u23c8\u23c9\u0005\u000f\u0000\u0000\u23c9"+
		"\u23cb\u0003\u04ac\u0256\u0000\u23ca\u23c8\u0001\u0000\u0000\u0000\u23ca"+
		"\u23cb\u0001\u0000\u0000\u0000\u23cb\u04ab\u0001\u0000\u0000\u0000\u23cc"+
		"\u23ce\u00073\u0000\u0000\u23cd\u23cc\u0001\u0000\u0000\u0000\u23cd\u23ce"+
		"\u0001\u0000\u0000\u0000\u23ce\u23cf\u0001\u0000\u0000\u0000\u23cf\u23d0"+
		"\u0003\u04ae\u0257\u0000\u23d0\u04ad\u0001\u0000\u0000\u0000\u23d1\u23d6"+
		"\u0003\u04b0\u0258\u0000\u23d2\u23d3\u0005\u00b4\u0000\u0000\u23d3\u23d4"+
		"\u0005\u01c1\u0000\u0000\u23d4\u23d5\u0005\u01a1\u0000\u0000\u23d5\u23d7"+
		"\u0003\u048a\u0245\u0000\u23d6\u23d2\u0001\u0000\u0000\u0000\u23d6\u23d7"+
		"\u0001\u0000\u0000\u0000\u23d7\u04af\u0001\u0000\u0000\u0000\u23d8\u23db"+
		"\u0003\u04b2\u0259\u0000\u23d9\u23da\u0005Q\u0000\u0000\u23da\u23dc\u0003"+
		"\u0208\u0104\u0000\u23db\u23d9\u0001\u0000\u0000\u0000\u23db\u23dc\u0001"+
		"\u0000\u0000\u0000\u23dc\u04b1\u0001\u0000\u0000\u0000\u23dd\u23e2\u0003"+
		"\u04b6\u025b\u0000\u23de\u23df\u0005\u001a\u0000\u0000\u23df\u23e1\u0003"+
		"\u045c\u022e\u0000\u23e0\u23de\u0001\u0000\u0000\u0000\u23e1\u23e4\u0001"+
		"\u0000\u0000\u0000\u23e2\u23e0\u0001\u0000\u0000\u0000\u23e2\u23e3\u0001"+
		"\u0000\u0000\u0000\u23e3\u04b3\u0001\u0000\u0000\u0000\u23e4\u23e2\u0001"+
		"\u0000\u0000\u0000\u23e5\u23e6\u0006\u025a\uffff\uffff\u0000\u23e6\u23ed"+
		"\u0003\u04b6\u025b\u0000\u23e7\u23e8\u00073\u0000\u0000\u23e8\u23ed\u0003"+
		"\u04b4\u025a\t\u23e9\u23ea\u0003\u04fc\u027e\u0000\u23ea\u23eb\u0003\u04b4"+
		"\u025a\u0003\u23eb\u23ed\u0001\u0000\u0000\u0000\u23ec\u23e5\u0001\u0000"+
		"\u0000\u0000\u23ec\u23e7\u0001\u0000\u0000\u0000\u23ec\u23e9\u0001\u0000"+
		"\u0000\u0000\u23ed\u2415\u0001\u0000\u0000\u0000\u23ee\u23ef\n\b\u0000"+
		"\u0000\u23ef\u23f0\u0005\u000f\u0000\u0000\u23f0\u2414\u0003\u04b4\u025a"+
		"\t\u23f1\u23f2\n\u0007\u0000\u0000\u23f2\u23f3\u00074\u0000\u0000\u23f3"+
		"\u2414\u0003\u04b4\u025a\b\u23f4\u23f5\n\u0006\u0000\u0000\u23f5\u23f6"+
		"\u00073\u0000\u0000\u23f6\u2414\u0003\u04b4\u025a\u0007\u23f7\u23f8\n"+
		"\u0005\u0000\u0000\u23f8\u23f9\u0003\u04fc\u027e\u0000\u23f9\u23fa\u0003"+
		"\u04b4\u025a\u0006\u23fa\u2414\u0001\u0000\u0000\u0000\u23fb\u23fc\n\u0004"+
		"\u0000\u0000\u23fc\u23fd\u00072\u0000\u0000\u23fd\u2414\u0003\u04b4\u025a"+
		"\u0005\u23fe\u23ff\n\n\u0000\u0000\u23ff\u2400\u0005\u001a\u0000\u0000"+
		"\u2400\u2414\u0003\u045c\u022e\u0000\u2401\u2402\n\u0002\u0000\u0000\u2402"+
		"\u2414\u0003\u04fc\u027e\u0000\u2403\u2404\n\u0001\u0000\u0000\u2404\u2406"+
		"\u0005\u009a\u0000\u0000\u2405\u2407\u0005s\u0000\u0000\u2406\u2405\u0001"+
		"\u0000\u0000\u0000\u2406\u2407\u0001\u0000\u0000\u0000\u2407\u2411\u0001"+
		"\u0000\u0000\u0000\u2408\u2409\u0005^\u0000\u0000\u2409\u240a\u0005f\u0000"+
		"\u0000\u240a\u2412\u0003\u04b4\u025a\u0000\u240b\u240c\u0005\u0132\u0000"+
		"\u0000\u240c\u240d\u0005\u0002\u0000\u0000\u240d\u240e\u0003\u0508\u0284"+
		"\u0000\u240e\u240f\u0005\u0003\u0000\u0000\u240f\u2412\u0001\u0000\u0000"+
		"\u0000\u2410\u2412\u0005\u00e2\u0000\u0000\u2411\u2408\u0001\u0000\u0000"+
		"\u0000\u2411\u240b\u0001\u0000\u0000\u0000\u2411\u2410\u0001\u0000\u0000"+
		"\u0000\u2412\u2414\u0001\u0000\u0000\u0000\u2413\u23ee\u0001\u0000\u0000"+
		"\u0000\u2413\u23f1\u0001\u0000\u0000\u0000\u2413\u23f4\u0001\u0000\u0000"+
		"\u0000\u2413\u23f7\u0001\u0000\u0000\u0000\u2413\u23fb\u0001\u0000\u0000"+
		"\u0000\u2413\u23fe\u0001\u0000\u0000\u0000\u2413\u2401\u0001\u0000\u0000"+
		"\u0000\u2413\u2403\u0001\u0000\u0000\u0000\u2414\u2417\u0001\u0000\u0000"+
		"\u0000\u2415\u2413\u0001\u0000\u0000\u0000\u2415\u2416\u0001\u0000\u0000"+
		"\u0000\u2416\u04b5\u0001\u0000\u0000\u0000\u2417\u2415\u0001\u0000\u0000"+
		"\u0000\u2418\u2419\u0005\u01ab\u0000\u0000\u2419\u243d\u0003\u03c6\u01e3"+
		"\u0000\u241a\u241d\u0005I\u0000\u0000\u241b\u241e\u0003\u03c6\u01e3\u0000"+
		"\u241c\u241e\u0003\u050a\u0285\u0000\u241d\u241b\u0001\u0000\u0000\u0000"+
		"\u241d\u241c\u0001\u0000\u0000\u0000\u241e\u243d\u0001\u0000\u0000\u0000"+
		"\u241f\u2420\u0005\u001c\u0000\u0000\u2420\u243d\u0003\u0530\u0298\u0000"+
		"\u2421\u2422\u0005\u01fc\u0000\u0000\u2422\u2423\u0005\u0002\u0000\u0000"+
		"\u2423\u2424\u0003\u0502\u0281\u0000\u2424\u2425\u0005\u0003\u0000\u0000"+
		"\u2425\u243d\u0001\u0000\u0000\u0000\u2426\u2427\u0005\u0088\u0000\u0000"+
		"\u2427\u243d\u0003\u03c6\u01e3\u0000\u2428\u243d\u0003\u0528\u0294\u0000"+
		"\u2429\u243d\u0003\u0572\u02b9\u0000\u242a\u242b\u0005\u0002\u0000\u0000"+
		"\u242b\u242c\u0003\u048a\u0245\u0000\u242c\u242d\u0005\u0003\u0000\u0000"+
		"\u242d\u242e\u0003\u0530\u0298\u0000\u242e\u243d\u0001\u0000\u0000\u0000"+
		"\u242f\u243d\u0003\u051e\u028f\u0000\u2430\u243d\u0003\u04be\u025f\u0000"+
		"\u2431\u2433\u0003\u03c6\u01e3\u0000\u2432\u2434\u0003\u052e\u0297\u0000"+
		"\u2433\u2432\u0001\u0000\u0000\u0000\u2433\u2434\u0001\u0000\u0000\u0000"+
		"\u2434\u243d\u0001\u0000\u0000\u0000\u2435\u243d\u0003\u04f2\u0279\u0000"+
		"\u2436\u243d\u0003\u04f4\u027a\u0000\u2437\u2438\u0003\u04f0\u0278\u0000"+
		"\u2438\u2439\u0005\u00a3\u0000\u0000\u2439\u243a\u0003\u04f0\u0278\u0000"+
		"\u243a\u243d\u0001\u0000\u0000\u0000\u243b\u243d\u0005[\u0000\u0000\u243c"+
		"\u2418\u0001\u0000\u0000\u0000\u243c\u241a\u0001\u0000\u0000\u0000\u243c"+
		"\u241f\u0001\u0000\u0000\u0000\u243c\u2421\u0001\u0000\u0000\u0000\u243c"+
		"\u2426\u0001\u0000\u0000\u0000\u243c\u2428\u0001\u0000\u0000\u0000\u243c"+
		"\u2429\u0001\u0000\u0000\u0000\u243c\u242a\u0001\u0000\u0000\u0000\u243c"+
		"\u242f\u0001\u0000\u0000\u0000\u243c\u2430\u0001\u0000\u0000\u0000\u243c"+
		"\u2431\u0001\u0000\u0000\u0000\u243c\u2435\u0001\u0000\u0000\u0000\u243c"+
		"\u2436\u0001\u0000\u0000\u0000\u243c\u2437\u0001\u0000\u0000\u0000\u243c"+
		"\u243b\u0001\u0000\u0000\u0000\u243d\u04b7\u0001\u0000\u0000\u0000\u243e"+
		"\u243f\u0005\u024a\u0000\u0000\u243f\u04b9\u0001\u0000\u0000\u0000\u2440"+
		"\u2441\u0003\u0570\u02b8\u0000\u2441\u2457\u0005\u0002\u0000\u0000\u2442"+
		"\u2446\u0003\u0504\u0282\u0000\u2443\u2444\u0005\u0006\u0000\u0000\u2444"+
		"\u2445\u0005\u008b\u0000\u0000\u2445\u2447\u0003\u0506\u0283\u0000\u2446"+
		"\u2443\u0001\u0000\u0000\u0000\u2446\u2447\u0001\u0000\u0000\u0000\u2447"+
		"\u2449\u0001\u0000\u0000\u0000\u2448\u244a\u0003\u03e8\u01f4\u0000\u2449"+
		"\u2448\u0001\u0000\u0000\u0000\u2449\u244a\u0001\u0000\u0000\u0000\u244a"+
		"\u2458\u0001\u0000\u0000\u0000\u244b\u244c\u0005\u008b\u0000\u0000\u244c"+
		"\u244e\u0003\u0506\u0283\u0000\u244d\u244f\u0003\u03e8\u01f4\u0000\u244e"+
		"\u244d\u0001\u0000\u0000\u0000\u244e\u244f\u0001\u0000\u0000\u0000\u244f"+
		"\u2458\u0001\u0000\u0000\u0000\u2450\u2451\u0007)\u0000\u0000\u2451\u2453"+
		"\u0003\u0504\u0282\u0000\u2452\u2454\u0003\u03e8\u01f4\u0000\u2453\u2452"+
		"\u0001\u0000\u0000\u0000\u2453\u2454\u0001\u0000\u0000\u0000\u2454\u2458"+
		"\u0001\u0000\u0000\u0000\u2455\u2458\u0005\t\u0000\u0000\u2456\u2458\u0001"+
		"\u0000\u0000\u0000\u2457\u2442\u0001\u0000\u0000\u0000\u2457\u244b\u0001"+
		"\u0000\u0000\u0000\u2457\u2450\u0001\u0000\u0000\u0000\u2457\u2455\u0001"+
		"\u0000\u0000\u0000\u2457\u2456\u0001\u0000\u0000\u0000\u2458\u2459\u0001"+
		"\u0000\u0000\u0000\u2459\u245b\u0005\u0003\u0000\u0000\u245a\u245c\u0003"+
		"\u04bc\u025e\u0000\u245b\u245a\u0001\u0000\u0000\u0000\u245b\u245c\u0001"+
		"\u0000\u0000\u0000\u245c\u04bb\u0001\u0000\u0000\u0000\u245d\u2473\u0005"+
		"\u0004\u0000\u0000\u245e\u2462\u0003\u0504\u0282\u0000\u245f\u2460\u0005"+
		"\u0006\u0000\u0000\u2460\u2461\u0005\u008b\u0000\u0000\u2461\u2463\u0003"+
		"\u0506\u0283\u0000\u2462\u245f\u0001\u0000\u0000\u0000\u2462\u2463\u0001"+
		"\u0000\u0000\u0000\u2463\u2465\u0001\u0000\u0000\u0000\u2464\u2466\u0003"+
		"\u03e8\u01f4\u0000\u2465\u2464\u0001\u0000\u0000\u0000\u2465\u2466\u0001"+
		"\u0000\u0000\u0000\u2466\u2474\u0001\u0000\u0000\u0000\u2467\u2468\u0005"+
		"\u008b\u0000\u0000\u2468\u246a\u0003\u0506\u0283\u0000\u2469\u246b\u0003"+
		"\u03e8\u01f4\u0000\u246a\u2469\u0001\u0000\u0000\u0000\u246a\u246b\u0001"+
		"\u0000\u0000\u0000\u246b\u2474\u0001\u0000\u0000\u0000\u246c\u246d\u0007"+
		")\u0000\u0000\u246d\u246f\u0003\u0504\u0282\u0000\u246e\u2470\u0003\u03e8"+
		"\u01f4\u0000\u246f\u246e\u0001\u0000\u0000\u0000\u246f\u2470\u0001\u0000"+
		"\u0000\u0000\u2470\u2474\u0001\u0000\u0000\u0000\u2471\u2474\u0005\t\u0000"+
		"\u0000\u2472\u2474\u0001\u0000\u0000\u0000\u2473\u245e\u0001\u0000\u0000"+
		"\u0000\u2473\u2467\u0001\u0000\u0000\u0000\u2473\u246c\u0001\u0000\u0000"+
		"\u0000\u2473\u2471\u0001\u0000\u0000\u0000\u2473\u2472\u0001\u0000\u0000"+
		"\u0000\u2474\u2475\u0001\u0000\u0000\u0000\u2475\u2476\u0005\u0005\u0000"+
		"\u0000\u2476\u04bd\u0001\u0000\u0000\u0000\u2477\u2479\u0003\u04ba\u025d"+
		"\u0000\u2478\u247a\u0003\u04d6\u026b\u0000\u2479\u2478\u0001\u0000\u0000"+
		"\u0000\u2479\u247a\u0001\u0000\u0000\u0000\u247a\u247c\u0001\u0000\u0000"+
		"\u0000\u247b\u247d\u0003\u04d8\u026c\u0000\u247c\u247b\u0001\u0000\u0000"+
		"\u0000\u247c\u247d\u0001\u0000\u0000\u0000\u247d\u247f\u0001\u0000\u0000"+
		"\u0000\u247e\u2480\u0003\u04e0\u0270\u0000\u247f\u247e\u0001\u0000\u0000"+
		"\u0000\u247f\u2480\u0001\u0000\u0000\u0000\u2480\u2483\u0001\u0000\u0000"+
		"\u0000\u2481\u2483\u0003\u04c2\u0261\u0000\u2482\u2477\u0001\u0000\u0000"+
		"\u0000\u2482\u2481\u0001\u0000\u0000\u0000\u2483\u04bf\u0001\u0000\u0000"+
		"\u0000\u2484\u2487\u0003\u04ba\u025d\u0000\u2485\u2487\u0003\u04c2\u0261"+
		"\u0000\u2486\u2484\u0001\u0000\u0000\u0000\u2486\u2485\u0001\u0000\u0000"+
		"\u0000\u2487\u04c1\u0001\u0000\u0000\u0000\u2488\u2489\u0005\u0092\u0000"+
		"\u0000\u2489\u248a\u0005d\u0000\u0000\u248a\u248b\u0005\u0002\u0000\u0000"+
		"\u248b\u248c\u0003\u048a\u0245\u0000\u248c\u248d\u0005\u0003\u0000\u0000"+
		"\u248d\u25bb\u0001\u0000\u0000\u0000\u248e\u25bb\u0005V\u0000\u0000\u248f"+
		"\u2494\u0005X\u0000\u0000\u2490\u2491\u0005\u0002\u0000\u0000\u2491\u2492"+
		"\u0003\u057a\u02bd\u0000\u2492\u2493\u0005\u0003\u0000\u0000\u2493\u2495"+
		"\u0001\u0000\u0000\u0000\u2494\u2490\u0001\u0000\u0000\u0000\u2494\u2495"+
		"\u0001\u0000\u0000\u0000\u2495\u25bb\u0001\u0000\u0000\u0000\u2496\u249b"+
		"\u0005Y\u0000\u0000\u2497\u2498\u0005\u0002\u0000\u0000\u2498\u2499\u0003"+
		"\u057a\u02bd\u0000\u2499\u249a\u0005\u0003\u0000\u0000\u249a\u249c\u0001"+
		"\u0000\u0000\u0000\u249b\u2497\u0001\u0000\u0000\u0000\u249b\u249c\u0001"+
		"\u0000\u0000\u0000\u249c\u25bb\u0001\u0000\u0000\u0000\u249d\u24a2\u0005"+
		"q\u0000\u0000\u249e\u249f\u0005\u0002\u0000\u0000\u249f\u24a0\u0003\u057a"+
		"\u02bd\u0000\u24a0\u24a1\u0005\u0003\u0000\u0000\u24a1\u24a3\u0001\u0000"+
		"\u0000\u0000\u24a2\u249e\u0001\u0000\u0000\u0000\u24a2\u24a3\u0001\u0000"+
		"\u0000\u0000\u24a3\u25bb\u0001\u0000\u0000\u0000\u24a4\u24a9\u0005r\u0000"+
		"\u0000\u24a5\u24a6\u0005\u0002\u0000\u0000\u24a6\u24a7\u0003\u057a\u02bd"+
		"\u0000\u24a7\u24a8\u0005\u0003\u0000\u0000\u24a8\u24aa\u0001\u0000\u0000"+
		"\u0000\u24a9\u24a5\u0001\u0000\u0000\u0000\u24a9\u24aa\u0001\u0000\u0000"+
		"\u0000\u24aa\u25bb\u0001\u0000\u0000\u0000\u24ab\u25bb\u0005W\u0000\u0000"+
		"\u24ac\u25bb\u0005Z\u0000\u0000\u24ad\u25bb\u0005\u007f\u0000\u0000\u24ae"+
		"\u25bb\u0005*\u0000\u0000\u24af\u25bb\u0005\u0089\u0000\u0000\u24b0\u25bb"+
		"\u0005U\u0000\u0000\u24b1\u25bb\u0005\u0095\u0000\u0000\u24b2\u24b3\u0005"+
		"O\u0000\u0000\u24b3\u24b4\u0005\u0002\u0000\u0000\u24b4\u24b5\u0003\u048a"+
		"\u0245\u0000\u24b5\u24b6\u0005J\u0000\u0000\u24b6\u24b7\u0003\u045c\u022e"+
		"\u0000\u24b7\u24b8\u0005\u0003\u0000\u0000\u24b8\u25bb\u0001\u0000\u0000"+
		"\u0000\u24b9\u24ba\u0005\u01ac\u0000\u0000\u24ba\u24bc\u0005\u0002\u0000"+
		"\u0000\u24bb\u24bd\u0003\u050e\u0287\u0000\u24bc\u24bb\u0001\u0000\u0000"+
		"\u0000\u24bc\u24bd\u0001\u0000\u0000\u0000\u24bd\u24be\u0001\u0000\u0000"+
		"\u0000\u24be\u25bb\u0005\u0003\u0000\u0000\u24bf\u24c0\u0005\u020f\u0000"+
		"\u0000\u24c0\u24c1\u0005\u0002\u0000\u0000\u24c1\u24c4\u0003\u048a\u0245"+
		"\u0000\u24c2\u24c3\u0005\u0006\u0000\u0000\u24c3\u24c5\u0003\u0512\u0289"+
		"\u0000\u24c4\u24c2\u0001\u0000\u0000\u0000\u24c4\u24c5\u0001\u0000\u0000"+
		"\u0000\u24c5\u24c6\u0001\u0000\u0000\u0000\u24c6\u24c7\u0005\u0003\u0000"+
		"\u0000\u24c7\u25bb\u0001\u0000\u0000\u0000\u24c8\u24c9\u0005\u01b9\u0000"+
		"\u0000\u24c9\u24ce\u0005\u0002\u0000\u0000\u24ca\u24cf\u0003\u0514\u028a"+
		"\u0000\u24cb\u24cd\u0003\u0504\u0282\u0000\u24cc\u24cb\u0001\u0000\u0000"+
		"\u0000\u24cc\u24cd\u0001\u0000\u0000\u0000\u24cd\u24cf\u0001\u0000\u0000"+
		"\u0000\u24ce\u24ca\u0001\u0000\u0000\u0000\u24ce\u24cc\u0001\u0000\u0000"+
		"\u0000\u24cf\u24d0\u0001\u0000\u0000\u0000\u24d0\u25bb\u0005\u0003\u0000"+
		"\u0000\u24d1\u24d2\u0005\u01ba\u0000\u0000\u24d2\u24d4\u0005\u0002\u0000"+
		"\u0000\u24d3\u24d5\u0003\u0516\u028b\u0000\u24d4\u24d3\u0001\u0000\u0000"+
		"\u0000\u24d4\u24d5\u0001\u0000\u0000\u0000\u24d5\u24d6\u0001\u0000\u0000"+
		"\u0000\u24d6\u25bb\u0005\u0003\u0000\u0000\u24d7\u24d8\u0005\u01c0\u0000"+
		"\u0000\u24d8\u24dd\u0005\u0002\u0000\u0000\u24d9\u24de\u0003\u0518\u028c"+
		"\u0000\u24da\u24dc\u0003\u0504\u0282\u0000\u24db\u24da\u0001\u0000\u0000"+
		"\u0000\u24db\u24dc\u0001\u0000\u0000\u0000\u24dc\u24de\u0001\u0000\u0000"+
		"\u0000\u24dd\u24d9\u0001\u0000\u0000\u0000\u24dd\u24db\u0001\u0000\u0000"+
		"\u0000\u24de\u24df\u0001\u0000\u0000\u0000\u24df\u25bb\u0005\u0003\u0000"+
		"\u0000\u24e0\u24e1\u0005\u01c3\u0000\u0000\u24e1\u24e2\u0005\u0002\u0000"+
		"\u0000\u24e2\u24e3\u0003\u048a\u0245\u0000\u24e3\u24e4\u0005J\u0000\u0000"+
		"\u24e4\u24e5\u0003\u045c\u022e\u0000\u24e5\u24e6\u0005\u0003\u0000\u0000"+
		"\u24e6\u25bb\u0001\u0000\u0000\u0000\u24e7\u24e8\u0005\u01c4\u0000\u0000"+
		"\u24e8\u24ea\u0005\u0002\u0000\u0000\u24e9\u24eb\u00075\u0000\u0000\u24ea"+
		"\u24e9\u0001\u0000\u0000\u0000\u24ea\u24eb\u0001\u0000\u0000\u0000\u24eb"+
		"\u24ec\u0001\u0000\u0000\u0000\u24ec\u24ed\u0003\u051a\u028d\u0000\u24ed"+
		"\u24ee\u0005\u0003\u0000\u0000\u24ee\u25bb\u0001\u0000\u0000\u0000\u24ef"+
		"\u24f0\u0005\u01b7\u0000\u0000\u24f0\u24f1\u0005\u0002\u0000\u0000\u24f1"+
		"\u24f2\u0003\u048a\u0245\u0000\u24f2\u24f3\u0005\u0006\u0000\u0000\u24f3"+
		"\u24f4\u0003\u048a\u0245\u0000\u24f4\u24f5\u0005\u0003\u0000\u0000\u24f5"+
		"\u25bb\u0001\u0000\u0000\u0000\u24f6\u24f7\u0005\u01a8\u0000\u0000\u24f7"+
		"\u24f8\u0005\u0002\u0000\u0000\u24f8\u24f9\u0003\u0502\u0281\u0000\u24f9"+
		"\u24fa\u0005\u0003\u0000\u0000\u24fa\u25bb\u0001\u0000\u0000\u0000\u24fb"+
		"\u24fc\u0005\u01ae\u0000\u0000\u24fc\u24fd\u0005\u0002\u0000\u0000\u24fd"+
		"\u24fe\u0003\u0502\u0281\u0000\u24fe\u24ff\u0005\u0003\u0000\u0000\u24ff"+
		"\u25bb\u0001\u0000\u0000\u0000\u2500\u2501\u0005\u01b3\u0000\u0000\u2501"+
		"\u2502\u0005\u0002\u0000\u0000\u2502\u2503\u0003\u0502\u0281\u0000\u2503"+
		"\u2504\u0005\u0003\u0000\u0000\u2504\u25bb\u0001\u0000\u0000\u0000\u2505"+
		"\u2506\u0005\u01cf\u0000\u0000\u2506\u2507\u0005\u0002\u0000\u0000\u2507"+
		"\u2508\u0003\u0502\u0281\u0000\u2508\u2509\u0005\u0003\u0000\u0000\u2509"+
		"\u25bb\u0001\u0000\u0000\u0000\u250a\u250b\u0005\u01d0\u0000\u0000\u250b"+
		"\u250c\u0005\u0002\u0000\u0000\u250c\u250d\u0005\u0129\u0000\u0000\u250d"+
		"\u2513\u0003\u0590\u02c8\u0000\u250e\u2511\u0005\u0006\u0000\u0000\u250f"+
		"\u2512\u0003\u04c8\u0264\u0000\u2510\u2512\u0003\u0502\u0281\u0000\u2511"+
		"\u250f\u0001\u0000\u0000\u0000\u2511\u2510\u0001\u0000\u0000\u0000\u2512"+
		"\u2514\u0001\u0000\u0000\u0000\u2513\u250e\u0001\u0000\u0000\u0000\u2513"+
		"\u2514\u0001\u0000\u0000\u0000\u2514\u2515\u0001\u0000\u0000\u0000\u2515"+
		"\u2516\u0005\u0003\u0000\u0000\u2516\u25bb\u0001\u0000\u0000\u0000\u2517"+
		"\u2518\u0005\u01d1\u0000\u0000\u2518\u2519\u0005\u0002\u0000\u0000\u2519"+
		"\u251a\u0003\u04b6\u025b\u0000\u251a\u251b\u0003\u04d2\u0269\u0000\u251b"+
		"\u251c\u0005\u0003\u0000\u0000\u251c\u25bb\u0001\u0000\u0000\u0000\u251d"+
		"\u251e\u0005\u01d2\u0000\u0000\u251e\u251f\u0005\u0002\u0000\u0000\u251f"+
		"\u2520\u0003\u04ca\u0265\u0000\u2520\u2521\u0005\u0003\u0000\u0000\u2521"+
		"\u25bb\u0001\u0000\u0000\u0000\u2522\u2523\u0005\u01d3\u0000\u0000\u2523"+
		"\u2524\u0005\u0002\u0000\u0000\u2524\u2525\u0003\u04ce\u0267\u0000\u2525"+
		"\u2527\u0003\u048a\u0245\u0000\u2526\u2528\u0003\u04d0\u0268\u0000\u2527"+
		"\u2526\u0001\u0000\u0000\u0000\u2527\u2528\u0001\u0000\u0000\u0000\u2528"+
		"\u2529\u0001\u0000\u0000\u0000\u2529\u252a\u0005\u0003\u0000\u0000\u252a"+
		"\u25bb\u0001\u0000\u0000\u0000\u252b\u252c\u0005\u01d4\u0000\u0000\u252c"+
		"\u252d\u0005\u0002\u0000\u0000\u252d\u252e\u0005\u0129\u0000\u0000\u252e"+
		"\u2531\u0003\u0590\u02c8\u0000\u252f\u2530\u0005\u0006\u0000\u0000\u2530"+
		"\u2532\u0003\u048a\u0245\u0000\u2531\u252f\u0001\u0000\u0000\u0000\u2531"+
		"\u2532\u0001\u0000\u0000\u0000\u2532\u2533\u0001\u0000\u0000\u0000\u2533"+
		"\u2534\u0005\u0003\u0000\u0000\u2534\u25bb\u0001\u0000\u0000\u0000\u2535"+
		"\u2536\u0005\u01d5\u0000\u0000\u2536\u2537\u0005\u0002\u0000\u0000\u2537"+
		"\u2538\u0005\u019e\u0000\u0000\u2538\u2539\u0003\u048a\u0245\u0000\u2539"+
		"\u253a\u0005\u0006\u0000\u0000\u253a\u253c\u0003\u04c4\u0262\u0000\u253b"+
		"\u253d\u0003\u04c6\u0263\u0000\u253c\u253b\u0001\u0000\u0000\u0000\u253c"+
		"\u253d\u0001\u0000\u0000\u0000\u253d\u253e\u0001\u0000\u0000\u0000\u253e"+
		"\u253f\u0005\u0003\u0000\u0000\u253f\u25bb\u0001\u0000\u0000\u0000\u2540"+
		"\u2541\u0005\u01d6\u0000\u0000\u2541\u2542\u0005\u0002\u0000\u0000\u2542"+
		"\u2543\u0003\u04ce\u0267\u0000\u2543\u2544\u0003\u048a\u0245\u0000\u2544"+
		"\u2545\u0005J\u0000\u0000\u2545\u2546\u0003\u0460\u0230\u0000\u2546\u2547"+
		"\u0005\u0003\u0000\u0000\u2547\u25bb\u0001\u0000\u0000\u0000\u2548\u2549"+
		"\u0005\"\u0000\u0000\u2549\u2558\u0005\u0002\u0000\u0000\u254a\u2559\u0003"+
		"\u0504\u0282\u0000\u254b\u254d\u0003\u054e\u02a7\u0000\u254c\u254e\u0003"+
		"\u0552\u02a9\u0000\u254d\u254c\u0001\u0000\u0000\u0000\u254d\u254e\u0001"+
		"\u0000\u0000\u0000\u254e\u2550\u0001\u0000\u0000\u0000\u254f\u2551\u0003"+
		"\u054c\u02a6\u0000\u2550\u254f\u0001\u0000\u0000\u0000\u2550\u2551\u0001"+
		"\u0000\u0000\u0000\u2551\u2553\u0001\u0000\u0000\u0000\u2552\u2554\u0003"+
		"\u0548\u02a4\u0000\u2553\u2552\u0001\u0000\u0000\u0000\u2553\u2554\u0001"+
		"\u0000\u0000\u0000\u2554\u2559\u0001\u0000\u0000\u0000\u2555\u2557\u0003"+
		"\u0548\u02a4\u0000\u2556\u2555\u0001\u0000\u0000\u0000\u2556\u2557\u0001"+
		"\u0000\u0000\u0000\u2557\u2559\u0001\u0000\u0000\u0000\u2558\u254a\u0001"+
		"\u0000\u0000\u0000\u2558\u254b\u0001\u0000\u0000\u0000\u2558\u2556\u0001"+
		"\u0000\u0000\u0000\u2559\u255a\u0001\u0000\u0000\u0000\u255a\u25bb\u0005"+
		"\u0003\u0000\u0000\u255b\u255c\u0005\u001f\u0000\u0000\u255c\u256e\u0005"+
		"\u0002\u0000\u0000\u255d\u255f\u0003\u0556\u02ab\u0000\u255e\u2560\u0003"+
		"\u0554\u02aa\u0000\u255f\u255e\u0001\u0000\u0000\u0000\u255f\u2560\u0001"+
		"\u0000\u0000\u0000\u2560\u2562\u0001\u0000\u0000\u0000\u2561\u2563\u0003"+
		"\u0548\u02a4\u0000\u2562\u2561\u0001\u0000\u0000\u0000\u2562\u2563\u0001"+
		"\u0000\u0000\u0000\u2563\u256f\u0001\u0000\u0000\u0000\u2564\u2566\u0003"+
		"\u03c8\u01e4\u0000\u2565\u2567\u0003\u0544\u02a2\u0000\u2566\u2565\u0001"+
		"\u0000\u0000\u0000\u2566\u2567\u0001\u0000\u0000\u0000\u2567\u2569\u0001"+
		"\u0000\u0000\u0000\u2568\u256a\u0003\u0548\u02a4\u0000\u2569\u2568\u0001"+
		"\u0000\u0000\u0000\u2569\u256a\u0001\u0000\u0000\u0000\u256a\u256f\u0001"+
		"\u0000\u0000\u0000\u256b\u256d\u0003\u0548\u02a4\u0000\u256c\u256b\u0001"+
		"\u0000\u0000\u0000\u256c\u256d\u0001\u0000\u0000\u0000\u256d\u256f\u0001"+
		"\u0000\u0000\u0000\u256e\u255d\u0001\u0000\u0000\u0000\u256e\u2564\u0001"+
		"\u0000\u0000\u0000\u256e\u256c\u0001\u0000\u0000\u0000\u256f\u2570\u0001"+
		"\u0000\u0000\u0000\u2570\u25bb\u0005\u0003\u0000\u0000\u2571\u2572\u0005"+
		"\u001e\u0000\u0000\u2572\u2573\u0005\u0002\u0000\u0000\u2573\u2575\u0003"+
		"\u0542\u02a1\u0000\u2574\u2576\u0003\u054c\u02a6\u0000\u2575\u2574\u0001"+
		"\u0000\u0000\u0000\u2575\u2576\u0001\u0000\u0000\u0000\u2576\u2577\u0001"+
		"\u0000\u0000\u0000\u2577\u2578\u0005\u0003\u0000\u0000\u2578\u25bb\u0001"+
		"\u0000\u0000\u0000\u2579\u257a\u0005%\u0000\u0000\u257a\u257b\u0005\u0002"+
		"\u0000\u0000\u257b\u257c\u0003\u048a\u0245\u0000\u257c\u257d\u0005\u0003"+
		"\u0000\u0000\u257d\u25bb\u0001\u0000\u0000\u0000\u257e\u257f\u0005&\u0000"+
		"\u0000\u257f\u2580\u0005\u0002\u0000\u0000\u2580\u2582\u0003\u0542\u02a1"+
		"\u0000\u2581\u2583\u0003\u0548\u02a4\u0000\u2582\u2581\u0001\u0000\u0000"+
		"\u0000\u2582\u2583\u0001\u0000\u0000\u0000\u2583\u2584\u0001\u0000\u0000"+
		"\u0000\u2584\u2585\u0005\u0003\u0000\u0000\u2585\u25bb\u0001\u0000\u0000"+
		"\u0000\u2586\u2587\u0005)\u0000\u0000\u2587\u2588\u0005\u0002\u0000\u0000"+
		"\u2588\u25bb\u0005\u0003\u0000\u0000\u2589\u258a\u0005$\u0000\u0000\u258a"+
		"\u258b\u0005\u0002\u0000\u0000\u258b\u258c\u0003\u0542\u02a1\u0000\u258c"+
		"\u258d\u0005\u0006\u0000\u0000\u258d\u258f\u0003\u048a\u0245\u0000\u258e"+
		"\u2590\u0003\u0532\u0299\u0000\u258f\u258e\u0001\u0000\u0000\u0000\u258f"+
		"\u2590\u0001\u0000\u0000\u0000\u2590\u2592\u0001\u0000\u0000\u0000\u2591"+
		"\u2593\u0003\u0548\u02a4\u0000\u2592\u2591\u0001\u0000\u0000\u0000\u2592"+
		"\u2593\u0001\u0000\u0000\u0000\u2593\u2594\u0001\u0000\u0000\u0000\u2594"+
		"\u2596\u0003\u0538\u029c\u0000\u2595\u2597\u0003\u0546\u02a3\u0000\u2596"+
		"\u2595\u0001\u0000\u0000\u0000\u2596\u2597\u0001\u0000\u0000\u0000\u2597"+
		"\u2599\u0001\u0000\u0000\u0000\u2598\u259a\u0003\u053e\u029f\u0000\u2599"+
		"\u2598\u0001\u0000\u0000\u0000\u2599\u259a\u0001\u0000\u0000\u0000\u259a"+
		"\u259b\u0001\u0000\u0000\u0000\u259b\u259c\u0005\u0003\u0000\u0000\u259c"+
		"\u25bb\u0001\u0000\u0000\u0000\u259d\u259e\u0005!\u0000\u0000\u259e\u259f"+
		"\u0005\u0002\u0000\u0000\u259f\u25a0\u0003\u0542\u02a1\u0000\u25a0\u25a1"+
		"\u0005\u0006\u0000\u0000\u25a1\u25a3\u0003\u048a\u0245\u0000\u25a2\u25a4"+
		"\u0003\u0532\u0299\u0000\u25a3\u25a2\u0001\u0000\u0000\u0000\u25a3\u25a4"+
		"\u0001\u0000\u0000\u0000\u25a4\u25a6\u0001\u0000\u0000\u0000\u25a5\u25a7"+
		"\u0003\u0540\u02a0\u0000\u25a6\u25a5\u0001\u0000\u0000\u0000\u25a6\u25a7"+
		"\u0001\u0000\u0000\u0000\u25a7\u25a8\u0001\u0000\u0000\u0000\u25a8\u25a9"+
		"\u0005\u0003\u0000\u0000\u25a9\u25bb\u0001\u0000\u0000\u0000\u25aa\u25ab"+
		"\u0005(\u0000\u0000\u25ab\u25ac\u0005\u0002\u0000\u0000\u25ac\u25ad\u0003"+
		"\u0542\u02a1\u0000\u25ad\u25ae\u0005\u0006\u0000\u0000\u25ae\u25b0\u0003"+
		"\u048a\u0245\u0000\u25af\u25b1\u0003\u0532\u0299\u0000\u25b0\u25af\u0001"+
		"\u0000\u0000\u0000\u25b0\u25b1\u0001\u0000\u0000\u0000\u25b1\u25b3\u0001"+
		"\u0000\u0000\u0000\u25b2\u25b4\u0003\u0548\u02a4\u0000\u25b3\u25b2\u0001"+
		"\u0000\u0000\u0000\u25b3\u25b4\u0001\u0000\u0000\u0000\u25b4\u25b6\u0001"+
		"\u0000\u0000\u0000\u25b5\u25b7\u0003\u053e\u029f\u0000\u25b6\u25b5\u0001"+
		"\u0000\u0000\u0000\u25b6\u25b7\u0001\u0000\u0000\u0000\u25b7\u25b8\u0001"+
		"\u0000\u0000\u0000\u25b8\u25b9\u0005\u0003\u0000\u0000\u25b9\u25bb\u0001"+
		"\u0000\u0000\u0000\u25ba\u2488\u0001\u0000\u0000\u0000\u25ba\u248e\u0001"+
		"\u0000\u0000\u0000\u25ba\u248f\u0001\u0000\u0000\u0000\u25ba\u2496\u0001"+
		"\u0000\u0000\u0000\u25ba\u249d\u0001\u0000\u0000\u0000\u25ba\u24a4\u0001"+
		"\u0000\u0000\u0000\u25ba\u24ab\u0001\u0000\u0000\u0000\u25ba\u24ac\u0001"+
		"\u0000\u0000\u0000\u25ba\u24ad\u0001\u0000\u0000\u0000\u25ba\u24ae\u0001"+
		"\u0000\u0000\u0000\u25ba\u24af\u0001\u0000\u0000\u0000\u25ba\u24b0\u0001"+
		"\u0000\u0000\u0000\u25ba\u24b1\u0001\u0000\u0000\u0000\u25ba\u24b2\u0001"+
		"\u0000\u0000\u0000\u25ba\u24b9\u0001\u0000\u0000\u0000\u25ba\u24bf\u0001"+
		"\u0000\u0000\u0000\u25ba\u24c8\u0001\u0000\u0000\u0000\u25ba\u24d1\u0001"+
		"\u0000\u0000\u0000\u25ba\u24d7\u0001\u0000\u0000\u0000\u25ba\u24e0\u0001"+
		"\u0000\u0000\u0000\u25ba\u24e7\u0001\u0000\u0000\u0000\u25ba\u24ef\u0001"+
		"\u0000\u0000\u0000\u25ba\u24f6\u0001\u0000\u0000\u0000\u25ba\u24fb\u0001"+
		"\u0000\u0000\u0000\u25ba\u2500\u0001\u0000\u0000\u0000\u25ba\u2505\u0001"+
		"\u0000\u0000\u0000\u25ba\u250a\u0001\u0000\u0000\u0000\u25ba\u2517\u0001"+
		"\u0000\u0000\u0000\u25ba\u251d\u0001\u0000\u0000\u0000\u25ba\u2522\u0001"+
		"\u0000\u0000\u0000\u25ba\u252b\u0001\u0000\u0000\u0000\u25ba\u2535\u0001"+
		"\u0000\u0000\u0000\u25ba\u2540\u0001\u0000\u0000\u0000\u25ba\u2548\u0001"+
		"\u0000\u0000\u0000\u25ba\u255b\u0001\u0000\u0000\u0000\u25ba\u2571\u0001"+
		"\u0000\u0000\u0000\u25ba\u2579\u0001\u0000\u0000\u0000\u25ba\u257e\u0001"+
		"\u0000\u0000\u0000\u25ba\u2586\u0001\u0000\u0000\u0000\u25ba\u2589\u0001"+
		"\u0000\u0000\u0000\u25ba\u259d\u0001\u0000\u0000\u0000\u25ba";
	private static final String _serializedATNSegment4 =
		"\u25aa\u0001\u0000\u0000\u0000\u25bb\u04c3\u0001\u0000\u0000\u0000\u25bc"+
		"\u25bd\u0005\u0196\u0000\u0000\u25bd\u25c2\u0003\u048a\u0245\u0000\u25be"+
		"\u25bf\u0005\u0196\u0000\u0000\u25bf\u25c0\u0005\u012c\u0000\u0000\u25c0"+
		"\u25c2\u0005\u01e8\u0000\u0000\u25c1\u25bc\u0001\u0000\u0000\u0000\u25c1"+
		"\u25be\u0001\u0000\u0000\u0000\u25c2\u04c5\u0001\u0000\u0000\u0000\u25c3"+
		"\u25c4\u0005\u0006\u0000\u0000\u25c4\u25c5\u0005\u0172\u0000\u0000\u25c5"+
		"\u25ce\u0005\u01a0\u0000\u0000\u25c6\u25c7\u0005\u0006\u0000\u0000\u25c7"+
		"\u25c8\u0005\u0172\u0000\u0000\u25c8\u25ce\u0005\u012c\u0000\u0000\u25c9"+
		"\u25ca\u0005\u0006\u0000\u0000\u25ca\u25cb\u0005\u0172\u0000\u0000\u25cb"+
		"\u25cc\u0005\u012c\u0000\u0000\u25cc\u25ce\u0005\u01e8\u0000\u0000\u25cd"+
		"\u25c3\u0001\u0000\u0000\u0000\u25cd\u25c6\u0001\u0000\u0000\u0000\u25cd"+
		"\u25c9\u0001\u0000\u0000\u0000\u25ce\u04c7\u0001\u0000\u0000\u0000\u25cf"+
		"\u25d0\u0005\u01c7\u0000\u0000\u25d0\u25d1\u0005\u0002\u0000\u0000\u25d1"+
		"\u25d2\u0003\u04ca\u0265\u0000\u25d2\u25d3\u0005\u0003\u0000\u0000\u25d3"+
		"\u04c9\u0001\u0000\u0000\u0000\u25d4\u25d9\u0003\u04cc\u0266\u0000\u25d5"+
		"\u25d6\u0005\u0006\u0000\u0000\u25d6\u25d8\u0003\u04cc\u0266\u0000\u25d7"+
		"\u25d5\u0001\u0000\u0000\u0000\u25d8\u25db\u0001\u0000\u0000\u0000\u25d9"+
		"\u25d7\u0001\u0000\u0000\u0000\u25d9\u25da\u0001\u0000\u0000\u0000\u25da"+
		"\u04cb\u0001\u0000\u0000\u0000\u25db\u25d9\u0001\u0000\u0000\u0000\u25dc"+
		"\u25df\u0003\u048a\u0245\u0000\u25dd\u25de\u0005J\u0000\u0000\u25de\u25e0"+
		"\u0003\u0590\u02c8\u0000\u25df\u25dd\u0001\u0000\u0000\u0000\u25df\u25e0"+
		"\u0001\u0000\u0000\u0000\u25e0\u04cd\u0001\u0000\u0000\u0000\u25e1\u25e2"+
		"\u00076\u0000\u0000\u25e2\u04cf\u0001\u0000\u0000\u0000\u25e3\u25e4\u0005"+
		"\u0143\u0000\u0000\u25e4\u25e8\u0005\u0199\u0000\u0000\u25e5\u25e6\u0005"+
		"\u017a\u0000\u0000\u25e6\u25e8\u0005\u0199\u0000\u0000\u25e7\u25e3\u0001"+
		"\u0000\u0000\u0000\u25e7\u25e5\u0001\u0000\u0000\u0000\u25e8\u04d1\u0001"+
		"\u0000\u0000\u0000\u25e9\u25ea\u0005\u013d\u0000\u0000\u25ea\u25f9\u0003"+
		"\u04b6\u025b\u0000\u25eb\u25ec\u0005\u013d\u0000\u0000\u25ec\u25ed\u0003"+
		"\u04b6\u025b\u0000\u25ed\u25ee\u0003\u04d4\u026a\u0000\u25ee\u25f9\u0001"+
		"\u0000\u0000\u0000\u25ef\u25f0\u0005\u013d\u0000\u0000\u25f0\u25f1\u0003"+
		"\u04d4\u026a\u0000\u25f1\u25f2\u0003\u04b6\u025b\u0000\u25f2\u25f9\u0001"+
		"\u0000\u0000\u0000\u25f3\u25f4\u0005\u013d\u0000\u0000\u25f4\u25f5\u0003"+
		"\u04d4\u026a\u0000\u25f5\u25f6\u0003\u04b6\u025b\u0000\u25f6\u25f7\u0003"+
		"\u04d4\u026a\u0000\u25f7\u25f9\u0001\u0000\u0000\u0000\u25f8\u25e9\u0001"+
		"\u0000\u0000\u0000\u25f8\u25eb\u0001\u0000\u0000\u0000\u25f8\u25ef\u0001"+
		"\u0000\u0000\u0000\u25f8\u25f3\u0001\u0000\u0000\u0000\u25f9\u04d3\u0001"+
		"\u0000\u0000\u0000\u25fa\u25fb\u0005\u00b9\u0000\u0000\u25fb\u25fc\u0007"+
		"7\u0000\u0000\u25fc\u04d5\u0001\u0000\u0000\u0000\u25fd\u25fe\u0005\u0205"+
		"\u0000\u0000\u25fe\u25ff\u0005h\u0000\u0000\u25ff\u2600\u0005\u0002\u0000"+
		"\u0000\u2600\u2601\u0003\u03ea\u01f5\u0000\u2601\u2602\u0005\u0003\u0000"+
		"\u0000\u2602\u04d7\u0001\u0000\u0000\u0000\u2603\u2604\u0005\u0206\u0000"+
		"\u0000\u2604\u2605\u0005\u0002\u0000\u0000\u2605\u2606\u0005\u008d\u0000"+
		"\u0000\u2606\u2607\u0003\u048a\u0245\u0000\u2607\u2608\u0005\u0003\u0000"+
		"\u0000\u2608\u04d9\u0001\u0000\u0000\u0000\u2609\u260a\u0005\u008e\u0000"+
		"\u0000\u260a\u260b\u0003\u04dc\u026e\u0000\u260b\u04db\u0001\u0000\u0000"+
		"\u0000\u260c\u2611\u0003\u04de\u026f\u0000\u260d\u260e\u0005\u0006\u0000"+
		"\u0000\u260e\u2610\u0003\u04de\u026f\u0000\u260f\u260d\u0001\u0000\u0000"+
		"\u0000\u2610\u2613\u0001\u0000\u0000\u0000\u2611\u260f\u0001\u0000\u0000"+
		"\u0000\u2611\u2612\u0001\u0000\u0000\u0000\u2612\u04dd\u0001\u0000\u0000"+
		"\u0000\u2613\u2611\u0001\u0000\u0000\u0000\u2614\u2615\u0003\u058a\u02c5"+
		"\u0000\u2615\u2616\u0005J\u0000\u0000\u2616\u2617\u0003\u04e2\u0271\u0000"+
		"\u2617\u04df\u0001\u0000\u0000\u0000\u2618\u261b\u0005\u00a2\u0000\u0000"+
		"\u2619\u261c\u0003\u04e2\u0271\u0000\u261a\u261c\u0003\u058a\u02c5\u0000"+
		"\u261b\u2619\u0001\u0000\u0000\u0000\u261b\u261a\u0001\u0000\u0000\u0000"+
		"\u261c\u04e1\u0001\u0000\u0000\u0000\u261d\u261f\u0005\u0002\u0000\u0000"+
		"\u261e\u2620\u0003\u04e4\u0272\u0000\u261f\u261e\u0001\u0000\u0000\u0000"+
		"\u261f\u2620\u0001\u0000\u0000\u0000\u2620\u2622\u0001\u0000\u0000\u0000"+
		"\u2621\u2623\u0003\u04e6\u0273\u0000\u2622\u2621\u0001\u0000\u0000\u0000"+
		"\u2622\u2623\u0001\u0000\u0000\u0000\u2623\u2625\u0001\u0000\u0000\u0000"+
		"\u2624\u2626\u0003\u03e8\u01f4\u0000\u2625\u2624\u0001\u0000\u0000\u0000"+
		"\u2625\u2626\u0001\u0000\u0000\u0000\u2626\u2628\u0001\u0000\u0000\u0000"+
		"\u2627\u2629\u0003\u04e8\u0274\u0000\u2628\u2627\u0001\u0000\u0000\u0000"+
		"\u2628\u2629\u0001\u0000\u0000\u0000\u2629\u262a\u0001\u0000\u0000\u0000"+
		"\u262a\u262b\u0005\u0003\u0000\u0000\u262b\u04e3\u0001\u0000\u0000\u0000"+
		"\u262c\u262d\u0003\u058a\u02c5\u0000\u262d\u04e5\u0001\u0000\u0000\u0000"+
		"\u262e\u262f\u0005\u013c\u0000\u0000\u262f\u2630\u0005\u00b9\u0000\u0000"+
		"\u2630\u2631\u0003\u0502\u0281\u0000\u2631\u04e7\u0001\u0000\u0000\u0000"+
		"\u2632\u2633\u0005\u014a\u0000\u0000\u2633\u2635\u0003\u04ea\u0275\u0000"+
		"\u2634\u2636\u0003\u04ee\u0277\u0000\u2635\u2634\u0001\u0000\u0000\u0000"+
		"\u2635\u2636\u0001\u0000\u0000\u0000\u2636\u2642\u0001\u0000\u0000\u0000"+
		"\u2637\u2638\u0005\u015f\u0000\u0000\u2638\u263a\u0003\u04ea\u0275\u0000"+
		"\u2639\u263b\u0003\u04ee\u0277\u0000\u263a\u2639\u0001\u0000\u0000\u0000"+
		"\u263a\u263b\u0001\u0000\u0000\u0000\u263b\u2642\u0001\u0000\u0000\u0000"+
		"\u263c\u263d\u0005\u0207\u0000\u0000\u263d\u263f\u0003\u04ea\u0275\u0000"+
		"\u263e\u2640\u0003\u04ee\u0277\u0000\u263f\u263e\u0001\u0000\u0000\u0000"+
		"\u263f\u2640\u0001\u0000\u0000\u0000\u2640\u2642\u0001\u0000\u0000\u0000"+
		"\u2641\u2632\u0001\u0000\u0000\u0000\u2641\u2637\u0001\u0000\u0000\u0000"+
		"\u2641\u263c\u0001\u0000\u0000\u0000\u2642\u04e9\u0001\u0000\u0000\u0000"+
		"\u2643\u264a\u0003\u04ec\u0276\u0000\u2644\u2645\u0005\u01a2\u0000\u0000"+
		"\u2645\u2646\u0003\u04ec\u0276\u0000\u2646\u2647\u0005G\u0000\u0000\u2647"+
		"\u2648\u0003\u04ec\u0276\u0000\u2648\u264a\u0001\u0000\u0000\u0000\u2649"+
		"\u2643\u0001\u0000\u0000\u0000\u2649\u2644\u0001\u0000\u0000\u0000\u264a"+
		"\u04eb\u0001\u0000\u0000\u0000\u264b\u264c\u0005\u0189\u0000\u0000\u264c"+
		"\u2653\u00078\u0000\u0000\u264d\u264e\u0005\u01d8\u0000\u0000\u264e\u2653"+
		"\u0005\u01bd\u0000\u0000\u264f\u2650\u0003\u048a\u0245\u0000\u2650\u2651"+
		"\u00078\u0000\u0000\u2651\u2653\u0001\u0000\u0000\u0000\u2652\u264b\u0001"+
		"\u0000\u0000\u0000\u2652\u264d\u0001\u0000\u0000\u0000\u2652\u264f\u0001"+
		"\u0000\u0000\u0000\u2653\u04ed\u0001\u0000\u0000\u0000\u2654\u265b\u0005"+
		"\u00ed\u0000\u0000\u2655\u2656\u0005\u01d8\u0000\u0000\u2656\u265c\u0005"+
		"\u01bd\u0000\u0000\u2657\u265c\u0005h\u0000\u0000\u2658\u265c\u0005\u01f9"+
		"\u0000\u0000\u2659\u265a\u0005\u012c\u0000\u0000\u265a\u265c\u0005\u0208"+
		"\u0000\u0000\u265b\u2655\u0001\u0000\u0000\u0000\u265b\u2657\u0001\u0000"+
		"\u0000\u0000\u265b\u2658\u0001\u0000\u0000\u0000\u265b\u2659\u0001\u0000"+
		"\u0000\u0000\u265c\u04ef\u0001\u0000\u0000\u0000\u265d\u265e\u0005\u01bd"+
		"\u0000\u0000\u265e\u2660\u0005\u0002\u0000\u0000\u265f\u2661\u0003\u0502"+
		"\u0281\u0000\u2660\u265f\u0001\u0000\u0000\u0000\u2660\u2661\u0001\u0000"+
		"\u0000\u0000\u2661\u2662\u0001\u0000\u0000\u0000\u2662\u266a\u0005\u0003"+
		"\u0000\u0000\u2663\u2664\u0005\u0002\u0000\u0000\u2664\u2665\u0003\u0502"+
		"\u0281\u0000\u2665\u2666\u0005\u0006\u0000\u0000\u2666\u2667\u0003\u048a"+
		"\u0245\u0000\u2667\u2668\u0005\u0003\u0000\u0000\u2668\u266a\u0001\u0000"+
		"\u0000\u0000\u2669\u265d\u0001\u0000\u0000\u0000\u2669\u2663\u0001\u0000"+
		"\u0000\u0000\u266a\u04f1\u0001\u0000\u0000\u0000\u266b\u266c\u0005\u01bd"+
		"\u0000\u0000\u266c\u266e\u0005\u0002\u0000\u0000\u266d\u266f\u0003\u0502"+
		"\u0281\u0000\u266e\u266d\u0001\u0000\u0000\u0000\u266e\u266f\u0001\u0000"+
		"\u0000\u0000\u266f\u2670\u0001\u0000\u0000\u0000\u2670\u2671\u0005\u0003"+
		"\u0000\u0000\u2671\u04f3\u0001\u0000\u0000\u0000\u2672\u2673\u0005\u0002"+
		"\u0000\u0000\u2673\u2674\u0003\u0502\u0281\u0000\u2674\u2675\u0005\u0006"+
		"\u0000\u0000\u2675\u2676\u0003\u048a\u0245\u0000\u2676\u2677\u0005\u0003"+
		"\u0000\u0000\u2677\u04f5\u0001\u0000\u0000\u0000\u2678\u2679\u00079\u0000"+
		"\u0000\u2679\u04f7\u0001\u0000\u0000\u0000\u267a\u267d\u0005\u001d\u0000"+
		"\u0000\u267b\u267d\u0003\u04fa\u027d\u0000\u267c\u267a\u0001\u0000\u0000"+
		"\u0000\u267c\u267b\u0001\u0000\u0000\u0000\u267d\u04f9\u0001\u0000\u0000"+
		"\u0000\u267e\u267f\u0007:\u0000\u0000\u267f\u04fb\u0001\u0000\u0000\u0000"+
		"\u2680\u2687\u0005\u001d\u0000\u0000\u2681\u2682\u0005\u0135\u0000\u0000"+
		"\u2682\u2683\u0005\u0002\u0000\u0000\u2683\u2684\u0003\u02aa\u0155\u0000"+
		"\u2684\u2685\u0005\u0003\u0000\u0000\u2685\u2687\u0001\u0000\u0000\u0000"+
		"\u2686\u2680\u0001\u0000\u0000\u0000\u2686\u2681\u0001\u0000\u0000\u0000"+
		"\u2687\u04fd\u0001\u0000\u0000\u0000\u2688\u268f\u0003\u04f8\u027c\u0000"+
		"\u2689\u268a\u0005\u0135\u0000\u0000\u268a\u268b\u0005\u0002\u0000\u0000"+
		"\u268b\u268c\u0003\u02aa\u0155\u0000\u268c\u268d\u0005\u0003\u0000\u0000"+
		"\u268d\u268f\u0001\u0000\u0000\u0000\u268e\u2688\u0001\u0000\u0000\u0000"+
		"\u268e\u2689\u0001\u0000\u0000\u0000\u268f\u04ff\u0001\u0000\u0000\u0000"+
		"\u2690\u269d\u0003\u04f8\u027c\u0000\u2691\u2692\u0005\u0135\u0000\u0000"+
		"\u2692\u2693\u0005\u0002\u0000\u0000\u2693\u2694\u0003\u02aa\u0155\u0000"+
		"\u2694\u2695\u0005\u0003\u0000\u0000\u2695\u269d\u0001\u0000\u0000\u0000"+
		"\u2696\u269d\u0005\u009e\u0000\u0000\u2697\u2698\u0005s\u0000\u0000\u2698"+
		"\u269d\u0005\u009e\u0000\u0000\u2699\u269d\u0005\u0098\u0000\u0000\u269a"+
		"\u269b\u0005s\u0000\u0000\u269b\u269d\u0005\u0098\u0000\u0000\u269c\u2690"+
		"\u0001\u0000\u0000\u0000\u269c\u2691\u0001\u0000\u0000\u0000\u269c\u2696"+
		"\u0001\u0000\u0000\u0000\u269c\u2697\u0001\u0000\u0000\u0000\u269c\u2699"+
		"\u0001\u0000\u0000\u0000\u269c\u269a\u0001\u0000\u0000\u0000\u269d\u0501"+
		"\u0001\u0000\u0000\u0000\u269e\u26a3\u0003\u048a\u0245\u0000\u269f\u26a0"+
		"\u0005\u0006\u0000\u0000\u26a0\u26a2\u0003\u048a\u0245\u0000\u26a1\u269f"+
		"\u0001\u0000\u0000\u0000\u26a2\u26a5\u0001\u0000\u0000\u0000\u26a3\u26a1"+
		"\u0001\u0000\u0000\u0000\u26a3\u26a4\u0001\u0000\u0000\u0000\u26a4\u0503"+
		"\u0001\u0000\u0000\u0000\u26a5\u26a3\u0001\u0000\u0000\u0000\u26a6\u26ab"+
		"\u0003\u0506\u0283\u0000\u26a7\u26a8\u0005\u0006\u0000\u0000\u26a8\u26aa"+
		"\u0003\u0506\u0283\u0000\u26a9\u26a7\u0001\u0000\u0000\u0000\u26aa\u26ad"+
		"\u0001\u0000\u0000\u0000\u26ab\u26a9\u0001\u0000\u0000\u0000\u26ab\u26ac"+
		"\u0001\u0000\u0000\u0000\u26ac\u0505\u0001\u0000\u0000\u0000\u26ad\u26ab"+
		"\u0001\u0000\u0000\u0000\u26ae\u26b4\u0003\u048a\u0245\u0000\u26af\u26b0"+
		"\u0003\u027a\u013d\u0000\u26b0\u26b1\u0007;\u0000\u0000\u26b1\u26b2\u0003"+
		"\u048a\u0245\u0000\u26b2\u26b4\u0001\u0000\u0000\u0000\u26b3\u26ae\u0001"+
		"\u0000\u0000\u0000\u26b3\u26af\u0001\u0000\u0000\u0000\u26b4\u0507\u0001"+
		"\u0000\u0000\u0000\u26b5\u26ba\u0003\u045c\u022e\u0000\u26b6\u26b7\u0005"+
		"\u0006\u0000\u0000\u26b7\u26b9\u0003\u045c\u022e\u0000\u26b8\u26b6\u0001"+
		"\u0000\u0000\u0000\u26b9\u26bc\u0001\u0000\u0000\u0000\u26ba\u26b8\u0001"+
		"\u0000\u0000\u0000\u26ba\u26bb\u0001\u0000\u0000\u0000\u26bb\u0509\u0001"+
		"\u0000\u0000\u0000\u26bc\u26ba\u0001\u0000\u0000\u0000\u26bd\u26c0\u0005"+
		"\u0004\u0000\u0000\u26be\u26c1\u0003\u0502\u0281\u0000\u26bf\u26c1\u0003"+
		"\u050c\u0286\u0000\u26c0\u26be\u0001\u0000\u0000\u0000\u26c0\u26bf\u0001"+
		"\u0000\u0000\u0000\u26c0\u26c1\u0001\u0000\u0000\u0000\u26c1\u26c2\u0001"+
		"\u0000\u0000\u0000\u26c2\u26c3\u0005\u0005\u0000\u0000\u26c3\u050b\u0001"+
		"\u0000\u0000\u0000\u26c4\u26c9\u0003\u050a\u0285\u0000\u26c5\u26c6\u0005"+
		"\u0006\u0000\u0000\u26c6\u26c8\u0003\u050a\u0285\u0000\u26c7\u26c5\u0001"+
		"\u0000\u0000\u0000\u26c8\u26cb\u0001\u0000\u0000\u0000\u26c9\u26c7\u0001"+
		"\u0000\u0000\u0000\u26c9\u26ca\u0001\u0000\u0000\u0000\u26ca\u050d\u0001"+
		"\u0000\u0000\u0000\u26cb\u26c9\u0001\u0000\u0000\u0000\u26cc\u26cd\u0003"+
		"\u0510\u0288\u0000\u26cd\u26ce\u0005f\u0000\u0000\u26ce\u26cf\u0003\u048a"+
		"\u0245\u0000\u26cf\u050f\u0001\u0000\u0000\u0000\u26d0\u26d9\u0003\u05a0"+
		"\u02d0\u0000\u26d1\u26d9\u0005\u019f\u0000\u0000\u26d2\u26d9\u0005\u0127"+
		"\u0000\u0000\u26d3\u26d9\u0005\u00d6\u0000\u0000\u26d4\u26d9\u0005\u0100"+
		"\u0000\u0000\u26d5\u26d9\u0005\u0124\u0000\u0000\u26d6\u26d9\u0005\u0165"+
		"\u0000\u0000\u26d7\u26d9\u0003\u057c\u02be\u0000\u26d8\u26d0\u0001\u0000"+
		"\u0000\u0000\u26d8\u26d1\u0001\u0000\u0000\u0000\u26d8\u26d2\u0001\u0000"+
		"\u0000\u0000\u26d8\u26d3\u0001\u0000\u0000\u0000\u26d8\u26d4\u0001\u0000"+
		"\u0000\u0000\u26d8\u26d5\u0001\u0000\u0000\u0000\u26d8\u26d6\u0001\u0000"+
		"\u0000\u0000\u26d8\u26d7\u0001\u0000\u0000\u0000\u26d9\u0511\u0001\u0000"+
		"\u0000\u0000\u26da\u26db\u0007<\u0000\u0000\u26db\u0513\u0001\u0000\u0000"+
		"\u0000\u26dc\u26dd\u0003\u048a\u0245\u0000\u26dd\u26de\u0005z\u0000\u0000"+
		"\u26de\u26df\u0003\u048a\u0245\u0000\u26df\u26e0\u0005f\u0000\u0000\u26e0"+
		"\u26e3\u0003\u048a\u0245\u0000\u26e1\u26e2\u0005d\u0000\u0000\u26e2\u26e4"+
		"\u0003\u048a\u0245\u0000\u26e3\u26e1\u0001\u0000\u0000\u0000\u26e3\u26e4"+
		"\u0001\u0000\u0000\u0000\u26e4\u0515\u0001\u0000\u0000\u0000\u26e5\u26e6"+
		"\u0003\u04b4\u025a\u0000\u26e6\u26e7\u0005j\u0000\u0000\u26e7\u26e8\u0003"+
		"\u04b4\u025a\u0000\u26e8\u0517\u0001\u0000\u0000\u0000\u26e9\u26ea\u0003"+
		"\u048a\u0245\u0000\u26ea\u26eb\u0005f\u0000\u0000\u26eb\u26ec\u0003\u048a"+
		"\u0245\u0000\u26ec\u26ed\u0005d\u0000\u0000\u26ed\u26ee\u0003\u048a\u0245"+
		"\u0000\u26ee\u2704\u0001\u0000\u0000\u0000\u26ef\u26f0\u0003\u048a\u0245"+
		"\u0000\u26f0\u26f1\u0005d\u0000\u0000\u26f1\u26f2\u0003\u048a\u0245\u0000"+
		"\u26f2\u26f3\u0005f\u0000\u0000\u26f3\u26f4\u0003\u048a\u0245\u0000\u26f4"+
		"\u2704\u0001\u0000\u0000\u0000\u26f5\u26f6\u0003\u048a\u0245\u0000\u26f6"+
		"\u26f7\u0005f\u0000\u0000\u26f7\u26f8\u0003\u048a\u0245\u0000\u26f8\u2704"+
		"\u0001\u0000\u0000\u0000\u26f9\u26fa\u0003\u048a\u0245\u0000\u26fa\u26fb"+
		"\u0005d\u0000\u0000\u26fb\u26fc\u0003\u048a\u0245\u0000\u26fc\u2704\u0001"+
		"\u0000\u0000\u0000\u26fd\u26fe\u0003\u048a\u0245\u0000\u26fe\u26ff\u0005"+
		"\u00a5\u0000\u0000\u26ff\u2700\u0003\u048a\u0245\u0000\u2700\u2701\u0005"+
		"\u00eb\u0000\u0000\u2701\u2702\u0003\u048a\u0245\u0000\u2702\u2704\u0001"+
		"\u0000\u0000\u0000\u2703\u26e9\u0001\u0000\u0000\u0000\u2703\u26ef\u0001"+
		"\u0000\u0000\u0000\u2703\u26f5\u0001\u0000\u0000\u0000\u2703\u26f9\u0001"+
		"\u0000\u0000\u0000\u2703\u26fd\u0001\u0000\u0000\u0000\u2704\u0519\u0001"+
		"\u0000\u0000\u0000\u2705\u2706\u0003\u048a\u0245\u0000\u2706\u2707\u0005"+
		"f\u0000\u0000\u2707\u2708\u0003\u0502\u0281\u0000\u2708\u270d\u0001\u0000"+
		"\u0000\u0000\u2709\u270a\u0005f\u0000\u0000\u270a\u270d\u0003\u0502\u0281"+
		"\u0000\u270b\u270d\u0003\u0502\u0281\u0000\u270c\u2705\u0001\u0000\u0000"+
		"\u0000\u270c\u2709\u0001\u0000\u0000\u0000\u270c\u270b\u0001\u0000\u0000"+
		"\u0000\u270d\u051b\u0001\u0000\u0000\u0000\u270e\u2714\u0003\u03c6\u01e3"+
		"\u0000\u270f\u2710\u0005\u0002\u0000\u0000\u2710\u2711\u0003\u0502\u0281"+
		"\u0000\u2711\u2712\u0005\u0003\u0000\u0000\u2712\u2714\u0001\u0000\u0000"+
		"\u0000\u2713\u270e\u0001\u0000\u0000\u0000\u2713\u270f\u0001\u0000\u0000"+
		"\u0000\u2714\u051d\u0001\u0000\u0000\u0000\u2715\u2717\u0005N\u0000\u0000"+
		"\u2716\u2718\u0003\u0526\u0293\u0000\u2717\u2716\u0001\u0000\u0000\u0000"+
		"\u2717\u2718\u0001\u0000\u0000\u0000\u2718\u2719\u0001\u0000\u0000\u0000"+
		"\u2719\u271b\u0003\u0520\u0290\u0000\u271a\u271c\u0003\u0524\u0292\u0000"+
		"\u271b\u271a\u0001\u0000\u0000\u0000\u271b\u271c\u0001\u0000\u0000\u0000"+
		"\u271c\u271d\u0001\u0000\u0000\u0000\u271d\u271e\u0005\u01ec\u0000\u0000"+
		"\u271e\u051f\u0001\u0000\u0000\u0000\u271f\u2721\u0003\u0522\u0291\u0000"+
		"\u2720\u271f\u0001\u0000\u0000\u0000\u2721\u2722\u0001\u0000\u0000\u0000"+
		"\u2722\u2720\u0001\u0000\u0000\u0000\u2722\u2723\u0001\u0000\u0000\u0000"+
		"\u2723\u0521\u0001\u0000\u0000\u0000\u2724\u2725\u0005\u008c\u0000\u0000"+
		"\u2725\u2726\u0003\u048a\u0245\u0000\u2726\u2727\u0005\u0083\u0000\u0000"+
		"\u2727\u2728\u0003\u048a\u0245\u0000\u2728\u0523\u0001\u0000\u0000\u0000"+
		"\u2729\u272a\u0005`\u0000\u0000\u272a\u272b\u0003\u048a\u0245\u0000\u272b"+
		"\u0525\u0001\u0000\u0000\u0000\u272c\u272d\u0003\u048a\u0245\u0000\u272d"+
		"\u0527\u0001\u0000\u0000\u0000\u272e\u2730\u0003\u058a\u02c5\u0000\u272f"+
		"\u2731\u0003\u052e\u0297\u0000\u2730\u272f\u0001\u0000\u0000\u0000\u2730"+
		"\u2731\u0001\u0000\u0000\u0000\u2731\u0529\u0001\u0000\u0000\u0000\u2732"+
		"\u2735\u0005\u000b\u0000\u0000\u2733\u2736\u0003\u056c\u02b6\u0000\u2734"+
		"\u2736\u0005\t\u0000\u0000\u2735\u2733\u0001\u0000\u0000\u0000\u2735\u2734"+
		"\u0001\u0000\u0000\u0000\u2736\u2744\u0001\u0000\u0000\u0000\u2737\u2740"+
		"\u0005\u0004\u0000\u0000\u2738\u2741\u0003\u048a\u0245\u0000\u2739\u273b"+
		"\u0003\u052c\u0296\u0000\u273a\u2739\u0001\u0000\u0000\u0000\u273a\u273b"+
		"\u0001\u0000\u0000\u0000\u273b\u273c\u0001\u0000\u0000\u0000\u273c\u273e"+
		"\u0005\b\u0000\u0000\u273d\u273f\u0003\u052c\u0296\u0000\u273e\u273d\u0001"+
		"\u0000\u0000\u0000\u273e\u273f\u0001\u0000\u0000\u0000\u273f\u2741\u0001"+
		"\u0000\u0000\u0000\u2740\u2738\u0001\u0000\u0000\u0000\u2740\u273a\u0001"+
		"\u0000\u0000\u0000\u2741\u2742\u0001\u0000\u0000\u0000\u2742\u2744\u0005"+
		"\u0005\u0000\u0000\u2743\u2732\u0001\u0000\u0000\u0000\u2743\u2737\u0001"+
		"\u0000\u0000\u0000\u2744\u052b\u0001\u0000\u0000\u0000\u2745\u2746\u0003"+
		"\u048a\u0245\u0000\u2746\u052d\u0001\u0000\u0000\u0000\u2747\u2749\u0003"+
		"\u052a\u0295\u0000\u2748\u2747\u0001\u0000\u0000\u0000\u2749\u274a\u0001"+
		"\u0000\u0000\u0000\u274a\u2748\u0001\u0000\u0000\u0000\u274a\u274b\u0001"+
		"\u0000\u0000\u0000\u274b\u052f\u0001\u0000\u0000\u0000\u274c\u274e\u0003"+
		"\u052a\u0295\u0000\u274d\u274c\u0001\u0000\u0000\u0000\u274e\u2751\u0001"+
		"\u0000\u0000\u0000\u274f\u274d\u0001\u0000\u0000\u0000\u274f\u2750\u0001"+
		"\u0000\u0000\u0000\u2750\u0531\u0001\u0000\u0000\u0000\u2751\u274f\u0001"+
		"\u0000\u0000\u0000\u2752\u2753\u0005\u013d\u0000\u0000\u2753\u2754\u0003"+
		"\u0534\u029a\u0000\u2754\u0533\u0001\u0000\u0000\u0000\u2755\u2756\u0006"+
		"\u029a\uffff\uffff\u0000\u2756\u2757\u0003\u0536\u029b\u0000\u2757\u275d"+
		"\u0001\u0000\u0000\u0000\u2758\u2759\n\u0001\u0000\u0000\u2759\u275a\u0005"+
		"\u0006\u0000\u0000\u275a\u275c\u0003\u0536\u029b\u0000\u275b\u2758\u0001"+
		"\u0000\u0000\u0000\u275c\u275f\u0001\u0000\u0000\u0000\u275d\u275b\u0001"+
		"\u0000\u0000\u0000\u275d\u275e\u0001\u0000\u0000\u0000\u275e\u0535\u0001"+
		"\u0000\u0000\u0000\u275f\u275d\u0001\u0000\u0000\u0000\u2760\u2761\u0003"+
		"\u0542\u02a1\u0000\u2761\u2762\u0005J\u0000\u0000\u2762\u2763\u0003\u0590"+
		"\u02c8\u0000\u2763\u0537\u0001\u0000\u0000\u0000\u2764\u2765\u0005\u019a"+
		"\u0000\u0000\u2765\u277e\u0005\u019c\u0000\u0000\u2766\u2767\u0005\u019a"+
		"\u0000\u0000\u2767\u2768\u0005I\u0000\u0000\u2768\u277e\u0005\u019c\u0000"+
		"\u0000\u2769\u276a\u0005\u008f\u0000\u0000\u276a\u277e\u0005\u019c\u0000"+
		"\u0000\u276b\u276c\u0005\u008f\u0000\u0000\u276c\u276d\u0005I\u0000\u0000"+
		"\u276d\u277e\u0005\u019c\u0000\u0000\u276e\u276f\u0005\u008f\u0000\u0000"+
		"\u276f\u2770\u00050\u0000\u0000\u2770\u2771\u0005I\u0000\u0000\u2771\u277e"+
		"\u0005\u019c\u0000\u0000\u2772\u2773\u0005\u008f\u0000\u0000\u2773\u2774"+
		"\u0005A\u0000\u0000\u2774\u2775\u0005I\u0000\u0000\u2775\u277e\u0005\u019c"+
		"\u0000\u0000\u2776\u2777\u0005\u008f\u0000\u0000\u2777\u2778\u00050\u0000"+
		"\u0000\u2778\u277e\u0005\u019c\u0000\u0000\u2779\u277a\u0005\u008f\u0000"+
		"\u0000\u277a\u277b\u0005A\u0000\u0000\u277b\u277e\u0005\u019c\u0000\u0000"+
		"\u277c\u277e\u0001\u0000\u0000\u0000\u277d\u2764\u0001\u0000\u0000\u0000"+
		"\u277d\u2766\u0001\u0000\u0000\u0000\u277d\u2769\u0001\u0000\u0000\u0000"+
		"\u277d\u276b\u0001\u0000\u0000\u0000\u277d\u276e\u0001\u0000\u0000\u0000"+
		"\u277d\u2772\u0001\u0000\u0000\u0000\u277d\u2776\u0001\u0000\u0000\u0000"+
		"\u277d\u2779\u0001\u0000\u0000\u0000\u277d\u277c\u0001\u0000\u0000\u0000"+
		"\u277e\u0539\u0001\u0000\u0000\u0000\u277f\u2780\u0005[\u0000\u0000\u2780"+
		"\u2783\u0003\u048a\u0245\u0000\u2781\u2783\u0003\u053c\u029e\u0000\u2782"+
		"\u277f\u0001\u0000\u0000\u0000\u2782\u2781\u0001\u0000\u0000\u0000\u2783"+
		"\u053b\u0001\u0000\u0000\u0000\u2784\u278f\u0005\u0211\u0000\u0000\u2785"+
		"\u278f\u0005t\u0000\u0000\u2786\u278f\u0005\u0086\u0000\u0000\u2787\u278f"+
		"\u0005b\u0000\u0000\u2788\u278f\u0005\u018c\u0000\u0000\u2789\u278a\u0005"+
		"2\u0000\u0000\u278a\u278f\u0005I\u0000\u0000\u278b\u278c\u00052\u0000"+
		"\u0000\u278c\u278f\u0005\u0131\u0000\u0000\u278d\u278f\u00052\u0000\u0000"+
		"\u278e\u2784\u0001\u0000\u0000\u0000\u278e\u2785\u0001\u0000\u0000\u0000"+
		"\u278e\u2786\u0001\u0000\u0000\u0000\u278e\u2787\u0001\u0000\u0000\u0000"+
		"\u278e\u2788\u0001\u0000\u0000\u0000\u278e\u2789\u0001\u0000\u0000\u0000"+
		"\u278e\u278b\u0001\u0000\u0000\u0000\u278e\u278d\u0001\u0000\u0000\u0000"+
		"\u278f\u053d\u0001\u0000\u0000\u0000\u2790\u2791\u0003\u053a\u029d\u0000"+
		"\u2791\u2792\u0005v\u0000\u0000\u2792\u2793\u00052\u0000\u0000\u2793\u27a0"+
		"\u0001\u0000\u0000\u0000\u2794\u2795\u0003\u053a\u029d\u0000\u2795\u2796"+
		"\u0005v\u0000\u0000\u2796\u2797\u0005\u0211\u0000\u0000\u2797\u27a0\u0001"+
		"\u0000\u0000\u0000\u2798\u2799\u0003\u053a\u029d\u0000\u2799\u279a\u0005"+
		"v\u0000\u0000\u279a\u279b\u00052\u0000\u0000\u279b\u279c\u0003\u053a\u029d"+
		"\u0000\u279c\u279d\u0005v\u0000\u0000\u279d\u279e\u0005\u0211\u0000\u0000"+
		"\u279e\u27a0\u0001\u0000\u0000\u0000\u279f\u2790\u0001\u0000\u0000\u0000"+
		"\u279f\u2794\u0001\u0000\u0000\u0000\u279f\u2798\u0001\u0000\u0000\u0000"+
		"\u27a0\u053f\u0001\u0000\u0000\u0000\u27a1\u27a2\u0003\u053a\u029d\u0000"+
		"\u27a2\u27a3\u0005v\u0000\u0000\u27a3\u27a4\u0005\u0211\u0000\u0000\u27a4"+
		"\u0541\u0001\u0000\u0000\u0000\u27a5\u27a7\u0003\u048a\u0245\u0000\u27a6"+
		"\u27a8\u0003\u0544\u02a2\u0000\u27a7\u27a6\u0001\u0000\u0000\u0000\u27a7"+
		"\u27a8\u0001\u0000\u0000\u0000\u27a8\u0543\u0001\u0000\u0000\u0000\u27a9"+
		"\u27aa\u0005C\u0000\u0000\u27aa\u27ab\u0005\u001e\u0000\u0000\u27ab\u27ac"+
		"\u0005\u00e8\u0000\u0000\u27ac\u27b0\u0003\u056a\u02b5\u0000\u27ad\u27ae"+
		"\u0005C\u0000\u0000\u27ae\u27b0\u0005\u001e\u0000\u0000\u27af\u27a9\u0001"+
		"\u0000\u0000\u0000\u27af\u27ad\u0001\u0000\u0000\u0000\u27b0\u0545\u0001"+
		"\u0000\u0000\u0000\u27b1\u27b2\u00055\u0000\u0000\u27b2\u27b3\u0005<\u0000"+
		"\u0000\u27b3\u27b4\u0005v\u0000\u0000\u27b4\u27b5\u0005=\u0000\u0000\u27b5"+
		"\u27c0\u0005?\u0000\u0000\u27b6\u27b7\u00055\u0000\u0000\u27b7\u27c0\u0005"+
		"<\u0000\u0000\u27b8\u27b9\u00058\u0000\u0000\u27b9\u27ba\u0005<\u0000"+
		"\u0000\u27ba\u27bb\u0005v\u0000\u0000\u27bb\u27bc\u0005=\u0000\u0000\u27bc"+
		"\u27c0\u0005?\u0000\u0000\u27bd\u27be\u00058\u0000\u0000\u27be\u27c0\u0005"+
		"<\u0000\u0000\u27bf\u27b1\u0001\u0000\u0000\u0000\u27bf\u27b6\u0001\u0000"+
		"\u0000\u0000\u27bf\u27b8\u0001\u0000\u0000\u0000\u27bf\u27bd\u0001\u0000"+
		"\u0000\u0000\u27c0\u0547\u0001\u0000\u0000\u0000\u27c1\u27c2\u0005}\u0000"+
		"\u0000\u27c2\u27c4\u0003\u045c\u022e\u0000\u27c3\u27c5\u0003\u0544\u02a2"+
		"\u0000\u27c4\u27c3\u0001\u0000\u0000\u0000\u27c4\u27c5\u0001\u0000\u0000"+
		"\u0000\u27c5\u0549\u0001\u0000\u0000\u0000\u27c6\u27d0\u0005\u001e\u0000"+
		"\u0000\u27c7\u27c8\u0005\u001e\u0000\u0000\u27c8\u27d0\u0005\u01e8\u0000"+
		"\u0000\u27c9\u27ca\u0005\u001e\u0000\u0000\u27ca\u27d0\u0005I\u0000\u0000"+
		"\u27cb\u27cc\u0005\u001e\u0000\u0000\u27cc\u27d0\u0005\u0131\u0000\u0000"+
		"\u27cd\u27ce\u0005\u001e\u0000\u0000\u27ce\u27d0\u0005=\u0000\u0000\u27cf"+
		"\u27c6\u0001\u0000\u0000\u0000\u27cf\u27c7\u0001\u0000\u0000\u0000\u27cf"+
		"\u27c9\u0001\u0000\u0000\u0000\u27cf\u27cb\u0001\u0000\u0000\u0000\u27cf"+
		"\u27cd\u0001\u0000\u0000\u0000\u27d0\u054b\u0001\u0000\u0000\u0000\u27d1"+
		"\u27d2\u0005\u008f\u0000\u0000\u27d2\u27d3\u0005\u0088\u0000\u0000\u27d3"+
		"\u27dc\u00056\u0000\u0000\u27d4\u27d5\u0005\u008f\u0000\u0000\u27d5\u27dc"+
		"\u0005\u0088\u0000\u0000\u27d6\u27d7\u0005\u019a\u0000\u0000\u27d7\u27d8"+
		"\u0005\u0088\u0000\u0000\u27d8\u27dc\u00056\u0000\u0000\u27d9\u27da\u0005"+
		"\u019a\u0000\u0000\u27da\u27dc\u0005\u0088\u0000\u0000\u27db\u27d1\u0001"+
		"\u0000\u0000\u0000\u27db\u27d4\u0001\u0000\u0000\u0000\u27db\u27d6\u0001"+
		"\u0000\u0000\u0000\u27db\u27d9\u0001\u0000\u0000\u0000\u27dc\u054d\u0001"+
		"\u0000\u0000\u0000\u27dd\u27de\u0006\u02a7\uffff\uffff\u0000\u27de\u27df"+
		"\u0003\u0550\u02a8\u0000\u27df\u27e5\u0001\u0000\u0000\u0000\u27e0\u27e1"+
		"\n\u0001\u0000\u0000\u27e1\u27e2\u0005\u0006\u0000\u0000\u27e2\u27e4\u0003"+
		"\u0550\u02a8\u0000\u27e3\u27e0\u0001\u0000\u0000\u0000\u27e4\u27e7\u0001"+
		"\u0000\u0000\u0000\u27e5\u27e3\u0001\u0000\u0000\u0000\u27e5\u27e6\u0001"+
		"\u0000\u0000\u0000\u27e6\u054f\u0001\u0000\u0000\u0000\u27e7\u27e5\u0001"+
		"\u0000\u0000\u0000\u27e8\u27e9\u0003\u04b6\u025b\u0000\u27e9\u27ea\u0005"+
		"\u01e8\u0000\u0000\u27ea\u27eb\u0003\u0542\u02a1\u0000\u27eb\u27f1\u0001"+
		"\u0000\u0000\u0000\u27ec\u27ed\u0003\u048a\u0245\u0000\u27ed\u27ee\u0005"+
		"\b\u0000\u0000\u27ee\u27ef\u0003\u0542\u02a1\u0000\u27ef\u27f1\u0001\u0000"+
		"\u0000\u0000\u27f0\u27e8\u0001\u0000\u0000\u0000\u27f0\u27ec\u0001\u0000"+
		"\u0000\u0000\u27f1\u0551\u0001\u0000\u0000\u0000\u27f2\u27f3\u0005t\u0000"+
		"\u0000\u27f3\u27f4\u0005v\u0000\u0000\u27f4\u27f9\u0005t\u0000\u0000\u27f5"+
		"\u27f6\u0005+\u0000\u0000\u27f6\u27f7\u0005v\u0000\u0000\u27f7\u27f9\u0005"+
		"t\u0000\u0000\u27f8\u27f2\u0001\u0000\u0000\u0000\u27f8\u27f5\u0001\u0000"+
		"\u0000\u0000\u27f9\u0553\u0001\u0000\u0000\u0000\u27fa\u27fb\u0005t\u0000"+
		"\u0000\u27fb\u27fc\u0005v\u0000\u0000\u27fc\u2801\u0005t\u0000\u0000\u27fd"+
		"\u27fe\u0005+\u0000\u0000\u27fe\u27ff\u0005v\u0000\u0000\u27ff\u2801\u0005"+
		"t\u0000\u0000\u2800\u27fa\u0001\u0000\u0000\u0000\u2800\u27fd\u0001\u0000"+
		"\u0000\u0000\u2801\u0555\u0001\u0000\u0000\u0000\u2802\u2803\u0006\u02ab"+
		"\uffff\uffff\u0000\u2803\u2804\u0003\u0542\u02a1\u0000\u2804\u280a\u0001"+
		"\u0000\u0000\u0000\u2805\u2806\n\u0001\u0000\u0000\u2806\u2807\u0005\u0006"+
		"\u0000\u0000\u2807\u2809\u0003\u0542\u02a1\u0000\u2808\u2805\u0001\u0000"+
		"\u0000\u0000\u2809\u280c\u0001\u0000\u0000\u0000\u280a\u2808\u0001\u0000"+
		"\u0000\u0000\u280a\u280b\u0001\u0000\u0000\u0000\u280b\u0557\u0001\u0000"+
		"\u0000\u0000\u280c\u280a\u0001\u0000\u0000\u0000\u280d\u280e\u0005#\u0000"+
		"\u0000\u280e\u280f\u0005\u0002\u0000\u0000\u280f\u2811\u0003\u0550\u02a8"+
		"\u0000\u2810\u2812\u0003\u0552\u02a9\u0000\u2811\u2810\u0001\u0000\u0000"+
		"\u0000\u2811\u2812\u0001\u0000\u0000\u0000\u2812\u2814\u0001\u0000\u0000"+
		"\u0000\u2813\u2815\u0003\u054c\u02a6\u0000\u2814\u2813\u0001\u0000\u0000"+
		"\u0000\u2814\u2815\u0001\u0000\u0000\u0000\u2815\u2816\u0001\u0000\u0000"+
		"\u0000\u2816\u2817\u0003\u0548\u02a4\u0000\u2817\u2818\u0005\u0003\u0000"+
		"\u0000\u2818\u2826\u0001\u0000\u0000\u0000\u2819\u281a\u0005 \u0000\u0000"+
		"\u281a\u281b\u0005\u0002\u0000\u0000\u281b\u281d\u0003\u0542\u02a1\u0000"+
		"\u281c\u281e\u0003\u055a\u02ad\u0000\u281d\u281c\u0001\u0000\u0000\u0000"+
		"\u281d\u281e\u0001\u0000\u0000\u0000\u281e\u2820\u0001\u0000\u0000\u0000"+
		"\u281f\u2821\u0003\u0554\u02aa\u0000\u2820\u281f\u0001\u0000\u0000\u0000"+
		"\u2820\u2821\u0001\u0000\u0000\u0000\u2821\u2822\u0001\u0000\u0000\u0000"+
		"\u2822\u2823\u0003\u0548\u02a4\u0000\u2823\u2824\u0005\u0003\u0000\u0000"+
		"\u2824\u2826\u0001\u0000\u0000\u0000\u2825\u280d\u0001\u0000\u0000\u0000"+
		"\u2825\u2819\u0001\u0000\u0000\u0000\u2826\u0559\u0001\u0000\u0000\u0000"+
		"\u2827\u2828\u0005y\u0000\u0000\u2828\u2829\u0005\u00b9\u0000\u0000\u2829"+
		"\u282a\u0003\u03ec\u01f6\u0000\u282a\u055b\u0001\u0000\u0000\u0000\u282b"+
		"\u282c\u0003\u055e\u02af\u0000\u282c\u055d\u0001\u0000\u0000\u0000\u282d"+
		"\u2832\u0003\u0560\u02b0\u0000\u282e\u282f\u0005\u0006\u0000\u0000\u282f"+
		"\u2831\u0003\u0560\u02b0\u0000\u2830\u282e\u0001\u0000\u0000\u0000\u2831"+
		"\u2834\u0001\u0000\u0000\u0000\u2832\u2830\u0001\u0000\u0000\u0000\u2832"+
		"\u2833\u0001\u0000\u0000\u0000\u2833\u055f\u0001\u0000\u0000\u0000\u2834"+
		"\u2832\u0001\u0000\u0000\u0000\u2835\u2839\u0003\u048a\u0245\u0000\u2836"+
		"\u283a\u0003\u0562\u02b1\u0000\u2837\u2838\u0005J\u0000\u0000\u2838\u283a"+
		"\u0003\u0562\u02b1\u0000\u2839\u2836\u0001\u0000\u0000\u0000\u2839\u2837"+
		"\u0001\u0000\u0000\u0000\u2839\u283a\u0001\u0000\u0000\u0000\u283a\u283d"+
		"\u0001\u0000\u0000\u0000\u283b\u283d\u0005\t\u0000\u0000\u283c\u2835\u0001"+
		"\u0000\u0000\u0000\u283c\u283b\u0001\u0000\u0000\u0000\u283d\u0561\u0001"+
		"\u0000\u0000\u0000\u283e\u2841\u0003\u0590\u02c8\u0000\u283f\u2841\u0003"+
		"\u0592\u02c9\u0000\u2840\u283e\u0001\u0000\u0000\u0000\u2840\u283f\u0001"+
		"\u0000\u0000\u0000\u2841\u0563\u0001\u0000\u0000\u0000\u2842\u2847\u0003"+
		"\u0566\u02b3\u0000\u2843\u2844\u0005\u0006\u0000\u0000\u2844\u2846\u0003"+
		"\u0566\u02b3\u0000\u2845\u2843\u0001\u0000\u0000\u0000\u2846\u2849\u0001"+
		"\u0000\u0000\u0000\u2847\u2845\u0001\u0000\u0000\u0000\u2847\u2848\u0001"+
		"\u0000\u0000\u0000\u2848\u0565\u0001\u0000\u0000\u0000\u2849\u2847\u0001"+
		"\u0000\u0000\u0000\u284a\u284c\u0003\u058a\u02c5\u0000\u284b\u284d\u0003"+
		"\u052e\u0297\u0000\u284c\u284b\u0001\u0000\u0000\u0000\u284c\u284d\u0001"+
		"\u0000\u0000\u0000\u284d\u0567\u0001\u0000\u0000\u0000\u284e\u2853\u0003"+
		"\u056a\u02b5\u0000\u284f\u2850\u0005\u0006\u0000\u0000\u2850\u2852\u0003"+
		"\u056a\u02b5\u0000\u2851\u284f\u0001\u0000\u0000\u0000\u2852\u2855\u0001"+
		"\u0000\u0000\u0000\u2853\u2851\u0001\u0000\u0000\u0000\u2853\u2854\u0001"+
		"\u0000\u0000\u0000\u2854\u0569\u0001\u0000\u0000\u0000\u2855\u2853\u0001"+
		"\u0000\u0000\u0000\u2856\u2857\u0003\u058a\u02c5\u0000\u2857\u056b\u0001"+
		"\u0000\u0000\u0000\u2858\u2859\u0003\u0590\u02c8\u0000\u2859\u056d\u0001"+
		"\u0000\u0000\u0000\u285a\u285b\u0003\u057c\u02be\u0000\u285b\u056f\u0001"+
		"\u0000\u0000\u0000\u285c\u2861\u0003\u058c\u02c6\u0000\u285d\u285e\u0003"+
		"\u058a\u02c5\u0000\u285e\u285f\u0003\u052e\u0297\u0000\u285f\u2861\u0001"+
		"\u0000\u0000\u0000\u2860\u285c\u0001\u0000\u0000\u0000\u2860\u285d\u0001"+
		"\u0000\u0000\u0000\u2861\u0571\u0001\u0000\u0000\u0000\u2862\u2886\u0003"+
		"\u057a\u02bd\u0000\u2863\u2886\u0003\u0578\u02bc\u0000\u2864\u2886\u0003"+
		"\u057c\u02be\u0000\u2865\u2886\u0003\u0576\u02bb\u0000\u2866\u2886\u0003"+
		"\u0574\u02ba\u0000\u2867\u2871\u0003\u0570\u02b8\u0000\u2868\u2872\u0003"+
		"\u057c\u02be\u0000\u2869\u286a\u0005\u0002\u0000\u0000\u286a\u286c\u0003"+
		"\u0504\u0282\u0000\u286b\u286d\u0003\u03e8\u01f4\u0000\u286c\u286b\u0001"+
		"\u0000\u0000\u0000\u286c\u286d\u0001\u0000\u0000\u0000\u286d\u286e\u0001"+
		"\u0000\u0000\u0000\u286e\u286f\u0005\u0003\u0000\u0000\u286f\u2870\u0003"+
		"\u057c\u02be\u0000\u2870\u2872\u0001\u0000\u0000\u0000\u2871\u2868\u0001"+
		"\u0000\u0000\u0000\u2871\u2869\u0001\u0000\u0000\u0000\u2872\u2886\u0001"+
		"\u0000\u0000\u0000\u2873\u2874\u0003\u0462\u0231\u0000\u2874\u2875\u0003"+
		"\u057c\u02be\u0000\u2875\u2886\u0001\u0000\u0000\u0000\u2876\u2880\u0003"+
		"\u047e\u023f\u0000\u2877\u2879\u0003\u057c\u02be\u0000\u2878\u287a\u0003"+
		"\u0482\u0241\u0000\u2879\u2878\u0001\u0000\u0000\u0000\u2879\u287a\u0001"+
		"\u0000\u0000\u0000\u287a\u2881\u0001\u0000\u0000\u0000\u287b\u287c\u0005"+
		"\u0002\u0000\u0000\u287c\u287d\u0003\u057a\u02bd\u0000\u287d\u287e\u0005"+
		"\u0003\u0000\u0000\u287e\u287f\u0003\u057c\u02be\u0000\u287f\u2881\u0001"+
		"\u0000\u0000\u0000\u2880\u2877\u0001\u0000\u0000\u0000\u2880\u287b\u0001"+
		"\u0000\u0000\u0000\u2881\u2886\u0001\u0000\u0000\u0000\u2882\u2886\u0005"+
		"\u0086\u0000\u0000\u2883\u2886\u0005b\u0000\u0000\u2884\u2886\u0005t\u0000"+
		"\u0000\u2885\u2862\u0001\u0000\u0000\u0000\u2885\u2863\u0001\u0000\u0000"+
		"\u0000\u2885\u2864\u0001\u0000\u0000\u0000\u2885\u2865\u0001\u0000\u0000"+
		"\u0000\u2885\u2866\u0001\u0000\u0000\u0000\u2885\u2867\u0001\u0000\u0000"+
		"\u0000\u2885\u2873\u0001\u0000\u0000\u0000\u2885\u2876\u0001\u0000\u0000"+
		"\u0000\u2885\u2882\u0001\u0000\u0000\u0000\u2885\u2883\u0001\u0000\u0000"+
		"\u0000\u2885\u2884\u0001\u0000\u0000\u0000\u2886\u0573\u0001\u0000\u0000"+
		"\u0000\u2887\u2888\u0005\u0240\u0000\u0000\u2888\u0575\u0001\u0000\u0000"+
		"\u0000\u2889\u288a\u0005\u023c\u0000\u0000\u288a\u0577\u0001\u0000\u0000"+
		"\u0000\u288b\u288c\u0005\u0249\u0000\u0000\u288c\u0579\u0001\u0000\u0000"+
		"\u0000\u288d\u288e\u0007=\u0000\u0000\u288e\u057b\u0001\u0000\u0000\u0000"+
		"\u288f\u2891\u0003\u057e\u02bf\u0000\u2890\u2892\u0003\u0580\u02c0\u0000"+
		"\u2891\u2890\u0001\u0000\u0000\u0000\u2891\u2892\u0001\u0000\u0000\u0000"+
		"\u2892\u057d\u0001\u0000\u0000\u0000\u2893\u289f\u0005\u0237\u0000\u0000"+
		"\u2894\u289f\u0005\u0239\u0000\u0000\u2895\u2899\u0005\u023b\u0000\u0000"+
		"\u2896\u2898\u0005\u0258\u0000\u0000\u2897\u2896\u0001\u0000\u0000\u0000"+
		"\u2898\u289b\u0001\u0000\u0000\u0000\u2899\u2897\u0001\u0000\u0000\u0000"+
		"\u2899\u289a\u0001\u0000\u0000\u0000\u289a\u289c\u0001\u0000\u0000\u0000"+
		"\u289b\u2899\u0001\u0000\u0000\u0000\u289c\u289f\u0005\u0259\u0000\u0000"+
		"\u289d\u289f\u0005\u0252\u0000\u0000\u289e\u2893\u0001\u0000\u0000\u0000"+
		"\u289e\u2894\u0001\u0000\u0000\u0000\u289e\u2895\u0001\u0000\u0000\u0000"+
		"\u289e\u289d\u0001\u0000\u0000\u0000\u289f\u057f\u0001\u0000\u0000\u0000"+
		"\u28a0\u28a1\u0005\u020d\u0000\u0000\u28a1\u28a2\u0003\u057e\u02bf\u0000"+
		"\u28a2\u0581\u0001\u0000\u0000\u0000\u28a3\u28a9\u0003\u057a\u02bd\u0000"+
		"\u28a4\u28a5\u0005\f\u0000\u0000\u28a5\u28a9\u0003\u057a\u02bd\u0000\u28a6"+
		"\u28a7\u0005\r\u0000\u0000\u28a7\u28a9\u0003\u057a\u02bd\u0000\u28a8\u28a3"+
		"\u0001\u0000\u0000\u0000\u28a8\u28a4\u0001\u0000\u0000\u0000\u28a8\u28a6"+
		"\u0001\u0000\u0000\u0000\u28a9\u0583\u0001\u0000\u0000\u0000\u28aa\u28ab"+
		"\u0003\u0586\u02c3\u0000\u28ab\u0585\u0001\u0000\u0000\u0000\u28ac\u28b0"+
		"\u0003\u058e\u02c7\u0000\u28ad\u28b0\u0005Z\u0000\u0000\u28ae\u28b0\u0005"+
		"\u007f\u0000\u0000\u28af\u28ac\u0001\u0000\u0000\u0000\u28af\u28ad\u0001"+
		"\u0000\u0000\u0000\u28af\u28ae\u0001\u0000\u0000\u0000\u28b0\u0587\u0001"+
		"\u0000\u0000\u0000\u28b1\u28b6\u0003\u0586\u02c3\u0000\u28b2\u28b3\u0005"+
		"\u0006\u0000\u0000\u28b3\u28b5\u0003\u0586\u02c3\u0000\u28b4\u28b2\u0001"+
		"\u0000\u0000\u0000\u28b5\u28b8\u0001\u0000\u0000\u0000\u28b6\u28b4\u0001"+
		"\u0000\u0000\u0000\u28b6\u28b7\u0001\u0000\u0000\u0000\u28b7\u0589\u0001"+
		"\u0000\u0000\u0000\u28b8\u28b6\u0001\u0000\u0000\u0000\u28b9\u28bd\u0003"+
		"\u05a0\u02d0\u0000\u28ba\u28bd\u0003\u0594\u02ca\u0000\u28bb\u28bd\u0003"+
		"\u0596\u02cb\u0000\u28bc\u28b9\u0001\u0000\u0000\u0000\u28bc\u28ba\u0001"+
		"\u0000\u0000\u0000\u28bc\u28bb\u0001\u0000\u0000\u0000\u28bd\u058b\u0001"+
		"\u0000\u0000\u0000\u28be\u28c2\u0003\u05a0\u02d0\u0000\u28bf\u28c2\u0003"+
		"\u0594\u02ca\u0000\u28c0\u28c2\u0003\u0598\u02cc\u0000\u28c1\u28be\u0001"+
		"\u0000\u0000\u0000\u28c1\u28bf\u0001\u0000\u0000\u0000\u28c1\u28c0\u0001"+
		"\u0000\u0000\u0000\u28c2\u058d\u0001\u0000\u0000\u0000\u28c3\u28c8\u0003"+
		"\u05a0\u02d0\u0000\u28c4\u28c8\u0003\u0594\u02ca\u0000\u28c5\u28c8\u0003"+
		"\u0596\u02cb\u0000\u28c6\u28c8\u0003\u0598\u02cc\u0000\u28c7\u28c3\u0001"+
		"\u0000\u0000\u0000\u28c7\u28c4\u0001\u0000\u0000\u0000\u28c7\u28c5\u0001"+
		"\u0000\u0000\u0000\u28c7\u28c6\u0001\u0000\u0000\u0000\u28c8\u058f\u0001"+
		"\u0000\u0000\u0000\u28c9\u28d0\u0003\u05a0\u02d0\u0000\u28ca\u28d0\u0003"+
		"\u0594\u02ca\u0000\u28cb\u28d0\u0003\u0596\u02cb\u0000\u28cc\u28d0\u0003"+
		"\u0598\u02cc\u0000\u28cd\u28d0\u0003\u059a\u02cd\u0000\u28ce\u28d0\u0005"+
		"\u021d\u0000\u0000\u28cf\u28c9\u0001\u0000\u0000\u0000\u28cf\u28ca\u0001"+
		"\u0000\u0000\u0000\u28cf\u28cb\u0001\u0000\u0000\u0000\u28cf\u28cc\u0001"+
		"\u0000\u0000\u0000\u28cf\u28cd\u0001\u0000\u0000\u0000\u28cf\u28ce\u0001"+
		"\u0000\u0000\u0000\u28d0\u0591\u0001\u0000\u0000\u0000\u28d1\u28d4\u0003"+
		"\u05a0\u02d0\u0000\u28d2\u28d4\u0003\u059c\u02ce\u0000\u28d3\u28d1\u0001"+
		"\u0000\u0000\u0000\u28d3\u28d2\u0001\u0000\u0000\u0000\u28d4\u0593\u0001"+
		"\u0000\u0000\u0000\u28d5\u28d6\u0007>\u0000\u0000\u28d6\u0595\u0001\u0000"+
		"\u0000\u0000\u28d7\u2917\u0005\u01a2\u0000\u0000\u28d8\u2917\u0005\u01a3"+
		"\u0000\u0000\u28d9\u2917\u0005\u01a4\u0000\u0000\u28da\u2917\u0005\u01a5"+
		"\u0000\u0000\u28db\u2917\u0005\u01a6\u0000\u0000\u28dc\u2917\u0003\u0474"+
		"\u023a\u0000\u28dd\u2917\u0005\u01a8\u0000\u0000\u28de\u2917\u0005\u01a9"+
		"\u0000\u0000\u28df\u2917\u0005\u01aa\u0000\u0000\u28e0\u2917\u0005\u01ab"+
		"\u0000\u0000\u28e1\u2917\u0005\u01ac\u0000\u0000\u28e2\u2917\u0005\u01ad"+
		"\u0000\u0000\u28e3\u2917\u0005\u01ae\u0000\u0000\u28e4\u2917\u0005\u01fc"+
		"\u0000\u0000\u28e5\u2917\u0005\u01af\u0000\u0000\u28e6\u2917\u0005\u01b0"+
		"\u0000\u0000\u28e7\u2917\u0005\u01b1\u0000\u0000\u28e8\u2917\u0005\u01b2"+
		"\u0000\u0000\u28e9\u2917\u0005\u001e\u0000\u0000\u28ea\u2917\u0005\u001f"+
		"\u0000\u0000\u28eb\u2917\u0005 \u0000\u0000\u28ec\u2917\u0005!\u0000\u0000"+
		"\u28ed\u2917\u0005\"\u0000\u0000\u28ee\u2917\u0005#\u0000\u0000\u28ef"+
		"\u2917\u0005$\u0000\u0000\u28f0\u2917\u0005%\u0000\u0000\u28f1\u2917\u0005"+
		"&\u0000\u0000\u28f2\u2917\u0005\'\u0000\u0000\u28f3\u2917\u0005(\u0000"+
		"\u0000\u28f4\u2917\u0005\u01b3\u0000\u0000\u28f5\u2917\u0005)\u0000\u0000"+
		"\u28f6\u2917\u0005\u01b4\u0000\u0000\u28f7\u2917\u0005\u01b5\u0000\u0000"+
		"\u28f8\u2917\u0005\u01b6\u0000\u0000\u28f9\u2917\u0005\u020f\u0000\u0000"+
		"\u28fa\u2917\u0005\u01b7\u0000\u0000\u28fb\u2917\u0005\u01b8\u0000\u0000"+
		"\u28fc\u2917\u0005\u01eb\u0000\u0000\u28fd\u2917\u0005\u01b9\u0000\u0000"+
		"\u28fe\u2917\u0005\u01ba\u0000\u0000\u28ff\u2917\u0005\u01bb\u0000\u0000"+
		"\u2900\u2917\u0005\u01bc\u0000\u0000\u2901\u2917\u0005\u01bd\u0000\u0000"+
		"\u2902\u2917\u0005\u01be\u0000\u0000\u2903\u2917\u0005\u01bf\u0000\u0000"+
		"\u2904\u2917\u0005\u01c0\u0000\u0000\u2905\u2917\u0005\u01c1\u0000\u0000"+
		"\u2906\u2917\u0005\u01c2\u0000\u0000\u2907\u2917\u0005\u01c3\u0000\u0000"+
		"\u2908\u2917\u0005\u01c4\u0000\u0000\u2909\u2917\u0005\u01c5\u0000\u0000"+
		"\u290a\u2917\u0005\u01c6\u0000\u0000\u290b\u2917\u0005\u01c7\u0000\u0000"+
		"\u290c\u2917\u0005\u01cf\u0000\u0000\u290d\u2917\u0005\u01d0\u0000\u0000"+
		"\u290e\u2917\u0005\u01d1\u0000\u0000\u290f\u2917\u0005\u01d2\u0000\u0000"+
		"\u2910\u2917\u0005\u0202\u0000\u0000\u2911\u2917\u0005\u01d3\u0000\u0000"+
		"\u2912\u2917\u0005\u01d4\u0000\u0000\u2913\u2917\u0005\u01d5\u0000\u0000"+
		"\u2914\u2917\u0005\u01d6\u0000\u0000\u2915\u2917\u0005\u0200\u0000\u0000"+
		"\u2916\u28d7\u0001\u0000\u0000\u0000\u2916\u28d8\u0001\u0000\u0000\u0000"+
		"\u2916\u28d9\u0001\u0000\u0000\u0000\u2916\u28da\u0001\u0000\u0000\u0000"+
		"\u2916\u28db\u0001\u0000\u0000\u0000\u2916\u28dc\u0001\u0000\u0000\u0000"+
		"\u2916\u28dd\u0001\u0000\u0000\u0000\u2916\u28de\u0001\u0000\u0000\u0000"+
		"\u2916\u28df\u0001\u0000\u0000\u0000\u2916\u28e0\u0001\u0000\u0000\u0000"+
		"\u2916\u28e1\u0001\u0000\u0000\u0000\u2916\u28e2\u0001\u0000\u0000\u0000"+
		"\u2916\u28e3\u0001\u0000\u0000\u0000\u2916\u28e4\u0001\u0000\u0000\u0000"+
		"\u2916\u28e5\u0001\u0000\u0000\u0000\u2916\u28e6\u0001\u0000\u0000\u0000"+
		"\u2916\u28e7\u0001\u0000\u0000\u0000\u2916\u28e8\u0001\u0000\u0000\u0000"+
		"\u2916\u28e9\u0001\u0000\u0000\u0000\u2916\u28ea\u0001\u0000\u0000\u0000"+
		"\u2916\u28eb\u0001\u0000\u0000\u0000\u2916\u28ec\u0001\u0000\u0000\u0000"+
		"\u2916\u28ed\u0001\u0000\u0000\u0000\u2916\u28ee\u0001\u0000\u0000\u0000"+
		"\u2916\u28ef\u0001\u0000\u0000\u0000\u2916\u28f0\u0001\u0000\u0000\u0000"+
		"\u2916\u28f1\u0001\u0000\u0000\u0000\u2916\u28f2\u0001\u0000\u0000\u0000"+
		"\u2916\u28f3\u0001\u0000\u0000\u0000\u2916\u28f4\u0001\u0000\u0000\u0000"+
		"\u2916\u28f5\u0001\u0000\u0000\u0000\u2916\u28f6\u0001\u0000\u0000\u0000"+
		"\u2916\u28f7\u0001\u0000\u0000\u0000\u2916\u28f8\u0001\u0000\u0000\u0000"+
		"\u2916\u28f9\u0001\u0000\u0000\u0000\u2916\u28fa\u0001\u0000\u0000\u0000"+
		"\u2916\u28fb\u0001\u0000\u0000\u0000\u2916\u28fc\u0001\u0000\u0000\u0000"+
		"\u2916\u28fd\u0001\u0000\u0000\u0000\u2916\u28fe\u0001\u0000\u0000\u0000"+
		"\u2916\u28ff\u0001\u0000\u0000\u0000\u2916\u2900\u0001\u0000\u0000\u0000"+
		"\u2916\u2901\u0001\u0000\u0000\u0000\u2916\u2902\u0001\u0000\u0000\u0000"+
		"\u2916\u2903\u0001\u0000\u0000\u0000\u2916\u2904\u0001\u0000\u0000\u0000"+
		"\u2916\u2905\u0001\u0000\u0000\u0000\u2916\u2906\u0001\u0000\u0000\u0000"+
		"\u2916\u2907\u0001\u0000\u0000\u0000\u2916\u2908\u0001\u0000\u0000\u0000"+
		"\u2916\u2909\u0001\u0000\u0000\u0000\u2916\u290a\u0001\u0000\u0000\u0000"+
		"\u2916\u290b\u0001\u0000\u0000\u0000\u2916\u290c\u0001\u0000\u0000\u0000"+
		"\u2916\u290d\u0001\u0000\u0000\u0000\u2916\u290e\u0001\u0000\u0000\u0000"+
		"\u2916\u290f\u0001\u0000\u0000\u0000\u2916\u2910\u0001\u0000\u0000\u0000"+
		"\u2916\u2911\u0001\u0000\u0000\u0000\u2916\u2912\u0001\u0000\u0000\u0000"+
		"\u2916\u2913\u0001\u0000\u0000\u0000\u2916\u2914\u0001\u0000\u0000\u0000"+
		"\u2916\u2915\u0001\u0000\u0000\u0000\u2917\u0597\u0001\u0000\u0000\u0000"+
		"\u2918\u2919\u0007?\u0000\u0000\u2919\u0599\u0001\u0000\u0000\u0000\u291a"+
		"\u291b\u0007@\u0000\u0000\u291b\u059b\u0001\u0000\u0000\u0000\u291c\u291d"+
		"\u0007A\u0000\u0000\u291d\u059d\u0001\u0000\u0000\u0000\u291e\u291f\u0003"+
		"\u058a\u02c5\u0000\u291f\u059f\u0001\u0000\u0000\u0000\u2920\u2922\u0005"+
		"\u022a\u0000\u0000\u2921\u2923\u0003\u0580\u02c0\u0000\u2922\u2921\u0001"+
		"\u0000\u0000\u0000\u2922\u2923\u0001\u0000\u0000\u0000\u2923\u2929\u0001"+
		"\u0000\u0000\u0000\u2924\u2929\u0005\u022b\u0000\u0000\u2925\u2929\u0005"+
		"\u0233\u0000\u0000\u2926\u2929\u0005\u022f\u0000\u0000\u2927\u2929\u0005"+
		"\u024a\u0000\u0000\u2928\u2920\u0001\u0000\u0000\u0000\u2928\u2924\u0001"+
		"\u0000\u0000\u0000\u2928\u2925\u0001\u0000\u0000\u0000\u2928\u2926\u0001"+
		"\u0000\u0000\u0000\u2928\u2927\u0001\u0000\u0000\u0000\u2929\u05a1\u0001"+
		"\u0000\u0000\u0000\u041d\u05a8\u05ac\u05b0\u062f\u0638\u0641\u0647\u064d"+
		"\u065c\u0668\u066e\u0676\u0681\u0685\u068d\u0695\u06a7\u06aa\u06af\u06b8"+
		"\u06c1\u06c5\u06d1\u06d7\u06e7\u06f4\u06fb\u0703\u0708\u070f\u0715\u071c"+
		"\u0727\u072b\u072f\u073c\u0740\u0745\u074a\u0756\u075f\u076c\u0771\u077c"+
		"\u0782\u0788\u078d\u0798\u079e\u07a4\u07ad\u07b7\u07c6\u07cc\u07d3\u07d8"+
		"\u07df\u07ea\u0802\u0809\u0812\u081b\u0823\u082d\u0836\u083f\u0847\u084f"+
		"\u0858\u0861\u0865\u086c\u0874\u087e\u0884\u0888\u088c\u0890\u0894\u0899"+
		"\u089c\u08a0\u08b5\u08bb\u091a\u0921\u0931\u093f\u0949\u094b\u0950\u0954"+
		"\u0957\u095d\u095f\u097b\u0985\u0992\u0999\u099f\u09a3\u09a9\u09ae\u09b1"+
		"\u09b3\u09b8\u09bc\u09c0\u09c4\u09c8\u09cb\u09cf\u09d7\u09db\u09df\u09e8"+
		"\u09ef\u09f4\u09fb\u0a00\u0a07\u0a0c\u0a1e\u0a23\u0a2f\u0a34\u0a3d\u0a44"+
		"\u0a4b\u0a51\u0a56\u0a5a\u0a5d\u0a60\u0a63\u0a66\u0a69\u0a6e\u0a71\u0a74"+
		"\u0a77\u0a7a\u0a7d\u0a83\u0a87\u0a8a\u0a8d\u0a90\u0a93\u0a95\u0a9e\u0aab"+
		"\u0ab3\u0ab9\u0abd\u0ac2\u0ac9\u0ad0\u0adb\u0ae2\u0ae5\u0aea\u0aed\u0af4"+
		"\u0afd\u0b04\u0b09\u0b0c\u0b0f\u0b11\u0b16\u0b1d\u0b27\u0b31\u0b3e\u0b41"+
		"\u0b44\u0b4b\u0b53\u0b56\u0b59\u0b60\u0b64\u0b6a\u0b6d\u0b70\u0b73\u0b7f"+
		"\u0b82\u0b85\u0b89\u0b97\u0ba9\u0bb4\u0bc3\u0bd3\u0be8\u0bed\u0bf0\u0bf4"+
		"\u0bf7\u0bfd\u0c00\u0c02\u0c0b\u0c14\u0c27\u0c2b\u0c36\u0c3f\u0c45\u0c4b"+
		"\u0c4f\u0c52\u0c55\u0c58\u0c5b\u0c61\u0c65\u0c6c\u0c72\u0c76\u0c79\u0c7c"+
		"\u0c7f\u0c87\u0c8b\u0c8f\u0c95\u0c99\u0c9f\u0cad\u0cb6\u0cc7\u0ccc\u0ccf"+
		"\u0cd1\u0cdb\u0ce2\u0ce7\u0cea\u0ced\u0cf4\u0cf7\u0cf9\u0cff\u0d08\u0d12"+
		"\u0d17\u0d20\u0d29\u0d2d\u0d34\u0d3e\u0d49\u0db7\u0dbf\u0dc2\u0dcc\u0dd1"+
		"\u0ddb\u0de6\u0df2\u0dff\u0e09\u0e16\u0e19\u0e20\u0e29\u0e2c\u0e33\u0e35"+
		"\u0e3d\u0e47\u0e49\u0e51\u0e55\u0e5a\u0e65\u0e69\u0e6e\u0e78\u0e7e\u0e8b"+
		"\u0e91\u0e93\u0e9a\u0ea2\u0ea7\u0eb6\u0ec3\u0ec5\u0ec9\u0edd\u0eee\u0ef1"+
		"\u0ef4\u0ef7\u0efa\u0f02\u0f05\u0f08\u0f36\u0f39\u0f3c\u0f4e\u0f55\u0f5e"+
		"\u0f64\u0f6b\u0f75\u0f7d\u0f82\u0f8e\u0f9f\u0fa5\u0fac\u0fb4\u0fc2\u0fde"+
		"\u0fe5\u0ff3\u1002\u100f\u1018\u1031\u103c\u107f\u108a\u1090\u1098\u10a3"+
		"\u10b1\u10ba\u10c4\u10d0\u10df\u10ea\u10f2\u10fc\u1103\u1106\u110c\u110f"+
		"\u111e\u112b\u1148\u114f\u115e\u1167\u1172\u1174\u117d\u1188\u118a\u1191"+
		"\u11a0\u11a6\u11ae\u11b4\u11bc\u11c6\u11cc\u11d4\u11da\u11e2\u11e9\u11f2"+
		"\u11f4\u120d\u1214\u121f\u1225\u122e\u1233\u1239\u1240\u1245\u1249\u124c"+
		"\u1252\u12e7\u12eb\u12f0\u12fb\u1306\u1311\u131c\u1327\u1332\u133d\u1349"+
		"\u1354\u135c\u1363\u1369\u1371\u1376\u137b\u1380\u1386\u138d\u1393\u1399"+
		"\u139e\u13a4\u13ab\u13b0\u13b6\u13bd\u13c0\u13cd\u13d6\u13e2\u13e4\u13f5"+
		"\u13fc\u1401\u1405\u1409\u140d\u140f\u144b\u1452\u1458\u1463\u1466\u146d"+
		"\u1470\u147a\u147d\u147f\u1492\u149e\u14a7\u14b0\u14bc\u14be\u14c4\u14c8"+
		"\u14cb\u14d0\u14d6\u14d9\u14dc\u14df\u14e3\u14e7\u14f0\u14f6\u14f9\u14fc"+
		"\u14ff\u1501\u1513\u1517\u151a\u151d\u1520\u1523\u1528\u152b\u152d\u153a"+
		"\u1546\u1554\u1558\u1564\u1566\u156f\u1578\u1580\u1589\u158b\u158f\u1598"+
		"\u159d\u15a3\u15a8\u15ac\u15b1\u15b9\u15c0\u15c5\u15d4\u15dd\u15e8\u15ee"+
		"\u1615\u161f\u1626\u1631\u163f\u1647\u164c\u1654\u165c\u1662\u166a\u1670"+
		"\u1678\u167a\u1680\u1688\u168a\u1690\u1698\u169a\u16b2\u16b9\u16c3\u16cf"+
		"\u16d4\u16e1\u16ed\u16f9\u16fb\u1701\u1706\u170e\u1715\u1742\u1747\u174e"+
		"\u1752\u1756\u175c\u1760\u1765\u1769\u176c\u176e\u1784\u17cb\u188e\u189b"+
		"\u18a6\u18b3\u18bf\u18cd\u18ed\u18fb\u196b\u196d\u1978\u1983\u198e\u199b"+
		"\u19a7\u19b2\u19b9\u1a96\u1aa5\u1ab0\u1ab7\u1aed\u1b7a\u1b80\u1b83\u1b8d"+
		"\u1baa\u1bb4\u1bbb\u1bd2\u1bdb\u1be7\u1bed\u1bf5\u1bf7\u1bfb\u1c05\u1c09"+
		"\u1c13\u1c16\u1c1a\u1c1e\u1c26\u1c31\u1c3d\u1c41\u1c44\u1c48\u1c4b\u1c50"+
		"\u1c54\u1c57\u1c5b\u1c5e\u1c62\u1c65\u1c70\u1c77\u1c84\u1c92\u1c96\u1c9b"+
		"\u1ca2\u1ca9\u1cac\u1cb1\u1cb4\u1cbd\u1cbf\u1cc4\u1cc8\u1cd4\u1cd7\u1cde"+
		"\u1ce2\u1ce7\u1cf1\u1cfa\u1cfd\u1d02\u1d0d\u1d11\u1d17\u1d1e\u1d32\u1d47"+
		"\u1d4b\u1d50\u1da3\u1da9\u1db6\u1dba\u1dbe\u1dc2\u1dc8\u1dcf\u1dd2\u1dd5"+
		"\u1dd8\u1ddb\u1de2\u1de4\u1de8\u1deb\u1df2\u1df4\u1dfb\u1e03\u1e0a\u1e0f"+
		"\u1e13\u1e17\u1e1b\u1e1f\u1e2f\u1e36\u1e40\u1e4d\u1e58\u1e5f\u1e64\u1e68"+
		"\u1e6c\u1e71\u1e7e\u1e83\u1e87\u1e8f\u1e92\u1e96\u1ea1\u1ea4\u1ea6\u1eb6"+
		"\u1eb9\u1ec0\u1ec3\u1ec8\u1ed7\u1edd\u1ee6\u1eef\u1ef6\u1ef9\u1eff\u1f04"+
		"\u1f0b\u1f0f\u1f14\u1f17\u1f1d\u1f21\u1f23\u1f26\u1f2d\u1f30\u1f37\u1f3f"+
		"\u1f42\u1f4b\u1f50\u1f56\u1f59\u1f5c\u1f63\u1f67\u1f6a\u1f79\u1f7c\u1f83"+
		"\u1f86\u1f8d\u1f90\u1f93\u1f9a\u1fa7\u1fb1\u1fb9\u1fc5\u1fc7\u1fce\u1fd2"+
		"\u1fdc\u1fe0\u1fe4\u1fe8\u1fea\u1fef\u1ff3\u1ff7\u1ff9\u1ffb\u2000\u2005"+
		"\u200b\u2010\u2015\u2018\u201b\u201e\u2021\u2024\u2027\u202a\u202f\u2032"+
		"\u2035\u2038\u203b\u203e\u2040\u2046\u204a\u2053\u2058\u205c\u2065\u206f"+
		"\u2073\u2078\u207e\u208a\u2099\u20a0\u20a2\u20a5\u20a9\u20ad\u20af\u20b7"+
		"\u20c0\u20c6\u20c8\u20ca\u20d1\u20d5\u20de\u20e2\u20f1\u20f9\u2115\u211c"+
		"\u2120\u2123\u2128\u212c\u212f\u213f\u214a\u214f\u2152\u2156\u215a\u215e"+
		"\u2163\u2167\u216b\u216d\u2176\u217b\u2181\u2185\u2187\u218e\u2193\u2199"+
		"\u219b\u219f\u21a6\u21ab\u21ae\u21b4\u21b8\u21c1\u21c5\u21cd\u21cf\u21d6"+
		"\u21db\u21de\u21e6\u21ef\u21f7\u21f9\u21fd\u2204\u2217\u2220\u2226\u2239"+
		"\u2242\u2248\u224c\u2251\u225b\u2262\u226b\u226e\u2277\u2279\u227d\u2282"+
		"\u228c\u2292\u2295\u229c\u22a0\u22a3\u22b0\u22b6\u22ba\u22be\u22c1\u22c9"+
		"\u22cd\u22d1\u22d9\u22e0\u22e7\u22eb\u22f1\u22f3\u22fc\u22ff\u2309\u2319"+
		"\u231f\u2324\u232b\u2338\u233f\u2347\u234f\u2354\u2358\u235e\u2362\u2366"+
		"\u2369\u236f\u2374\u2384\u2387\u2389\u2395\u2397\u239b\u23a1\u23a5\u23a7"+
		"\u23af\u23b3\u23bc\u23c4\u23ca\u23cd\u23d6\u23db\u23e2\u23ec\u2406\u2411"+
		"\u2413\u2415\u241d\u2433\u243c\u2446\u2449\u244e\u2453\u2457\u245b\u2462"+
		"\u2465\u246a\u246f\u2473\u2479\u247c\u247f\u2482\u2486\u2494\u249b\u24a2"+
		"\u24a9\u24bc\u24c4\u24cc\u24ce\u24d4\u24db\u24dd\u24ea\u2511\u2513\u2527"+
		"\u2531\u253c\u254d\u2550\u2553\u2556\u2558\u255f\u2562\u2566\u2569\u256c"+
		"\u256e\u2575\u2582\u258f\u2592\u2596\u2599\u25a3\u25a6\u25b0\u25b3\u25b6"+
		"\u25ba\u25c1\u25cd\u25d9\u25df\u25e7\u25f8\u2611\u261b\u261f\u2622\u2625"+
		"\u2628\u2635\u263a\u263f\u2641\u2649\u2652\u265b\u2660\u2669\u266e\u267c"+
		"\u2686\u268e\u269c\u26a3\u26ab\u26b3\u26ba\u26c0\u26c9\u26d8\u26e3\u2703"+
		"\u270c\u2713\u2717\u271b\u2722\u2730\u2735\u273a\u273e\u2740\u2743\u274a"+
		"\u274f\u275d\u277d\u2782\u278e\u279f\u27a7\u27af\u27bf\u27c4\u27cf\u27db"+
		"\u27e5\u27f0\u27f8\u2800\u280a\u2811\u2814\u281d\u2820\u2825\u2832\u2839"+
		"\u283c\u2840\u2847\u284c\u2853\u2860\u286c\u2871\u2879\u2880\u2885\u2891"+
		"\u2899\u289e\u28a8\u28af\u28b6\u28bc\u28c1\u28c7\u28cf\u28d3\u2916\u2922"+
		"\u2928";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}